
d:/JSN/Desktop/repos/c177-iot/sensors/target/3.3.0/argon/sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7f80  000b7f80  00007f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b7fa4  000b7fa4  00007fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b7fac  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5a0  000b7fb0  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e0  2003e610  2003e610  0002e610  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b8020  000b8020  00028020  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8048  000b8048  00028048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00134906  00000000  00000000  0002804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015f19  00000000  00000000  0015c952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003a687  00000000  00000000  0017286b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002d70  00000000  00000000  001acef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a128  00000000  00000000  001afc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fdaf  00000000  00000000  001b9d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000494cb  00000000  00000000  001f9b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00133756  00000000  00000000  00243004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000081e0  00000000  00000000  0037675c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fbf7 	bl	b7824 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fbff 	bl	b7840 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5a0 	.word	0x2003e5a0
   b404c:	000b7fb0 	.word	0x000b7fb0
   b4050:	2003e610 	.word	0x2003e610
   b4054:	2003e610 	.word	0x2003e610
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 ffd1 	bl	b6008 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7f5c 	.word	0x000b7f5c
   b4080:	000b7f80 	.word	0x000b7f80

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba9a 	b.w	b45bc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa01 	bl	b4490 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bf71 	b.w	b5f78 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bbbf 	b.w	b5818 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bbbd 	b.w	b5818 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bbc3 	b.w	b5828 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b40b2:	6880      	ldr	r0, [r0, #8]
   b40b4:	6803      	ldr	r3, [r0, #0]
   b40b6:	68db      	ldr	r3, [r3, #12]
   b40b8:	4718      	bx	r3

000b40ba <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b40ba:	4770      	bx	lr

000b40bc <_ZN5spark16JSONStreamWriterD0Ev>:
   b40bc:	b510      	push	{r4, lr}
   b40be:	210c      	movs	r1, #12
   b40c0:	4604      	mov	r4, r0
   b40c2:	f7ff ffec 	bl	b409e <_ZdlPvj>
   b40c6:	4620      	mov	r0, r4
   b40c8:	bd10      	pop	{r4, pc}

000b40ca <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b40ca:	b513      	push	{r0, r1, r4, lr}
   b40cc:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b40ce:	4608      	mov	r0, r1
   b40d0:	9101      	str	r1, [sp, #4]
   b40d2:	f003 fbfd 	bl	b78d0 <strlen>
   b40d6:	9901      	ldr	r1, [sp, #4]
   b40d8:	4602      	mov	r2, r0
   b40da:	4620      	mov	r0, r4
}
   b40dc:	b002      	add	sp, #8
   b40de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b40e2:	f002 bb6d 	b.w	b67c0 <_ZN5spark10JSONWriter4nameEPKcj>
	...

000b40e8 <_Z13qwiicGetValuev>:
	return;
}


void qwiicGetValue()
{
   b40e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Wire.beginTransmission(qwiicAddress);
   b40ec:	f002 fc5a 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b40f0:	2130      	movs	r1, #48	; 0x30
   b40f2:	f002 f979 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(COMMAND_GET_VALUE); // command for status
   b40f6:	f002 fc55 	bl	b69a4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40fa:	6803      	ldr	r3, [r0, #0]
	{ // slave may send less than requested
		uint8_t ADC_VALUE_L = Wire.read();
		uint8_t ADC_VALUE_H = Wire.read();
		ADC_VALUE=ADC_VALUE_H;
		ADC_VALUE<<=8;
		ADC_VALUE|=ADC_VALUE_L;
   b40fc:	f8df 908c 	ldr.w	r9, [pc, #140]	; b418c <_Z13qwiicGetValuev+0xa4>
   b4100:	689b      	ldr	r3, [r3, #8]
   b4102:	2105      	movs	r1, #5
   b4104:	4798      	blx	r3
	Wire.endTransmission(); // stop transmitting //this looks like it was essential.
   b4106:	f002 fc4d 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b410a:	f002 f978 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(qwiicAddress, 2); // request 1 bytes from slave device qwiicAddress
   b410e:	f002 fc49 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4112:	2202      	movs	r2, #2
   b4114:	2130      	movs	r1, #48	; 0x30
   b4116:	f002 f964 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b411a:	a718      	add	r7, pc, #96	; (adr r7, b417c <_Z13qwiicGetValuev+0x94>)
   b411c:	e9d7 6700 	ldrd	r6, r7, [r7]
   b4120:	a518      	add	r5, pc, #96	; (adr r5, b4184 <_Z13qwiicGetValuev+0x9c>)
   b4122:	e9d5 4500 	ldrd	r4, r5, [r5]
	while (Wire.available())
   b4126:	f002 fc3d 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b412a:	6803      	ldr	r3, [r0, #0]
   b412c:	691b      	ldr	r3, [r3, #16]
   b412e:	4798      	blx	r3
   b4130:	b300      	cbz	r0, b4174 <_Z13qwiicGetValuev+0x8c>
		uint8_t ADC_VALUE_L = Wire.read();
   b4132:	f002 fc37 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4136:	6803      	ldr	r3, [r0, #0]
   b4138:	695b      	ldr	r3, [r3, #20]
   b413a:	4798      	blx	r3
   b413c:	4680      	mov	r8, r0
		uint8_t ADC_VALUE_H = Wire.read();
   b413e:	f002 fc31 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4142:	6803      	ldr	r3, [r0, #0]
   b4144:	695b      	ldr	r3, [r3, #20]
   b4146:	4798      	blx	r3
		ADC_VALUE=ADC_VALUE_H;
   b4148:	b2c3      	uxtb	r3, r0
		ADC_VALUE|=ADC_VALUE_L;
   b414a:	fa5f f088 	uxtb.w	r0, r8
   b414e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   b4152:	f8a9 0000 	strh.w	r0, [r9]
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b4156:	f002 fd9d 	bl	b6c94 <__aeabi_i2d>
   b415a:	4632      	mov	r2, r6
   b415c:	463b      	mov	r3, r7
   b415e:	f002 fc4d 	bl	b69fc <__adddf3>
   b4162:	462b      	mov	r3, r5
   b4164:	4622      	mov	r2, r4
   b4166:	f002 ff29 	bl	b6fbc <__aeabi_ddiv>
   b416a:	f003 f80f 	bl	b718c <__aeabi_d2f>
   b416e:	4b02      	ldr	r3, [pc, #8]	; (b4178 <_Z13qwiicGetValuev+0x90>)
   b4170:	6018      	str	r0, [r3, #0]
	while (Wire.available())
   b4172:	e7d8      	b.n	b4126 <_Z13qwiicGetValuev+0x3e>
	}
	return;
}
   b4174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4178:	2003e69c 	.word	0x2003e69c
   b417c:	67381d7e 	.word	0x67381d7e
   b4180:	4054cd44 	.word	0x4054cd44
   b4184:	374bc6a8 	.word	0x374bc6a8
   b4188:	40260189 	.word	0x40260189
   b418c:	2003e610 	.word	0x2003e610

000b4190 <_Z17getSensorReadingsv>:
{
   b4190:	b510      	push	{r4, lr}
   b4192:	b08e      	sub	sp, #56	; 0x38
	JSONStreamWriter writer(Serial);
   b4194:	f002 f840 	bl	b6218 <_Z16_fetch_usbserialv>
        state_(BEGIN) {
   b4198:	2300      	movs	r3, #0
   b419a:	f88d 3010 	strb.w	r3, [sp, #16]
        strm_(stream) {
   b419e:	9005      	str	r0, [sp, #20]
   b41a0:	4b9c      	ldr	r3, [pc, #624]	; (b4414 <_Z17getSensorReadingsv+0x284>)
   b41a2:	9303      	str	r3, [sp, #12]
	writer.beginObject();
   b41a4:	a803      	add	r0, sp, #12
   b41a6:	f002 fa7b 	bl	b66a0 <_ZN5spark10JSONWriter11beginObjectEv>
	writer.name("DeviceID").value(System.deviceID());
   b41aa:	499b      	ldr	r1, [pc, #620]	; (b4418 <_Z17getSensorReadingsv+0x288>)
   b41ac:	a803      	add	r0, sp, #12
   b41ae:	f7ff ff8c 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b41b2:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b41b4:	a806      	add	r0, sp, #24
   b41b6:	f001 fb17 	bl	b57e8 <spark_deviceID>
    return value(val.c_str(), val.length());
   b41ba:	9a08      	ldr	r2, [sp, #32]
   b41bc:	9906      	ldr	r1, [sp, #24]
   b41be:	4620      	mov	r0, r4
   b41c0:	f002 fb0e 	bl	b67e0 <_ZN5spark10JSONWriter5valueEPKcj>
   b41c4:	a806      	add	r0, sp, #24
   b41c6:	f001 fc79 	bl	b5abc <_ZN6StringD1Ev>
	writer.name("DateTime").value(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL));
   b41ca:	4994      	ldr	r1, [pc, #592]	; (b441c <_Z17getSensorReadingsv+0x28c>)
   b41cc:	a803      	add	r0, sp, #12
   b41ce:	f7ff ff7c 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b41d2:	4604      	mov	r4, r0
   b41d4:	f001 fe89 	bl	b5eea <_ZN9TimeClass3nowEv>
   b41d8:	4b91      	ldr	r3, [pc, #580]	; (b4420 <_Z17getSensorReadingsv+0x290>)
   b41da:	4992      	ldr	r1, [pc, #584]	; (b4424 <_Z17getSensorReadingsv+0x294>)
   b41dc:	681b      	ldr	r3, [r3, #0]
   b41de:	9300      	str	r3, [sp, #0]
   b41e0:	4602      	mov	r2, r0
   b41e2:	17c3      	asrs	r3, r0, #31
   b41e4:	a806      	add	r0, sp, #24
   b41e6:	f001 fe21 	bl	b5e2c <_ZN9TimeClass6formatExPKc>
   b41ea:	9a08      	ldr	r2, [sp, #32]
   b41ec:	9906      	ldr	r1, [sp, #24]
   b41ee:	4620      	mov	r0, r4
   b41f0:	f002 faf6 	bl	b67e0 <_ZN5spark10JSONWriter5valueEPKcj>
   b41f4:	a806      	add	r0, sp, #24
   b41f6:	f001 fc61 	bl	b5abc <_ZN6StringD1Ev>
	bh.make_forced_measurement();
   b41fa:	488b      	ldr	r0, [pc, #556]	; (b4428 <_Z17getSensorReadingsv+0x298>)
   b41fc:	f001 f8bc 	bl	b5378 <_ZN6BH175023make_forced_measurementEv>
	writer.name("BH1750").beginObject();
   b4200:	498a      	ldr	r1, [pc, #552]	; (b442c <_Z17getSensorReadingsv+0x29c>)
   b4202:	a803      	add	r0, sp, #12
   b4204:	f7ff ff61 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4208:	f002 fa4a 	bl	b66a0 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("Light_level(lux)").value(bh.get_light_level());
   b420c:	4988      	ldr	r1, [pc, #544]	; (b4430 <_Z17getSensorReadingsv+0x2a0>)
   b420e:	a803      	add	r0, sp, #12
   b4210:	f7ff ff5b 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4214:	4604      	mov	r4, r0
   b4216:	4884      	ldr	r0, [pc, #528]	; (b4428 <_Z17getSensorReadingsv+0x298>)
   b4218:	f001 f868 	bl	b52ec <_ZN6BH175015get_light_levelEv>
   b421c:	ee10 0a10 	vmov	r0, s0
   b4220:	f002 fd4a 	bl	b6cb8 <__aeabi_f2d>
   b4224:	ec41 0b10 	vmov	d0, r0, r1
   b4228:	4620      	mov	r0, r4
   b422a:	f002 fa57 	bl	b66dc <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b422e:	a803      	add	r0, sp, #12
   b4230:	f002 fa20 	bl	b6674 <_ZN5spark10JSONWriter9endObjectEv>
	if (airSensor.dataAvailable())
   b4234:	487f      	ldr	r0, [pc, #508]	; (b4434 <_Z17getSensorReadingsv+0x2a4>)
   b4236:	f000 ff50 	bl	b50da <_ZN5SCD3013dataAvailableEv>
   b423a:	2800      	cmp	r0, #0
   b423c:	d036      	beq.n	b42ac <_Z17getSensorReadingsv+0x11c>
		writer.name("SCD30").beginObject();
   b423e:	497e      	ldr	r1, [pc, #504]	; (b4438 <_Z17getSensorReadingsv+0x2a8>)
   b4240:	a803      	add	r0, sp, #12
   b4242:	f7ff ff42 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4246:	f002 fa2b 	bl	b66a0 <_ZN5spark10JSONWriter11beginObjectEv>
			writer.name("CO2(ppm)").value(airSensor.getCO2());
   b424a:	497c      	ldr	r1, [pc, #496]	; (b443c <_Z17getSensorReadingsv+0x2ac>)
   b424c:	a803      	add	r0, sp, #12
   b424e:	f7ff ff3c 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4252:	4604      	mov	r4, r0
   b4254:	4877      	ldr	r0, [pc, #476]	; (b4434 <_Z17getSensorReadingsv+0x2a4>)
   b4256:	f000 ffa0 	bl	b519a <_ZN5SCD306getCO2Ev>
   b425a:	4601      	mov	r1, r0
   b425c:	4620      	mov	r0, r4
   b425e:	f002 fa2b 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
			writer.name("Temp(C)").value(airSensor.getTemperature());
   b4262:	4977      	ldr	r1, [pc, #476]	; (b4440 <_Z17getSensorReadingsv+0x2b0>)
   b4264:	a803      	add	r0, sp, #12
   b4266:	f7ff ff30 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b426a:	4604      	mov	r4, r0
   b426c:	4871      	ldr	r0, [pc, #452]	; (b4434 <_Z17getSensorReadingsv+0x2a4>)
   b426e:	f000 ffaf 	bl	b51d0 <_ZN5SCD3014getTemperatureEv>
   b4272:	ee10 0a10 	vmov	r0, s0
   b4276:	f002 fd1f 	bl	b6cb8 <__aeabi_f2d>
   b427a:	ec41 0b10 	vmov	d0, r0, r1
   b427e:	4620      	mov	r0, r4
   b4280:	f002 fa2c 	bl	b66dc <_ZN5spark10JSONWriter5valueEd>
			writer.name("RH(%)").value(airSensor.getHumidity());
   b4284:	496f      	ldr	r1, [pc, #444]	; (b4444 <_Z17getSensorReadingsv+0x2b4>)
   b4286:	a803      	add	r0, sp, #12
   b4288:	f7ff ff1f 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b428c:	4604      	mov	r4, r0
   b428e:	4869      	ldr	r0, [pc, #420]	; (b4434 <_Z17getSensorReadingsv+0x2a4>)
   b4290:	f000 ff93 	bl	b51ba <_ZN5SCD3011getHumidityEv>
   b4294:	ee10 0a10 	vmov	r0, s0
   b4298:	f002 fd0e 	bl	b6cb8 <__aeabi_f2d>
   b429c:	ec41 0b10 	vmov	d0, r0, r1
   b42a0:	4620      	mov	r0, r4
   b42a2:	f002 fa1b 	bl	b66dc <_ZN5spark10JSONWriter5valueEd>
		writer.endObject();
   b42a6:	a803      	add	r0, sp, #12
   b42a8:	f002 f9e4 	bl	b6674 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("PMSA003I").beginObject();
   b42ac:	4966      	ldr	r1, [pc, #408]	; (b4448 <_Z17getSensorReadingsv+0x2b8>)
   b42ae:	a803      	add	r0, sp, #12
   b42b0:	f7ff ff0b 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42b4:	f002 f9f4 	bl	b66a0 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("Std_PM1.0").value(data.pm10_standard);
   b42b8:	4964      	ldr	r1, [pc, #400]	; (b444c <_Z17getSensorReadingsv+0x2bc>)
   b42ba:	a803      	add	r0, sp, #12
   b42bc:	f7ff ff05 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42c0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   b42c4:	f002 f9f8 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
		writer.name("Std_PM2.5").value(data.pm25_standard);
   b42c8:	4961      	ldr	r1, [pc, #388]	; (b4450 <_Z17getSensorReadingsv+0x2c0>)
   b42ca:	a803      	add	r0, sp, #12
   b42cc:	f7ff fefd 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42d0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   b42d4:	f002 f9f0 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
		writer.name("Std_PM10").value(data.pm100_standard);
   b42d8:	495e      	ldr	r1, [pc, #376]	; (b4454 <_Z17getSensorReadingsv+0x2c4>)
   b42da:	a803      	add	r0, sp, #12
   b42dc:	f7ff fef5 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42e0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   b42e4:	f002 f9e8 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM1.0").value(data.pm10_env);
   b42e8:	495b      	ldr	r1, [pc, #364]	; (b4458 <_Z17getSensorReadingsv+0x2c8>)
   b42ea:	a803      	add	r0, sp, #12
   b42ec:	f7ff feed 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42f0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   b42f4:	f002 f9e0 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM2.5").value(data.pm25_env);
   b42f8:	4958      	ldr	r1, [pc, #352]	; (b445c <_Z17getSensorReadingsv+0x2cc>)
   b42fa:	a803      	add	r0, sp, #12
   b42fc:	f7ff fee5 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4300:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   b4304:	f002 f9d8 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM10").value(data.pm100_env);
   b4308:	4955      	ldr	r1, [pc, #340]	; (b4460 <_Z17getSensorReadingsv+0x2d0>)
   b430a:	a803      	add	r0, sp, #12
   b430c:	f7ff fedd 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4310:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   b4314:	f002 f9d0 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
	writer.endObject();
   b4318:	a803      	add	r0, sp, #12
   b431a:	f002 f9ab 	bl	b6674 <_ZN5spark10JSONWriter9endObjectEv>
	qwiicGetValue();
   b431e:	f7ff fee3 	bl	b40e8 <_Z13qwiicGetValuev>
	writer.name("PMSA003I").beginObject();
   b4322:	4949      	ldr	r1, [pc, #292]	; (b4448 <_Z17getSensorReadingsv+0x2b8>)
   b4324:	a803      	add	r0, sp, #12
   b4326:	f7ff fed0 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b432a:	f002 f9b9 	bl	b66a0 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("ADC_Value").value(ADC_VALUE);
   b432e:	494d      	ldr	r1, [pc, #308]	; (b4464 <_Z17getSensorReadingsv+0x2d4>)
   b4330:	a803      	add	r0, sp, #12
   b4332:	f7ff feca 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4336:	4b4c      	ldr	r3, [pc, #304]	; (b4468 <_Z17getSensorReadingsv+0x2d8>)
   b4338:	8819      	ldrh	r1, [r3, #0]
   b433a:	f002 f9bd 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
		writer.name("dB").value(dBnumber);
   b433e:	494b      	ldr	r1, [pc, #300]	; (b446c <_Z17getSensorReadingsv+0x2dc>)
   b4340:	a803      	add	r0, sp, #12
   b4342:	f7ff fec2 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4346:	4b4a      	ldr	r3, [pc, #296]	; (b4470 <_Z17getSensorReadingsv+0x2e0>)
   b4348:	4604      	mov	r4, r0
   b434a:	6818      	ldr	r0, [r3, #0]
   b434c:	f002 fcb4 	bl	b6cb8 <__aeabi_f2d>
   b4350:	ec41 0b10 	vmov	d0, r0, r1
   b4354:	4620      	mov	r0, r4
   b4356:	f002 f9c1 	bl	b66dc <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b435a:	a803      	add	r0, sp, #12
   b435c:	f002 f98a 	bl	b6674 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("VEML6070").beginObject();
   b4360:	4944      	ldr	r1, [pc, #272]	; (b4474 <_Z17getSensorReadingsv+0x2e4>)
   b4362:	a803      	add	r0, sp, #12
   b4364:	f7ff feb1 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4368:	f002 f99a 	bl	b66a0 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("UV_light_level").value(uv.readUV());
   b436c:	4942      	ldr	r1, [pc, #264]	; (b4478 <_Z17getSensorReadingsv+0x2e8>)
   b436e:	a803      	add	r0, sp, #12
   b4370:	f7ff feab 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4374:	4604      	mov	r4, r0
   b4376:	4841      	ldr	r0, [pc, #260]	; (b447c <_Z17getSensorReadingsv+0x2ec>)
   b4378:	f000 fe4f 	bl	b501a <_ZN17Adafruit_VEML60706readUVEv>
   b437c:	4601      	mov	r1, r0
   b437e:	4620      	mov	r0, r4
   b4380:	f002 f99a 	bl	b66b8 <_ZN5spark10JSONWriter5valueEi>
	writer.endObject();
   b4384:	a803      	add	r0, sp, #12
   b4386:	f002 f975 	bl	b6674 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("BME280").beginObject();
   b438a:	493d      	ldr	r1, [pc, #244]	; (b4480 <_Z17getSensorReadingsv+0x2f0>)
   b438c:	a803      	add	r0, sp, #12
   b438e:	f7ff fe9c 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4392:	f002 f985 	bl	b66a0 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("Pressure(mbar)").value(bme.readPressure()/100.0F);
   b4396:	493b      	ldr	r1, [pc, #236]	; (b4484 <_Z17getSensorReadingsv+0x2f4>)
   b4398:	a803      	add	r0, sp, #12
   b439a:	f7ff fe96 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b439e:	4604      	mov	r4, r0
   b43a0:	4839      	ldr	r0, [pc, #228]	; (b4488 <_Z17getSensorReadingsv+0x2f8>)
   b43a2:	f000 fcdf 	bl	b4d64 <_ZN15Adafruit_BME28012readPressureEv>
   b43a6:	eddf 7a39 	vldr	s15, [pc, #228]	; b448c <_Z17getSensorReadingsv+0x2fc>
   b43aa:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b43ae:	ee17 0a90 	vmov	r0, s15
   b43b2:	f002 fc81 	bl	b6cb8 <__aeabi_f2d>
   b43b6:	ec41 0b10 	vmov	d0, r0, r1
   b43ba:	4620      	mov	r0, r4
   b43bc:	f002 f98e 	bl	b66dc <_ZN5spark10JSONWriter5valueEd>
		writer.name("RH(%)").value(bme.readHumidity());
   b43c0:	4920      	ldr	r1, [pc, #128]	; (b4444 <_Z17getSensorReadingsv+0x2b4>)
   b43c2:	a803      	add	r0, sp, #12
   b43c4:	f7ff fe81 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b43c8:	4604      	mov	r4, r0
   b43ca:	482f      	ldr	r0, [pc, #188]	; (b4488 <_Z17getSensorReadingsv+0x2f8>)
   b43cc:	f000 fc80 	bl	b4cd0 <_ZN15Adafruit_BME28012readHumidityEv>
   b43d0:	ee10 0a10 	vmov	r0, s0
   b43d4:	f002 fc70 	bl	b6cb8 <__aeabi_f2d>
   b43d8:	ec41 0b10 	vmov	d0, r0, r1
   b43dc:	4620      	mov	r0, r4
   b43de:	f002 f97d 	bl	b66dc <_ZN5spark10JSONWriter5valueEd>
		writer.name("Temp(C)").value(bme.readTemperature());
   b43e2:	4917      	ldr	r1, [pc, #92]	; (b4440 <_Z17getSensorReadingsv+0x2b0>)
   b43e4:	a803      	add	r0, sp, #12
   b43e6:	f7ff fe70 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b43ea:	4604      	mov	r4, r0
   b43ec:	4826      	ldr	r0, [pc, #152]	; (b4488 <_Z17getSensorReadingsv+0x2f8>)
   b43ee:	f000 fc3f 	bl	b4c70 <_ZN15Adafruit_BME28015readTemperatureEv>
   b43f2:	ee10 0a10 	vmov	r0, s0
   b43f6:	f002 fc5f 	bl	b6cb8 <__aeabi_f2d>
   b43fa:	ec41 0b10 	vmov	d0, r0, r1
   b43fe:	4620      	mov	r0, r4
   b4400:	f002 f96c 	bl	b66dc <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b4404:	a803      	add	r0, sp, #12
   b4406:	f002 f935 	bl	b6674 <_ZN5spark10JSONWriter9endObjectEv>
	writer.endObject();
   b440a:	a803      	add	r0, sp, #12
   b440c:	f002 f932 	bl	b6674 <_ZN5spark10JSONWriter9endObjectEv>
}
   b4410:	b00e      	add	sp, #56	; 0x38
   b4412:	bd10      	pop	{r4, pc}
   b4414:	000b7b70 	.word	0x000b7b70
   b4418:	000b79e8 	.word	0x000b79e8
   b441c:	000b79f1 	.word	0x000b79f1
   b4420:	2003e5a4 	.word	0x2003e5a4
   b4424:	2003e6d0 	.word	0x2003e6d0
   b4428:	2003e650 	.word	0x2003e650
   b442c:	000b79fa 	.word	0x000b79fa
   b4430:	000b7a01 	.word	0x000b7a01
   b4434:	2003e614 	.word	0x2003e614
   b4438:	000b7a12 	.word	0x000b7a12
   b443c:	000b7a18 	.word	0x000b7a18
   b4440:	000b7a21 	.word	0x000b7a21
   b4444:	000b7a29 	.word	0x000b7a29
   b4448:	000b7a2f 	.word	0x000b7a2f
   b444c:	000b7a38 	.word	0x000b7a38
   b4450:	000b7a42 	.word	0x000b7a42
   b4454:	000b7a4c 	.word	0x000b7a4c
   b4458:	000b7a55 	.word	0x000b7a55
   b445c:	000b7a5f 	.word	0x000b7a5f
   b4460:	000b7a69 	.word	0x000b7a69
   b4464:	000b7a72 	.word	0x000b7a72
   b4468:	2003e610 	.word	0x2003e610
   b446c:	000b7a7c 	.word	0x000b7a7c
   b4470:	2003e69c 	.word	0x2003e69c
   b4474:	000b7a7f 	.word	0x000b7a7f
   b4478:	000b7a88 	.word	0x000b7a88
   b447c:	2003e6a0 	.word	0x2003e6a0
   b4480:	000b7a97 	.word	0x000b7a97
   b4484:	000b7a9e 	.word	0x000b7a9e
   b4488:	2003e658 	.word	0x2003e658
   b448c:	42c80000 	.word	0x42c80000

000b4490 <loop>:
void loop() {
   b4490:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4492:	f001 f9a1 	bl	b57d8 <spark_cloud_flag_connected>
	if (Particle.connected() == false) {
   b4496:	b908      	cbnz	r0, b449c <loop+0xc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4498:	f001 f996 	bl	b57c8 <spark_cloud_flag_connect>
	digitalWrite(D7,HIGH);
   b449c:	2101      	movs	r1, #1
   b449e:	2007      	movs	r0, #7
   b44a0:	f002 f9fd 	bl	b689e <digitalWrite>
	getSensorReadings();
   b44a4:	f7ff fe74 	bl	b4190 <_Z17getSensorReadingsv>
	digitalWrite(D7,LOW);
   b44a8:	2100      	movs	r1, #0
   b44aa:	2007      	movs	r0, #7
   b44ac:	f002 f9f7 	bl	b689e <digitalWrite>
	Serial.println("");
   b44b0:	f001 feb2 	bl	b6218 <_Z16_fetch_usbserialv>
   b44b4:	4904      	ldr	r1, [pc, #16]	; (b44c8 <loop+0x38>)
   b44b6:	f001 fba4 	bl	b5c02 <_ZN5Print7printlnEPKc>
}
   b44ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   b44be:	f64e 2060 	movw	r0, #60000	; 0xea60
   b44c2:	f001 bd2d 	b.w	b5f20 <delay>
   b44c6:	bf00      	nop
   b44c8:	000b7d8c 	.word	0x000b7d8c

000b44cc <_Z24qwiicTestForConnectivityv>:

// qwiicTestForConnectivity() checks for an ACK from an Sensor. If no ACK
// program freezes and notifies user.
void qwiicTestForConnectivity()
{
   b44cc:	b508      	push	{r3, lr}
	Wire.beginTransmission(qwiicAddress);
   b44ce:	f002 fa69 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b44d2:	2130      	movs	r1, #48	; 0x30
   b44d4:	f001 ff88 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
	//check here for an ACK from the slave, if no ACK don't allow change?
	if (Wire.endTransmission() != 0)
   b44d8:	f002 fa64 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b44dc:	f001 ff8f 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
   b44e0:	b128      	cbz	r0, b44ee <_Z24qwiicTestForConnectivityv+0x22>
	{
		Serial.println("Check connections. No slave attached.");
   b44e2:	f001 fe99 	bl	b6218 <_Z16_fetch_usbserialv>
   b44e6:	4902      	ldr	r1, [pc, #8]	; (b44f0 <_Z24qwiicTestForConnectivityv+0x24>)
   b44e8:	f001 fb8b 	bl	b5c02 <_ZN5Print7printlnEPKc>
		while (1);
   b44ec:	e7fe      	b.n	b44ec <_Z24qwiicTestForConnectivityv+0x20>
	}
	return;
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	000b7aad 	.word	0x000b7aad

000b44f4 <_Z17initializeSensorsv>:
{
   b44f4:	b538      	push	{r3, r4, r5, lr}
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b44f6:	4c28      	ldr	r4, [pc, #160]	; (b4598 <_Z17initializeSensorsv+0xa4>)
	while (!bh.begin())
   b44f8:	4828      	ldr	r0, [pc, #160]	; (b459c <_Z17initializeSensorsv+0xa8>)
   b44fa:	f000 feec 	bl	b52d6 <_ZN6BH17505beginEv>
   b44fe:	b948      	cbnz	r0, b4514 <_Z17initializeSensorsv+0x20>
		delay(500);
   b4500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4504:	f001 fd0c 	bl	b5f20 <delay>
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b4508:	f001 fe86 	bl	b6218 <_Z16_fetch_usbserialv>
   b450c:	4621      	mov	r1, r4
   b450e:	f001 fb78 	bl	b5c02 <_ZN5Print7printlnEPKc>
	while (!bh.begin())
   b4512:	e7f1      	b.n	b44f8 <_Z17initializeSensorsv+0x4>
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b4514:	4821      	ldr	r0, [pc, #132]	; (b459c <_Z17initializeSensorsv+0xa8>)
	while (!bme.begin())
   b4516:	4d22      	ldr	r5, [pc, #136]	; (b45a0 <_Z17initializeSensorsv+0xac>)
		Serial.println("Trying to connect BME280 PTH Sensor");
   b4518:	4c22      	ldr	r4, [pc, #136]	; (b45a4 <_Z17initializeSensorsv+0xb0>)
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b451a:	2123      	movs	r1, #35	; 0x23
   b451c:	f000 ff17 	bl	b534e <_ZN6BH175015set_sensor_modeENS_8SensModeE>
	while (!bme.begin())
   b4520:	4628      	mov	r0, r5
   b4522:	f000 fd48 	bl	b4fb6 <_ZN15Adafruit_BME2805beginEv>
   b4526:	b188      	cbz	r0, b454c <_Z17initializeSensorsv+0x58>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b4528:	4c1f      	ldr	r4, [pc, #124]	; (b45a8 <_Z17initializeSensorsv+0xb4>)
	while (!airSensor.begin())
   b452a:	f002 fa3b 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b452e:	4601      	mov	r1, r0
   b4530:	481e      	ldr	r0, [pc, #120]	; (b45ac <_Z17initializeSensorsv+0xb8>)
   b4532:	f000 feb4 	bl	b529e <_ZN5SCD305beginER7TwoWire>
   b4536:	b998      	cbnz	r0, b4560 <_Z17initializeSensorsv+0x6c>
		delay(500);
   b4538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b453c:	f001 fcf0 	bl	b5f20 <delay>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b4540:	f001 fe6a 	bl	b6218 <_Z16_fetch_usbserialv>
   b4544:	4621      	mov	r1, r4
   b4546:	f001 fb5c 	bl	b5c02 <_ZN5Print7printlnEPKc>
	while (!airSensor.begin())
   b454a:	e7ee      	b.n	b452a <_Z17initializeSensorsv+0x36>
		delay(500);
   b454c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4550:	f001 fce6 	bl	b5f20 <delay>
		Serial.println("Trying to connect BME280 PTH Sensor");
   b4554:	f001 fe60 	bl	b6218 <_Z16_fetch_usbserialv>
   b4558:	4621      	mov	r1, r4
   b455a:	f001 fb52 	bl	b5c02 <_ZN5Print7printlnEPKc>
	while (!bme.begin())
   b455e:	e7df      	b.n	b4520 <_Z17initializeSensorsv+0x2c>
	airSensor.setMeasurementInterval(60);
   b4560:	4812      	ldr	r0, [pc, #72]	; (b45ac <_Z17initializeSensorsv+0xb8>)
   b4562:	213c      	movs	r1, #60	; 0x3c
   b4564:	f000 fe96 	bl	b5294 <_ZN5SCD3022setMeasurementIntervalEt>
  	airSensor.setAutoSelfCalibration(true);
   b4568:	2101      	movs	r1, #1
   b456a:	4810      	ldr	r0, [pc, #64]	; (b45ac <_Z17initializeSensorsv+0xb8>)
   b456c:	f000 fe84 	bl	b5278 <_ZN5SCD3022setAutoSelfCalibrationEb>
	aqi.begin_I2C();	// Particulate sensor PM2.5
   b4570:	f002 fa18 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4574:	4601      	mov	r1, r0
   b4576:	480e      	ldr	r0, [pc, #56]	; (b45b0 <_Z17initializeSensorsv+0xbc>)
   b4578:	f000 f854 	bl	b4624 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
	qwiicTestForConnectivity();
   b457c:	f7ff ffa6 	bl	b44cc <_Z24qwiicTestForConnectivityv>
	Serial.println("Zio Qwiic Loudness Sensor Master Awake");
   b4580:	f001 fe4a 	bl	b6218 <_Z16_fetch_usbserialv>
   b4584:	490b      	ldr	r1, [pc, #44]	; (b45b4 <_Z17initializeSensorsv+0xc0>)
   b4586:	f001 fb3c 	bl	b5c02 <_ZN5Print7printlnEPKc>
}
   b458a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uv.begin(VEML6070_1_T);
   b458e:	480a      	ldr	r0, [pc, #40]	; (b45b8 <_Z17initializeSensorsv+0xc4>)
   b4590:	2101      	movs	r1, #1
   b4592:	f000 bd23 	b.w	b4fdc <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>
   b4596:	bf00      	nop
   b4598:	000b7ad3 	.word	0x000b7ad3
   b459c:	2003e650 	.word	0x2003e650
   b45a0:	2003e658 	.word	0x2003e658
   b45a4:	000b7af7 	.word	0x000b7af7
   b45a8:	000b7b1b 	.word	0x000b7b1b
   b45ac:	2003e614 	.word	0x2003e614
   b45b0:	2003e628 	.word	0x2003e628
   b45b4:	000b7b3e 	.word	0x000b7b3e
   b45b8:	2003e6a0 	.word	0x2003e6a0

000b45bc <setup>:
void setup() {
   b45bc:	b508      	push	{r3, lr}
	Wire.begin();
   b45be:	f002 f9f1 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b45c2:	f001 fedf 	bl	b6384 <_ZN7TwoWire5beginEv>
	pinMode(D7,OUTPUT);
   b45c6:	2101      	movs	r1, #1
   b45c8:	2007      	movs	r0, #7
   b45ca:	f002 f957 	bl	b687c <pinMode>
	Serial.begin(9600);
   b45ce:	f001 fe23 	bl	b6218 <_Z16_fetch_usbserialv>
   b45d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45d6:	f001 fe13 	bl	b6200 <_ZN9USBSerial5beginEl>
}
   b45da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	initializeSensors();
   b45de:	f7ff bf89 	b.w	b44f4 <_Z17initializeSensorsv>
	...

000b45e4 <_GLOBAL__sub_I_bh>:
   b45e4:	b508      	push	{r3, lr}
BH1750 bh;
   b45e6:	f002 f9dd 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b45ea:	2123      	movs	r1, #35	; 0x23
   b45ec:	4602      	mov	r2, r0
   b45ee:	4807      	ldr	r0, [pc, #28]	; (b460c <_GLOBAL__sub_I_bh+0x28>)
   b45f0:	f000 fe6c 	bl	b52cc <_ZN6BH1750C1EhR7TwoWire>
Adafruit_BME280 bme;
   b45f4:	4806      	ldr	r0, [pc, #24]	; (b4610 <_GLOBAL__sub_I_bh+0x2c>)
   b45f6:	f000 f897 	bl	b4728 <_ZN15Adafruit_BME280C1Ev>
SCD30 airSensor;
   b45fa:	4806      	ldr	r0, [pc, #24]	; (b4614 <_GLOBAL__sub_I_bh+0x30>)
   b45fc:	f000 fd35 	bl	b506a <_ZN5SCD30C1Ev>
   b4600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_PM25AQI aqi = Adafruit_PM25AQI();
   b4604:	4804      	ldr	r0, [pc, #16]	; (b4618 <_GLOBAL__sub_I_bh+0x34>)
   b4606:	f000 b809 	b.w	b461c <_ZN16Adafruit_PM25AQIC1Ev>
   b460a:	bf00      	nop
   b460c:	2003e650 	.word	0x2003e650
   b4610:	2003e658 	.word	0x2003e658
   b4614:	2003e614 	.word	0x2003e614
   b4618:	2003e628 	.word	0x2003e628

000b461c <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
   b461c:	2200      	movs	r2, #0
   b461e:	e9c0 2200 	strd	r2, r2, [r0]
   b4622:	4770      	bx	lr

000b4624 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b4624:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b4626:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b4628:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b462a:	b953      	cbnz	r3, b4642 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
   b462c:	2010      	movs	r0, #16
   b462e:	9101      	str	r1, [sp, #4]
   b4630:	f7ff fd31 	bl	b4096 <_Znwj>
   b4634:	4605      	mov	r5, r0
   b4636:	b118      	cbz	r0, b4640 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
   b4638:	9a01      	ldr	r2, [sp, #4]
   b463a:	2112      	movs	r1, #18
   b463c:	f000 f808 	bl	b4650 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4640:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
   b4642:	6820      	ldr	r0, [r4, #0]
   b4644:	2101      	movs	r1, #1
    return false;
  }

  return true;
}
   b4646:	b003      	add	sp, #12
   b4648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
   b464c:	f000 b81c 	b.w	b4688 <_ZN18Adafruit_I2CDevice5beginEb>

000b4650 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b4650:	6042      	str	r2, [r0, #4]
  _begun = false;
   b4652:	2200      	movs	r2, #0
   b4654:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b4656:	2220      	movs	r2, #32
  _addr = addr;
   b4658:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b465a:	60c2      	str	r2, [r0, #12]
#endif
}
   b465c:	4770      	bx	lr

000b465e <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b465e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b4660:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b4662:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b4664:	b153      	cbz	r3, b467c <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b4666:	7821      	ldrb	r1, [r4, #0]
   b4668:	6860      	ldr	r0, [r4, #4]
   b466a:	f001 febd 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b466e:	6860      	ldr	r0, [r4, #4]
   b4670:	f001 fec5 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
   b4674:	fab0 f080 	clz	r0, r0
   b4678:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b467a:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b467c:	2101      	movs	r1, #1
   b467e:	f000 f803 	bl	b4688 <_ZN18Adafruit_I2CDevice5beginEb>
   b4682:	2800      	cmp	r0, #0
   b4684:	d1ef      	bne.n	b4666 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b4686:	e7f8      	b.n	b467a <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b4688 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4688:	b538      	push	{r3, r4, r5, lr}
   b468a:	4604      	mov	r4, r0
  _wire->begin();
   b468c:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b468e:	460d      	mov	r5, r1
  _wire->begin();
   b4690:	f001 fe78 	bl	b6384 <_ZN7TwoWire5beginEv>
  _begun = true;
   b4694:	2001      	movs	r0, #1
   b4696:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b4698:	b125      	cbz	r5, b46a4 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b469a:	4620      	mov	r0, r4
}
   b469c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b46a0:	f7ff bfdd 	b.w	b465e <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b46a4:	bd38      	pop	{r3, r4, r5, pc}

000b46a6 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b46a6:	4770      	bx	lr

000b46a8 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b46a8:	b510      	push	{r4, lr}
  }
   b46aa:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b46ac:	4604      	mov	r4, r0
  }
   b46ae:	f7ff fcf6 	bl	b409e <_ZdlPvj>
   b46b2:	4620      	mov	r0, r4
   b46b4:	bd10      	pop	{r4, pc}

000b46b6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b46b6:	b40e      	push	{r1, r2, r3}
   b46b8:	b503      	push	{r0, r1, lr}
   b46ba:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b46bc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b46be:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b46c2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b46c4:	f001 fac5 	bl	b5c52 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b46c8:	b002      	add	sp, #8
   b46ca:	f85d eb04 	ldr.w	lr, [sp], #4
   b46ce:	b003      	add	sp, #12
   b46d0:	4770      	bx	lr
	...

000b46d4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b46d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b46d6:	4604      	mov	r4, r0
   b46d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b46da:	7922      	ldrb	r2, [r4, #4]
   b46dc:	68a3      	ldr	r3, [r4, #8]
   b46de:	b132      	cbz	r2, b46ee <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b46e0:	b9a3      	cbnz	r3, b470c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b46e2:	490b      	ldr	r1, [pc, #44]	; (b4710 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b46e4:	b002      	add	sp, #8
   b46e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b46ea:	f001 ba77 	b.w	b5bdc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b46ee:	4a09      	ldr	r2, [pc, #36]	; (b4714 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b46f0:	7b26      	ldrb	r6, [r4, #12]
   b46f2:	4d09      	ldr	r5, [pc, #36]	; (b4718 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b46f4:	4909      	ldr	r1, [pc, #36]	; (b471c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b46f6:	7b64      	ldrb	r4, [r4, #13]
   b46f8:	2e01      	cmp	r6, #1
   b46fa:	bf18      	it	ne
   b46fc:	4629      	movne	r1, r5
   b46fe:	e9cd 1400 	strd	r1, r4, [sp]
   b4702:	4907      	ldr	r1, [pc, #28]	; (b4720 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4704:	f7ff ffd7 	bl	b46b6 <_ZN5Print6printfEPKcz>
  }
   b4708:	b002      	add	sp, #8
   b470a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b470c:	4a05      	ldr	r2, [pc, #20]	; (b4724 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b470e:	e7ef      	b.n	b46f0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4710:	000b7b91 	.word	0x000b7b91
   b4714:	000b7d8c 	.word	0x000b7d8c
   b4718:	000b7b8d 	.word	0x000b7b8d
   b471c:	000b7b89 	.word	0x000b7b89
   b4720:	000b7ba7 	.word	0x000b7ba7
   b4724:	000b7b80 	.word	0x000b7b80

000b4728 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4728:	f04f 33ff 	mov.w	r3, #4294967295
   b472c:	6103      	str	r3, [r0, #16]
{ }
   b472e:	4770      	bx	lr

000b4730 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4730:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4732:	4c0b      	ldr	r4, [pc, #44]	; (b4760 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4734:	7821      	ldrb	r1, [r4, #0]
   b4736:	f3bf 8f5b 	dmb	ish
   b473a:	f011 0101 	ands.w	r1, r1, #1
   b473e:	d10b      	bne.n	b4758 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4740:	4620      	mov	r0, r4
   b4742:	9101      	str	r1, [sp, #4]
   b4744:	f7ff fcad 	bl	b40a2 <__cxa_guard_acquire>
   b4748:	9901      	ldr	r1, [sp, #4]
   b474a:	b128      	cbz	r0, b4758 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b474c:	4805      	ldr	r0, [pc, #20]	; (b4764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b474e:	f001 f8f7 	bl	b5940 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4752:	4620      	mov	r0, r4
   b4754:	f7ff fcaa 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b4758:	4802      	ldr	r0, [pc, #8]	; (b4764 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b475a:	b002      	add	sp, #8
   b475c:	bd10      	pop	{r4, pc}
   b475e:	bf00      	nop
   b4760:	2003e6a4 	.word	0x2003e6a4
   b4764:	2003e6a8 	.word	0x2003e6a8

000b4768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4768:	b508      	push	{r3, lr}
        instance().endTransaction();
   b476a:	f7ff ffe1 	bl	b4730 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b476e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b4772:	f001 b903 	b.w	b597c <_ZN8SPIClass14endTransactionEv>

000b4776 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b4776:	b507      	push	{r0, r1, r2, lr}
   b4778:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b477a:	f7ff ffd9 	bl	b4730 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b477e:	9901      	ldr	r1, [sp, #4]
    }
   b4780:	b003      	add	sp, #12
   b4782:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b4786:	f001 b913 	b.w	b59b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b478a <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b478a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b478e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4792:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4794:	4605      	mov	r5, r0
   b4796:	460f      	mov	r7, r1
    if (_sck == -1)
   b4798:	d106      	bne.n	b47a8 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b479a:	f7ff ffc9 	bl	b4730 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b479e:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b47a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b47a4:	f001 b972 	b.w	b5a8c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b47a8:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b47aa:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b47ac:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b47b0:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47b4:	2100      	movs	r1, #0
   b47b6:	b280      	uxth	r0, r0
   b47b8:	f002 f871 	bl	b689e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b47bc:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b47c0:	fa08 f106 	lsl.w	r1, r8, r6
   b47c4:	4039      	ands	r1, r7
   b47c6:	b280      	uxth	r0, r0
   b47c8:	f002 f869 	bl	b689e <digitalWrite>
        digitalWrite(_sck, HIGH);
   b47cc:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47d0:	2101      	movs	r1, #1
   b47d2:	b280      	uxth	r0, r0
   b47d4:	f002 f863 	bl	b689e <digitalWrite>
        if (digitalRead(_miso))
   b47d8:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b47dc:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b47de:	b280      	uxth	r0, r0
        reply <<= 1;
   b47e0:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b47e2:	f002 f875 	bl	b68d0 <digitalRead>
   b47e6:	b108      	cbz	r0, b47ec <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b47e8:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b47ec:	3e01      	subs	r6, #1
   b47ee:	d2df      	bcs.n	b47b0 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b47f0:	4620      	mov	r0, r4
   b47f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b47f8 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b47f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b47fa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b47fe:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4800:	4604      	mov	r4, r0
   b4802:	460e      	mov	r6, r1
   b4804:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4806:	d113      	bne.n	b4830 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4808:	7901      	ldrb	r1, [r0, #4]
   b480a:	6800      	ldr	r0, [r0, #0]
   b480c:	f001 fdec 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4810:	6820      	ldr	r0, [r4, #0]
   b4812:	6803      	ldr	r3, [r0, #0]
   b4814:	4631      	mov	r1, r6
   b4816:	689b      	ldr	r3, [r3, #8]
   b4818:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b481a:	6820      	ldr	r0, [r4, #0]
   b481c:	6803      	ldr	r3, [r0, #0]
   b481e:	4629      	mov	r1, r5
   b4820:	689b      	ldr	r3, [r3, #8]
   b4822:	4798      	blx	r3
        _wire -> endTransmission();
   b4824:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4826:	b004      	add	sp, #16
   b4828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b482c:	f001 bde7 	b.w	b63fe <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4830:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4834:	3301      	adds	r3, #1
   b4836:	d10c      	bne.n	b4852 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4838:	4b16      	ldr	r3, [pc, #88]	; (b4894 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b483a:	9300      	str	r3, [sp, #0]
   b483c:	2300      	movs	r3, #0
   b483e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4842:	4b15      	ldr	r3, [pc, #84]	; (b4898 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4844:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4846:	4668      	mov	r0, sp
   b4848:	2301      	movs	r3, #1
   b484a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b484e:	f7ff ff92 	bl	b4776 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4852:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4856:	2100      	movs	r1, #0
   b4858:	b280      	uxth	r0, r0
   b485a:	f002 f820 	bl	b689e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b485e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4862:	4620      	mov	r0, r4
   b4864:	f7ff ff91 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4868:	4629      	mov	r1, r5
   b486a:	4620      	mov	r0, r4
   b486c:	f7ff ff8d 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4870:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4874:	2101      	movs	r1, #1
   b4876:	b280      	uxth	r0, r0
   b4878:	f002 f811 	bl	b689e <digitalWrite>
    if (_sck == -1)
   b487c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4880:	3301      	adds	r3, #1
   b4882:	d104      	bne.n	b488e <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4884:	b004      	add	sp, #16
   b4886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b488a:	f7ff bf6d 	b.w	b4768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b488e:	b004      	add	sp, #16
   b4890:	bd70      	pop	{r4, r5, r6, pc}
   b4892:	bf00      	nop
   b4894:	000b7bcc 	.word	0x000b7bcc
   b4898:	0007a120 	.word	0x0007a120

000b489c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b489e:	00db      	lsls	r3, r3, #3
   b48a0:	f002 0207 	and.w	r2, r2, #7
   b48a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b48a8:	4313      	orrs	r3, r2
   b48aa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b48ae:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b48b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b48b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b48ba:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b48be:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b48c2:	f366 1347 	bfi	r3, r6, #5, #3
   b48c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b48ca:	00ed      	lsls	r5, r5, #3
   b48cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b48d0:	f007 0707 	and.w	r7, r7, #7
   b48d4:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b48d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b48dc:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b48de:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b48e0:	431d      	orrs	r5, r3
   b48e2:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b48e6:	f006 0207 	and.w	r2, r6, #7
   b48ea:	21f2      	movs	r1, #242	; 0xf2
   b48ec:	f7ff ff84 	bl	b47f8 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b48f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b48f4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b48f8:	f002 0107 	and.w	r1, r2, #7
   b48fc:	009b      	lsls	r3, r3, #2
   b48fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4902:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4906:	4620      	mov	r0, r4
   b4908:	21f5      	movs	r1, #245	; 0xf5
   b490a:	f7ff ff75 	bl	b47f8 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b490e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4912:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4916:	f002 0107 	and.w	r1, r2, #7
   b491a:	009b      	lsls	r3, r3, #2
   b491c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4920:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4924:	4620      	mov	r0, r4
   b4926:	21f4      	movs	r1, #244	; 0xf4
}
   b4928:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b492c:	f7ff bf64 	b.w	b47f8 <_ZN15Adafruit_BME2806write8Ehh>

000b4930 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4930:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4932:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4936:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4938:	b085      	sub	sp, #20
   b493a:	4604      	mov	r4, r0
   b493c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b493e:	d118      	bne.n	b4972 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4940:	7901      	ldrb	r1, [r0, #4]
   b4942:	6800      	ldr	r0, [r0, #0]
   b4944:	f001 fd50 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4948:	6820      	ldr	r0, [r4, #0]
   b494a:	6803      	ldr	r3, [r0, #0]
   b494c:	4629      	mov	r1, r5
   b494e:	689b      	ldr	r3, [r3, #8]
   b4950:	4798      	blx	r3
        _wire -> endTransmission();
   b4952:	6820      	ldr	r0, [r4, #0]
   b4954:	f001 fd53 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4958:	7921      	ldrb	r1, [r4, #4]
   b495a:	6820      	ldr	r0, [r4, #0]
   b495c:	2201      	movs	r2, #1
   b495e:	f001 fd40 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4962:	6820      	ldr	r0, [r4, #0]
   b4964:	6803      	ldr	r3, [r0, #0]
   b4966:	695b      	ldr	r3, [r3, #20]
   b4968:	4798      	blx	r3
   b496a:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b496c:	4628      	mov	r0, r5
   b496e:	b005      	add	sp, #20
   b4970:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4972:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4976:	3301      	adds	r3, #1
   b4978:	d10c      	bne.n	b4994 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b497a:	4b15      	ldr	r3, [pc, #84]	; (b49d0 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b497c:	9300      	str	r3, [sp, #0]
   b497e:	2300      	movs	r3, #0
   b4980:	f88d 3004 	strb.w	r3, [sp, #4]
   b4984:	4b13      	ldr	r3, [pc, #76]	; (b49d4 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4986:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4988:	4668      	mov	r0, sp
   b498a:	2301      	movs	r3, #1
   b498c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4990:	f7ff fef1 	bl	b4776 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4994:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4998:	2100      	movs	r1, #0
   b499a:	b280      	uxth	r0, r0
   b499c:	f001 ff7f 	bl	b689e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b49a0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49a4:	4620      	mov	r0, r4
   b49a6:	f7ff fef0 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b49aa:	2100      	movs	r1, #0
   b49ac:	4620      	mov	r0, r4
   b49ae:	f7ff feec 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
   b49b2:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b49b4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49b8:	2101      	movs	r1, #1
   b49ba:	b280      	uxth	r0, r0
   b49bc:	f001 ff6f 	bl	b689e <digitalWrite>
        if (_sck == -1)
   b49c0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b49c4:	3301      	adds	r3, #1
   b49c6:	d1d1      	bne.n	b496c <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b49c8:	f7ff fece 	bl	b4768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b49cc:	e7ce      	b.n	b496c <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b49ce:	bf00      	nop
   b49d0:	000b7bcc 	.word	0x000b7bcc
   b49d4:	0007a120 	.word	0x0007a120

000b49d8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b49d8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b49da:	21f3      	movs	r1, #243	; 0xf3
   b49dc:	f7ff ffa8 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b49e0:	f000 0001 	and.w	r0, r0, #1
   b49e4:	bd08      	pop	{r3, pc}
	...

000b49e8 <_ZN15Adafruit_BME2806read16Eh>:
{
   b49e8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b49ea:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b49ee:	3301      	adds	r3, #1
{
   b49f0:	b085      	sub	sp, #20
   b49f2:	4604      	mov	r4, r0
   b49f4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b49f6:	d11f      	bne.n	b4a38 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49f8:	7901      	ldrb	r1, [r0, #4]
   b49fa:	6800      	ldr	r0, [r0, #0]
   b49fc:	f001 fcf4 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a00:	6820      	ldr	r0, [r4, #0]
   b4a02:	6803      	ldr	r3, [r0, #0]
   b4a04:	4629      	mov	r1, r5
   b4a06:	689b      	ldr	r3, [r3, #8]
   b4a08:	4798      	blx	r3
        _wire -> endTransmission();
   b4a0a:	6820      	ldr	r0, [r4, #0]
   b4a0c:	f001 fcf7 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4a10:	7921      	ldrb	r1, [r4, #4]
   b4a12:	6820      	ldr	r0, [r4, #0]
   b4a14:	2202      	movs	r2, #2
   b4a16:	f001 fce4 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4a1a:	6820      	ldr	r0, [r4, #0]
   b4a1c:	6803      	ldr	r3, [r0, #0]
   b4a1e:	695b      	ldr	r3, [r3, #20]
   b4a20:	4798      	blx	r3
   b4a22:	4605      	mov	r5, r0
   b4a24:	6820      	ldr	r0, [r4, #0]
   b4a26:	6803      	ldr	r3, [r0, #0]
   b4a28:	695b      	ldr	r3, [r3, #20]
   b4a2a:	4798      	blx	r3
   b4a2c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a30:	b285      	uxth	r5, r0
}
   b4a32:	4628      	mov	r0, r5
   b4a34:	b005      	add	sp, #20
   b4a36:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4a38:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a3c:	3301      	adds	r3, #1
   b4a3e:	d10c      	bne.n	b4a5a <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4a40:	4b18      	ldr	r3, [pc, #96]	; (b4aa4 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4a42:	9300      	str	r3, [sp, #0]
   b4a44:	2300      	movs	r3, #0
   b4a46:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a4a:	4b17      	ldr	r3, [pc, #92]	; (b4aa8 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4a4c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a4e:	4668      	mov	r0, sp
   b4a50:	2301      	movs	r3, #1
   b4a52:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a56:	f7ff fe8e 	bl	b4776 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a5a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a5e:	2100      	movs	r1, #0
   b4a60:	b280      	uxth	r0, r0
   b4a62:	f001 ff1c 	bl	b689e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a66:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a6a:	4620      	mov	r0, r4
   b4a6c:	f7ff fe8d 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4a70:	2100      	movs	r1, #0
   b4a72:	4620      	mov	r0, r4
   b4a74:	f7ff fe89 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
   b4a78:	2100      	movs	r1, #0
   b4a7a:	4605      	mov	r5, r0
   b4a7c:	4620      	mov	r0, r4
   b4a7e:	f7ff fe84 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
   b4a82:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a86:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4a88:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a8c:	2101      	movs	r1, #1
   b4a8e:	b280      	uxth	r0, r0
   b4a90:	f001 ff05 	bl	b689e <digitalWrite>
        if (_sck == -1)
   b4a94:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a98:	3301      	adds	r3, #1
   b4a9a:	d1ca      	bne.n	b4a32 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4a9c:	f7ff fe64 	bl	b4768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4aa0:	e7c7      	b.n	b4a32 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4aa2:	bf00      	nop
   b4aa4:	000b7bcc 	.word	0x000b7bcc
   b4aa8:	0007a120 	.word	0x0007a120

000b4aac <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4aac:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4aae:	f7ff ff9b 	bl	b49e8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4ab2:	ba40      	rev16	r0, r0
}
   b4ab4:	b280      	uxth	r0, r0
   b4ab6:	bd08      	pop	{r3, pc}

000b4ab8 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4ab8:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4aba:	2188      	movs	r1, #136	; 0x88
{
   b4abc:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4abe:	f7ff fff5 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4ac2:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ac4:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4ac6:	4620      	mov	r0, r4
   b4ac8:	f7ff fff0 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4acc:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4ace:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4ad0:	4620      	mov	r0, r4
   b4ad2:	f7ff ffeb 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4ad6:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4ad8:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4ada:	4620      	mov	r0, r4
   b4adc:	f7ff ffe6 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4ae0:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4ae2:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4ae4:	4620      	mov	r0, r4
   b4ae6:	f7ff ffe1 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4aea:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4aec:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4aee:	4620      	mov	r0, r4
   b4af0:	f7ff ffdc 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4af4:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4af6:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4af8:	4620      	mov	r0, r4
   b4afa:	f7ff ffd7 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4afe:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4b00:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4b02:	4620      	mov	r0, r4
   b4b04:	f7ff ffd2 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4b08:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4b0a:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4b0c:	4620      	mov	r0, r4
   b4b0e:	f7ff ffcd 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4b12:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4b14:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4b16:	4620      	mov	r0, r4
   b4b18:	f7ff ffc8 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4b1c:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4b1e:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4b20:	4620      	mov	r0, r4
   b4b22:	f7ff ffc3 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
   b4b26:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4b28:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4b2a:	4620      	mov	r0, r4
   b4b2c:	f7ff ffbe 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b30:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4b32:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b34:	4620      	mov	r0, r4
   b4b36:	f7ff fefb 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4b3a:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b3c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4b40:	4620      	mov	r0, r4
   b4b42:	f7ff ffb3 	bl	b4aac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b46:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4b48:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b4a:	4620      	mov	r0, r4
   b4b4c:	f7ff fef0 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b50:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b52:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b56:	4620      	mov	r0, r4
   b4b58:	f7ff feea 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
   b4b5c:	21e5      	movs	r1, #229	; 0xe5
   b4b5e:	4605      	mov	r5, r0
   b4b60:	4620      	mov	r0, r4
   b4b62:	f7ff fee5 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
   b4b66:	f000 030f 	and.w	r3, r0, #15
   b4b6a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b6e:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4b70:	21e6      	movs	r1, #230	; 0xe6
   b4b72:	4620      	mov	r0, r4
   b4b74:	f7ff fedc 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
   b4b78:	21e5      	movs	r1, #229	; 0xe5
   b4b7a:	4605      	mov	r5, r0
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	f7ff fed7 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
   b4b82:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4b86:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b8a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4b8c:	21e7      	movs	r1, #231	; 0xe7
   b4b8e:	4620      	mov	r0, r4
   b4b90:	f7ff fece 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
   b4b94:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4b98:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4b9c <_ZN15Adafruit_BME2806read24Eh>:
{
   b4b9c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4b9e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4ba2:	3301      	adds	r3, #1
{
   b4ba4:	b085      	sub	sp, #20
   b4ba6:	4604      	mov	r4, r0
   b4ba8:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4baa:	d123      	bne.n	b4bf4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4bac:	7901      	ldrb	r1, [r0, #4]
   b4bae:	6800      	ldr	r0, [r0, #0]
   b4bb0:	f001 fc1a 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4bb4:	6820      	ldr	r0, [r4, #0]
   b4bb6:	6803      	ldr	r3, [r0, #0]
   b4bb8:	4629      	mov	r1, r5
   b4bba:	689b      	ldr	r3, [r3, #8]
   b4bbc:	4798      	blx	r3
        _wire -> endTransmission();
   b4bbe:	6820      	ldr	r0, [r4, #0]
   b4bc0:	f001 fc1d 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4bc4:	7921      	ldrb	r1, [r4, #4]
   b4bc6:	6820      	ldr	r0, [r4, #0]
   b4bc8:	2203      	movs	r2, #3
   b4bca:	f001 fc0a 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4bce:	6820      	ldr	r0, [r4, #0]
   b4bd0:	6803      	ldr	r3, [r0, #0]
   b4bd2:	695b      	ldr	r3, [r3, #20]
   b4bd4:	4798      	blx	r3
        value <<= 8;
   b4bd6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4bd8:	6820      	ldr	r0, [r4, #0]
   b4bda:	6803      	ldr	r3, [r0, #0]
   b4bdc:	695b      	ldr	r3, [r3, #20]
   b4bde:	4798      	blx	r3
   b4be0:	4328      	orrs	r0, r5
        value <<= 8;
   b4be2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4be4:	6820      	ldr	r0, [r4, #0]
   b4be6:	6803      	ldr	r3, [r0, #0]
   b4be8:	695b      	ldr	r3, [r3, #20]
   b4bea:	4798      	blx	r3
   b4bec:	4305      	orrs	r5, r0
}
   b4bee:	4628      	mov	r0, r5
   b4bf0:	b005      	add	sp, #20
   b4bf2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4bf4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4bf8:	3301      	adds	r3, #1
   b4bfa:	d10c      	bne.n	b4c16 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4bfc:	4b1a      	ldr	r3, [pc, #104]	; (b4c68 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4bfe:	9300      	str	r3, [sp, #0]
   b4c00:	2300      	movs	r3, #0
   b4c02:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c06:	4b19      	ldr	r3, [pc, #100]	; (b4c6c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4c08:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c0a:	4668      	mov	r0, sp
   b4c0c:	2301      	movs	r3, #1
   b4c0e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c12:	f7ff fdb0 	bl	b4776 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c16:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c1a:	2100      	movs	r1, #0
   b4c1c:	b280      	uxth	r0, r0
   b4c1e:	f001 fe3e 	bl	b689e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c22:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c26:	4620      	mov	r0, r4
   b4c28:	f7ff fdaf 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4c2c:	2100      	movs	r1, #0
   b4c2e:	4620      	mov	r0, r4
   b4c30:	f7ff fdab 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4c34:	2100      	movs	r1, #0
        value <<= 8;
   b4c36:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c38:	4620      	mov	r0, r4
   b4c3a:	f7ff fda6 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
   b4c3e:	4328      	orrs	r0, r5
        value <<= 8;
   b4c40:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c42:	2100      	movs	r1, #0
   b4c44:	4620      	mov	r0, r4
   b4c46:	f7ff fda0 	bl	b478a <_ZN15Adafruit_BME2807spixferEh>
   b4c4a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4c4c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c50:	2101      	movs	r1, #1
   b4c52:	b280      	uxth	r0, r0
   b4c54:	f001 fe23 	bl	b689e <digitalWrite>
        if (_sck == -1)
   b4c58:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4c5c:	3301      	adds	r3, #1
   b4c5e:	d1c6      	bne.n	b4bee <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4c60:	f7ff fd82 	bl	b4768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4c64:	e7c3      	b.n	b4bee <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4c66:	bf00      	nop
   b4c68:	000b7bcc 	.word	0x000b7bcc
   b4c6c:	0007a120 	.word	0x0007a120

000b4c70 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4c70:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c72:	21fa      	movs	r1, #250	; 0xfa
{
   b4c74:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c76:	f7ff ff91 	bl	b4b9c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4c7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4c7e:	d01f      	beq.n	b4cc0 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c80:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4c82:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4cc8 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c86:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c88:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c8c:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4c90:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c94:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c96:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4c9a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4c9e:	131b      	asrs	r3, r3, #12
   b4ca0:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4ca2:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4ca4:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4ca8:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4caa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4cae:	3380      	adds	r3, #128	; 0x80
   b4cb0:	121b      	asrs	r3, r3, #8
   b4cb2:	ee07 3a90 	vmov	s15, r3
   b4cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4cba:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4cbe:	bd10      	pop	{r4, pc}
        return NAN;
   b4cc0:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4ccc <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4cc4:	e7fb      	b.n	b4cbe <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4cc6:	bf00      	nop
   b4cc8:	42c80000 	.word	0x42c80000
   b4ccc:	7fc00000 	.word	0x7fc00000

000b4cd0 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4cd0:	b538      	push	{r3, r4, r5, lr}
   b4cd2:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4cd4:	f7ff ffcc 	bl	b4c70 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4cd8:	21fd      	movs	r1, #253	; 0xfd
   b4cda:	4620      	mov	r0, r4
   b4cdc:	f7ff fe84 	bl	b49e8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4ce0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4ce4:	d038      	beq.n	b4d58 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4ce6:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4ce8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4cec:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4cf0:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4cf4:	0509      	lsls	r1, r1, #20
   b4cf6:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4cfa:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4cfe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4d02:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d04:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d08:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d0c:	436b      	muls	r3, r5
   b4d0e:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d10:	4369      	muls	r1, r5
   b4d12:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d18:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d1a:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d1c:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d24:	434b      	muls	r3, r1
   b4d26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4d2a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d2c:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d2e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4d30:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d34:	4352      	muls	r2, r2
   b4d36:	11d2      	asrs	r2, r2, #7
   b4d38:	434a      	muls	r2, r1
   b4d3a:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4d3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4d42:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4d46:	bfa8      	it	ge
   b4d48:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4d4c:	131b      	asrs	r3, r3, #12
   b4d4e:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4d52:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4d56:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4d58:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4d60 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4d5c:	e7fb      	b.n	b4d56 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4d5e:	bf00      	nop
   b4d60:	7fc00000 	.word	0x7fc00000

000b4d64 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d68:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4d6a:	f7ff ff81 	bl	b4c70 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4d6e:	21f7      	movs	r1, #247	; 0xf7
   b4d70:	4628      	mov	r0, r5
   b4d72:	f7ff ff13 	bl	b4b9c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4d76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4d7a:	f000 80b6 	beq.w	b4eea <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4d7e:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d80:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4d84:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4d88:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4d8c:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d90:	17dc      	asrs	r4, r3, #31
   b4d92:	fb03 f20e 	mul.w	r2, r3, lr
   b4d96:	fb01 2204 	mla	r2, r1, r4, r2
   b4d9a:	fba3 3401 	umull	r3, r4, r3, r1
   b4d9e:	4422      	add	r2, r4
   b4da0:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4da2:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4da6:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4da8:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4dac:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4db0:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4db4:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4db8:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4dbc:	fb03 f608 	mul.w	r6, r3, r8
   b4dc0:	fb07 660c 	mla	r6, r7, ip, r6
   b4dc4:	fba3 3c07 	umull	r3, ip, r3, r7
   b4dc8:	4466      	add	r6, ip
   b4dca:	0a1b      	lsrs	r3, r3, #8
   b4dcc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4dd0:	191b      	adds	r3, r3, r4
   b4dd2:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4dd6:	8b6e      	ldrh	r6, [r5, #26]
   b4dd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4ddc:	fba3 3406 	umull	r3, r4, r3, r6
   b4de0:	fb06 4402 	mla	r4, r6, r2, r4
   b4de4:	17e3      	asrs	r3, r4, #31
   b4de6:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4de8:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4dec:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4df0:	d07e      	beq.n	b4ef0 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4df2:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4df6:	fb04 f608 	mul.w	r6, r4, r8
   b4dfa:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4dfe:	fb07 6609 	mla	r6, r7, r9, r6
   b4e02:	fba4 4707 	umull	r4, r7, r4, r7
   b4e06:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e08:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4e0c:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4e10:	fb07 fe0e 	mul.w	lr, r7, lr
   b4e14:	fb01 ee08 	mla	lr, r1, r8, lr
   b4e18:	fba7 7101 	umull	r7, r1, r7, r1
   b4e1c:	4471      	add	r1, lr
   b4e1e:	0449      	lsls	r1, r1, #17
   b4e20:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4e24:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e26:	047f      	lsls	r7, r7, #17
   b4e28:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4e2a:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e2e:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4e32:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e36:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4e3a:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4e3e:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4e42:	07e4      	lsls	r4, r4, #31
   b4e44:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e46:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4e4a:	f640 4135 	movw	r1, #3125	; 0xc35
   b4e4e:	eb60 0606 	sbc.w	r6, r0, r6
   b4e52:	fba4 0401 	umull	r0, r4, r4, r1
   b4e56:	fb01 4106 	mla	r1, r1, r6, r4
   b4e5a:	f002 faf5 	bl	b7448 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e5e:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e62:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e66:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4e6a:	0b43      	lsrs	r3, r0, #13
   b4e6c:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4e70:	fb02 f70c 	mul.w	r7, r2, ip
   b4e74:	17d4      	asrs	r4, r2, #31
   b4e76:	fb03 7704 	mla	r7, r3, r4, r7
   b4e7a:	fba2 2403 	umull	r2, r4, r2, r3
   b4e7e:	443c      	add	r4, r7
   b4e80:	fb02 f70c 	mul.w	r7, r2, ip
   b4e84:	fb03 7704 	mla	r7, r3, r4, r7
   b4e88:	fba2 2303 	umull	r2, r3, r2, r3
   b4e8c:	441f      	add	r7, r3
   b4e8e:	0e53      	lsrs	r3, r2, #25
   b4e90:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4e94:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e96:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4e9a:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4e9e:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ea0:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ea4:	fb02 4100 	mla	r1, r2, r0, r4
   b4ea8:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4eac:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4eb0:	4431      	add	r1, r6
   b4eb2:	0cc0      	lsrs	r0, r0, #19
   b4eb4:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4eb8:	1818      	adds	r0, r3, r0
   b4eba:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4ebe:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4ec2:	0a00      	lsrs	r0, r0, #8
   b4ec4:	012d      	lsls	r5, r5, #4
   b4ec6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4eca:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4ece:	0124      	lsls	r4, r4, #4
   b4ed0:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4ed2:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4ed6:	f002 fa79 	bl	b73cc <__aeabi_l2f>
   b4eda:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4ef8 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4ede:	ee07 0a90 	vmov	s15, r0
   b4ee2:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4eea:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4efc <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4eee:	e7fa      	b.n	b4ee6 <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4ef0:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4f00 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4ef4:	e7f7      	b.n	b4ee6 <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4ef6:	bf00      	nop
   b4ef8:	3b800000 	.word	0x3b800000
   b4efc:	7fc00000 	.word	0x7fc00000
   b4f00:	00000000 	.word	0x00000000

000b4f04 <_ZN15Adafruit_BME2804initEv>:
{
   b4f04:	b530      	push	{r4, r5, lr}
   b4f06:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4f08:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4f0c:	1c42      	adds	r2, r0, #1
{
   b4f0e:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4f10:	d119      	bne.n	b4f46 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4f12:	6820      	ldr	r0, [r4, #0]
   b4f14:	f001 fa36 	bl	b6384 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f18:	21d0      	movs	r1, #208	; 0xd0
   b4f1a:	4620      	mov	r0, r4
   b4f1c:	f7ff fd08 	bl	b4930 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4f20:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f22:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4f24:	d145      	bne.n	b4fb2 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4f26:	4620      	mov	r0, r4
   b4f28:	22b6      	movs	r2, #182	; 0xb6
   b4f2a:	21e0      	movs	r1, #224	; 0xe0
   b4f2c:	f7ff fc64 	bl	b47f8 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4f30:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4f34:	f000 fff4 	bl	b5f20 <delay>
    while (isReadingCalibration())
   b4f38:	4620      	mov	r0, r4
   b4f3a:	f7ff fd4d 	bl	b49d8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4f3e:	4605      	mov	r5, r0
   b4f40:	b328      	cbz	r0, b4f8e <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4f42:	2064      	movs	r0, #100	; 0x64
   b4f44:	e7f6      	b.n	b4f34 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4f46:	2101      	movs	r1, #1
   b4f48:	b280      	uxth	r0, r0
   b4f4a:	f001 fca8 	bl	b689e <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4f4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4f52:	2101      	movs	r1, #1
   b4f54:	b280      	uxth	r0, r0
   b4f56:	f001 fc91 	bl	b687c <pinMode>
        if (_sck == -1) {
   b4f5a:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4f5e:	1c43      	adds	r3, r0, #1
   b4f60:	d104      	bne.n	b4f6c <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4f62:	f7ff fbe5 	bl	b4730 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f66:	f000 fcf5 	bl	b5954 <_ZN8SPIClass5beginEv>
    }
   b4f6a:	e7d5      	b.n	b4f18 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4f6c:	2101      	movs	r1, #1
   b4f6e:	b280      	uxth	r0, r0
   b4f70:	f001 fc84 	bl	b687c <pinMode>
            pinMode(_mosi, OUTPUT);
   b4f74:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4f78:	2101      	movs	r1, #1
   b4f7a:	b280      	uxth	r0, r0
   b4f7c:	f001 fc7e 	bl	b687c <pinMode>
            pinMode(_miso, INPUT);
   b4f80:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4f84:	2100      	movs	r1, #0
   b4f86:	b280      	uxth	r0, r0
   b4f88:	f001 fc78 	bl	b687c <pinMode>
   b4f8c:	e7c4      	b.n	b4f18 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4f8e:	4620      	mov	r0, r4
   b4f90:	f7ff fd92 	bl	b4ab8 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4f94:	2305      	movs	r3, #5
   b4f96:	9300      	str	r3, [sp, #0]
   b4f98:	461a      	mov	r2, r3
   b4f9a:	2103      	movs	r1, #3
   b4f9c:	4620      	mov	r0, r4
   b4f9e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4fa2:	f7ff fc7b 	bl	b489c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4fa6:	2064      	movs	r0, #100	; 0x64
   b4fa8:	f000 ffba 	bl	b5f20 <delay>
    return true;
   b4fac:	2001      	movs	r0, #1
}
   b4fae:	b005      	add	sp, #20
   b4fb0:	bd30      	pop	{r4, r5, pc}
        return false;
   b4fb2:	2000      	movs	r0, #0
   b4fb4:	e7fb      	b.n	b4fae <_ZN15Adafruit_BME2804initEv+0xaa>

000b4fb6 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b4fb6:	2377      	movs	r3, #119	; 0x77
{
   b4fb8:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b4fba:	7103      	strb	r3, [r0, #4]
{
   b4fbc:	4604      	mov	r4, r0
	_wire = &Wire;
   b4fbe:	f001 fcf1 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4fc2:	6020      	str	r0, [r4, #0]
	status = init();
   b4fc4:	4620      	mov	r0, r4
   b4fc6:	f7ff ff9d 	bl	b4f04 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b4fca:	b930      	cbnz	r0, b4fda <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b4fcc:	2376      	movs	r3, #118	; 0x76
   b4fce:	7123      	strb	r3, [r4, #4]
 		status = init();
   b4fd0:	4620      	mov	r0, r4
}
   b4fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b4fd6:	f7ff bf95 	b.w	b4f04 <_ZN15Adafruit_BME2804initEv>
}
   b4fda:	bd10      	pop	{r4, pc}

000b4fdc <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
  BSD license, all text above must be included in any redistribution
 ****************************************************/
#include "application.h"
#include "Adafruit_VEML6070.h"

void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
   b4fdc:	b510      	push	{r4, lr}
   b4fde:	460c      	mov	r4, r1
  Wire.begin();
   b4fe0:	f001 fce0 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4fe4:	f001 f9ce 	bl	b6384 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(VEML6070_ADDR_L);
   b4fe8:	f001 fcdc 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4fec:	2138      	movs	r1, #56	; 0x38
   b4fee:	f001 f9ff 	bl	b63f0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((itime << 2) | 0x02);
   b4ff2:	f001 fcd7 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b4ff6:	00a1      	lsls	r1, r4, #2
   b4ff8:	6803      	ldr	r3, [r0, #0]
   b4ffa:	f041 0102 	orr.w	r1, r1, #2
   b4ffe:	689b      	ldr	r3, [r3, #8]
   b5000:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   b5004:	4798      	blx	r3
  Wire.endTransmission();
   b5006:	f001 fccd 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b500a:	f001 f9f8 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
  delay(500);
}
   b500e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
   b5012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5016:	f000 bf83 	b.w	b5f20 <delay>

000b501a <_ZN17Adafruit_VEML60706readUVEv>:

uint16_t Adafruit_VEML6070::readUV() {
   b501a:	b538      	push	{r3, r4, r5, lr}
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
   b501c:	f001 fcc2 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b5020:	2201      	movs	r2, #1
   b5022:	2139      	movs	r1, #57	; 0x39
   b5024:	f001 f9dd 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
   b5028:	2801      	cmp	r0, #1
   b502a:	4604      	mov	r4, r0
   b502c:	d002      	beq.n	b5034 <_ZN17Adafruit_VEML60706readUVEv+0x1a>
   b502e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
  uvi |= Wire.read();

  return uvi;  
}
   b5032:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t uvi = Wire.read();
   b5034:	f001 fcb6 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b5038:	6803      	ldr	r3, [r0, #0]
   b503a:	695b      	ldr	r3, [r3, #20]
   b503c:	4798      	blx	r3
   b503e:	4605      	mov	r5, r0
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
   b5040:	f001 fcb0 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b5044:	4622      	mov	r2, r4
   b5046:	2138      	movs	r1, #56	; 0x38
   b5048:	f001 f9cb 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
   b504c:	2801      	cmp	r0, #1
   b504e:	d1ee      	bne.n	b502e <_ZN17Adafruit_VEML60706readUVEv+0x14>
  uvi |= Wire.read();
   b5050:	f001 fca8 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b5054:	6803      	ldr	r3, [r0, #0]
   b5056:	695b      	ldr	r3, [r3, #20]
   b5058:	4798      	blx	r3
   b505a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b505e:	b280      	uxth	r0, r0
  return uvi;  
   b5060:	e7e7      	b.n	b5032 <_ZN17Adafruit_VEML60706readUVEv+0x18>

000b5062 <_ZN7TwoWire5writeEi.isra.0>:
   b5062:	6803      	ldr	r3, [r0, #0]
   b5064:	b2c9      	uxtb	r1, r1
   b5066:	689b      	ldr	r3, [r3, #8]
   b5068:	4718      	bx	r3

000b506a <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
   b506a:	2200      	movs	r2, #0
   b506c:	6042      	str	r2, [r0, #4]
   b506e:	6082      	str	r2, [r0, #8]
   b5070:	60c2      	str	r2, [r0, #12]
   b5072:	f240 1201 	movw	r2, #257	; 0x101
   b5076:	8202      	strh	r2, [r0, #16]
   b5078:	2201      	movs	r2, #1
   b507a:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
   b507c:	4770      	bx	lr

000b507e <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
   b507e:	b538      	push	{r3, r4, r5, lr}
   b5080:	4604      	mov	r4, r0
   b5082:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5084:	6800      	ldr	r0, [r0, #0]
   b5086:	2161      	movs	r1, #97	; 0x61
   b5088:	f001 f9b2 	bl	b63f0 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
   b508c:	6820      	ldr	r0, [r4, #0]
   b508e:	0a29      	lsrs	r1, r5, #8
   b5090:	f7ff ffe7 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   b5094:	6820      	ldr	r0, [r4, #0]
   b5096:	b2e9      	uxtb	r1, r5
   b5098:	f7ff ffe3 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b509c:	6820      	ldr	r0, [r4, #0]
   b509e:	f001 f9ae 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
   b50a2:	b108      	cbz	r0, b50a8 <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   b50a4:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
   b50a6:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
   b50a8:	6820      	ldr	r0, [r4, #0]
   b50aa:	2202      	movs	r2, #2
   b50ac:	2161      	movs	r1, #97	; 0x61
   b50ae:	f001 f998 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b50b2:	6820      	ldr	r0, [r4, #0]
   b50b4:	6803      	ldr	r3, [r0, #0]
   b50b6:	691b      	ldr	r3, [r3, #16]
   b50b8:	4798      	blx	r3
   b50ba:	2800      	cmp	r0, #0
   b50bc:	d0f2      	beq.n	b50a4 <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
   b50be:	6820      	ldr	r0, [r4, #0]
   b50c0:	6803      	ldr	r3, [r0, #0]
   b50c2:	695b      	ldr	r3, [r3, #20]
   b50c4:	4798      	blx	r3
   b50c6:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
   b50c8:	6820      	ldr	r0, [r4, #0]
   b50ca:	6803      	ldr	r3, [r0, #0]
   b50cc:	695b      	ldr	r3, [r3, #20]
   b50ce:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b50d0:	b2c3      	uxtb	r3, r0
   b50d2:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
   b50d6:	b280      	uxth	r0, r0
   b50d8:	e7e5      	b.n	b50a6 <_ZN5SCD3012readRegisterEt+0x28>

000b50da <_ZN5SCD3013dataAvailableEv>:
{
   b50da:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   b50dc:	f240 2102 	movw	r1, #514	; 0x202
   b50e0:	f7ff ffcd 	bl	b507e <_ZN5SCD3012readRegisterEt>
}
   b50e4:	1e43      	subs	r3, r0, #1
   b50e6:	4258      	negs	r0, r3
   b50e8:	4158      	adcs	r0, r3
   b50ea:	bd08      	pop	{r3, pc}

000b50ec <_ZN5SCD3015readMeasurementEv>:
{
   b50ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b50f0:	4604      	mov	r4, r0
  if (dataAvailable() == false)
   b50f2:	f7ff fff2 	bl	b50da <_ZN5SCD3013dataAvailableEv>
   b50f6:	4607      	mov	r7, r0
   b50f8:	b918      	cbnz	r0, b5102 <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
   b50fa:	2700      	movs	r7, #0
}
   b50fc:	4638      	mov	r0, r7
   b50fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5102:	6820      	ldr	r0, [r4, #0]
   b5104:	2161      	movs	r1, #97	; 0x61
   b5106:	f001 f973 	bl	b63f0 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
   b510a:	6820      	ldr	r0, [r4, #0]
   b510c:	2103      	movs	r1, #3
   b510e:	f7ff ffa8 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   b5112:	6820      	ldr	r0, [r4, #0]
   b5114:	2100      	movs	r1, #0
   b5116:	f7ff ffa4 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b511a:	6820      	ldr	r0, [r4, #0]
   b511c:	f001 f96f 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
   b5120:	4605      	mov	r5, r0
   b5122:	2800      	cmp	r0, #0
   b5124:	d1e9      	bne.n	b50fa <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
   b5126:	2212      	movs	r2, #18
   b5128:	2161      	movs	r1, #97	; 0x61
   b512a:	6820      	ldr	r0, [r4, #0]
   b512c:	f001 f959 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5130:	6820      	ldr	r0, [r4, #0]
   b5132:	6803      	ldr	r3, [r0, #0]
   b5134:	691b      	ldr	r3, [r3, #16]
   b5136:	4798      	blx	r3
   b5138:	4606      	mov	r6, r0
   b513a:	b358      	cbz	r0, b5194 <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
   b513c:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
   b513e:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
   b5140:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
   b5142:	6820      	ldr	r0, [r4, #0]
   b5144:	6803      	ldr	r3, [r0, #0]
   b5146:	695b      	ldr	r3, [r3, #20]
   b5148:	4798      	blx	r3
      switch (x)
   b514a:	b2eb      	uxtb	r3, r5
   b514c:	2b10      	cmp	r3, #16
   b514e:	d80d      	bhi.n	b516c <_ZN5SCD3015readMeasurementEv+0x80>
   b5150:	e8df f003 	tbb	[pc, r3]
   b5154:	090c0909 	.word	0x090c0909
   b5158:	18180c09 	.word	0x18180c09
   b515c:	0c18180c 	.word	0x0c18180c
   b5160:	1c0c1c1c 	.word	0x1c0c1c1c
   b5164:	1c          	.byte	0x1c
   b5165:	00          	.byte	0x00
          tempCO2 |= incoming;
   b5166:	b2c3      	uxtb	r3, r0
   b5168:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
   b516c:	3501      	adds	r5, #1
   b516e:	2d12      	cmp	r5, #18
   b5170:	d1e7      	bne.n	b5142 <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
   b5172:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
   b5174:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
   b5178:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
   b517a:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
   b517e:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
   b5180:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
   b5182:	e7bb      	b.n	b50fc <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
   b5184:	b2c3      	uxtb	r3, r0
   b5186:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
   b518a:	e7ef      	b.n	b516c <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
   b518c:	b2c3      	uxtb	r3, r0
   b518e:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
   b5192:	e7eb      	b.n	b516c <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
   b5194:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
   b5196:	4681      	mov	r9, r0
   b5198:	e7eb      	b.n	b5172 <_ZN5SCD3015readMeasurementEv+0x86>

000b519a <_ZN5SCD306getCO2Ev>:
{
   b519a:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
   b519c:	7c03      	ldrb	r3, [r0, #16]
{
   b519e:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
   b51a0:	b10b      	cbz	r3, b51a6 <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b51a2:	f7ff ffa3 	bl	b50ec <_ZN5SCD3015readMeasurementEv>
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
   b51a6:	edd4 7a01 	vldr	s15, [r4, #4]
   b51aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  co2HasBeenReported = true;
   b51ae:	2301      	movs	r3, #1
   b51b0:	7423      	strb	r3, [r4, #16]
}
   b51b2:	ee17 3a90 	vmov	r3, s15
   b51b6:	b298      	uxth	r0, r3
   b51b8:	bd10      	pop	{r4, pc}

000b51ba <_ZN5SCD3011getHumidityEv>:
{
   b51ba:	b510      	push	{r4, lr}
  if (humidityHasBeenReported == true) //Trigger a new read
   b51bc:	7c43      	ldrb	r3, [r0, #17]
{
   b51be:	4604      	mov	r4, r0
  if (humidityHasBeenReported == true) //Trigger a new read
   b51c0:	b10b      	cbz	r3, b51c6 <_ZN5SCD3011getHumidityEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b51c2:	f7ff ff93 	bl	b50ec <_ZN5SCD3015readMeasurementEv>
  humidityHasBeenReported = true;
   b51c6:	2301      	movs	r3, #1
}
   b51c8:	ed94 0a03 	vldr	s0, [r4, #12]
  humidityHasBeenReported = true;
   b51cc:	7463      	strb	r3, [r4, #17]
}
   b51ce:	bd10      	pop	{r4, pc}

000b51d0 <_ZN5SCD3014getTemperatureEv>:
{
   b51d0:	b510      	push	{r4, lr}
  if (temperatureHasBeenReported == true) //Trigger a new read
   b51d2:	7c83      	ldrb	r3, [r0, #18]
{
   b51d4:	4604      	mov	r4, r0
  if (temperatureHasBeenReported == true) //Trigger a new read
   b51d6:	b10b      	cbz	r3, b51dc <_ZN5SCD3014getTemperatureEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b51d8:	f7ff ff88 	bl	b50ec <_ZN5SCD3015readMeasurementEv>
  temperatureHasBeenReported = true;
   b51dc:	2301      	movs	r3, #1
}
   b51de:	ed94 0a02 	vldr	s0, [r4, #8]
  temperatureHasBeenReported = true;
   b51e2:	74a3      	strb	r3, [r4, #18]
}
   b51e4:	bd10      	pop	{r4, pc}

000b51e6 <_ZN5SCD3011computeCRC8EPhh>:
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0 ; x < len ; x++)
   b51e6:	440a      	add	r2, r1
  uint8_t crc = 0xFF; //Init with 0xFF
   b51e8:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t x = 0 ; x < len ; x++)
   b51ea:	428a      	cmp	r2, r1
   b51ec:	d011      	beq.n	b5212 <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
   b51ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   b51f2:	4058      	eors	r0, r3
   b51f4:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
   b51f6:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t i = 0 ; i < 8 ; i++)
   b51fa:	f103 33ff 	add.w	r3, r3, #4294967295
   b51fe:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   b5202:	bf18      	it	ne
   b5204:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
   b5208:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   b520c:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
   b520e:	d1f2      	bne.n	b51f6 <_ZN5SCD3011computeCRC8EPhh+0x10>
   b5210:	e7eb      	b.n	b51ea <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
   b5212:	4770      	bx	lr

000b5214 <_ZN5SCD3011sendCommandEtt>:
{
   b5214:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5218:	460e      	mov	r6, r1
  data[0] = arguments >> 8;
   b521a:	ea4f 2812 	mov.w	r8, r2, lsr #8
{
   b521e:	4615      	mov	r5, r2
  data[1] = arguments & 0xFF;
   b5220:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b5224:	a901      	add	r1, sp, #4
   b5226:	2202      	movs	r2, #2
{
   b5228:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
   b522a:	f88d 8004 	strb.w	r8, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b522e:	f7ff ffda 	bl	b51e6 <_ZN5SCD3011computeCRC8EPhh>
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5232:	2161      	movs	r1, #97	; 0x61
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b5234:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5236:	6820      	ldr	r0, [r4, #0]
   b5238:	f001 f8da 	bl	b63f0 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
   b523c:	6820      	ldr	r0, [r4, #0]
   b523e:	0a31      	lsrs	r1, r6, #8
   b5240:	f7ff ff0f 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(command & 0xFF); //LSB
   b5244:	6820      	ldr	r0, [r4, #0]
   b5246:	b2f1      	uxtb	r1, r6
   b5248:	f7ff ff0b 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments >> 8); //MSB
   b524c:	6820      	ldr	r0, [r4, #0]
   b524e:	4641      	mov	r1, r8
   b5250:	f7ff ff07 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments & 0xFF); //LSB
   b5254:	6820      	ldr	r0, [r4, #0]
   b5256:	b2e9      	uxtb	r1, r5
   b5258:	f7ff ff03 	bl	b5062 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(crc);
   b525c:	6820      	ldr	r0, [r4, #0]
   b525e:	6803      	ldr	r3, [r0, #0]
   b5260:	4639      	mov	r1, r7
   b5262:	689b      	ldr	r3, [r3, #8]
   b5264:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b5266:	6820      	ldr	r0, [r4, #0]
   b5268:	f001 f8c9 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
}
   b526c:	fab0 f080 	clz	r0, r0
   b5270:	0940      	lsrs	r0, r0, #5
   b5272:	b002      	add	sp, #8
   b5274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5278 <_ZN5SCD3022setAutoSelfCalibrationEb>:
  if (enable)
   b5278:	460a      	mov	r2, r1
   b527a:	b101      	cbz	r1, b527e <_ZN5SCD3022setAutoSelfCalibrationEb+0x6>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b527c:	2201      	movs	r2, #1
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 0); //Deactivate continuous ASC
   b527e:	f245 3106 	movw	r1, #21254	; 0x5306
   b5282:	f7ff bfc7 	b.w	b5214 <_ZN5SCD3011sendCommandEtt>

000b5286 <_ZN5SCD3014beginMeasuringEt>:
{
   b5286:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
   b5288:	2110      	movs	r1, #16
   b528a:	f7ff bfc3 	b.w	b5214 <_ZN5SCD3011sendCommandEtt>

000b528e <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
   b528e:	2100      	movs	r1, #0
   b5290:	f7ff bff9 	b.w	b5286 <_ZN5SCD3014beginMeasuringEt>

000b5294 <_ZN5SCD3022setMeasurementIntervalEt>:
{
   b5294:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
   b5296:	f44f 418c 	mov.w	r1, #17920	; 0x4600
   b529a:	f7ff bfbb 	b.w	b5214 <_ZN5SCD3011sendCommandEtt>

000b529e <_ZN5SCD305beginER7TwoWire>:
{
   b529e:	b538      	push	{r3, r4, r5, lr}
   b52a0:	4604      	mov	r4, r0
   b52a2:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b52a4:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b52a6:	f001 f86d 	bl	b6384 <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
   b52aa:	4620      	mov	r0, r4
   b52ac:	f7ff ffef 	bl	b528e <_ZN5SCD3014beginMeasuringEv>
   b52b0:	4605      	mov	r5, r0
   b52b2:	b148      	cbz	r0, b52c8 <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
   b52b4:	2102      	movs	r1, #2
   b52b6:	4620      	mov	r0, r4
   b52b8:	f7ff ffec 	bl	b5294 <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b52bc:	2201      	movs	r2, #1
   b52be:	f245 3106 	movw	r1, #21254	; 0x5306
   b52c2:	4620      	mov	r0, r4
   b52c4:	f7ff ffa6 	bl	b5214 <_ZN5SCD3011sendCommandEtt>
}
   b52c8:	4628      	mov	r0, r5
   b52ca:	bd38      	pop	{r3, r4, r5, pc}

000b52cc <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   b52cc:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   b52ce:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   b52d0:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   b52d2:	7002      	strb	r2, [r0, #0]
}
   b52d4:	4770      	bx	lr

000b52d6 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   b52d6:	b510      	push	{r4, lr}
   b52d8:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   b52da:	6840      	ldr	r0, [r0, #4]
   b52dc:	f001 f892 	bl	b6404 <_ZN7TwoWire9isEnabledEv>
   b52e0:	b910      	cbnz	r0, b52e8 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   b52e2:	6860      	ldr	r0, [r4, #4]
   b52e4:	f001 f84e 	bl	b6384 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   b52e8:	2001      	movs	r0, #1
   b52ea:	bd10      	pop	{r4, pc}

000b52ec <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   b52ec:	b570      	push	{r4, r5, r6, lr}
   b52ee:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   b52f0:	7841      	ldrb	r1, [r0, #1]
   b52f2:	6840      	ldr	r0, [r0, #4]
   b52f4:	f001 f878 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   b52f8:	7869      	ldrb	r1, [r5, #1]
   b52fa:	6868      	ldr	r0, [r5, #4]
   b52fc:	2202      	movs	r2, #2
   b52fe:	f001 f870 	bl	b63e2 <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   b5302:	6868      	ldr	r0, [r5, #4]
   b5304:	6803      	ldr	r3, [r0, #0]
   b5306:	695b      	ldr	r3, [r3, #20]
   b5308:	4798      	blx	r3
   b530a:	4606      	mov	r6, r0
   b530c:	6868      	ldr	r0, [r5, #4]
   b530e:	6803      	ldr	r3, [r0, #0]
   b5310:	695b      	ldr	r3, [r3, #20]
   b5312:	4798      	blx	r3
   b5314:	4604      	mov	r4, r0
   b5316:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  m_i2c.endTransmission();
   b531a:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   b531c:	b2a4      	uxth	r4, r4
  m_i2c.endTransmission();
   b531e:	f001 f86e 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
  return (float)level / 1.2f; // convert to lux
   b5322:	ee07 4a90 	vmov	s15, r4
}
   b5326:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5334 <_ZN6BH175015get_light_levelEv+0x48>
  return (float)level / 1.2f; // convert to lux
   b532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b532e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5332:	bd70      	pop	{r4, r5, r6, pc}
   b5334:	3f99999a 	.word	0x3f99999a

000b5338 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   b5338:	7803      	ldrb	r3, [r0, #0]
   b533a:	2b23      	cmp	r3, #35	; 0x23
   b533c:	d005      	beq.n	b534a <_ZN6BH175020wait_for_measurementEv+0x12>
   b533e:	2b13      	cmp	r3, #19
   b5340:	bf0c      	ite	eq
   b5342:	2018      	moveq	r0, #24
   b5344:	20b4      	movne	r0, #180	; 0xb4
   b5346:	f000 bdeb 	b.w	b5f20 <delay>
   b534a:	2018      	movs	r0, #24
   b534c:	e7fb      	b.n	b5346 <_ZN6BH175020wait_for_measurementEv+0xe>

000b534e <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   b534e:	b538      	push	{r3, r4, r5, lr}
   b5350:	4604      	mov	r4, r0
   b5352:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   b5354:	7841      	ldrb	r1, [r0, #1]
   b5356:	6840      	ldr	r0, [r0, #4]
   b5358:	f001 f846 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   b535c:	6860      	ldr	r0, [r4, #4]
   b535e:	6803      	ldr	r3, [r0, #0]
   b5360:	4629      	mov	r1, r5
   b5362:	689b      	ldr	r3, [r3, #8]
   b5364:	4798      	blx	r3
  m_i2c.endTransmission();
   b5366:	6860      	ldr	r0, [r4, #4]
   b5368:	f001 f849 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   b536c:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   b536e:	4620      	mov	r0, r4
}
   b5370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   b5374:	f7ff bfe0 	b.w	b5338 <_ZN6BH175020wait_for_measurementEv>

000b5378 <_ZN6BH175023make_forced_measurementEv>:
{
   b5378:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   b537a:	7803      	ldrb	r3, [r0, #0]
   b537c:	f1a3 0220 	sub.w	r2, r3, #32
   b5380:	2a01      	cmp	r2, #1
{
   b5382:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   b5384:	d901      	bls.n	b538a <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   b5386:	2b23      	cmp	r3, #35	; 0x23
   b5388:	d110      	bne.n	b53ac <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   b538a:	7861      	ldrb	r1, [r4, #1]
   b538c:	6860      	ldr	r0, [r4, #4]
   b538e:	f001 f82b 	bl	b63e8 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   b5392:	6860      	ldr	r0, [r4, #4]
   b5394:	7821      	ldrb	r1, [r4, #0]
   b5396:	6803      	ldr	r3, [r0, #0]
   b5398:	689b      	ldr	r3, [r3, #8]
   b539a:	4798      	blx	r3
    m_i2c.endTransmission();
   b539c:	6860      	ldr	r0, [r4, #4]
   b539e:	f001 f82e 	bl	b63fe <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   b53a2:	4620      	mov	r0, r4
}
   b53a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   b53a8:	f7ff bfc6 	b.w	b5338 <_ZN6BH175020wait_for_measurementEv>
}
   b53ac:	bd10      	pop	{r4, pc}
	...

000b53b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <netdb_freeaddrinfo+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	689b      	ldr	r3, [r3, #8]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030268 	.word	0x00030268

000b53c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <netdb_getaddrinfo+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	68db      	ldr	r3, [r3, #12]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030268 	.word	0x00030268

000b53d0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <HAL_Pin_Mode+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	689b      	ldr	r3, [r3, #8]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	0003022c 	.word	0x0003022c

000b53e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <HAL_Get_Pin_Mode+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	68db      	ldr	r3, [r3, #12]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	0003022c 	.word	0x0003022c

000b53f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <HAL_GPIO_Write+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	691b      	ldr	r3, [r3, #16]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	0003022c 	.word	0x0003022c

000b5400 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <HAL_GPIO_Read+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	695b      	ldr	r3, [r3, #20]
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	0003022c 	.word	0x0003022c

000b5410 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <HAL_RNG_GetRandomNumber+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	685b      	ldr	r3, [r3, #4]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030218 	.word	0x00030218

000b5420 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	695b      	ldr	r3, [r3, #20]
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030218 	.word	0x00030218

000b5430 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <hal_rtc_time_is_valid+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030218 	.word	0x00030218

000b5440 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <hal_rtc_get_time+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	00030218 	.word	0x00030218

000b5450 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <os_mutex_recursive_create+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030248 	.word	0x00030248

000b5460 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <inet_inet_ntop+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	695b      	ldr	r3, [r3, #20]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030264 	.word	0x00030264

000b5470 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <hal_usart_write+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	68db      	ldr	r3, [r3, #12]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	0003023c 	.word	0x0003023c

000b5480 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <hal_usart_available+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	691b      	ldr	r3, [r3, #16]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	0003023c 	.word	0x0003023c

000b5490 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <hal_usart_read+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	695b      	ldr	r3, [r3, #20]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003023c 	.word	0x0003023c

000b54a0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <hal_usart_peek+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	699b      	ldr	r3, [r3, #24]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003023c 	.word	0x0003023c

000b54b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <hal_usart_flush+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	69db      	ldr	r3, [r3, #28]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	0003023c 	.word	0x0003023c

000b54c0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <hal_usart_is_enabled+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	6a1b      	ldr	r3, [r3, #32]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	0003023c 	.word	0x0003023c

000b54d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <hal_usart_available_data_for_write+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	0003023c 	.word	0x0003023c

000b54e0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <hal_usart_init_ex+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	0003023c 	.word	0x0003023c

000b54f0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <hal_i2c_begin+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	68db      	ldr	r3, [r3, #12]
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	00030228 	.word	0x00030228

000b5500 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <hal_i2c_begin_transmission+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	699b      	ldr	r3, [r3, #24]
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	00030228 	.word	0x00030228

000b5510 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <hal_i2c_end_transmission+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	69db      	ldr	r3, [r3, #28]
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	00030228 	.word	0x00030228

000b5520 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <hal_i2c_write+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	6a1b      	ldr	r3, [r3, #32]
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	00030228 	.word	0x00030228

000b5530 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <hal_i2c_available+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	00030228 	.word	0x00030228

000b5540 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <hal_i2c_read+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	00030228 	.word	0x00030228

000b5550 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <hal_i2c_peek+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	00030228 	.word	0x00030228

000b5560 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <hal_i2c_flush+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	00030228 	.word	0x00030228

000b5570 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <hal_i2c_is_enabled+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	00030228 	.word	0x00030228

000b5580 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <hal_i2c_init+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	00030228 	.word	0x00030228

000b5590 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b02      	ldr	r3, [pc, #8]	; (b559c <hal_i2c_request_ex+0xc>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5598:	9301      	str	r3, [sp, #4]
   b559a:	bd08      	pop	{r3, pc}
   b559c:	00030228 	.word	0x00030228

000b55a0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b55a0:	b508      	push	{r3, lr}
   b55a2:	4b02      	ldr	r3, [pc, #8]	; (b55ac <hal_spi_begin+0xc>)
   b55a4:	681b      	ldr	r3, [r3, #0]
   b55a6:	681b      	ldr	r3, [r3, #0]
   b55a8:	9301      	str	r3, [sp, #4]
   b55aa:	bd08      	pop	{r3, pc}
   b55ac:	00030230 	.word	0x00030230

000b55b0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <hal_spi_transfer+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	695b      	ldr	r3, [r3, #20]
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	00030230 	.word	0x00030230

000b55c0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <hal_spi_init+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	69db      	ldr	r3, [r3, #28]
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	00030230 	.word	0x00030230

000b55d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <hal_spi_is_enabled+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	6a1b      	ldr	r3, [r3, #32]
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	00030230 	.word	0x00030230

000b55e0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <hal_spi_info+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	00030230 	.word	0x00030230

000b55f0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <hal_spi_set_settings+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	00030230 	.word	0x00030230

000b5600 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <hal_spi_acquire+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	00030230 	.word	0x00030230

000b5610 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <hal_spi_release+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	00030230 	.word	0x00030230

000b5620 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <HAL_USB_USART_Init+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	681b      	ldr	r3, [r3, #0]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	0003024c 	.word	0x0003024c

000b5630 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <HAL_USB_USART_Begin+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	685b      	ldr	r3, [r3, #4]
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	0003024c 	.word	0x0003024c

000b5640 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <HAL_USB_USART_Available_Data+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	691b      	ldr	r3, [r3, #16]
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	0003024c 	.word	0x0003024c

000b5650 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	695b      	ldr	r3, [r3, #20]
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	0003024c 	.word	0x0003024c

000b5660 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <HAL_USB_USART_Receive_Data+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	699b      	ldr	r3, [r3, #24]
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	0003024c 	.word	0x0003024c

000b5670 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <HAL_USB_USART_Send_Data+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	69db      	ldr	r3, [r3, #28]
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	0003024c 	.word	0x0003024c

000b5680 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <HAL_USB_USART_Flush_Data+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	6a1b      	ldr	r3, [r3, #32]
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	0003024c 	.word	0x0003024c

000b5690 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <system_mode+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	681b      	ldr	r3, [r3, #0]
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030220 	.word	0x00030220

000b56a0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <set_system_mode+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	685b      	ldr	r3, [r3, #4]
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	00030220 	.word	0x00030220

000b56b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <system_delay_ms+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	695b      	ldr	r3, [r3, #20]
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	00030220 	.word	0x00030220

000b56c0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <system_thread_get_state+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030220 	.word	0x00030220

000b56d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b03      	ldr	r3, [pc, #12]	; (b56e0 <system_ctrl_set_app_request_handler+0x10>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b56da:	9301      	str	r3, [sp, #4]
   b56dc:	bd08      	pop	{r3, pc}
   b56de:	0000      	.short	0x0000
   b56e0:	00030220 	.word	0x00030220

000b56e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b03      	ldr	r3, [pc, #12]	; (b56f4 <system_ctrl_set_result+0x10>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b56ee:	9301      	str	r3, [sp, #4]
   b56f0:	bd08      	pop	{r3, pc}
   b56f2:	0000      	.short	0x0000
   b56f4:	00030220 	.word	0x00030220

000b56f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b56f8:	b508      	push	{r3, lr}
   b56fa:	4b02      	ldr	r3, [pc, #8]	; (b5704 <network_connect+0xc>)
   b56fc:	681b      	ldr	r3, [r3, #0]
   b56fe:	685b      	ldr	r3, [r3, #4]
   b5700:	9301      	str	r3, [sp, #4]
   b5702:	bd08      	pop	{r3, pc}
   b5704:	00030240 	.word	0x00030240

000b5708 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5708:	b508      	push	{r3, lr}
   b570a:	4b02      	ldr	r3, [pc, #8]	; (b5714 <network_connecting+0xc>)
   b570c:	681b      	ldr	r3, [r3, #0]
   b570e:	689b      	ldr	r3, [r3, #8]
   b5710:	9301      	str	r3, [sp, #4]
   b5712:	bd08      	pop	{r3, pc}
   b5714:	00030240 	.word	0x00030240

000b5718 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5718:	b508      	push	{r3, lr}
   b571a:	4b02      	ldr	r3, [pc, #8]	; (b5724 <network_disconnect+0xc>)
   b571c:	681b      	ldr	r3, [r3, #0]
   b571e:	68db      	ldr	r3, [r3, #12]
   b5720:	9301      	str	r3, [sp, #4]
   b5722:	bd08      	pop	{r3, pc}
   b5724:	00030240 	.word	0x00030240

000b5728 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5728:	b508      	push	{r3, lr}
   b572a:	4b02      	ldr	r3, [pc, #8]	; (b5734 <network_ready+0xc>)
   b572c:	681b      	ldr	r3, [r3, #0]
   b572e:	691b      	ldr	r3, [r3, #16]
   b5730:	9301      	str	r3, [sp, #4]
   b5732:	bd08      	pop	{r3, pc}
   b5734:	00030240 	.word	0x00030240

000b5738 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5738:	b508      	push	{r3, lr}
   b573a:	4b02      	ldr	r3, [pc, #8]	; (b5744 <network_on+0xc>)
   b573c:	681b      	ldr	r3, [r3, #0]
   b573e:	695b      	ldr	r3, [r3, #20]
   b5740:	9301      	str	r3, [sp, #4]
   b5742:	bd08      	pop	{r3, pc}
   b5744:	00030240 	.word	0x00030240

000b5748 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b02      	ldr	r3, [pc, #8]	; (b5754 <network_off+0xc>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	699b      	ldr	r3, [r3, #24]
   b5750:	9301      	str	r3, [sp, #4]
   b5752:	bd08      	pop	{r3, pc}
   b5754:	00030240 	.word	0x00030240

000b5758 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b02      	ldr	r3, [pc, #8]	; (b5764 <network_listen+0xc>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	69db      	ldr	r3, [r3, #28]
   b5760:	9301      	str	r3, [sp, #4]
   b5762:	bd08      	pop	{r3, pc}
   b5764:	00030240 	.word	0x00030240

000b5768 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5768:	b508      	push	{r3, lr}
   b576a:	4b02      	ldr	r3, [pc, #8]	; (b5774 <network_listening+0xc>)
   b576c:	681b      	ldr	r3, [r3, #0]
   b576e:	6a1b      	ldr	r3, [r3, #32]
   b5770:	9301      	str	r3, [sp, #4]
   b5772:	bd08      	pop	{r3, pc}
   b5774:	00030240 	.word	0x00030240

000b5778 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <network_set_listen_timeout+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	00030240 	.word	0x00030240

000b5788 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <network_get_listen_timeout+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	00030240 	.word	0x00030240

000b5798 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <network_is_on+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	00030240 	.word	0x00030240

000b57a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <network_is_off+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	00030240 	.word	0x00030240

000b57b8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <spark_process+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	689b      	ldr	r3, [r3, #8]
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	00030244 	.word	0x00030244

000b57c8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <spark_cloud_flag_connect+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	68db      	ldr	r3, [r3, #12]
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	00030244 	.word	0x00030244

000b57d8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <spark_cloud_flag_connected+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	695b      	ldr	r3, [r3, #20]
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	00030244 	.word	0x00030244

000b57e8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <spark_deviceID+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	69db      	ldr	r3, [r3, #28]
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030244 	.word	0x00030244

000b57f8 <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <spark_sync_time_pending+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030244 	.word	0x00030244

000b5808 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <spark_set_random_seed_from_cloud_handler+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030244 	.word	0x00030244

000b5818 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <malloc+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	681b      	ldr	r3, [r3, #0]
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	0003021c 	.word	0x0003021c

000b5828 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <free+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	685b      	ldr	r3, [r3, #4]
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	0003021c 	.word	0x0003021c

000b5838 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <realloc+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	689b      	ldr	r3, [r3, #8]
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	0003021c 	.word	0x0003021c

000b5848 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <siprintf+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	691b      	ldr	r3, [r3, #16]
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	0003021c 	.word	0x0003021c

000b5858 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <snprintf+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	69db      	ldr	r3, [r3, #28]
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	0003021c 	.word	0x0003021c

000b5868 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <vsnprintf+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	0003021c 	.word	0x0003021c

000b5878 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <__assert_func+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	0003021c 	.word	0x0003021c

000b5888 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <newlib_impure_ptr_callback+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	0003021c 	.word	0x0003021c

000b5898 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <strftime+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	0003021c 	.word	0x0003021c

000b58a8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <localtime_r+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	0003021c 	.word	0x0003021c

000b58b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b58b8:	2200      	movs	r2, #0
   b58ba:	6840      	ldr	r0, [r0, #4]
   b58bc:	4611      	mov	r1, r2
   b58be:	f7ff bf53 	b.w	b5768 <network_listening>

000b58c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b58c2:	2200      	movs	r2, #0
   b58c4:	6840      	ldr	r0, [r0, #4]
   b58c6:	4611      	mov	r1, r2
   b58c8:	f7ff bf5e 	b.w	b5788 <network_get_listen_timeout>

000b58cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b58cc:	6840      	ldr	r0, [r0, #4]
   b58ce:	2200      	movs	r2, #0
   b58d0:	f7ff bf52 	b.w	b5778 <network_set_listen_timeout>

000b58d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b58d4:	6840      	ldr	r0, [r0, #4]
   b58d6:	2200      	movs	r2, #0
   b58d8:	f081 0101 	eor.w	r1, r1, #1
   b58dc:	f7ff bf3c 	b.w	b5758 <network_listen>

000b58e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b58e0:	2300      	movs	r3, #0
   b58e2:	6840      	ldr	r0, [r0, #4]
   b58e4:	461a      	mov	r2, r3
   b58e6:	4619      	mov	r1, r3
   b58e8:	f7ff bf2e 	b.w	b5748 <network_off>

000b58ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b58ec:	2300      	movs	r3, #0
   b58ee:	6840      	ldr	r0, [r0, #4]
   b58f0:	461a      	mov	r2, r3
   b58f2:	4619      	mov	r1, r3
   b58f4:	f7ff bf20 	b.w	b5738 <network_on>

000b58f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b58f8:	2200      	movs	r2, #0
   b58fa:	6840      	ldr	r0, [r0, #4]
   b58fc:	4611      	mov	r1, r2
   b58fe:	f7ff bf13 	b.w	b5728 <network_ready>

000b5902 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5902:	2200      	movs	r2, #0
   b5904:	6840      	ldr	r0, [r0, #4]
   b5906:	4611      	mov	r1, r2
   b5908:	f7ff befe 	b.w	b5708 <network_connecting>

000b590c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b590c:	6840      	ldr	r0, [r0, #4]
   b590e:	2200      	movs	r2, #0
   b5910:	2102      	movs	r1, #2
   b5912:	f7ff bf01 	b.w	b5718 <network_disconnect>

000b5916 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5916:	2300      	movs	r3, #0
   b5918:	6840      	ldr	r0, [r0, #4]
   b591a:	461a      	mov	r2, r3
   b591c:	f7ff beec 	b.w	b56f8 <network_connect>

000b5920 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5920:	4b02      	ldr	r3, [pc, #8]	; (b592c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5922:	2203      	movs	r2, #3
   b5924:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5926:	4a02      	ldr	r2, [pc, #8]	; (b5930 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5928:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b592a:	4770      	bx	lr
   b592c:	2003e6b0 	.word	0x2003e6b0
   b5930:	000b7be0 	.word	0x000b7be0

000b5934 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5934:	2100      	movs	r1, #0
   b5936:	f7ff be6b 	b.w	b5610 <hal_spi_release>

000b593a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b593a:	2100      	movs	r1, #0
   b593c:	f7ff be60 	b.w	b5600 <hal_spi_acquire>

000b5940 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5940:	b510      	push	{r4, lr}
   b5942:	4604      	mov	r4, r0
   b5944:	4608      	mov	r0, r1
{
    _spi = spi;
   b5946:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5948:	f7ff fe3a 	bl	b55c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b594c:	2300      	movs	r3, #0
   b594e:	6063      	str	r3, [r4, #4]
}
   b5950:	4620      	mov	r0, r4
   b5952:	bd10      	pop	{r4, pc}

000b5954 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5954:	b513      	push	{r0, r1, r4, lr}
   b5956:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5958:	7800      	ldrb	r0, [r0, #0]
   b595a:	f7ff ffee 	bl	b593a <_ZN8SPIClass4lockEv.isra.0>
   b595e:	b958      	cbnz	r0, b5978 <_ZN8SPIClass5beginEv+0x24>
   b5960:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5962:	9001      	str	r0, [sp, #4]
   b5964:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5968:	f7ff fe1a 	bl	b55a0 <hal_spi_begin>
        unlock();
   b596c:	9801      	ldr	r0, [sp, #4]
    }
}
   b596e:	b002      	add	sp, #8
   b5970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5974:	f7ff bfde 	b.w	b5934 <_ZN8SPIClass6unlockEv.isra.0>
   b5978:	b002      	add	sp, #8
   b597a:	bd10      	pop	{r4, pc}

000b597c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b597c:	7800      	ldrb	r0, [r0, #0]
   b597e:	f7ff bfd9 	b.w	b5934 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5984 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5984:	0840      	lsrs	r0, r0, #1
{
   b5986:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5988:	6018      	str	r0, [r3, #0]
   b598a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b598c:	6818      	ldr	r0, [r3, #0]
   b598e:	4288      	cmp	r0, r1
   b5990:	b2e5      	uxtb	r5, r4
   b5992:	d906      	bls.n	b59a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5994:	3401      	adds	r4, #1
   b5996:	2c08      	cmp	r4, #8
   b5998:	d002      	beq.n	b59a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b599a:	0840      	lsrs	r0, r0, #1
   b599c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b599e:	e7f5      	b.n	b598c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b59a0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b59a2:	4b02      	ldr	r3, [pc, #8]	; (b59ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b59a4:	5d5b      	ldrb	r3, [r3, r5]
   b59a6:	7013      	strb	r3, [r2, #0]
}
   b59a8:	bd30      	pop	{r4, r5, pc}
   b59aa:	bf00      	nop
   b59ac:	000b7c14 	.word	0x000b7c14

000b59b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b59b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59b4:	4606      	mov	r6, r0
   b59b6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b59b8:	7800      	ldrb	r0, [r0, #0]
{
   b59ba:	460c      	mov	r4, r1
    CHECK(lock());
   b59bc:	f7ff ffbd 	bl	b593a <_ZN8SPIClass4lockEv.isra.0>
   b59c0:	2800      	cmp	r0, #0
   b59c2:	db1b      	blt.n	b59fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b59c4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b59c6:	2214      	movs	r2, #20
   b59c8:	2100      	movs	r1, #0
   b59ca:	a809      	add	r0, sp, #36	; 0x24
   b59cc:	f001 ff38 	bl	b7840 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b59d0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b59d2:	2200      	movs	r2, #0
   b59d4:	a909      	add	r1, sp, #36	; 0x24
   b59d6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b59d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b59dc:	f7ff fe00 	bl	b55e0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b59e0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b59e4:	b113      	cbz	r3, b59ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b59e6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b59ea:	b155      	cbz	r5, b5a02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b59ec:	2700      	movs	r7, #0
   b59ee:	46b9      	mov	r9, r7
   b59f0:	46b8      	mov	r8, r7
   b59f2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b59f4:	7923      	ldrb	r3, [r4, #4]
   b59f6:	b15d      	cbz	r5, b5a10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b59f8:	b1c3      	cbz	r3, b5a2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b59fa:	2000      	movs	r0, #0
}
   b59fc:	b00f      	add	sp, #60	; 0x3c
   b59fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5a02:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5a06:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5a0a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5a0e:	e7f1      	b.n	b59f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5a10:	2b00      	cmp	r3, #0
   b5a12:	d135      	bne.n	b5a80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5a14:	68a3      	ldr	r3, [r4, #8]
   b5a16:	4543      	cmp	r3, r8
   b5a18:	d108      	bne.n	b5a2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5a1a:	f88d 9020 	strb.w	r9, [sp, #32]
   b5a1e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5a22:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5a26:	89a3      	ldrh	r3, [r4, #12]
   b5a28:	429a      	cmp	r2, r3
   b5a2a:	d0e6      	beq.n	b59fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5a2c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5a2e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5a30:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5a34:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5a36:	ab04      	add	r3, sp, #16
   b5a38:	f10d 020f 	add.w	r2, sp, #15
   b5a3c:	f7ff ffa2 	bl	b5984 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5a40:	7921      	ldrb	r1, [r4, #4]
   b5a42:	b985      	cbnz	r5, b5a66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5a44:	b989      	cbnz	r1, b5a6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5a46:	68a3      	ldr	r3, [r4, #8]
   b5a48:	4543      	cmp	r3, r8
   b5a4a:	d30e      	bcc.n	b5a6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5a4c:	f88d 9020 	strb.w	r9, [sp, #32]
   b5a50:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5a54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5a58:	89a3      	ldrh	r3, [r4, #12]
   b5a5a:	429a      	cmp	r2, r3
   b5a5c:	d105      	bne.n	b5a6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5a5e:	9b04      	ldr	r3, [sp, #16]
   b5a60:	4543      	cmp	r3, r8
   b5a62:	d102      	bne.n	b5a6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5a64:	e7c9      	b.n	b59fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5a66:	2900      	cmp	r1, #0
   b5a68:	d1f9      	bne.n	b5a5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5a6a:	2300      	movs	r3, #0
   b5a6c:	9301      	str	r3, [sp, #4]
   b5a6e:	7b63      	ldrb	r3, [r4, #13]
   b5a70:	9300      	str	r3, [sp, #0]
   b5a72:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5a76:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5a78:	7830      	ldrb	r0, [r6, #0]
   b5a7a:	f7ff fdb9 	bl	b55f0 <hal_spi_set_settings>
   b5a7e:	e7bc      	b.n	b59fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5a80:	e9cd 5500 	strd	r5, r5, [sp]
   b5a84:	462b      	mov	r3, r5
   b5a86:	462a      	mov	r2, r5
   b5a88:	2101      	movs	r1, #1
   b5a8a:	e7f5      	b.n	b5a78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5a8c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5a8c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5a8e:	7800      	ldrb	r0, [r0, #0]
   b5a90:	f7ff fd8e 	bl	b55b0 <hal_spi_transfer>
}
   b5a94:	b2c0      	uxtb	r0, r0
   b5a96:	bd08      	pop	{r3, pc}

000b5a98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5a98:	4b05      	ldr	r3, [pc, #20]	; (b5ab0 <_GLOBAL__sub_I_System+0x18>)
   b5a9a:	2202      	movs	r2, #2
   b5a9c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5a9e:	4b05      	ldr	r3, [pc, #20]	; (b5ab4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5aa0:	4a05      	ldr	r2, [pc, #20]	; (b5ab8 <_GLOBAL__sub_I_System+0x20>)
   b5aa2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5aa4:	2000      	movs	r0, #0
   b5aa6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5aaa:	f7ff bdf9 	b.w	b56a0 <set_system_mode>
   b5aae:	bf00      	nop
   b5ab0:	2003e6c4 	.word	0x2003e6c4
   b5ab4:	2003e6b8 	.word	0x2003e6b8
   b5ab8:	ffff0000 	.word	0xffff0000

000b5abc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5abc:	b510      	push	{r4, lr}
   b5abe:	4604      	mov	r4, r0
{
	free(buffer);
   b5ac0:	6800      	ldr	r0, [r0, #0]
   b5ac2:	f7ff feb1 	bl	b5828 <free>
}
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	bd10      	pop	{r4, pc}

000b5aca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5aca:	b510      	push	{r4, lr}
   b5acc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5ace:	6800      	ldr	r0, [r0, #0]
   b5ad0:	b108      	cbz	r0, b5ad6 <_ZN6String10invalidateEv+0xc>
   b5ad2:	f7ff fea9 	bl	b5828 <free>
	buffer = NULL;
   b5ad6:	2300      	movs	r3, #0
	capacity = len = 0;
   b5ad8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5adc:	6023      	str	r3, [r4, #0]
}
   b5ade:	bd10      	pop	{r4, pc}

000b5ae0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5ae0:	b538      	push	{r3, r4, r5, lr}
   b5ae2:	4604      	mov	r4, r0
   b5ae4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5ae6:	6800      	ldr	r0, [r0, #0]
   b5ae8:	3101      	adds	r1, #1
   b5aea:	f7ff fea5 	bl	b5838 <realloc>
	if (newbuffer) {
   b5aee:	b110      	cbz	r0, b5af6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5af0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5af4:	2001      	movs	r0, #1
	}
	return 0;
}
   b5af6:	bd38      	pop	{r3, r4, r5, pc}

000b5af8 <_ZN6String7reserveEj>:
{
   b5af8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5afa:	6803      	ldr	r3, [r0, #0]
{
   b5afc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5afe:	b123      	cbz	r3, b5b0a <_ZN6String7reserveEj+0x12>
   b5b00:	6843      	ldr	r3, [r0, #4]
   b5b02:	428b      	cmp	r3, r1
   b5b04:	d301      	bcc.n	b5b0a <_ZN6String7reserveEj+0x12>
   b5b06:	2001      	movs	r0, #1
}
   b5b08:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	f7ff ffe8 	bl	b5ae0 <_ZN6String12changeBufferEj>
   b5b10:	2800      	cmp	r0, #0
   b5b12:	d0f9      	beq.n	b5b08 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5b14:	68a3      	ldr	r3, [r4, #8]
   b5b16:	2b00      	cmp	r3, #0
   b5b18:	d1f5      	bne.n	b5b06 <_ZN6String7reserveEj+0xe>
   b5b1a:	6822      	ldr	r2, [r4, #0]
   b5b1c:	7013      	strb	r3, [r2, #0]
   b5b1e:	e7f2      	b.n	b5b06 <_ZN6String7reserveEj+0xe>

000b5b20 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5b22:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5b24:	4611      	mov	r1, r2
   b5b26:	9201      	str	r2, [sp, #4]
{
   b5b28:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5b2a:	f7ff ffe5 	bl	b5af8 <_ZN6String7reserveEj>
   b5b2e:	9a01      	ldr	r2, [sp, #4]
   b5b30:	b928      	cbnz	r0, b5b3e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5b32:	4620      	mov	r0, r4
   b5b34:	f7ff ffc9 	bl	b5aca <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5b38:	4620      	mov	r0, r4
   b5b3a:	b003      	add	sp, #12
   b5b3c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5b3e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5b40:	4629      	mov	r1, r5
   b5b42:	6820      	ldr	r0, [r4, #0]
   b5b44:	f001 fe6e 	bl	b7824 <memcpy>
	buffer[len] = 0;
   b5b48:	6822      	ldr	r2, [r4, #0]
   b5b4a:	68a3      	ldr	r3, [r4, #8]
   b5b4c:	2100      	movs	r1, #0
   b5b4e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5b50:	e7f2      	b.n	b5b38 <_ZN6String4copyEPKcj+0x18>

000b5b52 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5b52:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5b54:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5b56:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5b5a:	4604      	mov	r4, r0
	len = 0;
   b5b5c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5b5e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5b60:	b141      	cbz	r1, b5b74 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5b62:	4608      	mov	r0, r1
   b5b64:	9101      	str	r1, [sp, #4]
   b5b66:	f001 feb3 	bl	b78d0 <strlen>
   b5b6a:	9901      	ldr	r1, [sp, #4]
   b5b6c:	4602      	mov	r2, r0
   b5b6e:	4620      	mov	r0, r4
   b5b70:	f7ff ffd6 	bl	b5b20 <_ZN6String4copyEPKcj>
}
   b5b74:	4620      	mov	r0, r4
   b5b76:	b002      	add	sp, #8
   b5b78:	bd10      	pop	{r4, pc}
	...

000b5b7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5b7c:	4802      	ldr	r0, [pc, #8]	; (b5b88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5b7e:	2300      	movs	r3, #0
   b5b80:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5b82:	f7ff bc65 	b.w	b5450 <os_mutex_recursive_create>
   b5b86:	bf00      	nop
   b5b88:	2003e6c8 	.word	0x2003e6c8

000b5b8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b8e:	4606      	mov	r6, r0
   b5b90:	460d      	mov	r5, r1
  size_t n = 0;
   b5b92:	188f      	adds	r7, r1, r2
   b5b94:	2400      	movs	r4, #0
  while (size--) {
   b5b96:	42bd      	cmp	r5, r7
   b5b98:	d00c      	beq.n	b5bb4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5b9a:	6833      	ldr	r3, [r6, #0]
   b5b9c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ba0:	689b      	ldr	r3, [r3, #8]
   b5ba2:	4630      	mov	r0, r6
   b5ba4:	4798      	blx	r3
     if (chunk>=0)
   b5ba6:	1e03      	subs	r3, r0, #0
   b5ba8:	db01      	blt.n	b5bae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5baa:	441c      	add	r4, r3
  while (size--) {
   b5bac:	e7f3      	b.n	b5b96 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5bae:	2c00      	cmp	r4, #0
   b5bb0:	bf08      	it	eq
   b5bb2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5bb4:	4620      	mov	r0, r4
   b5bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bb8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5bb8:	b513      	push	{r0, r1, r4, lr}
   b5bba:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5bbc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5bbe:	b159      	cbz	r1, b5bd8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5bc0:	9101      	str	r1, [sp, #4]
   b5bc2:	f001 fe85 	bl	b78d0 <strlen>
   b5bc6:	6823      	ldr	r3, [r4, #0]
   b5bc8:	9901      	ldr	r1, [sp, #4]
   b5bca:	68db      	ldr	r3, [r3, #12]
   b5bcc:	4602      	mov	r2, r0
   b5bce:	4620      	mov	r0, r4
    }
   b5bd0:	b002      	add	sp, #8
   b5bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5bd6:	4718      	bx	r3
    }
   b5bd8:	b002      	add	sp, #8
   b5bda:	bd10      	pop	{r4, pc}

000b5bdc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5bdc:	b508      	push	{r3, lr}
  return write(str);
   b5bde:	f7ff ffeb 	bl	b5bb8 <_ZN5Print5writeEPKc>
}
   b5be2:	bd08      	pop	{r3, pc}

000b5be4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5be4:	6803      	ldr	r3, [r0, #0]
   b5be6:	689b      	ldr	r3, [r3, #8]
   b5be8:	4718      	bx	r3

000b5bea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5bea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5bec:	210d      	movs	r1, #13
{
   b5bee:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5bf0:	f7ff fff8 	bl	b5be4 <_ZN5Print5printEc>
  n += print('\n');
   b5bf4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5bf6:	4604      	mov	r4, r0
  n += print('\n');
   b5bf8:	4628      	mov	r0, r5
   b5bfa:	f7ff fff3 	bl	b5be4 <_ZN5Print5printEc>
  return n;
}
   b5bfe:	4420      	add	r0, r4
   b5c00:	bd38      	pop	{r3, r4, r5, pc}

000b5c02 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5c02:	b538      	push	{r3, r4, r5, lr}
   b5c04:	4605      	mov	r5, r0
  return write(str);
   b5c06:	f7ff ffd7 	bl	b5bb8 <_ZN5Print5writeEPKc>
   b5c0a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5c0c:	4628      	mov	r0, r5
   b5c0e:	f7ff ffec 	bl	b5bea <_ZN5Print7printlnEv>
  return n;
}
   b5c12:	4420      	add	r0, r4
   b5c14:	bd38      	pop	{r3, r4, r5, pc}

000b5c16 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5c16:	b530      	push	{r4, r5, lr}
   b5c18:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5c1a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5c1c:	2a01      	cmp	r2, #1
  *str = '\0';
   b5c1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5c22:	bf98      	it	ls
   b5c24:	220a      	movls	r2, #10
   b5c26:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5c28:	460d      	mov	r5, r1
   b5c2a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5c2e:	fb01 5312 	mls	r3, r1, r2, r5
   b5c32:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c36:	2b09      	cmp	r3, #9
   b5c38:	bf94      	ite	ls
   b5c3a:	3330      	addls	r3, #48	; 0x30
   b5c3c:	3337      	addhi	r3, #55	; 0x37
   b5c3e:	b2db      	uxtb	r3, r3
  } while(n);
   b5c40:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c42:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5c46:	d9ef      	bls.n	b5c28 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5c48:	4621      	mov	r1, r4
   b5c4a:	f7ff ffb5 	bl	b5bb8 <_ZN5Print5writeEPKc>
}
   b5c4e:	b00b      	add	sp, #44	; 0x2c
   b5c50:	bd30      	pop	{r4, r5, pc}

000b5c52 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c56:	b086      	sub	sp, #24
   b5c58:	af00      	add	r7, sp, #0
   b5c5a:	4605      	mov	r5, r0
   b5c5c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5c5e:	1d38      	adds	r0, r7, #4
   b5c60:	2114      	movs	r1, #20
{
   b5c62:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5c64:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5c66:	f7ff fdff 	bl	b5868 <vsnprintf>

    if (n<bufsize)
   b5c6a:	2813      	cmp	r0, #19
   b5c6c:	d80e      	bhi.n	b5c8c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5c6e:	1d39      	adds	r1, r7, #4
   b5c70:	4628      	mov	r0, r5
   b5c72:	f7ff ffa1 	bl	b5bb8 <_ZN5Print5writeEPKc>
   b5c76:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5c78:	b11e      	cbz	r6, b5c82 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5c7a:	4628      	mov	r0, r5
   b5c7c:	f7ff ffb5 	bl	b5bea <_ZN5Print7printlnEv>
   b5c80:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5c82:	4620      	mov	r0, r4
   b5c84:	3718      	adds	r7, #24
   b5c86:	46bd      	mov	sp, r7
   b5c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5c8c:	f100 0308 	add.w	r3, r0, #8
   b5c90:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5c94:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5c96:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5c9a:	4622      	mov	r2, r4
   b5c9c:	1c41      	adds	r1, r0, #1
   b5c9e:	683b      	ldr	r3, [r7, #0]
   b5ca0:	4668      	mov	r0, sp
   b5ca2:	f7ff fde1 	bl	b5868 <vsnprintf>
  return write(str);
   b5ca6:	4669      	mov	r1, sp
   b5ca8:	4628      	mov	r0, r5
   b5caa:	f7ff ff85 	bl	b5bb8 <_ZN5Print5writeEPKc>
   b5cae:	4604      	mov	r4, r0
   b5cb0:	46c5      	mov	sp, r8
   b5cb2:	e7e1      	b.n	b5c78 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5cb4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5cb4:	4b01      	ldr	r3, [pc, #4]	; (b5cbc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5cb6:	4a02      	ldr	r2, [pc, #8]	; (b5cc0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5cb8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5cba:	4770      	bx	lr
   b5cbc:	2003e6cc 	.word	0x2003e6cc
   b5cc0:	000b7c1c 	.word	0x000b7c1c

000b5cc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5cc4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5cc6:	2000      	movs	r0, #0
   b5cc8:	f7ff fd96 	bl	b57f8 <spark_sync_time_pending>
   b5ccc:	b128      	cbz	r0, b5cda <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5cce:	f7ff fd83 	bl	b57d8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5cd2:	f080 0001 	eor.w	r0, r0, #1
   b5cd6:	b2c0      	uxtb	r0, r0
    }
   b5cd8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5cda:	2001      	movs	r0, #1
   b5cdc:	e7fc      	b.n	b5cd8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5ce0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5ce0:	b530      	push	{r4, r5, lr}
   b5ce2:	b093      	sub	sp, #76	; 0x4c
   b5ce4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5ce8:	4b19      	ldr	r3, [pc, #100]	; (b5d50 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5cea:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5cec:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5cf0:	9b01      	ldr	r3, [sp, #4]
   b5cf2:	1852      	adds	r2, r2, r1
   b5cf4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5cf8:	4816      	ldr	r0, [pc, #88]	; (b5d54 <_ZN9TimeClass7timeStrEx+0x74>)
   b5cfa:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5cfe:	1852      	adds	r2, r2, r1
   b5d00:	eb43 0300 	adc.w	r3, r3, r0
   b5d04:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5d08:	2224      	movs	r2, #36	; 0x24
   b5d0a:	eb0d 0002 	add.w	r0, sp, r2
   b5d0e:	2100      	movs	r1, #0
   b5d10:	f001 fd96 	bl	b7840 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5d14:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5d16:	a909      	add	r1, sp, #36	; 0x24
   b5d18:	4668      	mov	r0, sp
   b5d1a:	f7ff fdc5 	bl	b58a8 <localtime_r>
    char ascstr[26] = {};
   b5d1e:	2216      	movs	r2, #22
   b5d20:	4629      	mov	r1, r5
   b5d22:	a803      	add	r0, sp, #12
   b5d24:	9502      	str	r5, [sp, #8]
   b5d26:	f001 fd8b 	bl	b7840 <memset>
    asctime_r(&calendar_time, ascstr);
   b5d2a:	a902      	add	r1, sp, #8
   b5d2c:	a809      	add	r0, sp, #36	; 0x24
   b5d2e:	f001 fd45 	bl	b77bc <asctime_r>
    int len = strlen(ascstr);
   b5d32:	a802      	add	r0, sp, #8
   b5d34:	f001 fdcc 	bl	b78d0 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5d38:	ab12      	add	r3, sp, #72	; 0x48
   b5d3a:	4418      	add	r0, r3
    return String(ascstr);
   b5d3c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5d3e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5d42:	4620      	mov	r0, r4
   b5d44:	f7ff ff05 	bl	b5b52 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5d48:	4620      	mov	r0, r4
   b5d4a:	b013      	add	sp, #76	; 0x4c
   b5d4c:	bd30      	pop	{r4, r5, pc}
   b5d4e:	bf00      	nop
   b5d50:	2003e6e0 	.word	0x2003e6e0
   b5d54:	2003e6d8 	.word	0x2003e6d8

000b5d58 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b5d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5d5c:	b0a4      	sub	sp, #144	; 0x90
   b5d5e:	4607      	mov	r7, r0
   b5d60:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5d62:	a814      	add	r0, sp, #80	; 0x50
{
   b5d64:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5d66:	223f      	movs	r2, #63	; 0x3f
{
   b5d68:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5d6a:	f001 fdb9 	bl	b78e0 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5d6e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5d70:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5d72:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5d76:	f001 fdab 	bl	b78d0 <strlen>
   b5d7a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b5d7c:	bb4c      	cbnz	r4, b5dd2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b5d7e:	4929      	ldr	r1, [pc, #164]	; (b5e24 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b5d80:	a803      	add	r0, sp, #12
   b5d82:	f001 fd9d 	bl	b78c0 <strcpy>
   b5d86:	ac14      	add	r4, sp, #80	; 0x50
{
   b5d88:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b5d8a:	f105 39ff 	add.w	r9, r5, #4294967295
   b5d8e:	45b1      	cmp	r9, r6
   b5d90:	d934      	bls.n	b5dfc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b5d92:	7823      	ldrb	r3, [r4, #0]
   b5d94:	2b25      	cmp	r3, #37	; 0x25
   b5d96:	f106 0a01 	add.w	sl, r6, #1
   b5d9a:	d117      	bne.n	b5dcc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b5d9c:	7863      	ldrb	r3, [r4, #1]
   b5d9e:	2b7a      	cmp	r3, #122	; 0x7a
   b5da0:	d114      	bne.n	b5dcc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b5da2:	a803      	add	r0, sp, #12
   b5da4:	f001 fd94 	bl	b78d0 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5da8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b5daa:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5dac:	1830      	adds	r0, r6, r0
   b5dae:	4418      	add	r0, r3
   b5db0:	eba9 0206 	sub.w	r2, r9, r6
   b5db4:	1ca1      	adds	r1, r4, #2
   b5db6:	f001 fd35 	bl	b7824 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b5dba:	462a      	mov	r2, r5
   b5dbc:	a903      	add	r1, sp, #12
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	f001 fd30 	bl	b7824 <memcpy>
            len = strlen(format_str);
   b5dc4:	a814      	add	r0, sp, #80	; 0x50
   b5dc6:	f001 fd83 	bl	b78d0 <strlen>
   b5dca:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b5dcc:	3401      	adds	r4, #1
   b5dce:	4656      	mov	r6, sl
   b5dd0:	e7db      	b.n	b5d8a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b5dd2:	233c      	movs	r3, #60	; 0x3c
   b5dd4:	fb94 f2f3 	sdiv	r2, r4, r3
   b5dd8:	2a00      	cmp	r2, #0
   b5dda:	bfb8      	it	lt
   b5ddc:	4252      	neglt	r2, r2
   b5dde:	fbb2 f1f3 	udiv	r1, r2, r3
   b5de2:	fb03 2211 	mls	r2, r3, r1, r2
   b5de6:	9200      	str	r2, [sp, #0]
   b5de8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b5dec:	4a0e      	ldr	r2, [pc, #56]	; (b5e28 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b5dee:	fb94 f3f3 	sdiv	r3, r4, r3
   b5df2:	2110      	movs	r1, #16
   b5df4:	a803      	add	r0, sp, #12
   b5df6:	f7ff fd2f 	bl	b5858 <snprintf>
   b5dfa:	e7c4      	b.n	b5d86 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b5dfc:	2100      	movs	r1, #0
   b5dfe:	222e      	movs	r2, #46	; 0x2e
   b5e00:	a808      	add	r0, sp, #32
   b5e02:	9107      	str	r1, [sp, #28]
   b5e04:	f001 fd1c 	bl	b7840 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b5e08:	4643      	mov	r3, r8
   b5e0a:	aa14      	add	r2, sp, #80	; 0x50
   b5e0c:	2132      	movs	r1, #50	; 0x32
   b5e0e:	a807      	add	r0, sp, #28
   b5e10:	f7ff fd42 	bl	b5898 <strftime>
    return String(buf);
   b5e14:	a907      	add	r1, sp, #28
   b5e16:	4638      	mov	r0, r7
   b5e18:	f7ff fe9b 	bl	b5b52 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5e1c:	4638      	mov	r0, r7
   b5e1e:	b024      	add	sp, #144	; 0x90
   b5e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5e24:	000b7c20 	.word	0x000b7c20
   b5e28:	000b7c22 	.word	0x000b7c22

000b5e2c <_ZN9TimeClass6formatExPKc>:
{
   b5e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e2e:	b08d      	sub	sp, #52	; 0x34
   b5e30:	e9cd 2300 	strd	r2, r3, [sp]
   b5e34:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b5e36:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b5e38:	b915      	cbnz	r5, b5e40 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b5e3a:	4b19      	ldr	r3, [pc, #100]	; (b5ea0 <_ZN9TimeClass6formatExPKc+0x74>)
   b5e3c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b5e3e:	b12d      	cbz	r5, b5e4c <_ZN9TimeClass6formatExPKc+0x20>
   b5e40:	4b18      	ldr	r3, [pc, #96]	; (b5ea4 <_ZN9TimeClass6formatExPKc+0x78>)
   b5e42:	4628      	mov	r0, r5
   b5e44:	6819      	ldr	r1, [r3, #0]
   b5e46:	f001 fd31 	bl	b78ac <strcmp>
   b5e4a:	b938      	cbnz	r0, b5e5c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b5e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
   b5e50:	4620      	mov	r0, r4
   b5e52:	f7ff ff45 	bl	b5ce0 <_ZN9TimeClass7timeStrEx>
}
   b5e56:	4620      	mov	r0, r4
   b5e58:	b00d      	add	sp, #52	; 0x34
   b5e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b5e5c:	4e12      	ldr	r6, [pc, #72]	; (b5ea8 <_ZN9TimeClass6formatExPKc+0x7c>)
   b5e5e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b5e60:	4f12      	ldr	r7, [pc, #72]	; (b5eac <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b5e62:	e9d6 3200 	ldrd	r3, r2, [r6]
   b5e66:	185b      	adds	r3, r3, r1
   b5e68:	9901      	ldr	r1, [sp, #4]
   b5e6a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b5e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5e72:	181b      	adds	r3, r3, r0
   b5e74:	eb42 0201 	adc.w	r2, r2, r1
   b5e78:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b5e7c:	2100      	movs	r1, #0
   b5e7e:	2224      	movs	r2, #36	; 0x24
   b5e80:	a803      	add	r0, sp, #12
   b5e82:	f001 fcdd 	bl	b7840 <memset>
    localtime_r(&t, &calendar_time);
   b5e86:	a903      	add	r1, sp, #12
   b5e88:	4668      	mov	r0, sp
   b5e8a:	f7ff fd0d 	bl	b58a8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b5e8e:	6832      	ldr	r2, [r6, #0]
   b5e90:	683b      	ldr	r3, [r7, #0]
   b5e92:	a903      	add	r1, sp, #12
   b5e94:	4413      	add	r3, r2
   b5e96:	4620      	mov	r0, r4
   b5e98:	462a      	mov	r2, r5
   b5e9a:	f7ff ff5d 	bl	b5d58 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b5e9e:	e7da      	b.n	b5e56 <_ZN9TimeClass6formatExPKc+0x2a>
   b5ea0:	2003e6d4 	.word	0x2003e6d4
   b5ea4:	2003e5a0 	.word	0x2003e5a0
   b5ea8:	2003e6e0 	.word	0x2003e6e0
   b5eac:	2003e6d8 	.word	0x2003e6d8

000b5eb0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b5eb0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5eb2:	2000      	movs	r0, #0
   b5eb4:	f7ff fabc 	bl	b5430 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5eb8:	4604      	mov	r4, r0
   b5eba:	b9a0      	cbnz	r0, b5ee6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5ebc:	f7ff fbe8 	bl	b5690 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5ec0:	2801      	cmp	r0, #1
   b5ec2:	d110      	bne.n	b5ee6 <_ZN9TimeClass7isValidEv+0x36>
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	f7ff fbfb 	bl	b56c0 <system_thread_get_state>
   b5eca:	b960      	cbnz	r0, b5ee6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5ecc:	f7ff fefa 	bl	b5cc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5ed0:	b910      	cbnz	r0, b5ed8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5ed2:	f7ff fc71 	bl	b57b8 <spark_process>
        while (_while() && !_condition()) {
   b5ed6:	e7f9      	b.n	b5ecc <_ZN9TimeClass7isValidEv+0x1c>
   b5ed8:	f7ff fef4 	bl	b5cc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5ee0:	2000      	movs	r0, #0
   b5ee2:	f7ff baa5 	b.w	b5430 <hal_rtc_time_is_valid>
}
   b5ee6:	4620      	mov	r0, r4
   b5ee8:	bd10      	pop	{r4, pc}

000b5eea <_ZN9TimeClass3nowEv>:
{
   b5eea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5eec:	f7ff ffe0 	bl	b5eb0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5ef0:	2210      	movs	r2, #16
   b5ef2:	2100      	movs	r1, #0
   b5ef4:	4668      	mov	r0, sp
   b5ef6:	f001 fca3 	bl	b7840 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5efa:	2100      	movs	r1, #0
   b5efc:	4668      	mov	r0, sp
   b5efe:	f7ff fa9f 	bl	b5440 <hal_rtc_get_time>
}
   b5f02:	9800      	ldr	r0, [sp, #0]
   b5f04:	b005      	add	sp, #20
   b5f06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5f0c:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5f0e:	681a      	ldr	r2, [r3, #0]
   b5f10:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5f12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5f14:	4770      	bx	lr
   b5f16:	bf00      	nop
   b5f18:	2003e5a0 	.word	0x2003e5a0
   b5f1c:	2003e6d4 	.word	0x2003e6d4

000b5f20 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5f20:	2100      	movs	r1, #0
   b5f22:	f7ff bbc5 	b.w	b56b0 <system_delay_ms>
	...

000b5f28 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5f28:	4b01      	ldr	r3, [pc, #4]	; (b5f30 <_GLOBAL__sub_I_RGB+0x8>)
   b5f2a:	2200      	movs	r2, #0
   b5f2c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5f2e:	4770      	bx	lr
   b5f30:	2003e6e8 	.word	0x2003e6e8

000b5f34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5f34:	4b01      	ldr	r3, [pc, #4]	; (b5f3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5f36:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5f38:	4770      	bx	lr
   b5f3a:	bf00      	nop
   b5f3c:	2003e5a8 	.word	0x2003e5a8

000b5f40 <serialEventRun>:
{
   b5f40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5f42:	4b0b      	ldr	r3, [pc, #44]	; (b5f70 <serialEventRun+0x30>)
   b5f44:	b143      	cbz	r3, b5f58 <serialEventRun+0x18>
   b5f46:	f000 f967 	bl	b6218 <_Z16_fetch_usbserialv>
   b5f4a:	6803      	ldr	r3, [r0, #0]
   b5f4c:	691b      	ldr	r3, [r3, #16]
   b5f4e:	4798      	blx	r3
   b5f50:	2800      	cmp	r0, #0
   b5f52:	dd01      	ble.n	b5f58 <serialEventRun+0x18>
        serialEvent();
   b5f54:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5f58:	4b06      	ldr	r3, [pc, #24]	; (b5f74 <serialEventRun+0x34>)
   b5f5a:	b143      	cbz	r3, b5f6e <serialEventRun+0x2e>
   b5f5c:	f000 fce6 	bl	b692c <_Z22__fetch_global_Serial1v>
   b5f60:	6803      	ldr	r3, [r0, #0]
   b5f62:	691b      	ldr	r3, [r3, #16]
   b5f64:	4798      	blx	r3
   b5f66:	2800      	cmp	r0, #0
   b5f68:	dd01      	ble.n	b5f6e <serialEventRun+0x2e>
        serialEvent1();
   b5f6a:	f3af 8000 	nop.w
}
   b5f6e:	bd08      	pop	{r3, pc}
	...

000b5f78 <_post_loop>:
{
   b5f78:	b508      	push	{r3, lr}
	serialEventRun();
   b5f7a:	f7ff ffe1 	bl	b5f40 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5f7e:	f7ff fa4f 	bl	b5420 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5f82:	4b01      	ldr	r3, [pc, #4]	; (b5f88 <_post_loop+0x10>)
   b5f84:	6018      	str	r0, [r3, #0]
}
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	2003e740 	.word	0x2003e740

000b5f8c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f8c:	4805      	ldr	r0, [pc, #20]	; (b5fa4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5f8e:	4a06      	ldr	r2, [pc, #24]	; (b5fa8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5f90:	4906      	ldr	r1, [pc, #24]	; (b5fac <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5f92:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f94:	1a12      	subs	r2, r2, r0
   b5f96:	f001 fc45 	bl	b7824 <memcpy>
    __backup_sram_signature = signature;
   b5f9a:	4b05      	ldr	r3, [pc, #20]	; (b5fb0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5f9c:	4a05      	ldr	r2, [pc, #20]	; (b5fb4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5f9e:	601a      	str	r2, [r3, #0]
}
   b5fa0:	bd08      	pop	{r3, pc}
   b5fa2:	bf00      	nop
   b5fa4:	2003f400 	.word	0x2003f400
   b5fa8:	2003f404 	.word	0x2003f404
   b5fac:	000b7fac 	.word	0x000b7fac
   b5fb0:	2003f400 	.word	0x2003f400
   b5fb4:	9a271c1e 	.word	0x9a271c1e

000b5fb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5fb8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5fba:	2300      	movs	r3, #0
   b5fbc:	9300      	str	r3, [sp, #0]
   b5fbe:	461a      	mov	r2, r3
   b5fc0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5fc4:	f7ff fb8e 	bl	b56e4 <system_ctrl_set_result>
}
   b5fc8:	b003      	add	sp, #12
   b5fca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5fd0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5fd0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5fd2:	8843      	ldrh	r3, [r0, #2]
   b5fd4:	2b0a      	cmp	r3, #10
   b5fd6:	d008      	beq.n	b5fea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5fd8:	2b50      	cmp	r3, #80	; 0x50
   b5fda:	d10b      	bne.n	b5ff4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5fdc:	4b09      	ldr	r3, [pc, #36]	; (b6004 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5fde:	681b      	ldr	r3, [r3, #0]
   b5fe0:	b14b      	cbz	r3, b5ff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5fe2:	b003      	add	sp, #12
   b5fe4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5fe8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5fea:	f7ff ffe5 	bl	b5fb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5fee:	b003      	add	sp, #12
   b5ff0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5ff4:	2300      	movs	r3, #0
   b5ff6:	9300      	str	r3, [sp, #0]
   b5ff8:	461a      	mov	r2, r3
   b5ffa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5ffe:	f7ff fb71 	bl	b56e4 <system_ctrl_set_result>
}
   b6002:	e7f4      	b.n	b5fee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6004:	2003e6fc 	.word	0x2003e6fc

000b6008 <module_user_init_hook>:
{
   b6008:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b600a:	4812      	ldr	r0, [pc, #72]	; (b6054 <module_user_init_hook+0x4c>)
   b600c:	2100      	movs	r1, #0
   b600e:	f7ff fc3b 	bl	b5888 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6012:	4b11      	ldr	r3, [pc, #68]	; (b6058 <module_user_init_hook+0x50>)
   b6014:	681a      	ldr	r2, [r3, #0]
   b6016:	4b11      	ldr	r3, [pc, #68]	; (b605c <module_user_init_hook+0x54>)
   b6018:	429a      	cmp	r2, r3
   b601a:	4b11      	ldr	r3, [pc, #68]	; (b6060 <module_user_init_hook+0x58>)
   b601c:	bf0c      	ite	eq
   b601e:	2201      	moveq	r2, #1
   b6020:	2200      	movne	r2, #0
   b6022:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6024:	d001      	beq.n	b602a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6026:	f7ff ffb1 	bl	b5f8c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b602a:	f7ff f9f1 	bl	b5410 <HAL_RNG_GetRandomNumber>
   b602e:	4604      	mov	r4, r0
    srand(seed);
   b6030:	f001 fc0e 	bl	b7850 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6034:	4b0b      	ldr	r3, [pc, #44]	; (b6064 <module_user_init_hook+0x5c>)
   b6036:	b113      	cbz	r3, b603e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6038:	4620      	mov	r0, r4
   b603a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b603e:	2100      	movs	r1, #0
   b6040:	4808      	ldr	r0, [pc, #32]	; (b6064 <module_user_init_hook+0x5c>)
   b6042:	f7ff fbe1 	bl	b5808 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b604a:	4807      	ldr	r0, [pc, #28]	; (b6068 <module_user_init_hook+0x60>)
   b604c:	2100      	movs	r1, #0
   b604e:	f7ff bb3f 	b.w	b56d0 <system_ctrl_set_app_request_handler>
   b6052:	bf00      	nop
   b6054:	000b5f35 	.word	0x000b5f35
   b6058:	2003f400 	.word	0x2003f400
   b605c:	9a271c1e 	.word	0x9a271c1e
   b6060:	2003e6f8 	.word	0x2003e6f8
   b6064:	00000000 	.word	0x00000000
   b6068:	000b5fd1 	.word	0x000b5fd1

000b606c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b606c:	4770      	bx	lr

000b606e <_ZN9IPAddressD0Ev>:
   b606e:	b510      	push	{r4, lr}
   b6070:	2118      	movs	r1, #24
   b6072:	4604      	mov	r4, r0
   b6074:	f7fe f813 	bl	b409e <_ZdlPvj>
   b6078:	4620      	mov	r0, r4
   b607a:	bd10      	pop	{r4, pc}

000b607c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b607c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b607e:	7d03      	ldrb	r3, [r0, #20]
   b6080:	2b06      	cmp	r3, #6
{
   b6082:	b08d      	sub	sp, #52	; 0x34
   b6084:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6086:	f100 0704 	add.w	r7, r0, #4
   b608a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b608e:	d012      	beq.n	b60b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6090:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6094:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6098:	220a      	movs	r2, #10
   b609a:	4630      	mov	r0, r6
   b609c:	f7ff fdbb 	bl	b5c16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b60a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b60a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b60a4:	d019      	beq.n	b60da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b60a6:	2c00      	cmp	r4, #0
   b60a8:	d0f4      	beq.n	b6094 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b60aa:	212e      	movs	r1, #46	; 0x2e
   b60ac:	4630      	mov	r0, r6
   b60ae:	f7ff fd99 	bl	b5be4 <_ZN5Print5printEc>
   b60b2:	4404      	add	r4, r0
   b60b4:	e7ee      	b.n	b6094 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b60b6:	232f      	movs	r3, #47	; 0x2f
   b60b8:	466a      	mov	r2, sp
   b60ba:	4639      	mov	r1, r7
   b60bc:	200a      	movs	r0, #10
		buf[0] = 0;
   b60be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b60c2:	f7ff f9cd 	bl	b5460 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b60c6:	4668      	mov	r0, sp
   b60c8:	f001 fc02 	bl	b78d0 <strlen>
   b60cc:	6833      	ldr	r3, [r6, #0]
   b60ce:	4602      	mov	r2, r0
   b60d0:	68db      	ldr	r3, [r3, #12]
   b60d2:	4669      	mov	r1, sp
   b60d4:	4630      	mov	r0, r6
   b60d6:	4798      	blx	r3
   b60d8:	4604      	mov	r4, r0
    }
    return n;
}
   b60da:	4620      	mov	r0, r4
   b60dc:	b00d      	add	sp, #52	; 0x34
   b60de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b60e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b60e0:	b510      	push	{r4, lr}
   b60e2:	4b05      	ldr	r3, [pc, #20]	; (b60f8 <_ZN9IPAddressC1Ev+0x18>)
   b60e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b60e6:	2211      	movs	r2, #17
   b60e8:	f840 3b04 	str.w	r3, [r0], #4
   b60ec:	2100      	movs	r1, #0
   b60ee:	f001 fba7 	bl	b7840 <memset>
}
   b60f2:	4620      	mov	r0, r4
   b60f4:	bd10      	pop	{r4, pc}
   b60f6:	bf00      	nop
   b60f8:	000b7c54 	.word	0x000b7c54

000b60fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b60fc:	4603      	mov	r3, r0
   b60fe:	4a07      	ldr	r2, [pc, #28]	; (b611c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6100:	b510      	push	{r4, lr}
   b6102:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6106:	f101 0210 	add.w	r2, r1, #16
   b610a:	f851 4b04 	ldr.w	r4, [r1], #4
   b610e:	f843 4b04 	str.w	r4, [r3], #4
   b6112:	4291      	cmp	r1, r2
   b6114:	d1f9      	bne.n	b610a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6116:	780a      	ldrb	r2, [r1, #0]
   b6118:	701a      	strb	r2, [r3, #0]
}
   b611a:	bd10      	pop	{r4, pc}
   b611c:	000b7c54 	.word	0x000b7c54

000b6120 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6120:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6122:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6126:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b612a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b612e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6132:	2304      	movs	r3, #4
   b6134:	6041      	str	r1, [r0, #4]
   b6136:	7503      	strb	r3, [r0, #20]
}
   b6138:	bd10      	pop	{r4, pc}
	...

000b613c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b613c:	b507      	push	{r0, r1, r2, lr}
   b613e:	4b06      	ldr	r3, [pc, #24]	; (b6158 <_ZN9IPAddressC1EPKh+0x1c>)
   b6140:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6142:	78cb      	ldrb	r3, [r1, #3]
   b6144:	9300      	str	r3, [sp, #0]
   b6146:	788b      	ldrb	r3, [r1, #2]
   b6148:	784a      	ldrb	r2, [r1, #1]
   b614a:	7809      	ldrb	r1, [r1, #0]
   b614c:	f7ff ffe8 	bl	b6120 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6150:	b003      	add	sp, #12
   b6152:	f85d fb04 	ldr.w	pc, [sp], #4
   b6156:	bf00      	nop
   b6158:	000b7c54 	.word	0x000b7c54

000b615c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b615c:	7441      	strb	r1, [r0, #17]
}
   b615e:	4770      	bx	lr

000b6160 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6160:	4770      	bx	lr

000b6162 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6162:	4770      	bx	lr

000b6164 <_ZN9USBSerial4readEv>:
{
   b6164:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6166:	2100      	movs	r1, #0
   b6168:	7c00      	ldrb	r0, [r0, #16]
   b616a:	f7ff fa79 	bl	b5660 <HAL_USB_USART_Receive_Data>
}
   b616e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6172:	bd08      	pop	{r3, pc}

000b6174 <_ZN9USBSerial4peekEv>:
{
   b6174:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6176:	2101      	movs	r1, #1
   b6178:	7c00      	ldrb	r0, [r0, #16]
   b617a:	f7ff fa71 	bl	b5660 <HAL_USB_USART_Receive_Data>
}
   b617e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6182:	bd08      	pop	{r3, pc}

000b6184 <_ZN9USBSerial17availableForWriteEv>:
{
   b6184:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6186:	7c00      	ldrb	r0, [r0, #16]
   b6188:	f7ff fa62 	bl	b5650 <HAL_USB_USART_Available_Data_For_Write>
}
   b618c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6190:	bd08      	pop	{r3, pc}

000b6192 <_ZN9USBSerial9availableEv>:
{
   b6192:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6194:	7c00      	ldrb	r0, [r0, #16]
   b6196:	f7ff fa53 	bl	b5640 <HAL_USB_USART_Available_Data>
}
   b619a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b619e:	bd08      	pop	{r3, pc}

000b61a0 <_ZN9USBSerial5writeEh>:
{
   b61a0:	b513      	push	{r0, r1, r4, lr}
   b61a2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61a4:	7c00      	ldrb	r0, [r0, #16]
{
   b61a6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61a8:	f7ff fa52 	bl	b5650 <HAL_USB_USART_Available_Data_For_Write>
   b61ac:	2800      	cmp	r0, #0
   b61ae:	9901      	ldr	r1, [sp, #4]
   b61b0:	dc01      	bgt.n	b61b6 <_ZN9USBSerial5writeEh+0x16>
   b61b2:	7c60      	ldrb	r0, [r4, #17]
   b61b4:	b120      	cbz	r0, b61c0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b61b6:	7c20      	ldrb	r0, [r4, #16]
   b61b8:	f7ff fa5a 	bl	b5670 <HAL_USB_USART_Send_Data>
   b61bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b61c0:	b002      	add	sp, #8
   b61c2:	bd10      	pop	{r4, pc}

000b61c4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b61c4:	7c00      	ldrb	r0, [r0, #16]
   b61c6:	f7ff ba5b 	b.w	b5680 <HAL_USB_USART_Flush_Data>

000b61ca <_ZN9USBSerialD0Ev>:
   b61ca:	b510      	push	{r4, lr}
   b61cc:	2114      	movs	r1, #20
   b61ce:	4604      	mov	r4, r0
   b61d0:	f7fd ff65 	bl	b409e <_ZdlPvj>
   b61d4:	4620      	mov	r0, r4
   b61d6:	bd10      	pop	{r4, pc}

000b61d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b61d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b61da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61de:	4604      	mov	r4, r0
   b61e0:	4608      	mov	r0, r1
   b61e2:	2100      	movs	r1, #0
   b61e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b61e8:	4b04      	ldr	r3, [pc, #16]	; (b61fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b61ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61ec:	2301      	movs	r3, #1
  _serial = serial;
   b61ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61f0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b61f2:	4611      	mov	r1, r2
   b61f4:	f7ff fa14 	bl	b5620 <HAL_USB_USART_Init>
}
   b61f8:	4620      	mov	r0, r4
   b61fa:	bd10      	pop	{r4, pc}
   b61fc:	000b7c68 	.word	0x000b7c68

000b6200 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6200:	7c00      	ldrb	r0, [r0, #16]
   b6202:	2200      	movs	r2, #0
   b6204:	f7ff ba14 	b.w	b5630 <HAL_USB_USART_Begin>

000b6208 <_Z19acquireSerialBufferv>:
{
   b6208:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b620a:	2214      	movs	r2, #20
{
   b620c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b620e:	2100      	movs	r1, #0
   b6210:	f001 fb16 	bl	b7840 <memset>
}
   b6214:	4620      	mov	r0, r4
   b6216:	bd10      	pop	{r4, pc}

000b6218 <_Z16_fetch_usbserialv>:
{
   b6218:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b621a:	4c0f      	ldr	r4, [pc, #60]	; (b6258 <_Z16_fetch_usbserialv+0x40>)
{
   b621c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b621e:	a803      	add	r0, sp, #12
   b6220:	f7ff fff2 	bl	b6208 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6224:	7821      	ldrb	r1, [r4, #0]
   b6226:	f3bf 8f5b 	dmb	ish
   b622a:	f011 0101 	ands.w	r1, r1, #1
   b622e:	d10f      	bne.n	b6250 <_Z16_fetch_usbserialv+0x38>
   b6230:	4620      	mov	r0, r4
   b6232:	9101      	str	r1, [sp, #4]
   b6234:	f7fd ff35 	bl	b40a2 <__cxa_guard_acquire>
   b6238:	9901      	ldr	r1, [sp, #4]
   b623a:	b148      	cbz	r0, b6250 <_Z16_fetch_usbserialv+0x38>
   b623c:	aa03      	add	r2, sp, #12
   b623e:	4807      	ldr	r0, [pc, #28]	; (b625c <_Z16_fetch_usbserialv+0x44>)
   b6240:	f7ff ffca 	bl	b61d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6244:	4620      	mov	r0, r4
   b6246:	f7fd ff31 	bl	b40ac <__cxa_guard_release>
   b624a:	4805      	ldr	r0, [pc, #20]	; (b6260 <_Z16_fetch_usbserialv+0x48>)
   b624c:	f001 fadc 	bl	b7808 <atexit>
	return _usbserial;
}
   b6250:	4802      	ldr	r0, [pc, #8]	; (b625c <_Z16_fetch_usbserialv+0x44>)
   b6252:	b008      	add	sp, #32
   b6254:	bd10      	pop	{r4, pc}
   b6256:	bf00      	nop
   b6258:	2003e700 	.word	0x2003e700
   b625c:	2003e704 	.word	0x2003e704
   b6260:	000b6161 	.word	0x000b6161

000b6264 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6264:	4770      	bx	lr

000b6266 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6266:	7441      	strb	r1, [r0, #17]
}
   b6268:	4770      	bx	lr

000b626a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b626a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b626c:	7c00      	ldrb	r0, [r0, #16]
   b626e:	f7ff f92f 	bl	b54d0 <hal_usart_available_data_for_write>
}
   b6272:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6276:	bd08      	pop	{r3, pc}

000b6278 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6278:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b627a:	7c00      	ldrb	r0, [r0, #16]
   b627c:	f7ff f900 	bl	b5480 <hal_usart_available>
}
   b6280:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6284:	bd08      	pop	{r3, pc}

000b6286 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6286:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6288:	7c00      	ldrb	r0, [r0, #16]
   b628a:	f7ff f909 	bl	b54a0 <hal_usart_peek>
}
   b628e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6292:	bd08      	pop	{r3, pc}

000b6294 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6294:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6296:	7c00      	ldrb	r0, [r0, #16]
   b6298:	f7ff f8fa 	bl	b5490 <hal_usart_read>
}
   b629c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62a0:	bd08      	pop	{r3, pc}

000b62a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b62a2:	7c00      	ldrb	r0, [r0, #16]
   b62a4:	f7ff b904 	b.w	b54b0 <hal_usart_flush>

000b62a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b62a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62aa:	7c45      	ldrb	r5, [r0, #17]
{
   b62ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62ae:	b12d      	cbz	r5, b62bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b62b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b62b2:	b003      	add	sp, #12
   b62b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b62b8:	f7ff b8da 	b.w	b5470 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62bc:	7c00      	ldrb	r0, [r0, #16]
   b62be:	9101      	str	r1, [sp, #4]
   b62c0:	f7ff f906 	bl	b54d0 <hal_usart_available_data_for_write>
   b62c4:	2800      	cmp	r0, #0
   b62c6:	9901      	ldr	r1, [sp, #4]
   b62c8:	dcf2      	bgt.n	b62b0 <_ZN11USARTSerial5writeEh+0x8>
}
   b62ca:	4628      	mov	r0, r5
   b62cc:	b003      	add	sp, #12
   b62ce:	bd30      	pop	{r4, r5, pc}

000b62d0 <_ZN11USARTSerialD0Ev>:
   b62d0:	b510      	push	{r4, lr}
   b62d2:	2114      	movs	r1, #20
   b62d4:	4604      	mov	r4, r0
   b62d6:	f7fd fee2 	bl	b409e <_ZdlPvj>
   b62da:	4620      	mov	r0, r4
   b62dc:	bd10      	pop	{r4, pc}
	...

000b62e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b62e0:	b510      	push	{r4, lr}
   b62e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b62e6:	4604      	mov	r4, r0
   b62e8:	4608      	mov	r0, r1
   b62ea:	4611      	mov	r1, r2
   b62ec:	2200      	movs	r2, #0
   b62ee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b62f2:	4b04      	ldr	r3, [pc, #16]	; (b6304 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b62f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b62f6:	2301      	movs	r3, #1
  _serial = serial;
   b62f8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b62fa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b62fc:	f7ff f8f0 	bl	b54e0 <hal_usart_init_ex>
}
   b6300:	4620      	mov	r0, r4
   b6302:	bd10      	pop	{r4, pc}
   b6304:	000b7c98 	.word	0x000b7c98

000b6308 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6308:	4770      	bx	lr

000b630a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b630a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b630c:	4606      	mov	r6, r0
   b630e:	4615      	mov	r5, r2
   b6310:	460c      	mov	r4, r1
   b6312:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6314:	42bc      	cmp	r4, r7
   b6316:	d006      	beq.n	b6326 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6318:	6833      	ldr	r3, [r6, #0]
   b631a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b631e:	689b      	ldr	r3, [r3, #8]
   b6320:	4630      	mov	r0, r6
   b6322:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6324:	e7f6      	b.n	b6314 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6326:	4628      	mov	r0, r5
   b6328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b632a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b632a:	7c00      	ldrb	r0, [r0, #16]
   b632c:	2200      	movs	r2, #0
   b632e:	f7ff b8f7 	b.w	b5520 <hal_i2c_write>

000b6332 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6332:	7c00      	ldrb	r0, [r0, #16]
   b6334:	2100      	movs	r1, #0
   b6336:	f7ff b8fb 	b.w	b5530 <hal_i2c_available>

000b633a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b633a:	7c00      	ldrb	r0, [r0, #16]
   b633c:	2100      	movs	r1, #0
   b633e:	f7ff b8ff 	b.w	b5540 <hal_i2c_read>

000b6342 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6342:	7c00      	ldrb	r0, [r0, #16]
   b6344:	2100      	movs	r1, #0
   b6346:	f7ff b903 	b.w	b5550 <hal_i2c_peek>

000b634a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b634a:	7c00      	ldrb	r0, [r0, #16]
   b634c:	2100      	movs	r1, #0
   b634e:	f7ff b907 	b.w	b5560 <hal_i2c_flush>

000b6352 <_ZN7TwoWireD0Ev>:
   b6352:	b510      	push	{r4, lr}
   b6354:	2114      	movs	r1, #20
   b6356:	4604      	mov	r4, r0
   b6358:	f7fd fea1 	bl	b409e <_ZdlPvj>
   b635c:	4620      	mov	r0, r4
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6360:	b510      	push	{r4, lr}
   b6362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6366:	4604      	mov	r4, r0
   b6368:	4608      	mov	r0, r1
   b636a:	2100      	movs	r1, #0
   b636c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6370:	4b03      	ldr	r3, [pc, #12]	; (b6380 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6372:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6374:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6376:	4611      	mov	r1, r2
   b6378:	f7ff f902 	bl	b5580 <hal_i2c_init>
}
   b637c:	4620      	mov	r0, r4
   b637e:	bd10      	pop	{r4, pc}
   b6380:	000b7cc8 	.word	0x000b7cc8

000b6384 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6384:	2300      	movs	r3, #0
   b6386:	7c00      	ldrb	r0, [r0, #16]
   b6388:	461a      	mov	r2, r3
   b638a:	4619      	mov	r1, r3
   b638c:	f7ff b8b0 	b.w	b54f0 <hal_i2c_begin>

000b6390 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6392:	2200      	movs	r2, #0
   b6394:	2314      	movs	r3, #20
   b6396:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b639a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b639e:	780b      	ldrb	r3, [r1, #0]
   b63a0:	f88d 3008 	strb.w	r3, [sp, #8]
   b63a4:	684b      	ldr	r3, [r1, #4]
   b63a6:	9303      	str	r3, [sp, #12]
   b63a8:	68cb      	ldr	r3, [r1, #12]
   b63aa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b63ac:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b63ae:	7a0b      	ldrb	r3, [r1, #8]
   b63b0:	9305      	str	r3, [sp, #20]
   b63b2:	a901      	add	r1, sp, #4
   b63b4:	f7ff f8ec 	bl	b5590 <hal_i2c_request_ex>
}
   b63b8:	b007      	add	sp, #28
   b63ba:	f85d fb04 	ldr.w	pc, [sp], #4

000b63be <_ZN7TwoWire11requestFromEhjh>:
{
   b63be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b63c0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b63c2:	f88d 1000 	strb.w	r1, [sp]
   b63c6:	f04f 0164 	mov.w	r1, #100	; 0x64
   b63ca:	9103      	str	r1, [sp, #12]
   b63cc:	bf18      	it	ne
   b63ce:	2301      	movne	r3, #1
   b63d0:	4669      	mov	r1, sp
    size_ = size;
   b63d2:	9201      	str	r2, [sp, #4]
   b63d4:	f88d 3008 	strb.w	r3, [sp, #8]
   b63d8:	f7ff ffda 	bl	b6390 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b63dc:	b005      	add	sp, #20
   b63de:	f85d fb04 	ldr.w	pc, [sp], #4

000b63e2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b63e2:	2301      	movs	r3, #1
   b63e4:	f7ff bfeb 	b.w	b63be <_ZN7TwoWire11requestFromEhjh>

000b63e8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b63e8:	7c00      	ldrb	r0, [r0, #16]
   b63ea:	2200      	movs	r2, #0
   b63ec:	f7ff b888 	b.w	b5500 <hal_i2c_begin_transmission>

000b63f0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b63f0:	b2c9      	uxtb	r1, r1
   b63f2:	f7ff bff9 	b.w	b63e8 <_ZN7TwoWire17beginTransmissionEh>

000b63f6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b63f6:	7c00      	ldrb	r0, [r0, #16]
   b63f8:	2200      	movs	r2, #0
   b63fa:	f7ff b889 	b.w	b5510 <hal_i2c_end_transmission>

000b63fe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b63fe:	2101      	movs	r1, #1
   b6400:	f7ff bff9 	b.w	b63f6 <_ZN7TwoWire15endTransmissionEh>

000b6404 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b6404:	7c00      	ldrb	r0, [r0, #16]
   b6406:	2100      	movs	r1, #0
   b6408:	f7ff b8b2 	b.w	b5570 <hal_i2c_is_enabled>

000b640c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b640c:	2200      	movs	r2, #0
   b640e:	6840      	ldr	r0, [r0, #4]
   b6410:	4611      	mov	r1, r2
   b6412:	f7ff b989 	b.w	b5728 <network_ready>

000b6416 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6416:	2200      	movs	r2, #0
   b6418:	6840      	ldr	r0, [r0, #4]
   b641a:	4611      	mov	r1, r2
   b641c:	f7ff b9a4 	b.w	b5768 <network_listening>

000b6420 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6420:	2200      	movs	r2, #0
   b6422:	6840      	ldr	r0, [r0, #4]
   b6424:	4611      	mov	r1, r2
   b6426:	f7ff b9af 	b.w	b5788 <network_get_listen_timeout>

000b642a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b642a:	6840      	ldr	r0, [r0, #4]
   b642c:	2200      	movs	r2, #0
   b642e:	f7ff b9a3 	b.w	b5778 <network_set_listen_timeout>

000b6432 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6432:	6840      	ldr	r0, [r0, #4]
   b6434:	2200      	movs	r2, #0
   b6436:	f081 0101 	eor.w	r1, r1, #1
   b643a:	f7ff b98d 	b.w	b5758 <network_listen>

000b643e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b643e:	2300      	movs	r3, #0
   b6440:	6840      	ldr	r0, [r0, #4]
   b6442:	461a      	mov	r2, r3
   b6444:	4619      	mov	r1, r3
   b6446:	f7ff b97f 	b.w	b5748 <network_off>

000b644a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b644a:	2300      	movs	r3, #0
   b644c:	6840      	ldr	r0, [r0, #4]
   b644e:	461a      	mov	r2, r3
   b6450:	4619      	mov	r1, r3
   b6452:	f7ff b971 	b.w	b5738 <network_on>

000b6456 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6456:	2200      	movs	r2, #0
   b6458:	6840      	ldr	r0, [r0, #4]
   b645a:	4611      	mov	r1, r2
   b645c:	f7ff b954 	b.w	b5708 <network_connecting>

000b6460 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6460:	6840      	ldr	r0, [r0, #4]
   b6462:	2200      	movs	r2, #0
   b6464:	2102      	movs	r1, #2
   b6466:	f7ff b957 	b.w	b5718 <network_disconnect>

000b646a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b646a:	2300      	movs	r3, #0
   b646c:	6840      	ldr	r0, [r0, #4]
   b646e:	461a      	mov	r2, r3
   b6470:	f7ff b942 	b.w	b56f8 <network_connect>

000b6474 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6474:	4b02      	ldr	r3, [pc, #8]	; (b6480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6476:	2204      	movs	r2, #4
   b6478:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b647a:	4a02      	ldr	r2, [pc, #8]	; (b6484 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b647c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b647e:	4770      	bx	lr
   b6480:	2003e718 	.word	0x2003e718
   b6484:	000b7cf0 	.word	0x000b7cf0

000b6488 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6488:	2300      	movs	r3, #0
   b648a:	6840      	ldr	r0, [r0, #4]
   b648c:	461a      	mov	r2, r3
   b648e:	f7ff b933 	b.w	b56f8 <network_connect>

000b6492 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6492:	6840      	ldr	r0, [r0, #4]
   b6494:	2200      	movs	r2, #0
   b6496:	2102      	movs	r1, #2
   b6498:	f7ff b93e 	b.w	b5718 <network_disconnect>

000b649c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b649c:	2200      	movs	r2, #0
   b649e:	6840      	ldr	r0, [r0, #4]
   b64a0:	4611      	mov	r1, r2
   b64a2:	f7ff b931 	b.w	b5708 <network_connecting>

000b64a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b64a6:	2200      	movs	r2, #0
   b64a8:	6840      	ldr	r0, [r0, #4]
   b64aa:	4611      	mov	r1, r2
   b64ac:	f7ff b93c 	b.w	b5728 <network_ready>

000b64b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b64b0:	2300      	movs	r3, #0
   b64b2:	6840      	ldr	r0, [r0, #4]
   b64b4:	461a      	mov	r2, r3
   b64b6:	4619      	mov	r1, r3
   b64b8:	f7ff b93e 	b.w	b5738 <network_on>

000b64bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b64bc:	2300      	movs	r3, #0
   b64be:	6840      	ldr	r0, [r0, #4]
   b64c0:	461a      	mov	r2, r3
   b64c2:	4619      	mov	r1, r3
   b64c4:	f7ff b940 	b.w	b5748 <network_off>

000b64c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b64c8:	6840      	ldr	r0, [r0, #4]
   b64ca:	2100      	movs	r1, #0
   b64cc:	f7ff b964 	b.w	b5798 <network_is_on>

000b64d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b64d0:	6840      	ldr	r0, [r0, #4]
   b64d2:	2100      	movs	r1, #0
   b64d4:	f7ff b968 	b.w	b57a8 <network_is_off>

000b64d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b64d8:	6840      	ldr	r0, [r0, #4]
   b64da:	2200      	movs	r2, #0
   b64dc:	f081 0101 	eor.w	r1, r1, #1
   b64e0:	f7ff b93a 	b.w	b5758 <network_listen>

000b64e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b64e4:	6840      	ldr	r0, [r0, #4]
   b64e6:	2200      	movs	r2, #0
   b64e8:	f7ff b946 	b.w	b5778 <network_set_listen_timeout>

000b64ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b64ec:	2200      	movs	r2, #0
   b64ee:	6840      	ldr	r0, [r0, #4]
   b64f0:	4611      	mov	r1, r2
   b64f2:	f7ff b949 	b.w	b5788 <network_get_listen_timeout>

000b64f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b64f6:	2200      	movs	r2, #0
   b64f8:	6840      	ldr	r0, [r0, #4]
   b64fa:	4611      	mov	r1, r2
   b64fc:	f7ff b934 	b.w	b5768 <network_listening>

000b6500 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6504:	b095      	sub	sp, #84	; 0x54
   b6506:	4614      	mov	r4, r2
   b6508:	460d      	mov	r5, r1
   b650a:	4607      	mov	r7, r0
    IPAddress addr;
   b650c:	f7ff fde8 	bl	b60e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6510:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6512:	221c      	movs	r2, #28
   b6514:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6516:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6518:	f001 f992 	bl	b7840 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b651c:	2340      	movs	r3, #64	; 0x40
   b651e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6520:	4620      	mov	r0, r4
   b6522:	466b      	mov	r3, sp
   b6524:	aa0c      	add	r2, sp, #48	; 0x30
   b6526:	2100      	movs	r1, #0
   b6528:	f7fe ff4a 	bl	b53c0 <netdb_getaddrinfo>
    if (!r) {
   b652c:	4604      	mov	r4, r0
   b652e:	2800      	cmp	r0, #0
   b6530:	d14b      	bne.n	b65ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6532:	4602      	mov	r2, r0
   b6534:	2101      	movs	r1, #1
   b6536:	6868      	ldr	r0, [r5, #4]
   b6538:	f7ff f8f6 	bl	b5728 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b653c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b653e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6540:	4622      	mov	r2, r4
   b6542:	6868      	ldr	r0, [r5, #4]
   b6544:	f7ff f8f0 	bl	b5728 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6548:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b654a:	4681      	mov	r9, r0
        bool ok = false;
   b654c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b654e:	2e00      	cmp	r6, #0
   b6550:	d03b      	beq.n	b65ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6552:	2900      	cmp	r1, #0
   b6554:	d139      	bne.n	b65ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6556:	6873      	ldr	r3, [r6, #4]
   b6558:	2b02      	cmp	r3, #2
   b655a:	d003      	beq.n	b6564 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b655c:	2b0a      	cmp	r3, #10
   b655e:	d011      	beq.n	b6584 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6560:	69f6      	ldr	r6, [r6, #28]
   b6562:	e7f4      	b.n	b654e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6564:	f1b8 0f00 	cmp.w	r8, #0
   b6568:	d0fa      	beq.n	b6560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b656a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b656c:	a806      	add	r0, sp, #24
   b656e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6570:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6572:	f7ff fde3 	bl	b613c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6578:	1d3c      	adds	r4, r7, #4
   b657a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b657c:	682b      	ldr	r3, [r5, #0]
   b657e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6580:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6582:	e7ed      	b.n	b6560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6584:	f1b9 0f00 	cmp.w	r9, #0
   b6588:	d0ea      	beq.n	b6560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b658a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b658c:	2210      	movs	r2, #16
   b658e:	a801      	add	r0, sp, #4
   b6590:	f001 f956 	bl	b7840 <memset>
                    a.v = 6;
   b6594:	2306      	movs	r3, #6
   b6596:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b659a:	ad01      	add	r5, sp, #4
   b659c:	f104 0308 	add.w	r3, r4, #8
   b65a0:	3418      	adds	r4, #24
   b65a2:	6818      	ldr	r0, [r3, #0]
   b65a4:	6859      	ldr	r1, [r3, #4]
   b65a6:	462a      	mov	r2, r5
   b65a8:	c203      	stmia	r2!, {r0, r1}
   b65aa:	3308      	adds	r3, #8
   b65ac:	42a3      	cmp	r3, r4
   b65ae:	4615      	mov	r5, r2
   b65b0:	d1f7      	bne.n	b65a2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b65b2:	a901      	add	r1, sp, #4
   b65b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b65b6:	ad07      	add	r5, sp, #28
   b65b8:	f7ff fda0 	bl	b60fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b65bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65be:	1d3c      	adds	r4, r7, #4
   b65c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65c2:	682b      	ldr	r3, [r5, #0]
   b65c4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b65c6:	4649      	mov	r1, r9
   b65c8:	e7ca      	b.n	b6560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b65ca:	9800      	ldr	r0, [sp, #0]
   b65cc:	f7fe fef0 	bl	b53b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b65d0:	4638      	mov	r0, r7
   b65d2:	b015      	add	sp, #84	; 0x54
   b65d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b65d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b65d8:	4b02      	ldr	r3, [pc, #8]	; (b65e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b65da:	4a03      	ldr	r2, [pc, #12]	; (b65e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b65dc:	601a      	str	r2, [r3, #0]
   b65de:	2200      	movs	r2, #0
   b65e0:	605a      	str	r2, [r3, #4]

} // spark
   b65e2:	4770      	bx	lr
   b65e4:	2003e720 	.word	0x2003e720
   b65e8:	000b7d2c 	.word	0x000b7d2c

000b65ec <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b65ec:	b40e      	push	{r1, r2, r3}
   b65ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65f0:	b088      	sub	sp, #32
   b65f2:	af00      	add	r7, sp, #0
   b65f4:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b65f8:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b65fa:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b65fe:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6600:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6602:	462b      	mov	r3, r5
   b6604:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6606:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6608:	f7ff f92e 	bl	b5868 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b660c:	280f      	cmp	r0, #15
   b660e:	687a      	ldr	r2, [r7, #4]
   b6610:	d91a      	bls.n	b6648 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6612:	f100 0308 	add.w	r3, r0, #8
   b6616:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b661a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b661c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6620:	1c41      	adds	r1, r0, #1
   b6622:	462b      	mov	r3, r5
   b6624:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6626:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6628:	f7ff f91e 	bl	b5868 <vsnprintf>
        if (n > 0) {
   b662c:	1e02      	subs	r2, r0, #0
   b662e:	dd04      	ble.n	b663a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6630:	6823      	ldr	r3, [r4, #0]
   b6632:	4669      	mov	r1, sp
   b6634:	689b      	ldr	r3, [r3, #8]
   b6636:	4620      	mov	r0, r4
   b6638:	4798      	blx	r3
   b663a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b663c:	3720      	adds	r7, #32
   b663e:	46bd      	mov	sp, r7
   b6640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6644:	b003      	add	sp, #12
   b6646:	4770      	bx	lr
    } else if (n > 0) {
   b6648:	2800      	cmp	r0, #0
   b664a:	d0f7      	beq.n	b663c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b664c:	6823      	ldr	r3, [r4, #0]
   b664e:	4602      	mov	r2, r0
   b6650:	689b      	ldr	r3, [r3, #8]
   b6652:	f107 0110 	add.w	r1, r7, #16
   b6656:	4620      	mov	r0, r4
   b6658:	4798      	blx	r3
}
   b665a:	e7ef      	b.n	b663c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b665c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b665c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b665e:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6660:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6664:	689b      	ldr	r3, [r3, #8]
   b6666:	2201      	movs	r2, #1
   b6668:	f10d 0107 	add.w	r1, sp, #7
   b666c:	4798      	blx	r3
}
   b666e:	b003      	add	sp, #12
   b6670:	f85d fb04 	ldr.w	pc, [sp], #4

000b6674 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6674:	b510      	push	{r4, lr}
    write('}');
   b6676:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6678:	4604      	mov	r4, r0
    write('}');
   b667a:	f7ff ffef 	bl	b665c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b667e:	2301      	movs	r3, #1
   b6680:	7123      	strb	r3, [r4, #4]
}
   b6682:	4620      	mov	r0, r4
   b6684:	bd10      	pop	{r4, pc}

000b6686 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6686:	b508      	push	{r3, lr}
    switch (state_) {
   b6688:	7903      	ldrb	r3, [r0, #4]
   b668a:	2b01      	cmp	r3, #1
   b668c:	d002      	beq.n	b6694 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b668e:	2b02      	cmp	r3, #2
   b6690:	d004      	beq.n	b669c <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6692:	bd08      	pop	{r3, pc}
        write(',');
   b6694:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6696:	f7ff ffe1 	bl	b665c <_ZN5spark10JSONWriter5writeEc>
}
   b669a:	e7fa      	b.n	b6692 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b669c:	213a      	movs	r1, #58	; 0x3a
   b669e:	e7fa      	b.n	b6696 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b66a0 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b66a0:	b510      	push	{r4, lr}
   b66a2:	4604      	mov	r4, r0
    writeSeparator();
   b66a4:	f7ff ffef 	bl	b6686 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b66a8:	4620      	mov	r0, r4
   b66aa:	217b      	movs	r1, #123	; 0x7b
   b66ac:	f7ff ffd6 	bl	b665c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b66b0:	2300      	movs	r3, #0
   b66b2:	7123      	strb	r3, [r4, #4]
}
   b66b4:	4620      	mov	r0, r4
   b66b6:	bd10      	pop	{r4, pc}

000b66b8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b66b8:	b513      	push	{r0, r1, r4, lr}
   b66ba:	4604      	mov	r4, r0
   b66bc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b66be:	f7ff ffe2 	bl	b6686 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b66c2:	6823      	ldr	r3, [r4, #0]
   b66c4:	9a01      	ldr	r2, [sp, #4]
   b66c6:	68db      	ldr	r3, [r3, #12]
   b66c8:	4903      	ldr	r1, [pc, #12]	; (b66d8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b66ca:	4620      	mov	r0, r4
   b66cc:	4798      	blx	r3
    state_ = NEXT;
   b66ce:	2301      	movs	r3, #1
}
   b66d0:	4620      	mov	r0, r4
    state_ = NEXT;
   b66d2:	7123      	strb	r3, [r4, #4]
}
   b66d4:	b002      	add	sp, #8
   b66d6:	bd10      	pop	{r4, pc}
   b66d8:	000b7d60 	.word	0x000b7d60

000b66dc <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   b66dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66de:	4604      	mov	r4, r0
   b66e0:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   b66e4:	f7ff ffcf 	bl	b6686 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   b66e8:	6823      	ldr	r3, [r4, #0]
   b66ea:	4905      	ldr	r1, [pc, #20]	; (b6700 <_ZN5spark10JSONWriter5valueEd+0x24>)
   b66ec:	68dd      	ldr	r5, [r3, #12]
   b66ee:	4620      	mov	r0, r4
   b66f0:	463b      	mov	r3, r7
   b66f2:	4632      	mov	r2, r6
   b66f4:	47a8      	blx	r5
    state_ = NEXT;
   b66f6:	2301      	movs	r3, #1
   b66f8:	7123      	strb	r3, [r4, #4]
}
   b66fa:	4620      	mov	r0, r4
   b66fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b66fe:	bf00      	nop
   b6700:	000b7d63 	.word	0x000b7d63

000b6704 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6708:	460d      	mov	r5, r1
    write('"');
   b670a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b670c:	4690      	mov	r8, r2
   b670e:	4604      	mov	r4, r0
    write('"');
   b6710:	f7ff ffa4 	bl	b665c <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6714:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b67bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6718:	44a8      	add	r8, r5
    const char *s = str;
   b671a:	462f      	mov	r7, r5
    while (s != end) {
   b671c:	4547      	cmp	r7, r8
   b671e:	46ba      	mov	sl, r7
   b6720:	d03d      	beq.n	b679e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6722:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6726:	2e22      	cmp	r6, #34	; 0x22
   b6728:	d006      	beq.n	b6738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b672a:	2e5c      	cmp	r6, #92	; 0x5c
   b672c:	d004      	beq.n	b6738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b672e:	4630      	mov	r0, r6
   b6730:	f001 f870 	bl	b7814 <isprint>
   b6734:	2800      	cmp	r0, #0
   b6736:	d1f1      	bne.n	b671c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6738:	6823      	ldr	r3, [r4, #0]
   b673a:	ebaa 0205 	sub.w	r2, sl, r5
   b673e:	689b      	ldr	r3, [r3, #8]
   b6740:	4629      	mov	r1, r5
   b6742:	4620      	mov	r0, r4
   b6744:	4798      	blx	r3
            write('\\');
   b6746:	215c      	movs	r1, #92	; 0x5c
   b6748:	4620      	mov	r0, r4
   b674a:	f7ff ff87 	bl	b665c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b674e:	2e0d      	cmp	r6, #13
   b6750:	d80a      	bhi.n	b6768 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6752:	2e07      	cmp	r6, #7
   b6754:	d91c      	bls.n	b6790 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6756:	f1a6 0308 	sub.w	r3, r6, #8
   b675a:	2b05      	cmp	r3, #5
   b675c:	d818      	bhi.n	b6790 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b675e:	e8df f003 	tbb	[pc, r3]
   b6762:	0f0d      	.short	0x0f0d
   b6764:	15131711 	.word	0x15131711
   b6768:	2e22      	cmp	r6, #34	; 0x22
   b676a:	d001      	beq.n	b6770 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b676c:	2e5c      	cmp	r6, #92	; 0x5c
   b676e:	d10f      	bne.n	b6790 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6770:	4631      	mov	r1, r6
                write('b');
   b6772:	4620      	mov	r0, r4
   b6774:	f7ff ff72 	bl	b665c <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6778:	463d      	mov	r5, r7
    while (s != end) {
   b677a:	e7cf      	b.n	b671c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b677c:	2162      	movs	r1, #98	; 0x62
   b677e:	e7f8      	b.n	b6772 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6780:	2174      	movs	r1, #116	; 0x74
   b6782:	e7f6      	b.n	b6772 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6784:	216e      	movs	r1, #110	; 0x6e
   b6786:	e7f4      	b.n	b6772 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6788:	2166      	movs	r1, #102	; 0x66
   b678a:	e7f2      	b.n	b6772 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b678c:	2172      	movs	r1, #114	; 0x72
   b678e:	e7f0      	b.n	b6772 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6790:	6823      	ldr	r3, [r4, #0]
   b6792:	4632      	mov	r2, r6
   b6794:	68db      	ldr	r3, [r3, #12]
   b6796:	4649      	mov	r1, r9
   b6798:	4620      	mov	r0, r4
   b679a:	4798      	blx	r3
                break;
   b679c:	e7ec      	b.n	b6778 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b679e:	42bd      	cmp	r5, r7
   b67a0:	d005      	beq.n	b67ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b67a2:	6823      	ldr	r3, [r4, #0]
   b67a4:	1b7a      	subs	r2, r7, r5
   b67a6:	689b      	ldr	r3, [r3, #8]
   b67a8:	4629      	mov	r1, r5
   b67aa:	4620      	mov	r0, r4
   b67ac:	4798      	blx	r3
    }
    write('"');
   b67ae:	2122      	movs	r1, #34	; 0x22
   b67b0:	4620      	mov	r0, r4
   b67b2:	f7ff ff53 	bl	b665c <_ZN5spark10JSONWriter5writeEc>
}
   b67b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b67ba:	bf00      	nop
   b67bc:	000b7d66 	.word	0x000b7d66

000b67c0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b67c0:	b513      	push	{r0, r1, r4, lr}
   b67c2:	4604      	mov	r4, r0
   b67c4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b67c8:	f7ff ff5d 	bl	b6686 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b67cc:	4620      	mov	r0, r4
   b67ce:	e9dd 2100 	ldrd	r2, r1, [sp]
   b67d2:	f7ff ff97 	bl	b6704 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b67d6:	2302      	movs	r3, #2
}
   b67d8:	4620      	mov	r0, r4
    state_ = VALUE;
   b67da:	7123      	strb	r3, [r4, #4]
}
   b67dc:	b002      	add	sp, #8
   b67de:	bd10      	pop	{r4, pc}

000b67e0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b67e0:	b513      	push	{r0, r1, r4, lr}
   b67e2:	4604      	mov	r4, r0
   b67e4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b67e8:	f7ff ff4d 	bl	b6686 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b67ec:	4620      	mov	r0, r4
   b67ee:	e9dd 2100 	ldrd	r2, r1, [sp]
   b67f2:	f7ff ff87 	bl	b6704 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b67f6:	2301      	movs	r3, #1
}
   b67f8:	4620      	mov	r0, r4
    state_ = NEXT;
   b67fa:	7123      	strb	r3, [r4, #4]
}
   b67fc:	b002      	add	sp, #8
   b67fe:	bd10      	pop	{r4, pc}

000b6800 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6800:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6802:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6804:	d902      	bls.n	b680c <pinAvailable+0xc>
    return false;
   b6806:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6808:	b002      	add	sp, #8
   b680a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b680c:	f1a0 030b 	sub.w	r3, r0, #11
   b6810:	2b02      	cmp	r3, #2
   b6812:	d81a      	bhi.n	b684a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6814:	4c17      	ldr	r4, [pc, #92]	; (b6874 <pinAvailable+0x74>)
   b6816:	7821      	ldrb	r1, [r4, #0]
   b6818:	f3bf 8f5b 	dmb	ish
   b681c:	f011 0101 	ands.w	r1, r1, #1
   b6820:	d10b      	bne.n	b683a <pinAvailable+0x3a>
   b6822:	4620      	mov	r0, r4
   b6824:	9101      	str	r1, [sp, #4]
   b6826:	f7fd fc3c 	bl	b40a2 <__cxa_guard_acquire>
   b682a:	9901      	ldr	r1, [sp, #4]
   b682c:	b128      	cbz	r0, b683a <pinAvailable+0x3a>
   b682e:	4812      	ldr	r0, [pc, #72]	; (b6878 <pinAvailable+0x78>)
   b6830:	f7ff f886 	bl	b5940 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6834:	4620      	mov	r0, r4
   b6836:	f7fd fc39 	bl	b40ac <__cxa_guard_release>
   b683a:	4b0f      	ldr	r3, [pc, #60]	; (b6878 <pinAvailable+0x78>)
   b683c:	7818      	ldrb	r0, [r3, #0]
   b683e:	f7fe fec7 	bl	b55d0 <hal_spi_is_enabled>
   b6842:	2800      	cmp	r0, #0
   b6844:	d1df      	bne.n	b6806 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6846:	2001      	movs	r0, #1
   b6848:	e7de      	b.n	b6808 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b684a:	2801      	cmp	r0, #1
   b684c:	d809      	bhi.n	b6862 <pinAvailable+0x62>
   b684e:	f000 f8a9 	bl	b69a4 <_Z19__fetch_global_Wirev>
   b6852:	2100      	movs	r1, #0
   b6854:	7c00      	ldrb	r0, [r0, #16]
   b6856:	f7fe fe8b 	bl	b5570 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b685a:	f080 0001 	eor.w	r0, r0, #1
   b685e:	b2c0      	uxtb	r0, r0
   b6860:	e7d2      	b.n	b6808 <pinAvailable+0x8>
   b6862:	3809      	subs	r0, #9
   b6864:	2801      	cmp	r0, #1
   b6866:	d8ee      	bhi.n	b6846 <pinAvailable+0x46>
   b6868:	f000 f860 	bl	b692c <_Z22__fetch_global_Serial1v>
   b686c:	7c00      	ldrb	r0, [r0, #16]
   b686e:	f7fe fe27 	bl	b54c0 <hal_usart_is_enabled>
   b6872:	e7f2      	b.n	b685a <pinAvailable+0x5a>
   b6874:	2003e6a4 	.word	0x2003e6a4
   b6878:	2003e6a8 	.word	0x2003e6a8

000b687c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b687c:	2823      	cmp	r0, #35	; 0x23
{
   b687e:	b538      	push	{r3, r4, r5, lr}
   b6880:	4604      	mov	r4, r0
   b6882:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6884:	d80a      	bhi.n	b689c <pinMode+0x20>
   b6886:	29ff      	cmp	r1, #255	; 0xff
   b6888:	d008      	beq.n	b689c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b688a:	f7ff ffb9 	bl	b6800 <pinAvailable>
   b688e:	b128      	cbz	r0, b689c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6890:	4629      	mov	r1, r5
   b6892:	4620      	mov	r0, r4
}
   b6894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6898:	f7fe bd9a 	b.w	b53d0 <HAL_Pin_Mode>
}
   b689c:	bd38      	pop	{r3, r4, r5, pc}

000b689e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b689e:	b538      	push	{r3, r4, r5, lr}
   b68a0:	4604      	mov	r4, r0
   b68a2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b68a4:	f7fe fd9c 	bl	b53e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b68a8:	28ff      	cmp	r0, #255	; 0xff
   b68aa:	d010      	beq.n	b68ce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b68ac:	2806      	cmp	r0, #6
   b68ae:	d804      	bhi.n	b68ba <digitalWrite+0x1c>
   b68b0:	234d      	movs	r3, #77	; 0x4d
   b68b2:	fa23 f000 	lsr.w	r0, r3, r0
   b68b6:	07c3      	lsls	r3, r0, #31
   b68b8:	d409      	bmi.n	b68ce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b68ba:	4620      	mov	r0, r4
   b68bc:	f7ff ffa0 	bl	b6800 <pinAvailable>
   b68c0:	b128      	cbz	r0, b68ce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b68c2:	4629      	mov	r1, r5
   b68c4:	4620      	mov	r0, r4
}
   b68c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b68ca:	f7fe bd91 	b.w	b53f0 <HAL_GPIO_Write>
}
   b68ce:	bd38      	pop	{r3, r4, r5, pc}

000b68d0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b68d0:	b510      	push	{r4, lr}
   b68d2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b68d4:	f7fe fd84 	bl	b53e0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b68d8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b68da:	b2db      	uxtb	r3, r3
   b68dc:	2b01      	cmp	r3, #1
   b68de:	d908      	bls.n	b68f2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b68e0:	4620      	mov	r0, r4
   b68e2:	f7ff ff8d 	bl	b6800 <pinAvailable>
   b68e6:	b120      	cbz	r0, b68f2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b68e8:	4620      	mov	r0, r4
}
   b68ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b68ee:	f7fe bd87 	b.w	b5400 <HAL_GPIO_Read>
}
   b68f2:	2000      	movs	r0, #0
   b68f4:	bd10      	pop	{r4, pc}

000b68f6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b68f6:	4770      	bx	lr

000b68f8 <_Z20acquireSerial1Bufferv>:
{
   b68f8:	b538      	push	{r3, r4, r5, lr}
   b68fa:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b68fc:	2514      	movs	r5, #20
   b68fe:	462a      	mov	r2, r5
   b6900:	2100      	movs	r1, #0
   b6902:	f000 ff9d 	bl	b7840 <memset>
   b6906:	8025      	strh	r5, [r4, #0]
   b6908:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b690a:	4907      	ldr	r1, [pc, #28]	; (b6928 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b690c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b690e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6910:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6912:	f000 f86b 	bl	b69ec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6916:	4904      	ldr	r1, [pc, #16]	; (b6928 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6918:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b691a:	4628      	mov	r0, r5
   b691c:	f000 f866 	bl	b69ec <_ZnajRKSt9nothrow_t>
    };
   b6920:	60e0      	str	r0, [r4, #12]
}
   b6922:	4620      	mov	r0, r4
   b6924:	bd38      	pop	{r3, r4, r5, pc}
   b6926:	bf00      	nop
   b6928:	000b7d6c 	.word	0x000b7d6c

000b692c <_Z22__fetch_global_Serial1v>:
{
   b692c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b692e:	4d0e      	ldr	r5, [pc, #56]	; (b6968 <_Z22__fetch_global_Serial1v+0x3c>)
   b6930:	7829      	ldrb	r1, [r5, #0]
   b6932:	f3bf 8f5b 	dmb	ish
   b6936:	f011 0401 	ands.w	r4, r1, #1
{
   b693a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b693c:	d111      	bne.n	b6962 <_Z22__fetch_global_Serial1v+0x36>
   b693e:	4628      	mov	r0, r5
   b6940:	f7fd fbaf 	bl	b40a2 <__cxa_guard_acquire>
   b6944:	b168      	cbz	r0, b6962 <_Z22__fetch_global_Serial1v+0x36>
   b6946:	a801      	add	r0, sp, #4
   b6948:	f7ff ffd6 	bl	b68f8 <_Z20acquireSerial1Bufferv>
   b694c:	aa01      	add	r2, sp, #4
   b694e:	4621      	mov	r1, r4
   b6950:	4806      	ldr	r0, [pc, #24]	; (b696c <_Z22__fetch_global_Serial1v+0x40>)
   b6952:	f7ff fcc5 	bl	b62e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6956:	4628      	mov	r0, r5
   b6958:	f7fd fba8 	bl	b40ac <__cxa_guard_release>
   b695c:	4804      	ldr	r0, [pc, #16]	; (b6970 <_Z22__fetch_global_Serial1v+0x44>)
   b695e:	f000 ff53 	bl	b7808 <atexit>
    return serial1;
}
   b6962:	4802      	ldr	r0, [pc, #8]	; (b696c <_Z22__fetch_global_Serial1v+0x40>)
   b6964:	b007      	add	sp, #28
   b6966:	bd30      	pop	{r4, r5, pc}
   b6968:	2003e728 	.word	0x2003e728
   b696c:	2003e72c 	.word	0x2003e72c
   b6970:	000b68f7 	.word	0x000b68f7

000b6974 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6974:	4770      	bx	lr
	...

000b6978 <_Z17acquireWireBufferv>:
{
   b6978:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b697a:	2520      	movs	r5, #32
   b697c:	2314      	movs	r3, #20
{
   b697e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6980:	6003      	str	r3, [r0, #0]
   b6982:	6085      	str	r5, [r0, #8]
   b6984:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6986:	4906      	ldr	r1, [pc, #24]	; (b69a0 <_Z17acquireWireBufferv+0x28>)
   b6988:	4628      	mov	r0, r5
   b698a:	f000 f82f 	bl	b69ec <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b698e:	4904      	ldr	r1, [pc, #16]	; (b69a0 <_Z17acquireWireBufferv+0x28>)
	};
   b6990:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6992:	4628      	mov	r0, r5
   b6994:	f000 f82a 	bl	b69ec <_ZnajRKSt9nothrow_t>
	};
   b6998:	60e0      	str	r0, [r4, #12]
}
   b699a:	4620      	mov	r0, r4
   b699c:	bd38      	pop	{r3, r4, r5, pc}
   b699e:	bf00      	nop
   b69a0:	000b7d6c 	.word	0x000b7d6c

000b69a4 <_Z19__fetch_global_Wirev>:
{
   b69a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69a6:	4d0e      	ldr	r5, [pc, #56]	; (b69e0 <_Z19__fetch_global_Wirev+0x3c>)
   b69a8:	7829      	ldrb	r1, [r5, #0]
   b69aa:	f3bf 8f5b 	dmb	ish
   b69ae:	f011 0401 	ands.w	r4, r1, #1
{
   b69b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69b4:	d111      	bne.n	b69da <_Z19__fetch_global_Wirev+0x36>
   b69b6:	4628      	mov	r0, r5
   b69b8:	f7fd fb73 	bl	b40a2 <__cxa_guard_acquire>
   b69bc:	b168      	cbz	r0, b69da <_Z19__fetch_global_Wirev+0x36>
   b69be:	a801      	add	r0, sp, #4
   b69c0:	f7ff ffda 	bl	b6978 <_Z17acquireWireBufferv>
   b69c4:	aa01      	add	r2, sp, #4
   b69c6:	4621      	mov	r1, r4
   b69c8:	4806      	ldr	r0, [pc, #24]	; (b69e4 <_Z19__fetch_global_Wirev+0x40>)
   b69ca:	f7ff fcc9 	bl	b6360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b69ce:	4628      	mov	r0, r5
   b69d0:	f7fd fb6c 	bl	b40ac <__cxa_guard_release>
   b69d4:	4804      	ldr	r0, [pc, #16]	; (b69e8 <_Z19__fetch_global_Wirev+0x44>)
   b69d6:	f000 ff17 	bl	b7808 <atexit>
	return wire;
}
   b69da:	4802      	ldr	r0, [pc, #8]	; (b69e4 <_Z19__fetch_global_Wirev+0x40>)
   b69dc:	b007      	add	sp, #28
   b69de:	bd30      	pop	{r4, r5, pc}
   b69e0:	2003e744 	.word	0x2003e744
   b69e4:	2003e748 	.word	0x2003e748
   b69e8:	000b6975 	.word	0x000b6975

000b69ec <_ZnajRKSt9nothrow_t>:
   b69ec:	f7fd bb55 	b.w	b409a <_Znaj>

000b69f0 <__aeabi_drsub>:
   b69f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b69f4:	e002      	b.n	b69fc <__adddf3>
   b69f6:	bf00      	nop

000b69f8 <__aeabi_dsub>:
   b69f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b69fc <__adddf3>:
   b69fc:	b530      	push	{r4, r5, lr}
   b69fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6a02:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6a06:	ea94 0f05 	teq	r4, r5
   b6a0a:	bf08      	it	eq
   b6a0c:	ea90 0f02 	teqeq	r0, r2
   b6a10:	bf1f      	itttt	ne
   b6a12:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6a16:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6a1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6a1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6a22:	f000 80e2 	beq.w	b6bea <__adddf3+0x1ee>
   b6a26:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6a2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6a2e:	bfb8      	it	lt
   b6a30:	426d      	neglt	r5, r5
   b6a32:	dd0c      	ble.n	b6a4e <__adddf3+0x52>
   b6a34:	442c      	add	r4, r5
   b6a36:	ea80 0202 	eor.w	r2, r0, r2
   b6a3a:	ea81 0303 	eor.w	r3, r1, r3
   b6a3e:	ea82 0000 	eor.w	r0, r2, r0
   b6a42:	ea83 0101 	eor.w	r1, r3, r1
   b6a46:	ea80 0202 	eor.w	r2, r0, r2
   b6a4a:	ea81 0303 	eor.w	r3, r1, r3
   b6a4e:	2d36      	cmp	r5, #54	; 0x36
   b6a50:	bf88      	it	hi
   b6a52:	bd30      	pophi	{r4, r5, pc}
   b6a54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6a58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6a5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6a60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6a64:	d002      	beq.n	b6a6c <__adddf3+0x70>
   b6a66:	4240      	negs	r0, r0
   b6a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6a6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6a74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6a78:	d002      	beq.n	b6a80 <__adddf3+0x84>
   b6a7a:	4252      	negs	r2, r2
   b6a7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6a80:	ea94 0f05 	teq	r4, r5
   b6a84:	f000 80a7 	beq.w	b6bd6 <__adddf3+0x1da>
   b6a88:	f1a4 0401 	sub.w	r4, r4, #1
   b6a8c:	f1d5 0e20 	rsbs	lr, r5, #32
   b6a90:	db0d      	blt.n	b6aae <__adddf3+0xb2>
   b6a92:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6a96:	fa22 f205 	lsr.w	r2, r2, r5
   b6a9a:	1880      	adds	r0, r0, r2
   b6a9c:	f141 0100 	adc.w	r1, r1, #0
   b6aa0:	fa03 f20e 	lsl.w	r2, r3, lr
   b6aa4:	1880      	adds	r0, r0, r2
   b6aa6:	fa43 f305 	asr.w	r3, r3, r5
   b6aaa:	4159      	adcs	r1, r3
   b6aac:	e00e      	b.n	b6acc <__adddf3+0xd0>
   b6aae:	f1a5 0520 	sub.w	r5, r5, #32
   b6ab2:	f10e 0e20 	add.w	lr, lr, #32
   b6ab6:	2a01      	cmp	r2, #1
   b6ab8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6abc:	bf28      	it	cs
   b6abe:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6ac2:	fa43 f305 	asr.w	r3, r3, r5
   b6ac6:	18c0      	adds	r0, r0, r3
   b6ac8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6acc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6ad0:	d507      	bpl.n	b6ae2 <__adddf3+0xe6>
   b6ad2:	f04f 0e00 	mov.w	lr, #0
   b6ad6:	f1dc 0c00 	rsbs	ip, ip, #0
   b6ada:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6ade:	eb6e 0101 	sbc.w	r1, lr, r1
   b6ae2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6ae6:	d31b      	bcc.n	b6b20 <__adddf3+0x124>
   b6ae8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6aec:	d30c      	bcc.n	b6b08 <__adddf3+0x10c>
   b6aee:	0849      	lsrs	r1, r1, #1
   b6af0:	ea5f 0030 	movs.w	r0, r0, rrx
   b6af4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6af8:	f104 0401 	add.w	r4, r4, #1
   b6afc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6b00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6b04:	f080 809a 	bcs.w	b6c3c <__adddf3+0x240>
   b6b08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6b0c:	bf08      	it	eq
   b6b0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b12:	f150 0000 	adcs.w	r0, r0, #0
   b6b16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b1a:	ea41 0105 	orr.w	r1, r1, r5
   b6b1e:	bd30      	pop	{r4, r5, pc}
   b6b20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6b24:	4140      	adcs	r0, r0
   b6b26:	eb41 0101 	adc.w	r1, r1, r1
   b6b2a:	3c01      	subs	r4, #1
   b6b2c:	bf28      	it	cs
   b6b2e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6b32:	d2e9      	bcs.n	b6b08 <__adddf3+0x10c>
   b6b34:	f091 0f00 	teq	r1, #0
   b6b38:	bf04      	itt	eq
   b6b3a:	4601      	moveq	r1, r0
   b6b3c:	2000      	moveq	r0, #0
   b6b3e:	fab1 f381 	clz	r3, r1
   b6b42:	bf08      	it	eq
   b6b44:	3320      	addeq	r3, #32
   b6b46:	f1a3 030b 	sub.w	r3, r3, #11
   b6b4a:	f1b3 0220 	subs.w	r2, r3, #32
   b6b4e:	da0c      	bge.n	b6b6a <__adddf3+0x16e>
   b6b50:	320c      	adds	r2, #12
   b6b52:	dd08      	ble.n	b6b66 <__adddf3+0x16a>
   b6b54:	f102 0c14 	add.w	ip, r2, #20
   b6b58:	f1c2 020c 	rsb	r2, r2, #12
   b6b5c:	fa01 f00c 	lsl.w	r0, r1, ip
   b6b60:	fa21 f102 	lsr.w	r1, r1, r2
   b6b64:	e00c      	b.n	b6b80 <__adddf3+0x184>
   b6b66:	f102 0214 	add.w	r2, r2, #20
   b6b6a:	bfd8      	it	le
   b6b6c:	f1c2 0c20 	rsble	ip, r2, #32
   b6b70:	fa01 f102 	lsl.w	r1, r1, r2
   b6b74:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6b78:	bfdc      	itt	le
   b6b7a:	ea41 010c 	orrle.w	r1, r1, ip
   b6b7e:	4090      	lslle	r0, r2
   b6b80:	1ae4      	subs	r4, r4, r3
   b6b82:	bfa2      	ittt	ge
   b6b84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6b88:	4329      	orrge	r1, r5
   b6b8a:	bd30      	popge	{r4, r5, pc}
   b6b8c:	ea6f 0404 	mvn.w	r4, r4
   b6b90:	3c1f      	subs	r4, #31
   b6b92:	da1c      	bge.n	b6bce <__adddf3+0x1d2>
   b6b94:	340c      	adds	r4, #12
   b6b96:	dc0e      	bgt.n	b6bb6 <__adddf3+0x1ba>
   b6b98:	f104 0414 	add.w	r4, r4, #20
   b6b9c:	f1c4 0220 	rsb	r2, r4, #32
   b6ba0:	fa20 f004 	lsr.w	r0, r0, r4
   b6ba4:	fa01 f302 	lsl.w	r3, r1, r2
   b6ba8:	ea40 0003 	orr.w	r0, r0, r3
   b6bac:	fa21 f304 	lsr.w	r3, r1, r4
   b6bb0:	ea45 0103 	orr.w	r1, r5, r3
   b6bb4:	bd30      	pop	{r4, r5, pc}
   b6bb6:	f1c4 040c 	rsb	r4, r4, #12
   b6bba:	f1c4 0220 	rsb	r2, r4, #32
   b6bbe:	fa20 f002 	lsr.w	r0, r0, r2
   b6bc2:	fa01 f304 	lsl.w	r3, r1, r4
   b6bc6:	ea40 0003 	orr.w	r0, r0, r3
   b6bca:	4629      	mov	r1, r5
   b6bcc:	bd30      	pop	{r4, r5, pc}
   b6bce:	fa21 f004 	lsr.w	r0, r1, r4
   b6bd2:	4629      	mov	r1, r5
   b6bd4:	bd30      	pop	{r4, r5, pc}
   b6bd6:	f094 0f00 	teq	r4, #0
   b6bda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6bde:	bf06      	itte	eq
   b6be0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6be4:	3401      	addeq	r4, #1
   b6be6:	3d01      	subne	r5, #1
   b6be8:	e74e      	b.n	b6a88 <__adddf3+0x8c>
   b6bea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6bee:	bf18      	it	ne
   b6bf0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6bf4:	d029      	beq.n	b6c4a <__adddf3+0x24e>
   b6bf6:	ea94 0f05 	teq	r4, r5
   b6bfa:	bf08      	it	eq
   b6bfc:	ea90 0f02 	teqeq	r0, r2
   b6c00:	d005      	beq.n	b6c0e <__adddf3+0x212>
   b6c02:	ea54 0c00 	orrs.w	ip, r4, r0
   b6c06:	bf04      	itt	eq
   b6c08:	4619      	moveq	r1, r3
   b6c0a:	4610      	moveq	r0, r2
   b6c0c:	bd30      	pop	{r4, r5, pc}
   b6c0e:	ea91 0f03 	teq	r1, r3
   b6c12:	bf1e      	ittt	ne
   b6c14:	2100      	movne	r1, #0
   b6c16:	2000      	movne	r0, #0
   b6c18:	bd30      	popne	{r4, r5, pc}
   b6c1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6c1e:	d105      	bne.n	b6c2c <__adddf3+0x230>
   b6c20:	0040      	lsls	r0, r0, #1
   b6c22:	4149      	adcs	r1, r1
   b6c24:	bf28      	it	cs
   b6c26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6c2a:	bd30      	pop	{r4, r5, pc}
   b6c2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6c30:	bf3c      	itt	cc
   b6c32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6c36:	bd30      	popcc	{r4, r5, pc}
   b6c38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6c3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6c40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6c44:	f04f 0000 	mov.w	r0, #0
   b6c48:	bd30      	pop	{r4, r5, pc}
   b6c4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6c4e:	bf1a      	itte	ne
   b6c50:	4619      	movne	r1, r3
   b6c52:	4610      	movne	r0, r2
   b6c54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6c58:	bf1c      	itt	ne
   b6c5a:	460b      	movne	r3, r1
   b6c5c:	4602      	movne	r2, r0
   b6c5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6c62:	bf06      	itte	eq
   b6c64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6c68:	ea91 0f03 	teqeq	r1, r3
   b6c6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6c70:	bd30      	pop	{r4, r5, pc}
   b6c72:	bf00      	nop

000b6c74 <__aeabi_ui2d>:
   b6c74:	f090 0f00 	teq	r0, #0
   b6c78:	bf04      	itt	eq
   b6c7a:	2100      	moveq	r1, #0
   b6c7c:	4770      	bxeq	lr
   b6c7e:	b530      	push	{r4, r5, lr}
   b6c80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6c84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6c88:	f04f 0500 	mov.w	r5, #0
   b6c8c:	f04f 0100 	mov.w	r1, #0
   b6c90:	e750      	b.n	b6b34 <__adddf3+0x138>
   b6c92:	bf00      	nop

000b6c94 <__aeabi_i2d>:
   b6c94:	f090 0f00 	teq	r0, #0
   b6c98:	bf04      	itt	eq
   b6c9a:	2100      	moveq	r1, #0
   b6c9c:	4770      	bxeq	lr
   b6c9e:	b530      	push	{r4, r5, lr}
   b6ca0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6ca4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6ca8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6cac:	bf48      	it	mi
   b6cae:	4240      	negmi	r0, r0
   b6cb0:	f04f 0100 	mov.w	r1, #0
   b6cb4:	e73e      	b.n	b6b34 <__adddf3+0x138>
   b6cb6:	bf00      	nop

000b6cb8 <__aeabi_f2d>:
   b6cb8:	0042      	lsls	r2, r0, #1
   b6cba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6cbe:	ea4f 0131 	mov.w	r1, r1, rrx
   b6cc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6cc6:	bf1f      	itttt	ne
   b6cc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6ccc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6cd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6cd4:	4770      	bxne	lr
   b6cd6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6cda:	bf08      	it	eq
   b6cdc:	4770      	bxeq	lr
   b6cde:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6ce2:	bf04      	itt	eq
   b6ce4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6ce8:	4770      	bxeq	lr
   b6cea:	b530      	push	{r4, r5, lr}
   b6cec:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6cf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6cf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6cf8:	e71c      	b.n	b6b34 <__adddf3+0x138>
   b6cfa:	bf00      	nop

000b6cfc <__aeabi_ul2d>:
   b6cfc:	ea50 0201 	orrs.w	r2, r0, r1
   b6d00:	bf08      	it	eq
   b6d02:	4770      	bxeq	lr
   b6d04:	b530      	push	{r4, r5, lr}
   b6d06:	f04f 0500 	mov.w	r5, #0
   b6d0a:	e00a      	b.n	b6d22 <__aeabi_l2d+0x16>

000b6d0c <__aeabi_l2d>:
   b6d0c:	ea50 0201 	orrs.w	r2, r0, r1
   b6d10:	bf08      	it	eq
   b6d12:	4770      	bxeq	lr
   b6d14:	b530      	push	{r4, r5, lr}
   b6d16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6d1a:	d502      	bpl.n	b6d22 <__aeabi_l2d+0x16>
   b6d1c:	4240      	negs	r0, r0
   b6d1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6d22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6d26:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6d2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6d2e:	f43f aed8 	beq.w	b6ae2 <__adddf3+0xe6>
   b6d32:	f04f 0203 	mov.w	r2, #3
   b6d36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d3a:	bf18      	it	ne
   b6d3c:	3203      	addne	r2, #3
   b6d3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d42:	bf18      	it	ne
   b6d44:	3203      	addne	r2, #3
   b6d46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6d4a:	f1c2 0320 	rsb	r3, r2, #32
   b6d4e:	fa00 fc03 	lsl.w	ip, r0, r3
   b6d52:	fa20 f002 	lsr.w	r0, r0, r2
   b6d56:	fa01 fe03 	lsl.w	lr, r1, r3
   b6d5a:	ea40 000e 	orr.w	r0, r0, lr
   b6d5e:	fa21 f102 	lsr.w	r1, r1, r2
   b6d62:	4414      	add	r4, r2
   b6d64:	e6bd      	b.n	b6ae2 <__adddf3+0xe6>
   b6d66:	bf00      	nop

000b6d68 <__aeabi_dmul>:
   b6d68:	b570      	push	{r4, r5, r6, lr}
   b6d6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6d6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6d72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6d76:	bf1d      	ittte	ne
   b6d78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6d7c:	ea94 0f0c 	teqne	r4, ip
   b6d80:	ea95 0f0c 	teqne	r5, ip
   b6d84:	f000 f8de 	bleq	b6f44 <__aeabi_dmul+0x1dc>
   b6d88:	442c      	add	r4, r5
   b6d8a:	ea81 0603 	eor.w	r6, r1, r3
   b6d8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6d92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6d96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6d9a:	bf18      	it	ne
   b6d9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6da8:	d038      	beq.n	b6e1c <__aeabi_dmul+0xb4>
   b6daa:	fba0 ce02 	umull	ip, lr, r0, r2
   b6dae:	f04f 0500 	mov.w	r5, #0
   b6db2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6db6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6dba:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6dbe:	f04f 0600 	mov.w	r6, #0
   b6dc2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6dc6:	f09c 0f00 	teq	ip, #0
   b6dca:	bf18      	it	ne
   b6dcc:	f04e 0e01 	orrne.w	lr, lr, #1
   b6dd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6dd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6dd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6ddc:	d204      	bcs.n	b6de8 <__aeabi_dmul+0x80>
   b6dde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6de2:	416d      	adcs	r5, r5
   b6de4:	eb46 0606 	adc.w	r6, r6, r6
   b6de8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6dec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6df0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6df4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6df8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6dfc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6e00:	bf88      	it	hi
   b6e02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e06:	d81e      	bhi.n	b6e46 <__aeabi_dmul+0xde>
   b6e08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6e0c:	bf08      	it	eq
   b6e0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6e12:	f150 0000 	adcs.w	r0, r0, #0
   b6e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6e1a:	bd70      	pop	{r4, r5, r6, pc}
   b6e1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6e20:	ea46 0101 	orr.w	r1, r6, r1
   b6e24:	ea40 0002 	orr.w	r0, r0, r2
   b6e28:	ea81 0103 	eor.w	r1, r1, r3
   b6e2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6e30:	bfc2      	ittt	gt
   b6e32:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6e36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6e3a:	bd70      	popgt	{r4, r5, r6, pc}
   b6e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e40:	f04f 0e00 	mov.w	lr, #0
   b6e44:	3c01      	subs	r4, #1
   b6e46:	f300 80ab 	bgt.w	b6fa0 <__aeabi_dmul+0x238>
   b6e4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6e4e:	bfde      	ittt	le
   b6e50:	2000      	movle	r0, #0
   b6e52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6e56:	bd70      	pople	{r4, r5, r6, pc}
   b6e58:	f1c4 0400 	rsb	r4, r4, #0
   b6e5c:	3c20      	subs	r4, #32
   b6e5e:	da35      	bge.n	b6ecc <__aeabi_dmul+0x164>
   b6e60:	340c      	adds	r4, #12
   b6e62:	dc1b      	bgt.n	b6e9c <__aeabi_dmul+0x134>
   b6e64:	f104 0414 	add.w	r4, r4, #20
   b6e68:	f1c4 0520 	rsb	r5, r4, #32
   b6e6c:	fa00 f305 	lsl.w	r3, r0, r5
   b6e70:	fa20 f004 	lsr.w	r0, r0, r4
   b6e74:	fa01 f205 	lsl.w	r2, r1, r5
   b6e78:	ea40 0002 	orr.w	r0, r0, r2
   b6e7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6e80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6e88:	fa21 f604 	lsr.w	r6, r1, r4
   b6e8c:	eb42 0106 	adc.w	r1, r2, r6
   b6e90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6e94:	bf08      	it	eq
   b6e96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6e9a:	bd70      	pop	{r4, r5, r6, pc}
   b6e9c:	f1c4 040c 	rsb	r4, r4, #12
   b6ea0:	f1c4 0520 	rsb	r5, r4, #32
   b6ea4:	fa00 f304 	lsl.w	r3, r0, r4
   b6ea8:	fa20 f005 	lsr.w	r0, r0, r5
   b6eac:	fa01 f204 	lsl.w	r2, r1, r4
   b6eb0:	ea40 0002 	orr.w	r0, r0, r2
   b6eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6eb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6ebc:	f141 0100 	adc.w	r1, r1, #0
   b6ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6ec4:	bf08      	it	eq
   b6ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6eca:	bd70      	pop	{r4, r5, r6, pc}
   b6ecc:	f1c4 0520 	rsb	r5, r4, #32
   b6ed0:	fa00 f205 	lsl.w	r2, r0, r5
   b6ed4:	ea4e 0e02 	orr.w	lr, lr, r2
   b6ed8:	fa20 f304 	lsr.w	r3, r0, r4
   b6edc:	fa01 f205 	lsl.w	r2, r1, r5
   b6ee0:	ea43 0302 	orr.w	r3, r3, r2
   b6ee4:	fa21 f004 	lsr.w	r0, r1, r4
   b6ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6eec:	fa21 f204 	lsr.w	r2, r1, r4
   b6ef0:	ea20 0002 	bic.w	r0, r0, r2
   b6ef4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6ef8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6efc:	bf08      	it	eq
   b6efe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f02:	bd70      	pop	{r4, r5, r6, pc}
   b6f04:	f094 0f00 	teq	r4, #0
   b6f08:	d10f      	bne.n	b6f2a <__aeabi_dmul+0x1c2>
   b6f0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6f0e:	0040      	lsls	r0, r0, #1
   b6f10:	eb41 0101 	adc.w	r1, r1, r1
   b6f14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6f18:	bf08      	it	eq
   b6f1a:	3c01      	subeq	r4, #1
   b6f1c:	d0f7      	beq.n	b6f0e <__aeabi_dmul+0x1a6>
   b6f1e:	ea41 0106 	orr.w	r1, r1, r6
   b6f22:	f095 0f00 	teq	r5, #0
   b6f26:	bf18      	it	ne
   b6f28:	4770      	bxne	lr
   b6f2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6f2e:	0052      	lsls	r2, r2, #1
   b6f30:	eb43 0303 	adc.w	r3, r3, r3
   b6f34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6f38:	bf08      	it	eq
   b6f3a:	3d01      	subeq	r5, #1
   b6f3c:	d0f7      	beq.n	b6f2e <__aeabi_dmul+0x1c6>
   b6f3e:	ea43 0306 	orr.w	r3, r3, r6
   b6f42:	4770      	bx	lr
   b6f44:	ea94 0f0c 	teq	r4, ip
   b6f48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6f4c:	bf18      	it	ne
   b6f4e:	ea95 0f0c 	teqne	r5, ip
   b6f52:	d00c      	beq.n	b6f6e <__aeabi_dmul+0x206>
   b6f54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6f58:	bf18      	it	ne
   b6f5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6f5e:	d1d1      	bne.n	b6f04 <__aeabi_dmul+0x19c>
   b6f60:	ea81 0103 	eor.w	r1, r1, r3
   b6f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f68:	f04f 0000 	mov.w	r0, #0
   b6f6c:	bd70      	pop	{r4, r5, r6, pc}
   b6f6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6f72:	bf06      	itte	eq
   b6f74:	4610      	moveq	r0, r2
   b6f76:	4619      	moveq	r1, r3
   b6f78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6f7c:	d019      	beq.n	b6fb2 <__aeabi_dmul+0x24a>
   b6f7e:	ea94 0f0c 	teq	r4, ip
   b6f82:	d102      	bne.n	b6f8a <__aeabi_dmul+0x222>
   b6f84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6f88:	d113      	bne.n	b6fb2 <__aeabi_dmul+0x24a>
   b6f8a:	ea95 0f0c 	teq	r5, ip
   b6f8e:	d105      	bne.n	b6f9c <__aeabi_dmul+0x234>
   b6f90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6f94:	bf1c      	itt	ne
   b6f96:	4610      	movne	r0, r2
   b6f98:	4619      	movne	r1, r3
   b6f9a:	d10a      	bne.n	b6fb2 <__aeabi_dmul+0x24a>
   b6f9c:	ea81 0103 	eor.w	r1, r1, r3
   b6fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6fa4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6fa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6fac:	f04f 0000 	mov.w	r0, #0
   b6fb0:	bd70      	pop	{r4, r5, r6, pc}
   b6fb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6fb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6fba:	bd70      	pop	{r4, r5, r6, pc}

000b6fbc <__aeabi_ddiv>:
   b6fbc:	b570      	push	{r4, r5, r6, lr}
   b6fbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6fc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6fc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6fca:	bf1d      	ittte	ne
   b6fcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6fd0:	ea94 0f0c 	teqne	r4, ip
   b6fd4:	ea95 0f0c 	teqne	r5, ip
   b6fd8:	f000 f8a7 	bleq	b712a <__aeabi_ddiv+0x16e>
   b6fdc:	eba4 0405 	sub.w	r4, r4, r5
   b6fe0:	ea81 0e03 	eor.w	lr, r1, r3
   b6fe4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6fe8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6fec:	f000 8088 	beq.w	b7100 <__aeabi_ddiv+0x144>
   b6ff0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ff4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6ff8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6ffc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7000:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7004:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7008:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b700c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7010:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7014:	429d      	cmp	r5, r3
   b7016:	bf08      	it	eq
   b7018:	4296      	cmpeq	r6, r2
   b701a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b701e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7022:	d202      	bcs.n	b702a <__aeabi_ddiv+0x6e>
   b7024:	085b      	lsrs	r3, r3, #1
   b7026:	ea4f 0232 	mov.w	r2, r2, rrx
   b702a:	1ab6      	subs	r6, r6, r2
   b702c:	eb65 0503 	sbc.w	r5, r5, r3
   b7030:	085b      	lsrs	r3, r3, #1
   b7032:	ea4f 0232 	mov.w	r2, r2, rrx
   b7036:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b703a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b703e:	ebb6 0e02 	subs.w	lr, r6, r2
   b7042:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7046:	bf22      	ittt	cs
   b7048:	1ab6      	subcs	r6, r6, r2
   b704a:	4675      	movcs	r5, lr
   b704c:	ea40 000c 	orrcs.w	r0, r0, ip
   b7050:	085b      	lsrs	r3, r3, #1
   b7052:	ea4f 0232 	mov.w	r2, r2, rrx
   b7056:	ebb6 0e02 	subs.w	lr, r6, r2
   b705a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b705e:	bf22      	ittt	cs
   b7060:	1ab6      	subcs	r6, r6, r2
   b7062:	4675      	movcs	r5, lr
   b7064:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7068:	085b      	lsrs	r3, r3, #1
   b706a:	ea4f 0232 	mov.w	r2, r2, rrx
   b706e:	ebb6 0e02 	subs.w	lr, r6, r2
   b7072:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7076:	bf22      	ittt	cs
   b7078:	1ab6      	subcs	r6, r6, r2
   b707a:	4675      	movcs	r5, lr
   b707c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7080:	085b      	lsrs	r3, r3, #1
   b7082:	ea4f 0232 	mov.w	r2, r2, rrx
   b7086:	ebb6 0e02 	subs.w	lr, r6, r2
   b708a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b708e:	bf22      	ittt	cs
   b7090:	1ab6      	subcs	r6, r6, r2
   b7092:	4675      	movcs	r5, lr
   b7094:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7098:	ea55 0e06 	orrs.w	lr, r5, r6
   b709c:	d018      	beq.n	b70d0 <__aeabi_ddiv+0x114>
   b709e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b70a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b70a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b70aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b70ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b70b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b70b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b70ba:	d1c0      	bne.n	b703e <__aeabi_ddiv+0x82>
   b70bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b70c0:	d10b      	bne.n	b70da <__aeabi_ddiv+0x11e>
   b70c2:	ea41 0100 	orr.w	r1, r1, r0
   b70c6:	f04f 0000 	mov.w	r0, #0
   b70ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b70ce:	e7b6      	b.n	b703e <__aeabi_ddiv+0x82>
   b70d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b70d4:	bf04      	itt	eq
   b70d6:	4301      	orreq	r1, r0
   b70d8:	2000      	moveq	r0, #0
   b70da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b70de:	bf88      	it	hi
   b70e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b70e4:	f63f aeaf 	bhi.w	b6e46 <__aeabi_dmul+0xde>
   b70e8:	ebb5 0c03 	subs.w	ip, r5, r3
   b70ec:	bf04      	itt	eq
   b70ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   b70f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b70f6:	f150 0000 	adcs.w	r0, r0, #0
   b70fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b70fe:	bd70      	pop	{r4, r5, r6, pc}
   b7100:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7104:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7108:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b710c:	bfc2      	ittt	gt
   b710e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7112:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7116:	bd70      	popgt	{r4, r5, r6, pc}
   b7118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b711c:	f04f 0e00 	mov.w	lr, #0
   b7120:	3c01      	subs	r4, #1
   b7122:	e690      	b.n	b6e46 <__aeabi_dmul+0xde>
   b7124:	ea45 0e06 	orr.w	lr, r5, r6
   b7128:	e68d      	b.n	b6e46 <__aeabi_dmul+0xde>
   b712a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b712e:	ea94 0f0c 	teq	r4, ip
   b7132:	bf08      	it	eq
   b7134:	ea95 0f0c 	teqeq	r5, ip
   b7138:	f43f af3b 	beq.w	b6fb2 <__aeabi_dmul+0x24a>
   b713c:	ea94 0f0c 	teq	r4, ip
   b7140:	d10a      	bne.n	b7158 <__aeabi_ddiv+0x19c>
   b7142:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7146:	f47f af34 	bne.w	b6fb2 <__aeabi_dmul+0x24a>
   b714a:	ea95 0f0c 	teq	r5, ip
   b714e:	f47f af25 	bne.w	b6f9c <__aeabi_dmul+0x234>
   b7152:	4610      	mov	r0, r2
   b7154:	4619      	mov	r1, r3
   b7156:	e72c      	b.n	b6fb2 <__aeabi_dmul+0x24a>
   b7158:	ea95 0f0c 	teq	r5, ip
   b715c:	d106      	bne.n	b716c <__aeabi_ddiv+0x1b0>
   b715e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7162:	f43f aefd 	beq.w	b6f60 <__aeabi_dmul+0x1f8>
   b7166:	4610      	mov	r0, r2
   b7168:	4619      	mov	r1, r3
   b716a:	e722      	b.n	b6fb2 <__aeabi_dmul+0x24a>
   b716c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7170:	bf18      	it	ne
   b7172:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7176:	f47f aec5 	bne.w	b6f04 <__aeabi_dmul+0x19c>
   b717a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b717e:	f47f af0d 	bne.w	b6f9c <__aeabi_dmul+0x234>
   b7182:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7186:	f47f aeeb 	bne.w	b6f60 <__aeabi_dmul+0x1f8>
   b718a:	e712      	b.n	b6fb2 <__aeabi_dmul+0x24a>

000b718c <__aeabi_d2f>:
   b718c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7190:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7194:	bf24      	itt	cs
   b7196:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b719a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b719e:	d90d      	bls.n	b71bc <__aeabi_d2f+0x30>
   b71a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b71a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b71a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b71ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b71b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b71b4:	bf08      	it	eq
   b71b6:	f020 0001 	biceq.w	r0, r0, #1
   b71ba:	4770      	bx	lr
   b71bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b71c0:	d121      	bne.n	b7206 <__aeabi_d2f+0x7a>
   b71c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b71c6:	bfbc      	itt	lt
   b71c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b71cc:	4770      	bxlt	lr
   b71ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b71d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b71d6:	f1c2 0218 	rsb	r2, r2, #24
   b71da:	f1c2 0c20 	rsb	ip, r2, #32
   b71de:	fa10 f30c 	lsls.w	r3, r0, ip
   b71e2:	fa20 f002 	lsr.w	r0, r0, r2
   b71e6:	bf18      	it	ne
   b71e8:	f040 0001 	orrne.w	r0, r0, #1
   b71ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b71f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b71f4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b71f8:	ea40 000c 	orr.w	r0, r0, ip
   b71fc:	fa23 f302 	lsr.w	r3, r3, r2
   b7200:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7204:	e7cc      	b.n	b71a0 <__aeabi_d2f+0x14>
   b7206:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b720a:	d107      	bne.n	b721c <__aeabi_d2f+0x90>
   b720c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7210:	bf1e      	ittt	ne
   b7212:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7216:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b721a:	4770      	bxne	lr
   b721c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7220:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7224:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7228:	4770      	bx	lr
   b722a:	bf00      	nop

000b722c <__aeabi_frsub>:
   b722c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b7230:	e002      	b.n	b7238 <__addsf3>
   b7232:	bf00      	nop

000b7234 <__aeabi_fsub>:
   b7234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7238 <__addsf3>:
   b7238:	0042      	lsls	r2, r0, #1
   b723a:	bf1f      	itttt	ne
   b723c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b7240:	ea92 0f03 	teqne	r2, r3
   b7244:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b7248:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b724c:	d06a      	beq.n	b7324 <__addsf3+0xec>
   b724e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b7252:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b7256:	bfc1      	itttt	gt
   b7258:	18d2      	addgt	r2, r2, r3
   b725a:	4041      	eorgt	r1, r0
   b725c:	4048      	eorgt	r0, r1
   b725e:	4041      	eorgt	r1, r0
   b7260:	bfb8      	it	lt
   b7262:	425b      	neglt	r3, r3
   b7264:	2b19      	cmp	r3, #25
   b7266:	bf88      	it	hi
   b7268:	4770      	bxhi	lr
   b726a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b726e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7272:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b7276:	bf18      	it	ne
   b7278:	4240      	negne	r0, r0
   b727a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b727e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b7282:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b7286:	bf18      	it	ne
   b7288:	4249      	negne	r1, r1
   b728a:	ea92 0f03 	teq	r2, r3
   b728e:	d03f      	beq.n	b7310 <__addsf3+0xd8>
   b7290:	f1a2 0201 	sub.w	r2, r2, #1
   b7294:	fa41 fc03 	asr.w	ip, r1, r3
   b7298:	eb10 000c 	adds.w	r0, r0, ip
   b729c:	f1c3 0320 	rsb	r3, r3, #32
   b72a0:	fa01 f103 	lsl.w	r1, r1, r3
   b72a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b72a8:	d502      	bpl.n	b72b0 <__addsf3+0x78>
   b72aa:	4249      	negs	r1, r1
   b72ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b72b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b72b4:	d313      	bcc.n	b72de <__addsf3+0xa6>
   b72b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b72ba:	d306      	bcc.n	b72ca <__addsf3+0x92>
   b72bc:	0840      	lsrs	r0, r0, #1
   b72be:	ea4f 0131 	mov.w	r1, r1, rrx
   b72c2:	f102 0201 	add.w	r2, r2, #1
   b72c6:	2afe      	cmp	r2, #254	; 0xfe
   b72c8:	d251      	bcs.n	b736e <__addsf3+0x136>
   b72ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b72ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b72d2:	bf08      	it	eq
   b72d4:	f020 0001 	biceq.w	r0, r0, #1
   b72d8:	ea40 0003 	orr.w	r0, r0, r3
   b72dc:	4770      	bx	lr
   b72de:	0049      	lsls	r1, r1, #1
   b72e0:	eb40 0000 	adc.w	r0, r0, r0
   b72e4:	3a01      	subs	r2, #1
   b72e6:	bf28      	it	cs
   b72e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b72ec:	d2ed      	bcs.n	b72ca <__addsf3+0x92>
   b72ee:	fab0 fc80 	clz	ip, r0
   b72f2:	f1ac 0c08 	sub.w	ip, ip, #8
   b72f6:	ebb2 020c 	subs.w	r2, r2, ip
   b72fa:	fa00 f00c 	lsl.w	r0, r0, ip
   b72fe:	bfaa      	itet	ge
   b7300:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7304:	4252      	neglt	r2, r2
   b7306:	4318      	orrge	r0, r3
   b7308:	bfbc      	itt	lt
   b730a:	40d0      	lsrlt	r0, r2
   b730c:	4318      	orrlt	r0, r3
   b730e:	4770      	bx	lr
   b7310:	f092 0f00 	teq	r2, #0
   b7314:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7318:	bf06      	itte	eq
   b731a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b731e:	3201      	addeq	r2, #1
   b7320:	3b01      	subne	r3, #1
   b7322:	e7b5      	b.n	b7290 <__addsf3+0x58>
   b7324:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7328:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b732c:	bf18      	it	ne
   b732e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7332:	d021      	beq.n	b7378 <__addsf3+0x140>
   b7334:	ea92 0f03 	teq	r2, r3
   b7338:	d004      	beq.n	b7344 <__addsf3+0x10c>
   b733a:	f092 0f00 	teq	r2, #0
   b733e:	bf08      	it	eq
   b7340:	4608      	moveq	r0, r1
   b7342:	4770      	bx	lr
   b7344:	ea90 0f01 	teq	r0, r1
   b7348:	bf1c      	itt	ne
   b734a:	2000      	movne	r0, #0
   b734c:	4770      	bxne	lr
   b734e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b7352:	d104      	bne.n	b735e <__addsf3+0x126>
   b7354:	0040      	lsls	r0, r0, #1
   b7356:	bf28      	it	cs
   b7358:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b735c:	4770      	bx	lr
   b735e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b7362:	bf3c      	itt	cc
   b7364:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b7368:	4770      	bxcc	lr
   b736a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b736e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b7372:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7376:	4770      	bx	lr
   b7378:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b737c:	bf16      	itet	ne
   b737e:	4608      	movne	r0, r1
   b7380:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b7384:	4601      	movne	r1, r0
   b7386:	0242      	lsls	r2, r0, #9
   b7388:	bf06      	itte	eq
   b738a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b738e:	ea90 0f01 	teqeq	r0, r1
   b7392:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b7396:	4770      	bx	lr

000b7398 <__aeabi_ui2f>:
   b7398:	f04f 0300 	mov.w	r3, #0
   b739c:	e004      	b.n	b73a8 <__aeabi_i2f+0x8>
   b739e:	bf00      	nop

000b73a0 <__aeabi_i2f>:
   b73a0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b73a4:	bf48      	it	mi
   b73a6:	4240      	negmi	r0, r0
   b73a8:	ea5f 0c00 	movs.w	ip, r0
   b73ac:	bf08      	it	eq
   b73ae:	4770      	bxeq	lr
   b73b0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b73b4:	4601      	mov	r1, r0
   b73b6:	f04f 0000 	mov.w	r0, #0
   b73ba:	e01c      	b.n	b73f6 <__aeabi_l2f+0x2a>

000b73bc <__aeabi_ul2f>:
   b73bc:	ea50 0201 	orrs.w	r2, r0, r1
   b73c0:	bf08      	it	eq
   b73c2:	4770      	bxeq	lr
   b73c4:	f04f 0300 	mov.w	r3, #0
   b73c8:	e00a      	b.n	b73e0 <__aeabi_l2f+0x14>
   b73ca:	bf00      	nop

000b73cc <__aeabi_l2f>:
   b73cc:	ea50 0201 	orrs.w	r2, r0, r1
   b73d0:	bf08      	it	eq
   b73d2:	4770      	bxeq	lr
   b73d4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b73d8:	d502      	bpl.n	b73e0 <__aeabi_l2f+0x14>
   b73da:	4240      	negs	r0, r0
   b73dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b73e0:	ea5f 0c01 	movs.w	ip, r1
   b73e4:	bf02      	ittt	eq
   b73e6:	4684      	moveq	ip, r0
   b73e8:	4601      	moveq	r1, r0
   b73ea:	2000      	moveq	r0, #0
   b73ec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b73f0:	bf08      	it	eq
   b73f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b73f6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b73fa:	fabc f28c 	clz	r2, ip
   b73fe:	3a08      	subs	r2, #8
   b7400:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7404:	db10      	blt.n	b7428 <__aeabi_l2f+0x5c>
   b7406:	fa01 fc02 	lsl.w	ip, r1, r2
   b740a:	4463      	add	r3, ip
   b740c:	fa00 fc02 	lsl.w	ip, r0, r2
   b7410:	f1c2 0220 	rsb	r2, r2, #32
   b7414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7418:	fa20 f202 	lsr.w	r2, r0, r2
   b741c:	eb43 0002 	adc.w	r0, r3, r2
   b7420:	bf08      	it	eq
   b7422:	f020 0001 	biceq.w	r0, r0, #1
   b7426:	4770      	bx	lr
   b7428:	f102 0220 	add.w	r2, r2, #32
   b742c:	fa01 fc02 	lsl.w	ip, r1, r2
   b7430:	f1c2 0220 	rsb	r2, r2, #32
   b7434:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7438:	fa21 f202 	lsr.w	r2, r1, r2
   b743c:	eb43 0002 	adc.w	r0, r3, r2
   b7440:	bf08      	it	eq
   b7442:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7446:	4770      	bx	lr

000b7448 <__aeabi_ldivmod>:
   b7448:	b97b      	cbnz	r3, b746a <__aeabi_ldivmod+0x22>
   b744a:	b972      	cbnz	r2, b746a <__aeabi_ldivmod+0x22>
   b744c:	2900      	cmp	r1, #0
   b744e:	bfbe      	ittt	lt
   b7450:	2000      	movlt	r0, #0
   b7452:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b7456:	e006      	blt.n	b7466 <__aeabi_ldivmod+0x1e>
   b7458:	bf08      	it	eq
   b745a:	2800      	cmpeq	r0, #0
   b745c:	bf1c      	itt	ne
   b745e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b7462:	f04f 30ff 	movne.w	r0, #4294967295
   b7466:	f000 b9a7 	b.w	b77b8 <__aeabi_idiv0>
   b746a:	f1ad 0c08 	sub.w	ip, sp, #8
   b746e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7472:	2900      	cmp	r1, #0
   b7474:	db09      	blt.n	b748a <__aeabi_ldivmod+0x42>
   b7476:	2b00      	cmp	r3, #0
   b7478:	db1a      	blt.n	b74b0 <__aeabi_ldivmod+0x68>
   b747a:	f000 f835 	bl	b74e8 <__udivmoddi4>
   b747e:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7486:	b004      	add	sp, #16
   b7488:	4770      	bx	lr
   b748a:	4240      	negs	r0, r0
   b748c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7490:	2b00      	cmp	r3, #0
   b7492:	db1b      	blt.n	b74cc <__aeabi_ldivmod+0x84>
   b7494:	f000 f828 	bl	b74e8 <__udivmoddi4>
   b7498:	f8dd e004 	ldr.w	lr, [sp, #4]
   b749c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b74a0:	b004      	add	sp, #16
   b74a2:	4240      	negs	r0, r0
   b74a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b74a8:	4252      	negs	r2, r2
   b74aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b74ae:	4770      	bx	lr
   b74b0:	4252      	negs	r2, r2
   b74b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b74b6:	f000 f817 	bl	b74e8 <__udivmoddi4>
   b74ba:	f8dd e004 	ldr.w	lr, [sp, #4]
   b74be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b74c2:	b004      	add	sp, #16
   b74c4:	4240      	negs	r0, r0
   b74c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b74ca:	4770      	bx	lr
   b74cc:	4252      	negs	r2, r2
   b74ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b74d2:	f000 f809 	bl	b74e8 <__udivmoddi4>
   b74d6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b74da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b74de:	b004      	add	sp, #16
   b74e0:	4252      	negs	r2, r2
   b74e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b74e6:	4770      	bx	lr

000b74e8 <__udivmoddi4>:
   b74e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b74ec:	9d08      	ldr	r5, [sp, #32]
   b74ee:	4604      	mov	r4, r0
   b74f0:	468e      	mov	lr, r1
   b74f2:	2b00      	cmp	r3, #0
   b74f4:	d14d      	bne.n	b7592 <__udivmoddi4+0xaa>
   b74f6:	428a      	cmp	r2, r1
   b74f8:	4694      	mov	ip, r2
   b74fa:	d969      	bls.n	b75d0 <__udivmoddi4+0xe8>
   b74fc:	fab2 f282 	clz	r2, r2
   b7500:	b152      	cbz	r2, b7518 <__udivmoddi4+0x30>
   b7502:	fa01 f302 	lsl.w	r3, r1, r2
   b7506:	f1c2 0120 	rsb	r1, r2, #32
   b750a:	fa20 f101 	lsr.w	r1, r0, r1
   b750e:	fa0c fc02 	lsl.w	ip, ip, r2
   b7512:	ea41 0e03 	orr.w	lr, r1, r3
   b7516:	4094      	lsls	r4, r2
   b7518:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b751c:	0c21      	lsrs	r1, r4, #16
   b751e:	fbbe f6f8 	udiv	r6, lr, r8
   b7522:	fa1f f78c 	uxth.w	r7, ip
   b7526:	fb08 e316 	mls	r3, r8, r6, lr
   b752a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b752e:	fb06 f107 	mul.w	r1, r6, r7
   b7532:	4299      	cmp	r1, r3
   b7534:	d90a      	bls.n	b754c <__udivmoddi4+0x64>
   b7536:	eb1c 0303 	adds.w	r3, ip, r3
   b753a:	f106 30ff 	add.w	r0, r6, #4294967295
   b753e:	f080 811f 	bcs.w	b7780 <__udivmoddi4+0x298>
   b7542:	4299      	cmp	r1, r3
   b7544:	f240 811c 	bls.w	b7780 <__udivmoddi4+0x298>
   b7548:	3e02      	subs	r6, #2
   b754a:	4463      	add	r3, ip
   b754c:	1a5b      	subs	r3, r3, r1
   b754e:	b2a4      	uxth	r4, r4
   b7550:	fbb3 f0f8 	udiv	r0, r3, r8
   b7554:	fb08 3310 	mls	r3, r8, r0, r3
   b7558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b755c:	fb00 f707 	mul.w	r7, r0, r7
   b7560:	42a7      	cmp	r7, r4
   b7562:	d90a      	bls.n	b757a <__udivmoddi4+0x92>
   b7564:	eb1c 0404 	adds.w	r4, ip, r4
   b7568:	f100 33ff 	add.w	r3, r0, #4294967295
   b756c:	f080 810a 	bcs.w	b7784 <__udivmoddi4+0x29c>
   b7570:	42a7      	cmp	r7, r4
   b7572:	f240 8107 	bls.w	b7784 <__udivmoddi4+0x29c>
   b7576:	4464      	add	r4, ip
   b7578:	3802      	subs	r0, #2
   b757a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b757e:	1be4      	subs	r4, r4, r7
   b7580:	2600      	movs	r6, #0
   b7582:	b11d      	cbz	r5, b758c <__udivmoddi4+0xa4>
   b7584:	40d4      	lsrs	r4, r2
   b7586:	2300      	movs	r3, #0
   b7588:	e9c5 4300 	strd	r4, r3, [r5]
   b758c:	4631      	mov	r1, r6
   b758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7592:	428b      	cmp	r3, r1
   b7594:	d909      	bls.n	b75aa <__udivmoddi4+0xc2>
   b7596:	2d00      	cmp	r5, #0
   b7598:	f000 80ef 	beq.w	b777a <__udivmoddi4+0x292>
   b759c:	2600      	movs	r6, #0
   b759e:	e9c5 0100 	strd	r0, r1, [r5]
   b75a2:	4630      	mov	r0, r6
   b75a4:	4631      	mov	r1, r6
   b75a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b75aa:	fab3 f683 	clz	r6, r3
   b75ae:	2e00      	cmp	r6, #0
   b75b0:	d14a      	bne.n	b7648 <__udivmoddi4+0x160>
   b75b2:	428b      	cmp	r3, r1
   b75b4:	d302      	bcc.n	b75bc <__udivmoddi4+0xd4>
   b75b6:	4282      	cmp	r2, r0
   b75b8:	f200 80f9 	bhi.w	b77ae <__udivmoddi4+0x2c6>
   b75bc:	1a84      	subs	r4, r0, r2
   b75be:	eb61 0303 	sbc.w	r3, r1, r3
   b75c2:	2001      	movs	r0, #1
   b75c4:	469e      	mov	lr, r3
   b75c6:	2d00      	cmp	r5, #0
   b75c8:	d0e0      	beq.n	b758c <__udivmoddi4+0xa4>
   b75ca:	e9c5 4e00 	strd	r4, lr, [r5]
   b75ce:	e7dd      	b.n	b758c <__udivmoddi4+0xa4>
   b75d0:	b902      	cbnz	r2, b75d4 <__udivmoddi4+0xec>
   b75d2:	deff      	udf	#255	; 0xff
   b75d4:	fab2 f282 	clz	r2, r2
   b75d8:	2a00      	cmp	r2, #0
   b75da:	f040 8092 	bne.w	b7702 <__udivmoddi4+0x21a>
   b75de:	eba1 010c 	sub.w	r1, r1, ip
   b75e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b75e6:	fa1f fe8c 	uxth.w	lr, ip
   b75ea:	2601      	movs	r6, #1
   b75ec:	0c20      	lsrs	r0, r4, #16
   b75ee:	fbb1 f3f7 	udiv	r3, r1, r7
   b75f2:	fb07 1113 	mls	r1, r7, r3, r1
   b75f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b75fa:	fb0e f003 	mul.w	r0, lr, r3
   b75fe:	4288      	cmp	r0, r1
   b7600:	d908      	bls.n	b7614 <__udivmoddi4+0x12c>
   b7602:	eb1c 0101 	adds.w	r1, ip, r1
   b7606:	f103 38ff 	add.w	r8, r3, #4294967295
   b760a:	d202      	bcs.n	b7612 <__udivmoddi4+0x12a>
   b760c:	4288      	cmp	r0, r1
   b760e:	f200 80cb 	bhi.w	b77a8 <__udivmoddi4+0x2c0>
   b7612:	4643      	mov	r3, r8
   b7614:	1a09      	subs	r1, r1, r0
   b7616:	b2a4      	uxth	r4, r4
   b7618:	fbb1 f0f7 	udiv	r0, r1, r7
   b761c:	fb07 1110 	mls	r1, r7, r0, r1
   b7620:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7624:	fb0e fe00 	mul.w	lr, lr, r0
   b7628:	45a6      	cmp	lr, r4
   b762a:	d908      	bls.n	b763e <__udivmoddi4+0x156>
   b762c:	eb1c 0404 	adds.w	r4, ip, r4
   b7630:	f100 31ff 	add.w	r1, r0, #4294967295
   b7634:	d202      	bcs.n	b763c <__udivmoddi4+0x154>
   b7636:	45a6      	cmp	lr, r4
   b7638:	f200 80bb 	bhi.w	b77b2 <__udivmoddi4+0x2ca>
   b763c:	4608      	mov	r0, r1
   b763e:	eba4 040e 	sub.w	r4, r4, lr
   b7642:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7646:	e79c      	b.n	b7582 <__udivmoddi4+0x9a>
   b7648:	f1c6 0720 	rsb	r7, r6, #32
   b764c:	40b3      	lsls	r3, r6
   b764e:	fa22 fc07 	lsr.w	ip, r2, r7
   b7652:	ea4c 0c03 	orr.w	ip, ip, r3
   b7656:	fa20 f407 	lsr.w	r4, r0, r7
   b765a:	fa01 f306 	lsl.w	r3, r1, r6
   b765e:	431c      	orrs	r4, r3
   b7660:	40f9      	lsrs	r1, r7
   b7662:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7666:	fa00 f306 	lsl.w	r3, r0, r6
   b766a:	fbb1 f8f9 	udiv	r8, r1, r9
   b766e:	0c20      	lsrs	r0, r4, #16
   b7670:	fa1f fe8c 	uxth.w	lr, ip
   b7674:	fb09 1118 	mls	r1, r9, r8, r1
   b7678:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b767c:	fb08 f00e 	mul.w	r0, r8, lr
   b7680:	4288      	cmp	r0, r1
   b7682:	fa02 f206 	lsl.w	r2, r2, r6
   b7686:	d90b      	bls.n	b76a0 <__udivmoddi4+0x1b8>
   b7688:	eb1c 0101 	adds.w	r1, ip, r1
   b768c:	f108 3aff 	add.w	sl, r8, #4294967295
   b7690:	f080 8088 	bcs.w	b77a4 <__udivmoddi4+0x2bc>
   b7694:	4288      	cmp	r0, r1
   b7696:	f240 8085 	bls.w	b77a4 <__udivmoddi4+0x2bc>
   b769a:	f1a8 0802 	sub.w	r8, r8, #2
   b769e:	4461      	add	r1, ip
   b76a0:	1a09      	subs	r1, r1, r0
   b76a2:	b2a4      	uxth	r4, r4
   b76a4:	fbb1 f0f9 	udiv	r0, r1, r9
   b76a8:	fb09 1110 	mls	r1, r9, r0, r1
   b76ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b76b0:	fb00 fe0e 	mul.w	lr, r0, lr
   b76b4:	458e      	cmp	lr, r1
   b76b6:	d908      	bls.n	b76ca <__udivmoddi4+0x1e2>
   b76b8:	eb1c 0101 	adds.w	r1, ip, r1
   b76bc:	f100 34ff 	add.w	r4, r0, #4294967295
   b76c0:	d26c      	bcs.n	b779c <__udivmoddi4+0x2b4>
   b76c2:	458e      	cmp	lr, r1
   b76c4:	d96a      	bls.n	b779c <__udivmoddi4+0x2b4>
   b76c6:	3802      	subs	r0, #2
   b76c8:	4461      	add	r1, ip
   b76ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b76ce:	fba0 9402 	umull	r9, r4, r0, r2
   b76d2:	eba1 010e 	sub.w	r1, r1, lr
   b76d6:	42a1      	cmp	r1, r4
   b76d8:	46c8      	mov	r8, r9
   b76da:	46a6      	mov	lr, r4
   b76dc:	d356      	bcc.n	b778c <__udivmoddi4+0x2a4>
   b76de:	d053      	beq.n	b7788 <__udivmoddi4+0x2a0>
   b76e0:	b15d      	cbz	r5, b76fa <__udivmoddi4+0x212>
   b76e2:	ebb3 0208 	subs.w	r2, r3, r8
   b76e6:	eb61 010e 	sbc.w	r1, r1, lr
   b76ea:	fa01 f707 	lsl.w	r7, r1, r7
   b76ee:	fa22 f306 	lsr.w	r3, r2, r6
   b76f2:	40f1      	lsrs	r1, r6
   b76f4:	431f      	orrs	r7, r3
   b76f6:	e9c5 7100 	strd	r7, r1, [r5]
   b76fa:	2600      	movs	r6, #0
   b76fc:	4631      	mov	r1, r6
   b76fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7702:	f1c2 0320 	rsb	r3, r2, #32
   b7706:	40d8      	lsrs	r0, r3
   b7708:	fa0c fc02 	lsl.w	ip, ip, r2
   b770c:	fa21 f303 	lsr.w	r3, r1, r3
   b7710:	4091      	lsls	r1, r2
   b7712:	4301      	orrs	r1, r0
   b7714:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7718:	fa1f fe8c 	uxth.w	lr, ip
   b771c:	fbb3 f0f7 	udiv	r0, r3, r7
   b7720:	fb07 3610 	mls	r6, r7, r0, r3
   b7724:	0c0b      	lsrs	r3, r1, #16
   b7726:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b772a:	fb00 f60e 	mul.w	r6, r0, lr
   b772e:	429e      	cmp	r6, r3
   b7730:	fa04 f402 	lsl.w	r4, r4, r2
   b7734:	d908      	bls.n	b7748 <__udivmoddi4+0x260>
   b7736:	eb1c 0303 	adds.w	r3, ip, r3
   b773a:	f100 38ff 	add.w	r8, r0, #4294967295
   b773e:	d22f      	bcs.n	b77a0 <__udivmoddi4+0x2b8>
   b7740:	429e      	cmp	r6, r3
   b7742:	d92d      	bls.n	b77a0 <__udivmoddi4+0x2b8>
   b7744:	3802      	subs	r0, #2
   b7746:	4463      	add	r3, ip
   b7748:	1b9b      	subs	r3, r3, r6
   b774a:	b289      	uxth	r1, r1
   b774c:	fbb3 f6f7 	udiv	r6, r3, r7
   b7750:	fb07 3316 	mls	r3, r7, r6, r3
   b7754:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b7758:	fb06 f30e 	mul.w	r3, r6, lr
   b775c:	428b      	cmp	r3, r1
   b775e:	d908      	bls.n	b7772 <__udivmoddi4+0x28a>
   b7760:	eb1c 0101 	adds.w	r1, ip, r1
   b7764:	f106 38ff 	add.w	r8, r6, #4294967295
   b7768:	d216      	bcs.n	b7798 <__udivmoddi4+0x2b0>
   b776a:	428b      	cmp	r3, r1
   b776c:	d914      	bls.n	b7798 <__udivmoddi4+0x2b0>
   b776e:	3e02      	subs	r6, #2
   b7770:	4461      	add	r1, ip
   b7772:	1ac9      	subs	r1, r1, r3
   b7774:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b7778:	e738      	b.n	b75ec <__udivmoddi4+0x104>
   b777a:	462e      	mov	r6, r5
   b777c:	4628      	mov	r0, r5
   b777e:	e705      	b.n	b758c <__udivmoddi4+0xa4>
   b7780:	4606      	mov	r6, r0
   b7782:	e6e3      	b.n	b754c <__udivmoddi4+0x64>
   b7784:	4618      	mov	r0, r3
   b7786:	e6f8      	b.n	b757a <__udivmoddi4+0x92>
   b7788:	454b      	cmp	r3, r9
   b778a:	d2a9      	bcs.n	b76e0 <__udivmoddi4+0x1f8>
   b778c:	ebb9 0802 	subs.w	r8, r9, r2
   b7790:	eb64 0e0c 	sbc.w	lr, r4, ip
   b7794:	3801      	subs	r0, #1
   b7796:	e7a3      	b.n	b76e0 <__udivmoddi4+0x1f8>
   b7798:	4646      	mov	r6, r8
   b779a:	e7ea      	b.n	b7772 <__udivmoddi4+0x28a>
   b779c:	4620      	mov	r0, r4
   b779e:	e794      	b.n	b76ca <__udivmoddi4+0x1e2>
   b77a0:	4640      	mov	r0, r8
   b77a2:	e7d1      	b.n	b7748 <__udivmoddi4+0x260>
   b77a4:	46d0      	mov	r8, sl
   b77a6:	e77b      	b.n	b76a0 <__udivmoddi4+0x1b8>
   b77a8:	3b02      	subs	r3, #2
   b77aa:	4461      	add	r1, ip
   b77ac:	e732      	b.n	b7614 <__udivmoddi4+0x12c>
   b77ae:	4630      	mov	r0, r6
   b77b0:	e709      	b.n	b75c6 <__udivmoddi4+0xde>
   b77b2:	4464      	add	r4, ip
   b77b4:	3802      	subs	r0, #2
   b77b6:	e742      	b.n	b763e <__udivmoddi4+0x156>

000b77b8 <__aeabi_idiv0>:
   b77b8:	4770      	bx	lr
   b77ba:	bf00      	nop

000b77bc <asctime_r>:
   b77bc:	b510      	push	{r4, lr}
   b77be:	460c      	mov	r4, r1
   b77c0:	6941      	ldr	r1, [r0, #20]
   b77c2:	6903      	ldr	r3, [r0, #16]
   b77c4:	6982      	ldr	r2, [r0, #24]
   b77c6:	b086      	sub	sp, #24
   b77c8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b77cc:	9104      	str	r1, [sp, #16]
   b77ce:	6801      	ldr	r1, [r0, #0]
   b77d0:	9103      	str	r1, [sp, #12]
   b77d2:	6841      	ldr	r1, [r0, #4]
   b77d4:	9102      	str	r1, [sp, #8]
   b77d6:	6881      	ldr	r1, [r0, #8]
   b77d8:	9101      	str	r1, [sp, #4]
   b77da:	68c1      	ldr	r1, [r0, #12]
   b77dc:	9100      	str	r1, [sp, #0]
   b77de:	4907      	ldr	r1, [pc, #28]	; (b77fc <asctime_r+0x40>)
   b77e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b77e4:	440b      	add	r3, r1
   b77e6:	4906      	ldr	r1, [pc, #24]	; (b7800 <asctime_r+0x44>)
   b77e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b77ec:	440a      	add	r2, r1
   b77ee:	4620      	mov	r0, r4
   b77f0:	4904      	ldr	r1, [pc, #16]	; (b7804 <asctime_r+0x48>)
   b77f2:	f7fe f829 	bl	b5848 <siprintf>
   b77f6:	4620      	mov	r0, r4
   b77f8:	b006      	add	sp, #24
   b77fa:	bd10      	pop	{r4, pc}
   b77fc:	000b7da2 	.word	0x000b7da2
   b7800:	000b7d8d 	.word	0x000b7d8d
   b7804:	000b7d6d 	.word	0x000b7d6d

000b7808 <atexit>:
   b7808:	2300      	movs	r3, #0
   b780a:	4601      	mov	r1, r0
   b780c:	461a      	mov	r2, r3
   b780e:	4618      	mov	r0, r3
   b7810:	f000 b87a 	b.w	b7908 <__register_exitproc>

000b7814 <isprint>:
   b7814:	4b02      	ldr	r3, [pc, #8]	; (b7820 <isprint+0xc>)
   b7816:	4418      	add	r0, r3
   b7818:	7840      	ldrb	r0, [r0, #1]
   b781a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b781e:	4770      	bx	lr
   b7820:	000b7e5a 	.word	0x000b7e5a

000b7824 <memcpy>:
   b7824:	440a      	add	r2, r1
   b7826:	4291      	cmp	r1, r2
   b7828:	f100 33ff 	add.w	r3, r0, #4294967295
   b782c:	d100      	bne.n	b7830 <memcpy+0xc>
   b782e:	4770      	bx	lr
   b7830:	b510      	push	{r4, lr}
   b7832:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7836:	f803 4f01 	strb.w	r4, [r3, #1]!
   b783a:	4291      	cmp	r1, r2
   b783c:	d1f9      	bne.n	b7832 <memcpy+0xe>
   b783e:	bd10      	pop	{r4, pc}

000b7840 <memset>:
   b7840:	4402      	add	r2, r0
   b7842:	4603      	mov	r3, r0
   b7844:	4293      	cmp	r3, r2
   b7846:	d100      	bne.n	b784a <memset+0xa>
   b7848:	4770      	bx	lr
   b784a:	f803 1b01 	strb.w	r1, [r3], #1
   b784e:	e7f9      	b.n	b7844 <memset+0x4>

000b7850 <srand>:
   b7850:	b538      	push	{r3, r4, r5, lr}
   b7852:	4b10      	ldr	r3, [pc, #64]	; (b7894 <srand+0x44>)
   b7854:	681d      	ldr	r5, [r3, #0]
   b7856:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7858:	4604      	mov	r4, r0
   b785a:	b9b3      	cbnz	r3, b788a <srand+0x3a>
   b785c:	2018      	movs	r0, #24
   b785e:	f7fd ffdb 	bl	b5818 <malloc>
   b7862:	4602      	mov	r2, r0
   b7864:	63a8      	str	r0, [r5, #56]	; 0x38
   b7866:	b920      	cbnz	r0, b7872 <srand+0x22>
   b7868:	4b0b      	ldr	r3, [pc, #44]	; (b7898 <srand+0x48>)
   b786a:	480c      	ldr	r0, [pc, #48]	; (b789c <srand+0x4c>)
   b786c:	2142      	movs	r1, #66	; 0x42
   b786e:	f7fe f803 	bl	b5878 <__assert_func>
   b7872:	490b      	ldr	r1, [pc, #44]	; (b78a0 <srand+0x50>)
   b7874:	4b0b      	ldr	r3, [pc, #44]	; (b78a4 <srand+0x54>)
   b7876:	e9c0 1300 	strd	r1, r3, [r0]
   b787a:	4b0b      	ldr	r3, [pc, #44]	; (b78a8 <srand+0x58>)
   b787c:	6083      	str	r3, [r0, #8]
   b787e:	230b      	movs	r3, #11
   b7880:	8183      	strh	r3, [r0, #12]
   b7882:	2100      	movs	r1, #0
   b7884:	2001      	movs	r0, #1
   b7886:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b788a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b788c:	2200      	movs	r2, #0
   b788e:	611c      	str	r4, [r3, #16]
   b7890:	615a      	str	r2, [r3, #20]
   b7892:	bd38      	pop	{r3, r4, r5, pc}
   b7894:	2003e5a8 	.word	0x2003e5a8
   b7898:	000b7dc6 	.word	0x000b7dc6
   b789c:	000b7ddd 	.word	0x000b7ddd
   b78a0:	abcd330e 	.word	0xabcd330e
   b78a4:	e66d1234 	.word	0xe66d1234
   b78a8:	0005deec 	.word	0x0005deec

000b78ac <strcmp>:
   b78ac:	f810 2b01 	ldrb.w	r2, [r0], #1
   b78b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b78b4:	2a01      	cmp	r2, #1
   b78b6:	bf28      	it	cs
   b78b8:	429a      	cmpcs	r2, r3
   b78ba:	d0f7      	beq.n	b78ac <strcmp>
   b78bc:	1ad0      	subs	r0, r2, r3
   b78be:	4770      	bx	lr

000b78c0 <strcpy>:
   b78c0:	4603      	mov	r3, r0
   b78c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b78c6:	f803 2b01 	strb.w	r2, [r3], #1
   b78ca:	2a00      	cmp	r2, #0
   b78cc:	d1f9      	bne.n	b78c2 <strcpy+0x2>
   b78ce:	4770      	bx	lr

000b78d0 <strlen>:
   b78d0:	4603      	mov	r3, r0
   b78d2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b78d6:	2a00      	cmp	r2, #0
   b78d8:	d1fb      	bne.n	b78d2 <strlen+0x2>
   b78da:	1a18      	subs	r0, r3, r0
   b78dc:	3801      	subs	r0, #1
   b78de:	4770      	bx	lr

000b78e0 <strncpy>:
   b78e0:	b510      	push	{r4, lr}
   b78e2:	3901      	subs	r1, #1
   b78e4:	4603      	mov	r3, r0
   b78e6:	b132      	cbz	r2, b78f6 <strncpy+0x16>
   b78e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b78ec:	f803 4b01 	strb.w	r4, [r3], #1
   b78f0:	3a01      	subs	r2, #1
   b78f2:	2c00      	cmp	r4, #0
   b78f4:	d1f7      	bne.n	b78e6 <strncpy+0x6>
   b78f6:	441a      	add	r2, r3
   b78f8:	2100      	movs	r1, #0
   b78fa:	4293      	cmp	r3, r2
   b78fc:	d100      	bne.n	b7900 <strncpy+0x20>
   b78fe:	bd10      	pop	{r4, pc}
   b7900:	f803 1b01 	strb.w	r1, [r3], #1
   b7904:	e7f9      	b.n	b78fa <strncpy+0x1a>
	...

000b7908 <__register_exitproc>:
   b7908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b790c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b79c8 <__register_exitproc+0xc0>
   b7910:	4606      	mov	r6, r0
   b7912:	f8d8 0000 	ldr.w	r0, [r8]
   b7916:	461f      	mov	r7, r3
   b7918:	460d      	mov	r5, r1
   b791a:	4691      	mov	r9, r2
   b791c:	f000 f856 	bl	b79cc <__retarget_lock_acquire_recursive>
   b7920:	4b25      	ldr	r3, [pc, #148]	; (b79b8 <__register_exitproc+0xb0>)
   b7922:	681c      	ldr	r4, [r3, #0]
   b7924:	b934      	cbnz	r4, b7934 <__register_exitproc+0x2c>
   b7926:	4c25      	ldr	r4, [pc, #148]	; (b79bc <__register_exitproc+0xb4>)
   b7928:	601c      	str	r4, [r3, #0]
   b792a:	4b25      	ldr	r3, [pc, #148]	; (b79c0 <__register_exitproc+0xb8>)
   b792c:	b113      	cbz	r3, b7934 <__register_exitproc+0x2c>
   b792e:	681b      	ldr	r3, [r3, #0]
   b7930:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7934:	6863      	ldr	r3, [r4, #4]
   b7936:	2b1f      	cmp	r3, #31
   b7938:	dd07      	ble.n	b794a <__register_exitproc+0x42>
   b793a:	f8d8 0000 	ldr.w	r0, [r8]
   b793e:	f000 f847 	bl	b79d0 <__retarget_lock_release_recursive>
   b7942:	f04f 30ff 	mov.w	r0, #4294967295
   b7946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b794a:	b34e      	cbz	r6, b79a0 <__register_exitproc+0x98>
   b794c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7950:	b988      	cbnz	r0, b7976 <__register_exitproc+0x6e>
   b7952:	4b1c      	ldr	r3, [pc, #112]	; (b79c4 <__register_exitproc+0xbc>)
   b7954:	b923      	cbnz	r3, b7960 <__register_exitproc+0x58>
   b7956:	f8d8 0000 	ldr.w	r0, [r8]
   b795a:	f000 f838 	bl	b79ce <__retarget_lock_release>
   b795e:	e7f0      	b.n	b7942 <__register_exitproc+0x3a>
   b7960:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7964:	f7fd ff58 	bl	b5818 <malloc>
   b7968:	2800      	cmp	r0, #0
   b796a:	d0f4      	beq.n	b7956 <__register_exitproc+0x4e>
   b796c:	2300      	movs	r3, #0
   b796e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7972:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7976:	6863      	ldr	r3, [r4, #4]
   b7978:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b797c:	2201      	movs	r2, #1
   b797e:	409a      	lsls	r2, r3
   b7980:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7984:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7988:	4313      	orrs	r3, r2
   b798a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b798e:	2e02      	cmp	r6, #2
   b7990:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7994:	bf02      	ittt	eq
   b7996:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b799a:	4313      	orreq	r3, r2
   b799c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b79a0:	6863      	ldr	r3, [r4, #4]
   b79a2:	f8d8 0000 	ldr.w	r0, [r8]
   b79a6:	1c5a      	adds	r2, r3, #1
   b79a8:	3302      	adds	r3, #2
   b79aa:	6062      	str	r2, [r4, #4]
   b79ac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b79b0:	f000 f80e 	bl	b79d0 <__retarget_lock_release_recursive>
   b79b4:	2000      	movs	r0, #0
   b79b6:	e7c6      	b.n	b7946 <__register_exitproc+0x3e>
   b79b8:	2003e7e8 	.word	0x2003e7e8
   b79bc:	2003e75c 	.word	0x2003e75c
   b79c0:	00000000 	.word	0x00000000
   b79c4:	000b5819 	.word	0x000b5819
   b79c8:	2003e60c 	.word	0x2003e60c

000b79cc <__retarget_lock_acquire_recursive>:
   b79cc:	4770      	bx	lr

000b79ce <__retarget_lock_release>:
   b79ce:	4770      	bx	lr

000b79d0 <__retarget_lock_release_recursive>:
   b79d0:	4770      	bx	lr

000b79d2 <link_code_end>:
	...

000b79d4 <dynalib_user>:
   b79d4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b79e4:	0000 0000 6544 6976 6563 4449 4400 7461     ....DeviceID.Dat
   b79f4:	5465 6d69 0065 4842 3731 3035 4c00 6769     eTime.BH1750.Lig
   b7a04:	7468 6c5f 7665 6c65 6c28 7875 0029 4353     ht_level(lux).SC
   b7a14:	3344 0030 4f43 2832 7070 296d 5400 6d65     D30.CO2(ppm).Tem
   b7a24:	2870 2943 5200 2848 2925 5000 534d 3041     p(C).RH(%).PMSA0
   b7a34:	3330 0049 7453 5f64 4d50 2e31 0030 7453     03I.Std_PM1.0.St
   b7a44:	5f64 4d50 2e32 0035 7453 5f64 4d50 3031     d_PM2.5.Std_PM10
   b7a54:	4500 766e 505f 314d 302e 4500 766e 505f     .Env_PM1.0.Env_P
   b7a64:	324d 352e 4500 766e 505f 314d 0030 4441     M2.5.Env_PM10.AD
   b7a74:	5f43 6156 756c 0065 4264 5600 4d45 364c     C_Value.dB.VEML6
   b7a84:	3730 0030 5655 6c5f 6769 7468 6c5f 7665     070.UV_light_lev
   b7a94:	6c65 4200 454d 3832 0030 7250 7365 7573     el.BME280.Pressu
   b7aa4:	6572 6d28 6162 2972 4300 6568 6b63 6320     re(mbar).Check c
   b7ab4:	6e6f 656e 7463 6f69 736e 202e 6f4e 7320     onnections. No s
   b7ac4:	616c 6576 6120 7474 6361 6568 2e64 5400     lave attached..T
   b7ad4:	7972 6e69 2067 6f74 6320 6e6f 656e 7463     rying to connect
   b7ae4:	4220 3148 3537 2030 754c 2078 6553 736e      BH1750 Lux Sens
   b7af4:	726f 5400 7972 6e69 2067 6f74 6320 6e6f     or.Trying to con
   b7b04:	656e 7463 4220 454d 3832 2030 5450 2048     nect BME280 PTH 
   b7b14:	6553 736e 726f 5400 7972 6e69 2067 6f74     Sensor.Trying to
   b7b24:	6320 6e6f 656e 7463 5320 4443 3033 4320      connect SCD30 C
   b7b34:	324f 5320 6e65 6f73 0072 695a 206f 7751     O2 Sensor.Zio Qw
   b7b44:	6969 2063 6f4c 6475 656e 7373 5320 6e65     iic Loudness Sen
   b7b54:	6f73 2072 614d 7473 7265 4120 6177 656b     sor Master Awake
   b7b64:	0000 0000                                   ....

000b7b68 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7b70:	40bb 000b 40bd 000b 40b3 000b 65ed 000b     .@...@...@...e..
   b7b80:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   b7b90:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   b7ba0:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   b7bb0:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   b7bc0:	7525 003e                                   %u>.

000b7bc4 <_ZTVN8particle11SPISettingsE>:
	...
   b7bcc:	46d5 000b 46a7 000b 46a9 000b               .F...F...F..

000b7bd8 <_ZTVN5spark13EthernetClassE>:
	...
   b7be0:	5917 000b 590d 000b 5903 000b 58f9 000b     .Y...Y...Y...X..
   b7bf0:	58ed 000b 58e1 000b 64c9 000b 64d1 000b     .X...X...d...d..
   b7c00:	58d5 000b 58cd 000b 58c3 000b 58b9 000b     .X...X...X...X..
   b7c10:	6501 000b                                   .e..

000b7c14 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7c14:	0800 1810 2820 3830 7061 0070 005a 2b25     .... (08app.Z.%+
   b7c24:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   b7c34:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   b7c44:	6974 656d 0000 0000                         time....

000b7c4c <_ZTV9IPAddress>:
	...
   b7c54:	607d 000b 606d 000b 606f 000b               }`..m`..o`..

000b7c60 <_ZTV9USBSerial>:
	...
   b7c68:	6163 000b 61cb 000b 61a1 000b 5b8d 000b     ca...a...a...[..
   b7c78:	6193 000b 6165 000b 6175 000b 61c5 000b     .a..ea..ua...a..
   b7c88:	6185 000b 615d 000b                         .a..]a..

000b7c90 <_ZTV11USARTSerial>:
	...
   b7c98:	6265 000b 62d1 000b 62a9 000b 5b8d 000b     eb...b...b...[..
   b7ca8:	6279 000b 6295 000b 6287 000b 62a3 000b     yb...b...b...b..
   b7cb8:	6267 000b 626b 000b                         gb..kb..

000b7cc0 <_ZTV7TwoWire>:
	...
   b7cc8:	6309 000b 6353 000b 632b 000b 630b 000b     .c..Sc..+c...c..
   b7cd8:	6333 000b 633b 000b 6343 000b 634b 000b     3c..;c..Cc..Kc..

000b7ce8 <_ZTVN5spark9WiFiClassE>:
	...
   b7cf0:	646b 000b 6461 000b 6457 000b 640d 000b     kd..ad..Wd...d..
   b7d00:	644b 000b 643f 000b 64c9 000b 64d1 000b     Kd..?d...d...d..
   b7d10:	6433 000b 642b 000b 6421 000b 6417 000b     3d..+d..!d...d..
   b7d20:	6501 000b                                   .e..

000b7d24 <_ZTVN5spark12NetworkClassE>:
	...
   b7d2c:	6489 000b 6493 000b 649d 000b 64a7 000b     .d...d...d...d..
   b7d3c:	64b1 000b 64bd 000b 64c9 000b 64d1 000b     .d...d...d...d..
   b7d4c:	64d9 000b 64e5 000b 64ed 000b 64f7 000b     .d...d...d...d..
   b7d5c:	6501 000b 6425 2500 0067 2575 3430 0078     .e..%d.%g.u%04x.

000b7d6c <_ZSt7nothrow>:
   b7d6c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b7d7c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b7d8d <day_name.1>:
   b7d8d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b7d9d:	6972 6153                                    riSat

000b7da2 <mon_name.0>:
   b7da2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b7db2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b7dc2:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b7dd2:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b7de2:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b7df2:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b7e02:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b7e12:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b7e22:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b7e32:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b7e42:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b7e52:	722f 6e61 2e64 0063                         /rand.c.

000b7e5a <_ctype_>:
   b7e5a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7e6a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7e7a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7e8a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7e9a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7eaa:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7eba:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7eca:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7eda:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7f5b <link_const_variable_data_end>:
	...

000b7f5c <link_constructors_location>:
   b7f5c:	000b45e5 	.word	0x000b45e5
   b7f60:	000b5921 	.word	0x000b5921
   b7f64:	000b5a99 	.word	0x000b5a99
   b7f68:	000b5b7d 	.word	0x000b5b7d
   b7f6c:	000b5cb5 	.word	0x000b5cb5
   b7f70:	000b5f0d 	.word	0x000b5f0d
   b7f74:	000b5f29 	.word	0x000b5f29
   b7f78:	000b6475 	.word	0x000b6475
   b7f7c:	000b65d9 	.word	0x000b65d9
