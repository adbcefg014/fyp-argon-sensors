
d:/JSN/Desktop/repos/c177-iot/sensors/target/3.3.0/argon/sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004600  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8620  000b8620  00008620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b8644  000b8644  00008644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b864c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5a0  000b8650  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e0  2003e610  2003e610  0002e610  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b86c0  000b86c0  000286c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b86e8  000b86e8  000286e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00149005  00000000  00000000  000286ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000178aa  00000000  00000000  001716f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003e8a6  00000000  00000000  00188f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002eb8  00000000  00000000  001c7841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000abe8  00000000  00000000  001ca6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041d99  00000000  00000000  001d52e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004d92b  00000000  00000000  0021707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013a83b  00000000  00000000  002649a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008680  00000000  00000000  0039f1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 ff25 	bl	b7e80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 ff2d 	bl	b7e9c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5a0 	.word	0x2003e5a0
   b404c:	000b8650 	.word	0x000b8650
   b4050:	2003e610 	.word	0x2003e610
   b4054:	2003e610 	.word	0x2003e610
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 f851 	bl	b6108 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b85f8 	.word	0x000b85f8
   b4080:	000b861c 	.word	0x000b861c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bac0 	b.w	b4608 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9f9 	bl	b4480 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bff1 	b.w	b6078 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bbf9 	b.w	b588c <malloc>

000b409a <_Znaj>:
   b409a:	f001 bbf7 	b.w	b588c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bbfd 	b.w	b589c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b40b2:	b513      	push	{r0, r1, r4, lr}
   b40b4:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b40b6:	4608      	mov	r0, r1
   b40b8:	9101      	str	r1, [sp, #4]
   b40ba:	f003 ff54 	bl	b7f66 <strlen>
   b40be:	9901      	ldr	r1, [sp, #4]
   b40c0:	4602      	mov	r2, r0
   b40c2:	4620      	mov	r0, r4
}
   b40c4:	b002      	add	sp, #8
   b40c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b40ca:	f002 bea3 	b.w	b6e14 <_ZN5spark10JSONWriter4nameEPKcj>
	...

000b40d0 <_Z13qwiicGetValuev>:
	return;
}


void qwiicGetValue()
{
   b40d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Wire.beginTransmission(qwiicAddress);
   b40d4:	f002 ff90 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b40d8:	2130      	movs	r1, #48	; 0x30
   b40da:	f002 fcb1 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(COMMAND_GET_VALUE); // command for status
   b40de:	f002 ff8b 	bl	b6ff8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40e2:	6803      	ldr	r3, [r0, #0]
	{ // slave may send less than requested
		uint8_t ADC_VALUE_L = Wire.read();
		uint8_t ADC_VALUE_H = Wire.read();
		ADC_VALUE=ADC_VALUE_H;
		ADC_VALUE<<=8;
		ADC_VALUE|=ADC_VALUE_L;
   b40e4:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4174 <_Z13qwiicGetValuev+0xa4>
   b40e8:	689b      	ldr	r3, [r3, #8]
   b40ea:	2105      	movs	r1, #5
   b40ec:	4798      	blx	r3
	Wire.endTransmission(); // stop transmitting //this looks like it was essential.
   b40ee:	f002 ff83 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b40f2:	f002 fcb0 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(qwiicAddress, 2); // request 1 bytes from slave device qwiicAddress
   b40f6:	f002 ff7f 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b40fa:	2202      	movs	r2, #2
   b40fc:	2130      	movs	r1, #48	; 0x30
   b40fe:	f002 fc9c 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b4102:	a718      	add	r7, pc, #96	; (adr r7, b4164 <_Z13qwiicGetValuev+0x94>)
   b4104:	e9d7 6700 	ldrd	r6, r7, [r7]
   b4108:	a518      	add	r5, pc, #96	; (adr r5, b416c <_Z13qwiicGetValuev+0x9c>)
   b410a:	e9d5 4500 	ldrd	r4, r5, [r5]
	while (Wire.available())
   b410e:	f002 ff73 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b4112:	6803      	ldr	r3, [r0, #0]
   b4114:	691b      	ldr	r3, [r3, #16]
   b4116:	4798      	blx	r3
   b4118:	b300      	cbz	r0, b415c <_Z13qwiicGetValuev+0x8c>
		uint8_t ADC_VALUE_L = Wire.read();
   b411a:	f002 ff6d 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b411e:	6803      	ldr	r3, [r0, #0]
   b4120:	695b      	ldr	r3, [r3, #20]
   b4122:	4798      	blx	r3
   b4124:	4680      	mov	r8, r0
		uint8_t ADC_VALUE_H = Wire.read();
   b4126:	f002 ff67 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b412a:	6803      	ldr	r3, [r0, #0]
   b412c:	695b      	ldr	r3, [r3, #20]
   b412e:	4798      	blx	r3
		ADC_VALUE=ADC_VALUE_H;
   b4130:	b2c3      	uxtb	r3, r0
		ADC_VALUE|=ADC_VALUE_L;
   b4132:	fa5f f088 	uxtb.w	r0, r8
   b4136:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   b413a:	f8a9 0000 	strh.w	r0, [r9]
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b413e:	f003 f8d7 	bl	b72f0 <__aeabi_i2d>
   b4142:	4632      	mov	r2, r6
   b4144:	463b      	mov	r3, r7
   b4146:	f002 ff87 	bl	b7058 <__adddf3>
   b414a:	462b      	mov	r3, r5
   b414c:	4622      	mov	r2, r4
   b414e:	f003 fa63 	bl	b7618 <__aeabi_ddiv>
   b4152:	f003 fb49 	bl	b77e8 <__aeabi_d2f>
   b4156:	4b02      	ldr	r3, [pc, #8]	; (b4160 <_Z13qwiicGetValuev+0x90>)
   b4158:	6018      	str	r0, [r3, #0]
	while (Wire.available())
   b415a:	e7d8      	b.n	b410e <_Z13qwiicGetValuev+0x3e>
	}
	return;
}
   b415c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4160:	2003e69c 	.word	0x2003e69c
   b4164:	67381d7e 	.word	0x67381d7e
   b4168:	4054cd44 	.word	0x4054cd44
   b416c:	374bc6a8 	.word	0x374bc6a8
   b4170:	40260189 	.word	0x40260189
   b4174:	2003e610 	.word	0x2003e610

000b4178 <_Z17getSensorReadingsPc>:
{
   b4178:	b510      	push	{r4, lr}
   b417a:	b090      	sub	sp, #64	; 0x40

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   b417c:	4aa1      	ldr	r2, [pc, #644]	; (b4404 <_Z17getSensorReadingsPc+0x28c>)
   b417e:	9203      	str	r2, [sp, #12]
        state_(BEGIN) {
   b4180:	2300      	movs	r3, #0
        n_(0) {
   b4182:	f240 12f3 	movw	r2, #499	; 0x1f3
   b4186:	9005      	str	r0, [sp, #20]
	writer.beginObject();
   b4188:	a803      	add	r0, sp, #12
   b418a:	e9cd 2306 	strd	r2, r3, [sp, #24]
        state_(BEGIN) {
   b418e:	f88d 3010 	strb.w	r3, [sp, #16]
   b4192:	f002 fdaf 	bl	b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>
	writer.name("DateTime").value(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL));
   b4196:	499c      	ldr	r1, [pc, #624]	; (b4408 <_Z17getSensorReadingsPc+0x290>)
   b4198:	a803      	add	r0, sp, #12
   b419a:	f7ff ff8a 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b419e:	4604      	mov	r4, r0
   b41a0:	f001 ff23 	bl	b5fea <_ZN9TimeClass3nowEv>
   b41a4:	4b99      	ldr	r3, [pc, #612]	; (b440c <_Z17getSensorReadingsPc+0x294>)
   b41a6:	499a      	ldr	r1, [pc, #616]	; (b4410 <_Z17getSensorReadingsPc+0x298>)
   b41a8:	681b      	ldr	r3, [r3, #0]
   b41aa:	9300      	str	r3, [sp, #0]
   b41ac:	4602      	mov	r2, r0
   b41ae:	17c3      	asrs	r3, r0, #31
   b41b0:	a808      	add	r0, sp, #32
   b41b2:	f001 febb 	bl	b5f2c <_ZN9TimeClass6formatExPKc>
    return value(val.c_str(), val.length());
   b41b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b41b8:	9908      	ldr	r1, [sp, #32]
   b41ba:	4620      	mov	r0, r4
   b41bc:	f002 fe3a 	bl	b6e34 <_ZN5spark10JSONWriter5valueEPKcj>
   b41c0:	a808      	add	r0, sp, #32
   b41c2:	f001 fcc5 	bl	b5b50 <_ZN6StringD1Ev>
	bh.make_forced_measurement();
   b41c6:	4893      	ldr	r0, [pc, #588]	; (b4414 <_Z17getSensorReadingsPc+0x29c>)
   b41c8:	f001 f900 	bl	b53cc <_ZN6BH175023make_forced_measurementEv>
	writer.name("BH1750").beginObject();
   b41cc:	4992      	ldr	r1, [pc, #584]	; (b4418 <_Z17getSensorReadingsPc+0x2a0>)
   b41ce:	a803      	add	r0, sp, #12
   b41d0:	f7ff ff6f 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b41d4:	f002 fd8e 	bl	b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("Light-lux").value(bh.get_light_level());
   b41d8:	4990      	ldr	r1, [pc, #576]	; (b441c <_Z17getSensorReadingsPc+0x2a4>)
   b41da:	a803      	add	r0, sp, #12
   b41dc:	f7ff ff69 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b41e0:	4604      	mov	r4, r0
   b41e2:	488c      	ldr	r0, [pc, #560]	; (b4414 <_Z17getSensorReadingsPc+0x29c>)
   b41e4:	f001 f8ac 	bl	b5340 <_ZN6BH175015get_light_levelEv>
   b41e8:	ee10 0a10 	vmov	r0, s0
   b41ec:	f003 f892 	bl	b7314 <__aeabi_f2d>
   b41f0:	ec41 0b10 	vmov	d0, r0, r1
   b41f4:	4620      	mov	r0, r4
   b41f6:	f002 fd9b 	bl	b6d30 <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b41fa:	a803      	add	r0, sp, #12
   b41fc:	f002 fd64 	bl	b6cc8 <_ZN5spark10JSONWriter9endObjectEv>
	if (airSensor.dataAvailable())
   b4200:	4887      	ldr	r0, [pc, #540]	; (b4420 <_Z17getSensorReadingsPc+0x2a8>)
   b4202:	f000 ff94 	bl	b512e <_ZN5SCD3013dataAvailableEv>
   b4206:	2800      	cmp	r0, #0
   b4208:	d036      	beq.n	b4278 <_Z17getSensorReadingsPc+0x100>
		writer.name("SCD30").beginObject();
   b420a:	4986      	ldr	r1, [pc, #536]	; (b4424 <_Z17getSensorReadingsPc+0x2ac>)
   b420c:	a803      	add	r0, sp, #12
   b420e:	f7ff ff50 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4212:	f002 fd6f 	bl	b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>
			writer.name("CO2-ppm").value(airSensor.getCO2());
   b4216:	4984      	ldr	r1, [pc, #528]	; (b4428 <_Z17getSensorReadingsPc+0x2b0>)
   b4218:	a803      	add	r0, sp, #12
   b421a:	f7ff ff4a 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b421e:	4604      	mov	r4, r0
   b4220:	487f      	ldr	r0, [pc, #508]	; (b4420 <_Z17getSensorReadingsPc+0x2a8>)
   b4222:	f000 ffe4 	bl	b51ee <_ZN5SCD306getCO2Ev>
   b4226:	4601      	mov	r1, r0
   b4228:	4620      	mov	r0, r4
   b422a:	f002 fd6f 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
			writer.name("Temp-C").value(airSensor.getTemperature());
   b422e:	497f      	ldr	r1, [pc, #508]	; (b442c <_Z17getSensorReadingsPc+0x2b4>)
   b4230:	a803      	add	r0, sp, #12
   b4232:	f7ff ff3e 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4236:	4604      	mov	r4, r0
   b4238:	4879      	ldr	r0, [pc, #484]	; (b4420 <_Z17getSensorReadingsPc+0x2a8>)
   b423a:	f000 fff3 	bl	b5224 <_ZN5SCD3014getTemperatureEv>
   b423e:	ee10 0a10 	vmov	r0, s0
   b4242:	f003 f867 	bl	b7314 <__aeabi_f2d>
   b4246:	ec41 0b10 	vmov	d0, r0, r1
   b424a:	4620      	mov	r0, r4
   b424c:	f002 fd70 	bl	b6d30 <_ZN5spark10JSONWriter5valueEd>
			writer.name("RH-%").value(airSensor.getHumidity());
   b4250:	4977      	ldr	r1, [pc, #476]	; (b4430 <_Z17getSensorReadingsPc+0x2b8>)
   b4252:	a803      	add	r0, sp, #12
   b4254:	f7ff ff2d 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4258:	4604      	mov	r4, r0
   b425a:	4871      	ldr	r0, [pc, #452]	; (b4420 <_Z17getSensorReadingsPc+0x2a8>)
   b425c:	f000 ffd7 	bl	b520e <_ZN5SCD3011getHumidityEv>
   b4260:	ee10 0a10 	vmov	r0, s0
   b4264:	f003 f856 	bl	b7314 <__aeabi_f2d>
   b4268:	ec41 0b10 	vmov	d0, r0, r1
   b426c:	4620      	mov	r0, r4
   b426e:	f002 fd5f 	bl	b6d30 <_ZN5spark10JSONWriter5valueEd>
		writer.endObject();
   b4272:	a803      	add	r0, sp, #12
   b4274:	f002 fd28 	bl	b6cc8 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("PMSA003I").beginObject();
   b4278:	496e      	ldr	r1, [pc, #440]	; (b4434 <_Z17getSensorReadingsPc+0x2bc>)
   b427a:	a803      	add	r0, sp, #12
   b427c:	f7ff ff19 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4280:	f002 fd38 	bl	b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("Std_PM1.0").value(data.pm10_standard);
   b4284:	496c      	ldr	r1, [pc, #432]	; (b4438 <_Z17getSensorReadingsPc+0x2c0>)
   b4286:	a803      	add	r0, sp, #12
   b4288:	f7ff ff13 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b428c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   b4290:	f002 fd3c 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
		writer.name("Std_PM2.5").value(data.pm25_standard);
   b4294:	4969      	ldr	r1, [pc, #420]	; (b443c <_Z17getSensorReadingsPc+0x2c4>)
   b4296:	a803      	add	r0, sp, #12
   b4298:	f7ff ff0b 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b429c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   b42a0:	f002 fd34 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
		writer.name("Std_PM10").value(data.pm100_standard);
   b42a4:	4966      	ldr	r1, [pc, #408]	; (b4440 <_Z17getSensorReadingsPc+0x2c8>)
   b42a6:	a803      	add	r0, sp, #12
   b42a8:	f7ff ff03 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42ac:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   b42b0:	f002 fd2c 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM1.0").value(data.pm10_env);
   b42b4:	4963      	ldr	r1, [pc, #396]	; (b4444 <_Z17getSensorReadingsPc+0x2cc>)
   b42b6:	a803      	add	r0, sp, #12
   b42b8:	f7ff fefb 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42bc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   b42c0:	f002 fd24 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM2.5").value(data.pm25_env);
   b42c4:	4960      	ldr	r1, [pc, #384]	; (b4448 <_Z17getSensorReadingsPc+0x2d0>)
   b42c6:	a803      	add	r0, sp, #12
   b42c8:	f7ff fef3 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42cc:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   b42d0:	f002 fd1c 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM10").value(data.pm100_env);
   b42d4:	495d      	ldr	r1, [pc, #372]	; (b444c <_Z17getSensorReadingsPc+0x2d4>)
   b42d6:	a803      	add	r0, sp, #12
   b42d8:	f7ff feeb 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42dc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   b42e0:	f002 fd14 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
	writer.endObject();
   b42e4:	a803      	add	r0, sp, #12
   b42e6:	f002 fcef 	bl	b6cc8 <_ZN5spark10JSONWriter9endObjectEv>
	qwiicGetValue();
   b42ea:	f7ff fef1 	bl	b40d0 <_Z13qwiicGetValuev>
	writer.name("qwiic").beginObject();
   b42ee:	4958      	ldr	r1, [pc, #352]	; (b4450 <_Z17getSensorReadingsPc+0x2d8>)
   b42f0:	a803      	add	r0, sp, #12
   b42f2:	f7ff fede 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42f6:	f002 fcfd 	bl	b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("ADC-val").value(ADC_VALUE);
   b42fa:	4956      	ldr	r1, [pc, #344]	; (b4454 <_Z17getSensorReadingsPc+0x2dc>)
   b42fc:	a803      	add	r0, sp, #12
   b42fe:	f7ff fed8 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4302:	4b55      	ldr	r3, [pc, #340]	; (b4458 <_Z17getSensorReadingsPc+0x2e0>)
   b4304:	8819      	ldrh	r1, [r3, #0]
   b4306:	f002 fd01 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
		writer.name("dB").value(dBnumber);
   b430a:	4954      	ldr	r1, [pc, #336]	; (b445c <_Z17getSensorReadingsPc+0x2e4>)
   b430c:	a803      	add	r0, sp, #12
   b430e:	f7ff fed0 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4312:	4b53      	ldr	r3, [pc, #332]	; (b4460 <_Z17getSensorReadingsPc+0x2e8>)
   b4314:	4604      	mov	r4, r0
   b4316:	6818      	ldr	r0, [r3, #0]
   b4318:	f002 fffc 	bl	b7314 <__aeabi_f2d>
   b431c:	ec41 0b10 	vmov	d0, r0, r1
   b4320:	4620      	mov	r0, r4
   b4322:	f002 fd05 	bl	b6d30 <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b4326:	a803      	add	r0, sp, #12
   b4328:	f002 fcce 	bl	b6cc8 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("VEML6070").beginObject();
   b432c:	494d      	ldr	r1, [pc, #308]	; (b4464 <_Z17getSensorReadingsPc+0x2ec>)
   b432e:	a803      	add	r0, sp, #12
   b4330:	f7ff febf 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4334:	f002 fcde 	bl	b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("UV-lvl").value(uv.readUV());
   b4338:	494b      	ldr	r1, [pc, #300]	; (b4468 <_Z17getSensorReadingsPc+0x2f0>)
   b433a:	a803      	add	r0, sp, #12
   b433c:	f7ff feb9 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4340:	4604      	mov	r4, r0
   b4342:	484a      	ldr	r0, [pc, #296]	; (b446c <_Z17getSensorReadingsPc+0x2f4>)
   b4344:	f000 fe93 	bl	b506e <_ZN17Adafruit_VEML60706readUVEv>
   b4348:	4601      	mov	r1, r0
   b434a:	4620      	mov	r0, r4
   b434c:	f002 fcde 	bl	b6d0c <_ZN5spark10JSONWriter5valueEi>
	writer.endObject();
   b4350:	a803      	add	r0, sp, #12
   b4352:	f002 fcb9 	bl	b6cc8 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("BME280").beginObject();
   b4356:	4946      	ldr	r1, [pc, #280]	; (b4470 <_Z17getSensorReadingsPc+0x2f8>)
   b4358:	a803      	add	r0, sp, #12
   b435a:	f7ff feaa 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b435e:	f002 fcc9 	bl	b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("P-mbar").value(bme.readPressure()/100.0F);
   b4362:	4944      	ldr	r1, [pc, #272]	; (b4474 <_Z17getSensorReadingsPc+0x2fc>)
   b4364:	a803      	add	r0, sp, #12
   b4366:	f7ff fea4 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b436a:	4604      	mov	r4, r0
   b436c:	4842      	ldr	r0, [pc, #264]	; (b4478 <_Z17getSensorReadingsPc+0x300>)
   b436e:	f000 fd23 	bl	b4db8 <_ZN15Adafruit_BME28012readPressureEv>
   b4372:	eddf 7a42 	vldr	s15, [pc, #264]	; b447c <_Z17getSensorReadingsPc+0x304>
   b4376:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b437a:	ee17 0a90 	vmov	r0, s15
   b437e:	f002 ffc9 	bl	b7314 <__aeabi_f2d>
   b4382:	ec41 0b10 	vmov	d0, r0, r1
   b4386:	4620      	mov	r0, r4
   b4388:	f002 fcd2 	bl	b6d30 <_ZN5spark10JSONWriter5valueEd>
		writer.name("RH-%").value(bme.readHumidity());
   b438c:	4928      	ldr	r1, [pc, #160]	; (b4430 <_Z17getSensorReadingsPc+0x2b8>)
   b438e:	a803      	add	r0, sp, #12
   b4390:	f7ff fe8f 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4394:	4604      	mov	r4, r0
   b4396:	4838      	ldr	r0, [pc, #224]	; (b4478 <_Z17getSensorReadingsPc+0x300>)
   b4398:	f000 fcc4 	bl	b4d24 <_ZN15Adafruit_BME28012readHumidityEv>
   b439c:	ee10 0a10 	vmov	r0, s0
   b43a0:	f002 ffb8 	bl	b7314 <__aeabi_f2d>
   b43a4:	ec41 0b10 	vmov	d0, r0, r1
   b43a8:	4620      	mov	r0, r4
   b43aa:	f002 fcc1 	bl	b6d30 <_ZN5spark10JSONWriter5valueEd>
		writer.name("Temp-C").value(bme.readTemperature());
   b43ae:	491f      	ldr	r1, [pc, #124]	; (b442c <_Z17getSensorReadingsPc+0x2b4>)
   b43b0:	a803      	add	r0, sp, #12
   b43b2:	f7ff fe7e 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b43b6:	4604      	mov	r4, r0
   b43b8:	482f      	ldr	r0, [pc, #188]	; (b4478 <_Z17getSensorReadingsPc+0x300>)
   b43ba:	f000 fc83 	bl	b4cc4 <_ZN15Adafruit_BME28015readTemperatureEv>
   b43be:	ee10 0a10 	vmov	r0, s0
   b43c2:	f002 ffa7 	bl	b7314 <__aeabi_f2d>
   b43c6:	ec41 0b10 	vmov	d0, r0, r1
   b43ca:	4620      	mov	r0, r4
   b43cc:	f002 fcb0 	bl	b6d30 <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b43d0:	a803      	add	r0, sp, #12
   b43d2:	f002 fc79 	bl	b6cc8 <_ZN5spark10JSONWriter9endObjectEv>
	writer.endObject();
   b43d6:	a803      	add	r0, sp, #12
   b43d8:	f002 fc76 	bl	b6cc8 <_ZN5spark10JSONWriter9endObjectEv>
	writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
   b43dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b43e0:	4293      	cmp	r3, r2
   b43e2:	bf28      	it	cs
   b43e4:	4613      	movcs	r3, r2
   b43e6:	9a05      	ldr	r2, [sp, #20]
   b43e8:	2100      	movs	r1, #0
   b43ea:	54d1      	strb	r1, [r2, r3]
	Serial.println(writer.dataSize());
   b43ec:	f002 fa2c 	bl	b6848 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b43f0:	9907      	ldr	r1, [sp, #28]
   b43f2:	4604      	mov	r4, r0
   b43f4:	220a      	movs	r2, #10
   b43f6:	f001 fc8e 	bl	b5d16 <_ZN5Print11printNumberEmh>
        n += println();
   b43fa:	4620      	mov	r0, r4
   b43fc:	f001 fc75 	bl	b5cea <_ZN5Print7printlnEv>
}
   b4400:	b010      	add	sp, #64	; 0x40
   b4402:	bd10      	pop	{r4, pc}
   b4404:	000b83f8 	.word	0x000b83f8
   b4408:	000b807c 	.word	0x000b807c
   b440c:	2003e5a4 	.word	0x2003e5a4
   b4410:	2003e6d0 	.word	0x2003e6d0
   b4414:	2003e650 	.word	0x2003e650
   b4418:	000b8085 	.word	0x000b8085
   b441c:	000b808c 	.word	0x000b808c
   b4420:	2003e614 	.word	0x2003e614
   b4424:	000b8096 	.word	0x000b8096
   b4428:	000b809c 	.word	0x000b809c
   b442c:	000b80a4 	.word	0x000b80a4
   b4430:	000b80ab 	.word	0x000b80ab
   b4434:	000b80b0 	.word	0x000b80b0
   b4438:	000b80b9 	.word	0x000b80b9
   b443c:	000b80c3 	.word	0x000b80c3
   b4440:	000b80cd 	.word	0x000b80cd
   b4444:	000b80d6 	.word	0x000b80d6
   b4448:	000b80e0 	.word	0x000b80e0
   b444c:	000b80ea 	.word	0x000b80ea
   b4450:	000b80f3 	.word	0x000b80f3
   b4454:	000b80f9 	.word	0x000b80f9
   b4458:	2003e610 	.word	0x2003e610
   b445c:	000b8101 	.word	0x000b8101
   b4460:	2003e69c 	.word	0x2003e69c
   b4464:	000b8104 	.word	0x000b8104
   b4468:	000b810d 	.word	0x000b810d
   b446c:	2003e6a0 	.word	0x2003e6a0
   b4470:	000b8114 	.word	0x000b8114
   b4474:	000b811b 	.word	0x000b811b
   b4478:	2003e658 	.word	0x2003e658
   b447c:	42c80000 	.word	0x42c80000

000b4480 <loop>:
void loop() {
   b4480:	b530      	push	{r4, r5, lr}
   b4482:	b085      	sub	sp, #20
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4484:	f001 f9e2 	bl	b584c <spark_cloud_flag_connected>
	if (Particle.connected() == false) {
   b4488:	b908      	cbnz	r0, b448e <loop+0xe>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b448a:	f001 f9d7 	bl	b583c <spark_cloud_flag_connect>
	digitalWrite(D7,HIGH);
   b448e:	2101      	movs	r1, #1
   b4490:	2007      	movs	r0, #7
   b4492:	f002 fd2e 	bl	b6ef2 <digitalWrite>
	dataJson = (char *) malloc(500);
   b4496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b449a:	f001 f9f7 	bl	b588c <malloc>
   b449e:	4605      	mov	r5, r0
	getSensorReadings(dataJson);
   b44a0:	f7ff fe6a 	bl	b4178 <_Z17getSensorReadingsPc>
	Serial.println(dataJson);
   b44a4:	f002 f9d0 	bl	b6848 <_Z16_fetch_usbserialv>
   b44a8:	4629      	mov	r1, r5
   b44aa:	f001 fc2a 	bl	b5d02 <_ZN5Print7printlnEPKc>
	Serial.println("");
   b44ae:	f002 f9cb 	bl	b6848 <_Z16_fetch_usbserialv>
   b44b2:	4916      	ldr	r1, [pc, #88]	; (b450c <loop+0x8c>)
   b44b4:	f001 fc25 	bl	b5d02 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b44b8:	4b15      	ldr	r3, [pc, #84]	; (b4510 <loop+0x90>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b44ba:	4916      	ldr	r1, [pc, #88]	; (b4514 <loop+0x94>)
   b44bc:	781b      	ldrb	r3, [r3, #0]
   b44be:	f88d 3000 	strb.w	r3, [sp]
   b44c2:	462a      	mov	r2, r5
   b44c4:	233c      	movs	r3, #60	; 0x3c
   b44c6:	a802      	add	r0, sp, #8
   b44c8:	f001 ff7c 	bl	b63c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b44cc:	9c03      	ldr	r4, [sp, #12]
   b44ce:	b17c      	cbz	r4, b44f0 <loop+0x70>
      if (--_M_use_count == 0)
   b44d0:	6863      	ldr	r3, [r4, #4]
   b44d2:	3b01      	subs	r3, #1
   b44d4:	6063      	str	r3, [r4, #4]
   b44d6:	b95b      	cbnz	r3, b44f0 <loop+0x70>
          _M_dispose();
   b44d8:	6823      	ldr	r3, [r4, #0]
   b44da:	4620      	mov	r0, r4
   b44dc:	689b      	ldr	r3, [r3, #8]
   b44de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b44e0:	68a3      	ldr	r3, [r4, #8]
   b44e2:	3b01      	subs	r3, #1
   b44e4:	60a3      	str	r3, [r4, #8]
   b44e6:	b91b      	cbnz	r3, b44f0 <loop+0x70>
            _M_destroy();
   b44e8:	6823      	ldr	r3, [r4, #0]
   b44ea:	4620      	mov	r0, r4
   b44ec:	68db      	ldr	r3, [r3, #12]
   b44ee:	4798      	blx	r3
	free(dataJson);
   b44f0:	4628      	mov	r0, r5
   b44f2:	f001 f9d3 	bl	b589c <free>
	digitalWrite(D7,LOW);
   b44f6:	2100      	movs	r1, #0
   b44f8:	2007      	movs	r0, #7
   b44fa:	f002 fcfa 	bl	b6ef2 <digitalWrite>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   b44fe:	f64f 50e8 	movw	r0, #65000	; 0xfde8
}
   b4502:	b005      	add	sp, #20
   b4504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4508:	f001 bd8a 	b.w	b6020 <delay>
   b450c:	000b8428 	.word	0x000b8428
   b4510:	2003e612 	.word	0x2003e612
   b4514:	000b8122 	.word	0x000b8122

000b4518 <_Z24qwiicTestForConnectivityv>:

// qwiicTestForConnectivity() checks for an ACK from an Sensor. If no ACK
// program freezes and notifies user.
void qwiicTestForConnectivity()
{
   b4518:	b508      	push	{r3, lr}
	Wire.beginTransmission(qwiicAddress);
   b451a:	f002 fd6d 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b451e:	2130      	movs	r1, #48	; 0x30
   b4520:	f002 fa8e 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
	//check here for an ACK from the slave, if no ACK don't allow change?
	if (Wire.endTransmission() != 0)
   b4524:	f002 fd68 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b4528:	f002 fa95 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
   b452c:	b128      	cbz	r0, b453a <_Z24qwiicTestForConnectivityv+0x22>
	{
		Serial.println("Check connections. No slave attached.");
   b452e:	f002 f98b 	bl	b6848 <_Z16_fetch_usbserialv>
   b4532:	4902      	ldr	r1, [pc, #8]	; (b453c <_Z24qwiicTestForConnectivityv+0x24>)
   b4534:	f001 fbe5 	bl	b5d02 <_ZN5Print7printlnEPKc>
		while (1);
   b4538:	e7fe      	b.n	b4538 <_Z24qwiicTestForConnectivityv+0x20>
	}
	return;
   b453a:	bd08      	pop	{r3, pc}
   b453c:	000b812e 	.word	0x000b812e

000b4540 <_Z17initializeSensorsv>:
{
   b4540:	b538      	push	{r3, r4, r5, lr}
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b4542:	4c28      	ldr	r4, [pc, #160]	; (b45e4 <_Z17initializeSensorsv+0xa4>)
	while (!bh.begin())
   b4544:	4828      	ldr	r0, [pc, #160]	; (b45e8 <_Z17initializeSensorsv+0xa8>)
   b4546:	f000 fef0 	bl	b532a <_ZN6BH17505beginEv>
   b454a:	b948      	cbnz	r0, b4560 <_Z17initializeSensorsv+0x20>
		delay(500);
   b454c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4550:	f001 fd66 	bl	b6020 <delay>
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b4554:	f002 f978 	bl	b6848 <_Z16_fetch_usbserialv>
   b4558:	4621      	mov	r1, r4
   b455a:	f001 fbd2 	bl	b5d02 <_ZN5Print7printlnEPKc>
	while (!bh.begin())
   b455e:	e7f1      	b.n	b4544 <_Z17initializeSensorsv+0x4>
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b4560:	4821      	ldr	r0, [pc, #132]	; (b45e8 <_Z17initializeSensorsv+0xa8>)
	while (!bme.begin())
   b4562:	4d22      	ldr	r5, [pc, #136]	; (b45ec <_Z17initializeSensorsv+0xac>)
		Serial.println("Trying to connect BME280 PTH Sensor");
   b4564:	4c22      	ldr	r4, [pc, #136]	; (b45f0 <_Z17initializeSensorsv+0xb0>)
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b4566:	2123      	movs	r1, #35	; 0x23
   b4568:	f000 ff1b 	bl	b53a2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
	while (!bme.begin())
   b456c:	4628      	mov	r0, r5
   b456e:	f000 fd4c 	bl	b500a <_ZN15Adafruit_BME2805beginEv>
   b4572:	b188      	cbz	r0, b4598 <_Z17initializeSensorsv+0x58>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b4574:	4c1f      	ldr	r4, [pc, #124]	; (b45f4 <_Z17initializeSensorsv+0xb4>)
	while (!airSensor.begin())
   b4576:	f002 fd3f 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b457a:	4601      	mov	r1, r0
   b457c:	481e      	ldr	r0, [pc, #120]	; (b45f8 <_Z17initializeSensorsv+0xb8>)
   b457e:	f000 feb8 	bl	b52f2 <_ZN5SCD305beginER7TwoWire>
   b4582:	b998      	cbnz	r0, b45ac <_Z17initializeSensorsv+0x6c>
		delay(500);
   b4584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4588:	f001 fd4a 	bl	b6020 <delay>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b458c:	f002 f95c 	bl	b6848 <_Z16_fetch_usbserialv>
   b4590:	4621      	mov	r1, r4
   b4592:	f001 fbb6 	bl	b5d02 <_ZN5Print7printlnEPKc>
	while (!airSensor.begin())
   b4596:	e7ee      	b.n	b4576 <_Z17initializeSensorsv+0x36>
		delay(500);
   b4598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b459c:	f001 fd40 	bl	b6020 <delay>
		Serial.println("Trying to connect BME280 PTH Sensor");
   b45a0:	f002 f952 	bl	b6848 <_Z16_fetch_usbserialv>
   b45a4:	4621      	mov	r1, r4
   b45a6:	f001 fbac 	bl	b5d02 <_ZN5Print7printlnEPKc>
	while (!bme.begin())
   b45aa:	e7df      	b.n	b456c <_Z17initializeSensorsv+0x2c>
	airSensor.setMeasurementInterval(60);
   b45ac:	4812      	ldr	r0, [pc, #72]	; (b45f8 <_Z17initializeSensorsv+0xb8>)
   b45ae:	213c      	movs	r1, #60	; 0x3c
   b45b0:	f000 fe9a 	bl	b52e8 <_ZN5SCD3022setMeasurementIntervalEt>
  	airSensor.setAutoSelfCalibration(true);
   b45b4:	2101      	movs	r1, #1
   b45b6:	4810      	ldr	r0, [pc, #64]	; (b45f8 <_Z17initializeSensorsv+0xb8>)
   b45b8:	f000 fe88 	bl	b52cc <_ZN5SCD3022setAutoSelfCalibrationEb>
	aqi.begin_I2C();	// Particulate sensor PM2.5
   b45bc:	f002 fd1c 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b45c0:	4601      	mov	r1, r0
   b45c2:	480e      	ldr	r0, [pc, #56]	; (b45fc <_Z17initializeSensorsv+0xbc>)
   b45c4:	f000 f858 	bl	b4678 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
	qwiicTestForConnectivity();
   b45c8:	f7ff ffa6 	bl	b4518 <_Z24qwiicTestForConnectivityv>
	Serial.println("Zio Qwiic Loudness Sensor Master Awake");
   b45cc:	f002 f93c 	bl	b6848 <_Z16_fetch_usbserialv>
   b45d0:	490b      	ldr	r1, [pc, #44]	; (b4600 <_Z17initializeSensorsv+0xc0>)
   b45d2:	f001 fb96 	bl	b5d02 <_ZN5Print7printlnEPKc>
}
   b45d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uv.begin(VEML6070_1_T);
   b45da:	480a      	ldr	r0, [pc, #40]	; (b4604 <_Z17initializeSensorsv+0xc4>)
   b45dc:	2101      	movs	r1, #1
   b45de:	f000 bd27 	b.w	b5030 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>
   b45e2:	bf00      	nop
   b45e4:	000b8154 	.word	0x000b8154
   b45e8:	2003e650 	.word	0x2003e650
   b45ec:	2003e658 	.word	0x2003e658
   b45f0:	000b8178 	.word	0x000b8178
   b45f4:	000b819c 	.word	0x000b819c
   b45f8:	2003e614 	.word	0x2003e614
   b45fc:	2003e628 	.word	0x2003e628
   b4600:	000b81bf 	.word	0x000b81bf
   b4604:	2003e6a0 	.word	0x2003e6a0

000b4608 <setup>:
void setup() {
   b4608:	b508      	push	{r3, lr}
	Wire.begin();
   b460a:	f002 fcf5 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b460e:	f002 f9e5 	bl	b69dc <_ZN7TwoWire5beginEv>
	pinMode(D7,OUTPUT);
   b4612:	2101      	movs	r1, #1
   b4614:	2007      	movs	r0, #7
   b4616:	f002 fc5b 	bl	b6ed0 <pinMode>
	Serial.begin(9600);
   b461a:	f002 f915 	bl	b6848 <_Z16_fetch_usbserialv>
   b461e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4622:	f002 f905 	bl	b6830 <_ZN9USBSerial5beginEl>
}
   b4626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	initializeSensors();
   b462a:	f7ff bf89 	b.w	b4540 <_Z17initializeSensorsv>
	...

000b4630 <_GLOBAL__sub_I_bh>:
   b4630:	b508      	push	{r3, lr}
        val_(val) {
   b4632:	4b0a      	ldr	r3, [pc, #40]	; (b465c <_GLOBAL__sub_I_bh+0x2c>)
   b4634:	2200      	movs	r2, #0
   b4636:	701a      	strb	r2, [r3, #0]
BH1750 bh;
   b4638:	f002 fcde 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b463c:	2123      	movs	r1, #35	; 0x23
   b463e:	4602      	mov	r2, r0
   b4640:	4807      	ldr	r0, [pc, #28]	; (b4660 <_GLOBAL__sub_I_bh+0x30>)
   b4642:	f000 fe6d 	bl	b5320 <_ZN6BH1750C1EhR7TwoWire>
Adafruit_BME280 bme;
   b4646:	4807      	ldr	r0, [pc, #28]	; (b4664 <_GLOBAL__sub_I_bh+0x34>)
   b4648:	f000 f898 	bl	b477c <_ZN15Adafruit_BME280C1Ev>
SCD30 airSensor;
   b464c:	4806      	ldr	r0, [pc, #24]	; (b4668 <_GLOBAL__sub_I_bh+0x38>)
   b464e:	f000 fd36 	bl	b50be <_ZN5SCD30C1Ev>
   b4652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_PM25AQI aqi = Adafruit_PM25AQI();
   b4656:	4805      	ldr	r0, [pc, #20]	; (b466c <_GLOBAL__sub_I_bh+0x3c>)
   b4658:	f000 b80a 	b.w	b4670 <_ZN16Adafruit_PM25AQIC1Ev>
   b465c:	2003e612 	.word	0x2003e612
   b4660:	2003e650 	.word	0x2003e650
   b4664:	2003e658 	.word	0x2003e658
   b4668:	2003e614 	.word	0x2003e614
   b466c:	2003e628 	.word	0x2003e628

000b4670 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
   b4670:	2200      	movs	r2, #0
   b4672:	e9c0 2200 	strd	r2, r2, [r0]
   b4676:	4770      	bx	lr

000b4678 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b4678:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b467a:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b467c:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b467e:	b953      	cbnz	r3, b4696 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
   b4680:	2010      	movs	r0, #16
   b4682:	9101      	str	r1, [sp, #4]
   b4684:	f7ff fd07 	bl	b4096 <_Znwj>
   b4688:	4605      	mov	r5, r0
   b468a:	b118      	cbz	r0, b4694 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
   b468c:	9a01      	ldr	r2, [sp, #4]
   b468e:	2112      	movs	r1, #18
   b4690:	f000 f808 	bl	b46a4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4694:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
   b4696:	6820      	ldr	r0, [r4, #0]
   b4698:	2101      	movs	r1, #1
    return false;
  }

  return true;
}
   b469a:	b003      	add	sp, #12
   b469c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
   b46a0:	f000 b81c 	b.w	b46dc <_ZN18Adafruit_I2CDevice5beginEb>

000b46a4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b46a4:	6042      	str	r2, [r0, #4]
  _begun = false;
   b46a6:	2200      	movs	r2, #0
   b46a8:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b46aa:	2220      	movs	r2, #32
  _addr = addr;
   b46ac:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b46ae:	60c2      	str	r2, [r0, #12]
#endif
}
   b46b0:	4770      	bx	lr

000b46b2 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b46b2:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b46b4:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b46b6:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b46b8:	b153      	cbz	r3, b46d0 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b46ba:	7821      	ldrb	r1, [r4, #0]
   b46bc:	6860      	ldr	r0, [r4, #4]
   b46be:	f002 f9bf 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b46c2:	6860      	ldr	r0, [r4, #4]
   b46c4:	f002 f9c7 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
   b46c8:	fab0 f080 	clz	r0, r0
   b46cc:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b46ce:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b46d0:	2101      	movs	r1, #1
   b46d2:	f000 f803 	bl	b46dc <_ZN18Adafruit_I2CDevice5beginEb>
   b46d6:	2800      	cmp	r0, #0
   b46d8:	d1ef      	bne.n	b46ba <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b46da:	e7f8      	b.n	b46ce <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b46dc <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b46dc:	b538      	push	{r3, r4, r5, lr}
   b46de:	4604      	mov	r4, r0
  _wire->begin();
   b46e0:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b46e2:	460d      	mov	r5, r1
  _wire->begin();
   b46e4:	f002 f97a 	bl	b69dc <_ZN7TwoWire5beginEv>
  _begun = true;
   b46e8:	2001      	movs	r0, #1
   b46ea:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b46ec:	b125      	cbz	r5, b46f8 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b46ee:	4620      	mov	r0, r4
}
   b46f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b46f4:	f7ff bfdd 	b.w	b46b2 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b46f8:	bd38      	pop	{r3, r4, r5, pc}

000b46fa <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b46fa:	4770      	bx	lr

000b46fc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b46fc:	b510      	push	{r4, lr}
  }
   b46fe:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4700:	4604      	mov	r4, r0
  }
   b4702:	f7ff fccc 	bl	b409e <_ZdlPvj>
   b4706:	4620      	mov	r0, r4
   b4708:	bd10      	pop	{r4, pc}

000b470a <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b470a:	b40e      	push	{r1, r2, r3}
   b470c:	b503      	push	{r0, r1, lr}
   b470e:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4710:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4712:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4716:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4718:	f001 fb1b 	bl	b5d52 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b471c:	b002      	add	sp, #8
   b471e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4722:	b003      	add	sp, #12
   b4724:	4770      	bx	lr
	...

000b4728 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4728:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b472a:	4604      	mov	r4, r0
   b472c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b472e:	7922      	ldrb	r2, [r4, #4]
   b4730:	68a3      	ldr	r3, [r4, #8]
   b4732:	b132      	cbz	r2, b4742 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4734:	b9a3      	cbnz	r3, b4760 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4736:	490b      	ldr	r1, [pc, #44]	; (b4764 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4738:	b002      	add	sp, #8
   b473a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b473e:	f001 bacd 	b.w	b5cdc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4742:	4a09      	ldr	r2, [pc, #36]	; (b4768 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4744:	7b26      	ldrb	r6, [r4, #12]
   b4746:	4d09      	ldr	r5, [pc, #36]	; (b476c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4748:	4909      	ldr	r1, [pc, #36]	; (b4770 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b474a:	7b64      	ldrb	r4, [r4, #13]
   b474c:	2e01      	cmp	r6, #1
   b474e:	bf18      	it	ne
   b4750:	4629      	movne	r1, r5
   b4752:	e9cd 1400 	strd	r1, r4, [sp]
   b4756:	4907      	ldr	r1, [pc, #28]	; (b4774 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4758:	f7ff ffd7 	bl	b470a <_ZN5Print6printfEPKcz>
  }
   b475c:	b002      	add	sp, #8
   b475e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4760:	4a05      	ldr	r2, [pc, #20]	; (b4778 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4762:	e7ef      	b.n	b4744 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4764:	000b81f7 	.word	0x000b81f7
   b4768:	000b8428 	.word	0x000b8428
   b476c:	000b81f3 	.word	0x000b81f3
   b4770:	000b81ef 	.word	0x000b81ef
   b4774:	000b820d 	.word	0x000b820d
   b4778:	000b81e6 	.word	0x000b81e6

000b477c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b477c:	f04f 33ff 	mov.w	r3, #4294967295
   b4780:	6103      	str	r3, [r0, #16]
{ }
   b4782:	4770      	bx	lr

000b4784 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4784:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4786:	4c0b      	ldr	r4, [pc, #44]	; (b47b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4788:	7821      	ldrb	r1, [r4, #0]
   b478a:	f3bf 8f5b 	dmb	ish
   b478e:	f011 0101 	ands.w	r1, r1, #1
   b4792:	d10b      	bne.n	b47ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4794:	4620      	mov	r0, r4
   b4796:	9101      	str	r1, [sp, #4]
   b4798:	f7ff fc83 	bl	b40a2 <__cxa_guard_acquire>
   b479c:	9901      	ldr	r1, [sp, #4]
   b479e:	b128      	cbz	r0, b47ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47a0:	4805      	ldr	r0, [pc, #20]	; (b47b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47a2:	f001 f917 	bl	b59d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b47a6:	4620      	mov	r0, r4
   b47a8:	f7ff fc80 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b47ac:	4802      	ldr	r0, [pc, #8]	; (b47b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47ae:	b002      	add	sp, #8
   b47b0:	bd10      	pop	{r4, pc}
   b47b2:	bf00      	nop
   b47b4:	2003e6a4 	.word	0x2003e6a4
   b47b8:	2003e6a8 	.word	0x2003e6a8

000b47bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b47bc:	b508      	push	{r3, lr}
        instance().endTransaction();
   b47be:	f7ff ffe1 	bl	b4784 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b47c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b47c6:	f001 b923 	b.w	b5a10 <_ZN8SPIClass14endTransactionEv>

000b47ca <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b47ca:	b507      	push	{r0, r1, r2, lr}
   b47cc:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b47ce:	f7ff ffd9 	bl	b4784 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47d2:	9901      	ldr	r1, [sp, #4]
    }
   b47d4:	b003      	add	sp, #12
   b47d6:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b47da:	f001 b933 	b.w	b5a44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b47de <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b47e2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b47e6:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47e8:	4605      	mov	r5, r0
   b47ea:	460f      	mov	r7, r1
    if (_sck == -1)
   b47ec:	d106      	bne.n	b47fc <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b47ee:	f7ff ffc9 	bl	b4784 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47f2:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b47f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b47f8:	f001 b992 	b.w	b5b20 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b47fc:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b47fe:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4800:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4804:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4808:	2100      	movs	r1, #0
   b480a:	b280      	uxth	r0, r0
   b480c:	f002 fb71 	bl	b6ef2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4810:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4814:	fa08 f106 	lsl.w	r1, r8, r6
   b4818:	4039      	ands	r1, r7
   b481a:	b280      	uxth	r0, r0
   b481c:	f002 fb69 	bl	b6ef2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4820:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4824:	2101      	movs	r1, #1
   b4826:	b280      	uxth	r0, r0
   b4828:	f002 fb63 	bl	b6ef2 <digitalWrite>
        if (digitalRead(_miso))
   b482c:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4830:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4832:	b280      	uxth	r0, r0
        reply <<= 1;
   b4834:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4836:	f002 fb75 	bl	b6f24 <digitalRead>
   b483a:	b108      	cbz	r0, b4840 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b483c:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4840:	3e01      	subs	r6, #1
   b4842:	d2df      	bcs.n	b4804 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4844:	4620      	mov	r0, r4
   b4846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b484c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b484c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b484e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4852:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4854:	4604      	mov	r4, r0
   b4856:	460e      	mov	r6, r1
   b4858:	4615      	mov	r5, r2
    if (_cs == -1) {
   b485a:	d113      	bne.n	b4884 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b485c:	7901      	ldrb	r1, [r0, #4]
   b485e:	6800      	ldr	r0, [r0, #0]
   b4860:	f002 f8ee 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4864:	6820      	ldr	r0, [r4, #0]
   b4866:	6803      	ldr	r3, [r0, #0]
   b4868:	4631      	mov	r1, r6
   b486a:	689b      	ldr	r3, [r3, #8]
   b486c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b486e:	6820      	ldr	r0, [r4, #0]
   b4870:	6803      	ldr	r3, [r0, #0]
   b4872:	4629      	mov	r1, r5
   b4874:	689b      	ldr	r3, [r3, #8]
   b4876:	4798      	blx	r3
        _wire -> endTransmission();
   b4878:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b487a:	b004      	add	sp, #16
   b487c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4880:	f002 b8e9 	b.w	b6a56 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4884:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4888:	3301      	adds	r3, #1
   b488a:	d10c      	bne.n	b48a6 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b488c:	4b16      	ldr	r3, [pc, #88]	; (b48e8 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b488e:	9300      	str	r3, [sp, #0]
   b4890:	2300      	movs	r3, #0
   b4892:	f88d 3004 	strb.w	r3, [sp, #4]
   b4896:	4b15      	ldr	r3, [pc, #84]	; (b48ec <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4898:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b489a:	4668      	mov	r0, sp
   b489c:	2301      	movs	r3, #1
   b489e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b48a2:	f7ff ff92 	bl	b47ca <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b48a6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48aa:	2100      	movs	r1, #0
   b48ac:	b280      	uxth	r0, r0
   b48ae:	f002 fb20 	bl	b6ef2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b48b2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b48b6:	4620      	mov	r0, r4
   b48b8:	f7ff ff91 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b48bc:	4629      	mov	r1, r5
   b48be:	4620      	mov	r0, r4
   b48c0:	f7ff ff8d 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b48c4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48c8:	2101      	movs	r1, #1
   b48ca:	b280      	uxth	r0, r0
   b48cc:	f002 fb11 	bl	b6ef2 <digitalWrite>
    if (_sck == -1)
   b48d0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b48d4:	3301      	adds	r3, #1
   b48d6:	d104      	bne.n	b48e2 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b48d8:	b004      	add	sp, #16
   b48da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b48de:	f7ff bf6d 	b.w	b47bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b48e2:	b004      	add	sp, #16
   b48e4:	bd70      	pop	{r4, r5, r6, pc}
   b48e6:	bf00      	nop
   b48e8:	000b8234 	.word	0x000b8234
   b48ec:	0007a120 	.word	0x0007a120

000b48f0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b48f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b48f2:	00db      	lsls	r3, r3, #3
   b48f4:	f002 0207 	and.w	r2, r2, #7
   b48f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b48fc:	4313      	orrs	r3, r2
   b48fe:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4902:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4906:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b490a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b490e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4912:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4916:	f366 1347 	bfi	r3, r6, #5, #3
   b491a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b491e:	00ed      	lsls	r5, r5, #3
   b4920:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4924:	f007 0707 	and.w	r7, r7, #7
   b4928:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b492c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4930:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4932:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4934:	431d      	orrs	r5, r3
   b4936:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b493a:	f006 0207 	and.w	r2, r6, #7
   b493e:	21f2      	movs	r1, #242	; 0xf2
   b4940:	f7ff ff84 	bl	b484c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4944:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4948:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b494c:	f002 0107 	and.w	r1, r2, #7
   b4950:	009b      	lsls	r3, r3, #2
   b4952:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4956:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b495a:	4620      	mov	r0, r4
   b495c:	21f5      	movs	r1, #245	; 0xf5
   b495e:	f7ff ff75 	bl	b484c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4962:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4966:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b496a:	f002 0107 	and.w	r1, r2, #7
   b496e:	009b      	lsls	r3, r3, #2
   b4970:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4974:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4978:	4620      	mov	r0, r4
   b497a:	21f4      	movs	r1, #244	; 0xf4
}
   b497c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4980:	f7ff bf64 	b.w	b484c <_ZN15Adafruit_BME2806write8Ehh>

000b4984 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4984:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4986:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b498a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b498c:	b085      	sub	sp, #20
   b498e:	4604      	mov	r4, r0
   b4990:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4992:	d118      	bne.n	b49c6 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4994:	7901      	ldrb	r1, [r0, #4]
   b4996:	6800      	ldr	r0, [r0, #0]
   b4998:	f002 f852 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b499c:	6820      	ldr	r0, [r4, #0]
   b499e:	6803      	ldr	r3, [r0, #0]
   b49a0:	4629      	mov	r1, r5
   b49a2:	689b      	ldr	r3, [r3, #8]
   b49a4:	4798      	blx	r3
        _wire -> endTransmission();
   b49a6:	6820      	ldr	r0, [r4, #0]
   b49a8:	f002 f855 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b49ac:	7921      	ldrb	r1, [r4, #4]
   b49ae:	6820      	ldr	r0, [r4, #0]
   b49b0:	2201      	movs	r2, #1
   b49b2:	f002 f842 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b49b6:	6820      	ldr	r0, [r4, #0]
   b49b8:	6803      	ldr	r3, [r0, #0]
   b49ba:	695b      	ldr	r3, [r3, #20]
   b49bc:	4798      	blx	r3
   b49be:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b49c0:	4628      	mov	r0, r5
   b49c2:	b005      	add	sp, #20
   b49c4:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b49c6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b49ca:	3301      	adds	r3, #1
   b49cc:	d10c      	bne.n	b49e8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b49ce:	4b15      	ldr	r3, [pc, #84]	; (b4a24 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b49d0:	9300      	str	r3, [sp, #0]
   b49d2:	2300      	movs	r3, #0
   b49d4:	f88d 3004 	strb.w	r3, [sp, #4]
   b49d8:	4b13      	ldr	r3, [pc, #76]	; (b4a28 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b49da:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b49dc:	4668      	mov	r0, sp
   b49de:	2301      	movs	r3, #1
   b49e0:	f8ad 300c 	strh.w	r3, [sp, #12]
   b49e4:	f7ff fef1 	bl	b47ca <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b49e8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49ec:	2100      	movs	r1, #0
   b49ee:	b280      	uxth	r0, r0
   b49f0:	f002 fa7f 	bl	b6ef2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b49f4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49f8:	4620      	mov	r0, r4
   b49fa:	f7ff fef0 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b49fe:	2100      	movs	r1, #0
   b4a00:	4620      	mov	r0, r4
   b4a02:	f7ff feec 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
   b4a06:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4a08:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a0c:	2101      	movs	r1, #1
   b4a0e:	b280      	uxth	r0, r0
   b4a10:	f002 fa6f 	bl	b6ef2 <digitalWrite>
        if (_sck == -1)
   b4a14:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a18:	3301      	adds	r3, #1
   b4a1a:	d1d1      	bne.n	b49c0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4a1c:	f7ff fece 	bl	b47bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4a20:	e7ce      	b.n	b49c0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4a22:	bf00      	nop
   b4a24:	000b8234 	.word	0x000b8234
   b4a28:	0007a120 	.word	0x0007a120

000b4a2c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4a2c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4a2e:	21f3      	movs	r1, #243	; 0xf3
   b4a30:	f7ff ffa8 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4a34:	f000 0001 	and.w	r0, r0, #1
   b4a38:	bd08      	pop	{r3, pc}
	...

000b4a3c <_ZN15Adafruit_BME2806read16Eh>:
{
   b4a3c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4a3e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a42:	3301      	adds	r3, #1
{
   b4a44:	b085      	sub	sp, #20
   b4a46:	4604      	mov	r4, r0
   b4a48:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4a4a:	d11f      	bne.n	b4a8c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a4c:	7901      	ldrb	r1, [r0, #4]
   b4a4e:	6800      	ldr	r0, [r0, #0]
   b4a50:	f001 fff6 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a54:	6820      	ldr	r0, [r4, #0]
   b4a56:	6803      	ldr	r3, [r0, #0]
   b4a58:	4629      	mov	r1, r5
   b4a5a:	689b      	ldr	r3, [r3, #8]
   b4a5c:	4798      	blx	r3
        _wire -> endTransmission();
   b4a5e:	6820      	ldr	r0, [r4, #0]
   b4a60:	f001 fff9 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4a64:	7921      	ldrb	r1, [r4, #4]
   b4a66:	6820      	ldr	r0, [r4, #0]
   b4a68:	2202      	movs	r2, #2
   b4a6a:	f001 ffe6 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4a6e:	6820      	ldr	r0, [r4, #0]
   b4a70:	6803      	ldr	r3, [r0, #0]
   b4a72:	695b      	ldr	r3, [r3, #20]
   b4a74:	4798      	blx	r3
   b4a76:	4605      	mov	r5, r0
   b4a78:	6820      	ldr	r0, [r4, #0]
   b4a7a:	6803      	ldr	r3, [r0, #0]
   b4a7c:	695b      	ldr	r3, [r3, #20]
   b4a7e:	4798      	blx	r3
   b4a80:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a84:	b285      	uxth	r5, r0
}
   b4a86:	4628      	mov	r0, r5
   b4a88:	b005      	add	sp, #20
   b4a8a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4a8c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a90:	3301      	adds	r3, #1
   b4a92:	d10c      	bne.n	b4aae <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4a94:	4b18      	ldr	r3, [pc, #96]	; (b4af8 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4a96:	9300      	str	r3, [sp, #0]
   b4a98:	2300      	movs	r3, #0
   b4a9a:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a9e:	4b17      	ldr	r3, [pc, #92]	; (b4afc <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4aa0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4aa2:	4668      	mov	r0, sp
   b4aa4:	2301      	movs	r3, #1
   b4aa6:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4aaa:	f7ff fe8e 	bl	b47ca <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4aae:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ab2:	2100      	movs	r1, #0
   b4ab4:	b280      	uxth	r0, r0
   b4ab6:	f002 fa1c 	bl	b6ef2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4aba:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4abe:	4620      	mov	r0, r4
   b4ac0:	f7ff fe8d 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4ac4:	2100      	movs	r1, #0
   b4ac6:	4620      	mov	r0, r4
   b4ac8:	f7ff fe89 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
   b4acc:	2100      	movs	r1, #0
   b4ace:	4605      	mov	r5, r0
   b4ad0:	4620      	mov	r0, r4
   b4ad2:	f7ff fe84 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
   b4ad6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4ada:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4adc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ae0:	2101      	movs	r1, #1
   b4ae2:	b280      	uxth	r0, r0
   b4ae4:	f002 fa05 	bl	b6ef2 <digitalWrite>
        if (_sck == -1)
   b4ae8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4aec:	3301      	adds	r3, #1
   b4aee:	d1ca      	bne.n	b4a86 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4af0:	f7ff fe64 	bl	b47bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4af4:	e7c7      	b.n	b4a86 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4af6:	bf00      	nop
   b4af8:	000b8234 	.word	0x000b8234
   b4afc:	0007a120 	.word	0x0007a120

000b4b00 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4b00:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4b02:	f7ff ff9b 	bl	b4a3c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4b06:	ba40      	rev16	r0, r0
}
   b4b08:	b280      	uxth	r0, r0
   b4b0a:	bd08      	pop	{r3, pc}

000b4b0c <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4b0c:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b0e:	2188      	movs	r1, #136	; 0x88
{
   b4b10:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b12:	f7ff fff5 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b16:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b18:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4b1a:	4620      	mov	r0, r4
   b4b1c:	f7ff fff0 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b20:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4b22:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4b24:	4620      	mov	r0, r4
   b4b26:	f7ff ffeb 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b2a:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4b2c:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b2e:	4620      	mov	r0, r4
   b4b30:	f7ff ffe6 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b34:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b36:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4b38:	4620      	mov	r0, r4
   b4b3a:	f7ff ffe1 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b3e:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4b40:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4b42:	4620      	mov	r0, r4
   b4b44:	f7ff ffdc 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b48:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4b4a:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4b4c:	4620      	mov	r0, r4
   b4b4e:	f7ff ffd7 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b52:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4b54:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4b56:	4620      	mov	r0, r4
   b4b58:	f7ff ffd2 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b5c:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4b5e:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4b60:	4620      	mov	r0, r4
   b4b62:	f7ff ffcd 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b66:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4b68:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4b6a:	4620      	mov	r0, r4
   b4b6c:	f7ff ffc8 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b70:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4b72:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4b74:	4620      	mov	r0, r4
   b4b76:	f7ff ffc3 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b7a:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4b7c:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4b7e:	4620      	mov	r0, r4
   b4b80:	f7ff ffbe 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b84:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4b86:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b88:	4620      	mov	r0, r4
   b4b8a:	f7ff fefb 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4b8e:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b90:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4b94:	4620      	mov	r0, r4
   b4b96:	f7ff ffb3 	bl	b4b00 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b9a:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4b9c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b9e:	4620      	mov	r0, r4
   b4ba0:	f7ff fef0 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4ba4:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4ba6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4baa:	4620      	mov	r0, r4
   b4bac:	f7ff feea 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
   b4bb0:	21e5      	movs	r1, #229	; 0xe5
   b4bb2:	4605      	mov	r5, r0
   b4bb4:	4620      	mov	r0, r4
   b4bb6:	f7ff fee5 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
   b4bba:	f000 030f 	and.w	r3, r0, #15
   b4bbe:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4bc2:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4bc4:	21e6      	movs	r1, #230	; 0xe6
   b4bc6:	4620      	mov	r0, r4
   b4bc8:	f7ff fedc 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
   b4bcc:	21e5      	movs	r1, #229	; 0xe5
   b4bce:	4605      	mov	r5, r0
   b4bd0:	4620      	mov	r0, r4
   b4bd2:	f7ff fed7 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
   b4bd6:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4bda:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4bde:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4be0:	21e7      	movs	r1, #231	; 0xe7
   b4be2:	4620      	mov	r0, r4
   b4be4:	f7ff fece 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
   b4be8:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4bec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4bf0 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4bf0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4bf2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4bf6:	3301      	adds	r3, #1
{
   b4bf8:	b085      	sub	sp, #20
   b4bfa:	4604      	mov	r4, r0
   b4bfc:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4bfe:	d123      	bne.n	b4c48 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4c00:	7901      	ldrb	r1, [r0, #4]
   b4c02:	6800      	ldr	r0, [r0, #0]
   b4c04:	f001 ff1c 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4c08:	6820      	ldr	r0, [r4, #0]
   b4c0a:	6803      	ldr	r3, [r0, #0]
   b4c0c:	4629      	mov	r1, r5
   b4c0e:	689b      	ldr	r3, [r3, #8]
   b4c10:	4798      	blx	r3
        _wire -> endTransmission();
   b4c12:	6820      	ldr	r0, [r4, #0]
   b4c14:	f001 ff1f 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4c18:	7921      	ldrb	r1, [r4, #4]
   b4c1a:	6820      	ldr	r0, [r4, #0]
   b4c1c:	2203      	movs	r2, #3
   b4c1e:	f001 ff0c 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4c22:	6820      	ldr	r0, [r4, #0]
   b4c24:	6803      	ldr	r3, [r0, #0]
   b4c26:	695b      	ldr	r3, [r3, #20]
   b4c28:	4798      	blx	r3
        value <<= 8;
   b4c2a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c2c:	6820      	ldr	r0, [r4, #0]
   b4c2e:	6803      	ldr	r3, [r0, #0]
   b4c30:	695b      	ldr	r3, [r3, #20]
   b4c32:	4798      	blx	r3
   b4c34:	4328      	orrs	r0, r5
        value <<= 8;
   b4c36:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c38:	6820      	ldr	r0, [r4, #0]
   b4c3a:	6803      	ldr	r3, [r0, #0]
   b4c3c:	695b      	ldr	r3, [r3, #20]
   b4c3e:	4798      	blx	r3
   b4c40:	4305      	orrs	r5, r0
}
   b4c42:	4628      	mov	r0, r5
   b4c44:	b005      	add	sp, #20
   b4c46:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c48:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c4c:	3301      	adds	r3, #1
   b4c4e:	d10c      	bne.n	b4c6a <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4c50:	4b1a      	ldr	r3, [pc, #104]	; (b4cbc <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4c52:	9300      	str	r3, [sp, #0]
   b4c54:	2300      	movs	r3, #0
   b4c56:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c5a:	4b19      	ldr	r3, [pc, #100]	; (b4cc0 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4c5c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c5e:	4668      	mov	r0, sp
   b4c60:	2301      	movs	r3, #1
   b4c62:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c66:	f7ff fdb0 	bl	b47ca <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c6a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c6e:	2100      	movs	r1, #0
   b4c70:	b280      	uxth	r0, r0
   b4c72:	f002 f93e 	bl	b6ef2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c76:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c7a:	4620      	mov	r0, r4
   b4c7c:	f7ff fdaf 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4c80:	2100      	movs	r1, #0
   b4c82:	4620      	mov	r0, r4
   b4c84:	f7ff fdab 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4c88:	2100      	movs	r1, #0
        value <<= 8;
   b4c8a:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c8c:	4620      	mov	r0, r4
   b4c8e:	f7ff fda6 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
   b4c92:	4328      	orrs	r0, r5
        value <<= 8;
   b4c94:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c96:	2100      	movs	r1, #0
   b4c98:	4620      	mov	r0, r4
   b4c9a:	f7ff fda0 	bl	b47de <_ZN15Adafruit_BME2807spixferEh>
   b4c9e:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4ca0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ca4:	2101      	movs	r1, #1
   b4ca6:	b280      	uxth	r0, r0
   b4ca8:	f002 f923 	bl	b6ef2 <digitalWrite>
        if (_sck == -1)
   b4cac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4cb0:	3301      	adds	r3, #1
   b4cb2:	d1c6      	bne.n	b4c42 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4cb4:	f7ff fd82 	bl	b47bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4cb8:	e7c3      	b.n	b4c42 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4cba:	bf00      	nop
   b4cbc:	000b8234 	.word	0x000b8234
   b4cc0:	0007a120 	.word	0x0007a120

000b4cc4 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4cc4:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4cc6:	21fa      	movs	r1, #250	; 0xfa
{
   b4cc8:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4cca:	f7ff ff91 	bl	b4bf0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4cce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4cd2:	d01f      	beq.n	b4d14 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cd4:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4cd6:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4d1c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cda:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cdc:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ce0:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4ce4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ce8:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cea:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4cee:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4cf2:	131b      	asrs	r3, r3, #12
   b4cf4:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cf6:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4cf8:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4cfc:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4cfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4d02:	3380      	adds	r3, #128	; 0x80
   b4d04:	121b      	asrs	r3, r3, #8
   b4d06:	ee07 3a90 	vmov	s15, r3
   b4d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4d0e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4d12:	bd10      	pop	{r4, pc}
        return NAN;
   b4d14:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4d20 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4d18:	e7fb      	b.n	b4d12 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4d1a:	bf00      	nop
   b4d1c:	42c80000 	.word	0x42c80000
   b4d20:	7fc00000 	.word	0x7fc00000

000b4d24 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4d24:	b538      	push	{r3, r4, r5, lr}
   b4d26:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4d28:	f7ff ffcc 	bl	b4cc4 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4d2c:	21fd      	movs	r1, #253	; 0xfd
   b4d2e:	4620      	mov	r0, r4
   b4d30:	f7ff fe84 	bl	b4a3c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4d34:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4d38:	d038      	beq.n	b4dac <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d3a:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d3c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d40:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d44:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4d48:	0509      	lsls	r1, r1, #20
   b4d4a:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4d4e:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4d56:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d58:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d5c:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d60:	436b      	muls	r3, r5
   b4d62:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d64:	4369      	muls	r1, r5
   b4d66:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d6c:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d6e:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d70:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d78:	434b      	muls	r3, r1
   b4d7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4d7e:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d80:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d82:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4d84:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d88:	4352      	muls	r2, r2
   b4d8a:	11d2      	asrs	r2, r2, #7
   b4d8c:	434a      	muls	r2, r1
   b4d8e:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4d92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4d96:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4d9a:	bfa8      	it	ge
   b4d9c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4da0:	131b      	asrs	r3, r3, #12
   b4da2:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4da6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4daa:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4dac:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4db4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4db0:	e7fb      	b.n	b4daa <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4db2:	bf00      	nop
   b4db4:	7fc00000 	.word	0x7fc00000

000b4db8 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4dbc:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4dbe:	f7ff ff81 	bl	b4cc4 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4dc2:	21f7      	movs	r1, #247	; 0xf7
   b4dc4:	4628      	mov	r0, r5
   b4dc6:	f7ff ff13 	bl	b4bf0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4dca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4dce:	f000 80b6 	beq.w	b4f3e <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4dd2:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4dd4:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4dd8:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4ddc:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4de0:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4de4:	17dc      	asrs	r4, r3, #31
   b4de6:	fb03 f20e 	mul.w	r2, r3, lr
   b4dea:	fb01 2204 	mla	r2, r1, r4, r2
   b4dee:	fba3 3401 	umull	r3, r4, r3, r1
   b4df2:	4422      	add	r2, r4
   b4df4:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4df6:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4dfa:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4dfc:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e00:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e04:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e08:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e0c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4e10:	fb03 f608 	mul.w	r6, r3, r8
   b4e14:	fb07 660c 	mla	r6, r7, ip, r6
   b4e18:	fba3 3c07 	umull	r3, ip, r3, r7
   b4e1c:	4466      	add	r6, ip
   b4e1e:	0a1b      	lsrs	r3, r3, #8
   b4e20:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4e24:	191b      	adds	r3, r3, r4
   b4e26:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e2a:	8b6e      	ldrh	r6, [r5, #26]
   b4e2c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4e30:	fba3 3406 	umull	r3, r4, r3, r6
   b4e34:	fb06 4402 	mla	r4, r6, r2, r4
   b4e38:	17e3      	asrs	r3, r4, #31
   b4e3a:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4e3c:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e40:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4e44:	d07e      	beq.n	b4f44 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e46:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4e4a:	fb04 f608 	mul.w	r6, r4, r8
   b4e4e:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4e52:	fb07 6609 	mla	r6, r7, r9, r6
   b4e56:	fba4 4707 	umull	r4, r7, r4, r7
   b4e5a:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e5c:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4e60:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4e64:	fb07 fe0e 	mul.w	lr, r7, lr
   b4e68:	fb01 ee08 	mla	lr, r1, r8, lr
   b4e6c:	fba7 7101 	umull	r7, r1, r7, r1
   b4e70:	4471      	add	r1, lr
   b4e72:	0449      	lsls	r1, r1, #17
   b4e74:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4e78:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e7a:	047f      	lsls	r7, r7, #17
   b4e7c:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4e7e:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e82:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4e86:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e8a:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4e8e:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4e92:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4e96:	07e4      	lsls	r4, r4, #31
   b4e98:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e9a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4e9e:	f640 4135 	movw	r1, #3125	; 0xc35
   b4ea2:	eb60 0606 	sbc.w	r6, r0, r6
   b4ea6:	fba4 0401 	umull	r0, r4, r4, r1
   b4eaa:	fb01 4106 	mla	r1, r1, r6, r4
   b4eae:	f002 fdf9 	bl	b7aa4 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4eb2:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4eb6:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4eba:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4ebe:	0b43      	lsrs	r3, r0, #13
   b4ec0:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4ec4:	fb02 f70c 	mul.w	r7, r2, ip
   b4ec8:	17d4      	asrs	r4, r2, #31
   b4eca:	fb03 7704 	mla	r7, r3, r4, r7
   b4ece:	fba2 2403 	umull	r2, r4, r2, r3
   b4ed2:	443c      	add	r4, r7
   b4ed4:	fb02 f70c 	mul.w	r7, r2, ip
   b4ed8:	fb03 7704 	mla	r7, r3, r4, r7
   b4edc:	fba2 2303 	umull	r2, r3, r2, r3
   b4ee0:	441f      	add	r7, r3
   b4ee2:	0e53      	lsrs	r3, r2, #25
   b4ee4:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ee8:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4eea:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4eee:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4ef2:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ef4:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ef8:	fb02 4100 	mla	r1, r2, r0, r4
   b4efc:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f00:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f04:	4431      	add	r1, r6
   b4f06:	0cc0      	lsrs	r0, r0, #19
   b4f08:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f0c:	1818      	adds	r0, r3, r0
   b4f0e:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4f12:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4f16:	0a00      	lsrs	r0, r0, #8
   b4f18:	012d      	lsls	r5, r5, #4
   b4f1a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4f1e:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4f22:	0124      	lsls	r4, r4, #4
   b4f24:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4f26:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4f2a:	f002 fd7d 	bl	b7a28 <__aeabi_l2f>
   b4f2e:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4f4c <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4f32:	ee07 0a90 	vmov	s15, r0
   b4f36:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4f3e:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4f50 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4f42:	e7fa      	b.n	b4f3a <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4f44:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4f54 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4f48:	e7f7      	b.n	b4f3a <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4f4a:	bf00      	nop
   b4f4c:	3b800000 	.word	0x3b800000
   b4f50:	7fc00000 	.word	0x7fc00000
   b4f54:	00000000 	.word	0x00000000

000b4f58 <_ZN15Adafruit_BME2804initEv>:
{
   b4f58:	b530      	push	{r4, r5, lr}
   b4f5a:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4f5c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4f60:	1c42      	adds	r2, r0, #1
{
   b4f62:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4f64:	d119      	bne.n	b4f9a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4f66:	6820      	ldr	r0, [r4, #0]
   b4f68:	f001 fd38 	bl	b69dc <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f6c:	21d0      	movs	r1, #208	; 0xd0
   b4f6e:	4620      	mov	r0, r4
   b4f70:	f7ff fd08 	bl	b4984 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4f74:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f76:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4f78:	d145      	bne.n	b5006 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4f7a:	4620      	mov	r0, r4
   b4f7c:	22b6      	movs	r2, #182	; 0xb6
   b4f7e:	21e0      	movs	r1, #224	; 0xe0
   b4f80:	f7ff fc64 	bl	b484c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4f84:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4f88:	f001 f84a 	bl	b6020 <delay>
    while (isReadingCalibration())
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	f7ff fd4d 	bl	b4a2c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4f92:	4605      	mov	r5, r0
   b4f94:	b328      	cbz	r0, b4fe2 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4f96:	2064      	movs	r0, #100	; 0x64
   b4f98:	e7f6      	b.n	b4f88 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4f9a:	2101      	movs	r1, #1
   b4f9c:	b280      	uxth	r0, r0
   b4f9e:	f001 ffa8 	bl	b6ef2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4fa2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4fa6:	2101      	movs	r1, #1
   b4fa8:	b280      	uxth	r0, r0
   b4faa:	f001 ff91 	bl	b6ed0 <pinMode>
        if (_sck == -1) {
   b4fae:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4fb2:	1c43      	adds	r3, r0, #1
   b4fb4:	d104      	bne.n	b4fc0 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4fb6:	f7ff fbe5 	bl	b4784 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fba:	f000 fd15 	bl	b59e8 <_ZN8SPIClass5beginEv>
    }
   b4fbe:	e7d5      	b.n	b4f6c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4fc0:	2101      	movs	r1, #1
   b4fc2:	b280      	uxth	r0, r0
   b4fc4:	f001 ff84 	bl	b6ed0 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4fc8:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4fcc:	2101      	movs	r1, #1
   b4fce:	b280      	uxth	r0, r0
   b4fd0:	f001 ff7e 	bl	b6ed0 <pinMode>
            pinMode(_miso, INPUT);
   b4fd4:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4fd8:	2100      	movs	r1, #0
   b4fda:	b280      	uxth	r0, r0
   b4fdc:	f001 ff78 	bl	b6ed0 <pinMode>
   b4fe0:	e7c4      	b.n	b4f6c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4fe2:	4620      	mov	r0, r4
   b4fe4:	f7ff fd92 	bl	b4b0c <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4fe8:	2305      	movs	r3, #5
   b4fea:	9300      	str	r3, [sp, #0]
   b4fec:	461a      	mov	r2, r3
   b4fee:	2103      	movs	r1, #3
   b4ff0:	4620      	mov	r0, r4
   b4ff2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4ff6:	f7ff fc7b 	bl	b48f0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4ffa:	2064      	movs	r0, #100	; 0x64
   b4ffc:	f001 f810 	bl	b6020 <delay>
    return true;
   b5000:	2001      	movs	r0, #1
}
   b5002:	b005      	add	sp, #20
   b5004:	bd30      	pop	{r4, r5, pc}
        return false;
   b5006:	2000      	movs	r0, #0
   b5008:	e7fb      	b.n	b5002 <_ZN15Adafruit_BME2804initEv+0xaa>

000b500a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b500a:	2377      	movs	r3, #119	; 0x77
{
   b500c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b500e:	7103      	strb	r3, [r0, #4]
{
   b5010:	4604      	mov	r4, r0
	_wire = &Wire;
   b5012:	f001 fff1 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b5016:	6020      	str	r0, [r4, #0]
	status = init();
   b5018:	4620      	mov	r0, r4
   b501a:	f7ff ff9d 	bl	b4f58 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b501e:	b930      	cbnz	r0, b502e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b5020:	2376      	movs	r3, #118	; 0x76
   b5022:	7123      	strb	r3, [r4, #4]
 		status = init();
   b5024:	4620      	mov	r0, r4
}
   b5026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b502a:	f7ff bf95 	b.w	b4f58 <_ZN15Adafruit_BME2804initEv>
}
   b502e:	bd10      	pop	{r4, pc}

000b5030 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
  BSD license, all text above must be included in any redistribution
 ****************************************************/
#include "application.h"
#include "Adafruit_VEML6070.h"

void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
   b5030:	b510      	push	{r4, lr}
   b5032:	460c      	mov	r4, r1
  Wire.begin();
   b5034:	f001 ffe0 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b5038:	f001 fcd0 	bl	b69dc <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(VEML6070_ADDR_L);
   b503c:	f001 ffdc 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b5040:	2138      	movs	r1, #56	; 0x38
   b5042:	f001 fd01 	bl	b6a48 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((itime << 2) | 0x02);
   b5046:	f001 ffd7 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b504a:	00a1      	lsls	r1, r4, #2
   b504c:	6803      	ldr	r3, [r0, #0]
   b504e:	f041 0102 	orr.w	r1, r1, #2
   b5052:	689b      	ldr	r3, [r3, #8]
   b5054:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   b5058:	4798      	blx	r3
  Wire.endTransmission();
   b505a:	f001 ffcd 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b505e:	f001 fcfa 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
  delay(500);
}
   b5062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
   b5066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b506a:	f000 bfd9 	b.w	b6020 <delay>

000b506e <_ZN17Adafruit_VEML60706readUVEv>:

uint16_t Adafruit_VEML6070::readUV() {
   b506e:	b538      	push	{r3, r4, r5, lr}
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
   b5070:	f001 ffc2 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b5074:	2201      	movs	r2, #1
   b5076:	2139      	movs	r1, #57	; 0x39
   b5078:	f001 fcdf 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
   b507c:	2801      	cmp	r0, #1
   b507e:	4604      	mov	r4, r0
   b5080:	d002      	beq.n	b5088 <_ZN17Adafruit_VEML60706readUVEv+0x1a>
   b5082:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
  uvi |= Wire.read();

  return uvi;  
}
   b5086:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t uvi = Wire.read();
   b5088:	f001 ffb6 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b508c:	6803      	ldr	r3, [r0, #0]
   b508e:	695b      	ldr	r3, [r3, #20]
   b5090:	4798      	blx	r3
   b5092:	4605      	mov	r5, r0
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
   b5094:	f001 ffb0 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b5098:	4622      	mov	r2, r4
   b509a:	2138      	movs	r1, #56	; 0x38
   b509c:	f001 fccd 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
   b50a0:	2801      	cmp	r0, #1
   b50a2:	d1ee      	bne.n	b5082 <_ZN17Adafruit_VEML60706readUVEv+0x14>
  uvi |= Wire.read();
   b50a4:	f001 ffa8 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b50a8:	6803      	ldr	r3, [r0, #0]
   b50aa:	695b      	ldr	r3, [r3, #20]
   b50ac:	4798      	blx	r3
   b50ae:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b50b2:	b280      	uxth	r0, r0
  return uvi;  
   b50b4:	e7e7      	b.n	b5086 <_ZN17Adafruit_VEML60706readUVEv+0x18>

000b50b6 <_ZN7TwoWire5writeEi.isra.0>:
   b50b6:	6803      	ldr	r3, [r0, #0]
   b50b8:	b2c9      	uxtb	r1, r1
   b50ba:	689b      	ldr	r3, [r3, #8]
   b50bc:	4718      	bx	r3

000b50be <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
   b50be:	2200      	movs	r2, #0
   b50c0:	6042      	str	r2, [r0, #4]
   b50c2:	6082      	str	r2, [r0, #8]
   b50c4:	60c2      	str	r2, [r0, #12]
   b50c6:	f240 1201 	movw	r2, #257	; 0x101
   b50ca:	8202      	strh	r2, [r0, #16]
   b50cc:	2201      	movs	r2, #1
   b50ce:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
   b50d0:	4770      	bx	lr

000b50d2 <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
   b50d2:	b538      	push	{r3, r4, r5, lr}
   b50d4:	4604      	mov	r4, r0
   b50d6:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b50d8:	6800      	ldr	r0, [r0, #0]
   b50da:	2161      	movs	r1, #97	; 0x61
   b50dc:	f001 fcb4 	bl	b6a48 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
   b50e0:	6820      	ldr	r0, [r4, #0]
   b50e2:	0a29      	lsrs	r1, r5, #8
   b50e4:	f7ff ffe7 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   b50e8:	6820      	ldr	r0, [r4, #0]
   b50ea:	b2e9      	uxtb	r1, r5
   b50ec:	f7ff ffe3 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b50f0:	6820      	ldr	r0, [r4, #0]
   b50f2:	f001 fcb0 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
   b50f6:	b108      	cbz	r0, b50fc <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   b50f8:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
   b50fa:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
   b50fc:	6820      	ldr	r0, [r4, #0]
   b50fe:	2202      	movs	r2, #2
   b5100:	2161      	movs	r1, #97	; 0x61
   b5102:	f001 fc9a 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5106:	6820      	ldr	r0, [r4, #0]
   b5108:	6803      	ldr	r3, [r0, #0]
   b510a:	691b      	ldr	r3, [r3, #16]
   b510c:	4798      	blx	r3
   b510e:	2800      	cmp	r0, #0
   b5110:	d0f2      	beq.n	b50f8 <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
   b5112:	6820      	ldr	r0, [r4, #0]
   b5114:	6803      	ldr	r3, [r0, #0]
   b5116:	695b      	ldr	r3, [r3, #20]
   b5118:	4798      	blx	r3
   b511a:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
   b511c:	6820      	ldr	r0, [r4, #0]
   b511e:	6803      	ldr	r3, [r0, #0]
   b5120:	695b      	ldr	r3, [r3, #20]
   b5122:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b5124:	b2c3      	uxtb	r3, r0
   b5126:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
   b512a:	b280      	uxth	r0, r0
   b512c:	e7e5      	b.n	b50fa <_ZN5SCD3012readRegisterEt+0x28>

000b512e <_ZN5SCD3013dataAvailableEv>:
{
   b512e:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   b5130:	f240 2102 	movw	r1, #514	; 0x202
   b5134:	f7ff ffcd 	bl	b50d2 <_ZN5SCD3012readRegisterEt>
}
   b5138:	1e43      	subs	r3, r0, #1
   b513a:	4258      	negs	r0, r3
   b513c:	4158      	adcs	r0, r3
   b513e:	bd08      	pop	{r3, pc}

000b5140 <_ZN5SCD3015readMeasurementEv>:
{
   b5140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5144:	4604      	mov	r4, r0
  if (dataAvailable() == false)
   b5146:	f7ff fff2 	bl	b512e <_ZN5SCD3013dataAvailableEv>
   b514a:	4607      	mov	r7, r0
   b514c:	b918      	cbnz	r0, b5156 <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
   b514e:	2700      	movs	r7, #0
}
   b5150:	4638      	mov	r0, r7
   b5152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5156:	6820      	ldr	r0, [r4, #0]
   b5158:	2161      	movs	r1, #97	; 0x61
   b515a:	f001 fc75 	bl	b6a48 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
   b515e:	6820      	ldr	r0, [r4, #0]
   b5160:	2103      	movs	r1, #3
   b5162:	f7ff ffa8 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   b5166:	6820      	ldr	r0, [r4, #0]
   b5168:	2100      	movs	r1, #0
   b516a:	f7ff ffa4 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b516e:	6820      	ldr	r0, [r4, #0]
   b5170:	f001 fc71 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
   b5174:	4605      	mov	r5, r0
   b5176:	2800      	cmp	r0, #0
   b5178:	d1e9      	bne.n	b514e <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
   b517a:	2212      	movs	r2, #18
   b517c:	2161      	movs	r1, #97	; 0x61
   b517e:	6820      	ldr	r0, [r4, #0]
   b5180:	f001 fc5b 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5184:	6820      	ldr	r0, [r4, #0]
   b5186:	6803      	ldr	r3, [r0, #0]
   b5188:	691b      	ldr	r3, [r3, #16]
   b518a:	4798      	blx	r3
   b518c:	4606      	mov	r6, r0
   b518e:	b358      	cbz	r0, b51e8 <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
   b5190:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
   b5192:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
   b5194:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
   b5196:	6820      	ldr	r0, [r4, #0]
   b5198:	6803      	ldr	r3, [r0, #0]
   b519a:	695b      	ldr	r3, [r3, #20]
   b519c:	4798      	blx	r3
      switch (x)
   b519e:	b2eb      	uxtb	r3, r5
   b51a0:	2b10      	cmp	r3, #16
   b51a2:	d80d      	bhi.n	b51c0 <_ZN5SCD3015readMeasurementEv+0x80>
   b51a4:	e8df f003 	tbb	[pc, r3]
   b51a8:	090c0909 	.word	0x090c0909
   b51ac:	18180c09 	.word	0x18180c09
   b51b0:	0c18180c 	.word	0x0c18180c
   b51b4:	1c0c1c1c 	.word	0x1c0c1c1c
   b51b8:	1c          	.byte	0x1c
   b51b9:	00          	.byte	0x00
          tempCO2 |= incoming;
   b51ba:	b2c3      	uxtb	r3, r0
   b51bc:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
   b51c0:	3501      	adds	r5, #1
   b51c2:	2d12      	cmp	r5, #18
   b51c4:	d1e7      	bne.n	b5196 <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
   b51c6:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
   b51c8:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
   b51cc:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
   b51ce:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
   b51d2:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
   b51d4:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
   b51d6:	e7bb      	b.n	b5150 <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
   b51d8:	b2c3      	uxtb	r3, r0
   b51da:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
   b51de:	e7ef      	b.n	b51c0 <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
   b51e0:	b2c3      	uxtb	r3, r0
   b51e2:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
   b51e6:	e7eb      	b.n	b51c0 <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
   b51e8:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
   b51ea:	4681      	mov	r9, r0
   b51ec:	e7eb      	b.n	b51c6 <_ZN5SCD3015readMeasurementEv+0x86>

000b51ee <_ZN5SCD306getCO2Ev>:
{
   b51ee:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
   b51f0:	7c03      	ldrb	r3, [r0, #16]
{
   b51f2:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
   b51f4:	b10b      	cbz	r3, b51fa <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b51f6:	f7ff ffa3 	bl	b5140 <_ZN5SCD3015readMeasurementEv>
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
   b51fa:	edd4 7a01 	vldr	s15, [r4, #4]
   b51fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  co2HasBeenReported = true;
   b5202:	2301      	movs	r3, #1
   b5204:	7423      	strb	r3, [r4, #16]
}
   b5206:	ee17 3a90 	vmov	r3, s15
   b520a:	b298      	uxth	r0, r3
   b520c:	bd10      	pop	{r4, pc}

000b520e <_ZN5SCD3011getHumidityEv>:
{
   b520e:	b510      	push	{r4, lr}
  if (humidityHasBeenReported == true) //Trigger a new read
   b5210:	7c43      	ldrb	r3, [r0, #17]
{
   b5212:	4604      	mov	r4, r0
  if (humidityHasBeenReported == true) //Trigger a new read
   b5214:	b10b      	cbz	r3, b521a <_ZN5SCD3011getHumidityEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5216:	f7ff ff93 	bl	b5140 <_ZN5SCD3015readMeasurementEv>
  humidityHasBeenReported = true;
   b521a:	2301      	movs	r3, #1
}
   b521c:	ed94 0a03 	vldr	s0, [r4, #12]
  humidityHasBeenReported = true;
   b5220:	7463      	strb	r3, [r4, #17]
}
   b5222:	bd10      	pop	{r4, pc}

000b5224 <_ZN5SCD3014getTemperatureEv>:
{
   b5224:	b510      	push	{r4, lr}
  if (temperatureHasBeenReported == true) //Trigger a new read
   b5226:	7c83      	ldrb	r3, [r0, #18]
{
   b5228:	4604      	mov	r4, r0
  if (temperatureHasBeenReported == true) //Trigger a new read
   b522a:	b10b      	cbz	r3, b5230 <_ZN5SCD3014getTemperatureEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b522c:	f7ff ff88 	bl	b5140 <_ZN5SCD3015readMeasurementEv>
  temperatureHasBeenReported = true;
   b5230:	2301      	movs	r3, #1
}
   b5232:	ed94 0a02 	vldr	s0, [r4, #8]
  temperatureHasBeenReported = true;
   b5236:	74a3      	strb	r3, [r4, #18]
}
   b5238:	bd10      	pop	{r4, pc}

000b523a <_ZN5SCD3011computeCRC8EPhh>:
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0 ; x < len ; x++)
   b523a:	440a      	add	r2, r1
  uint8_t crc = 0xFF; //Init with 0xFF
   b523c:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t x = 0 ; x < len ; x++)
   b523e:	428a      	cmp	r2, r1
   b5240:	d011      	beq.n	b5266 <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
   b5242:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5246:	4058      	eors	r0, r3
   b5248:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
   b524a:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t i = 0 ; i < 8 ; i++)
   b524e:	f103 33ff 	add.w	r3, r3, #4294967295
   b5252:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   b5256:	bf18      	it	ne
   b5258:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
   b525c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   b5260:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
   b5262:	d1f2      	bne.n	b524a <_ZN5SCD3011computeCRC8EPhh+0x10>
   b5264:	e7eb      	b.n	b523e <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
   b5266:	4770      	bx	lr

000b5268 <_ZN5SCD3011sendCommandEtt>:
{
   b5268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b526c:	460e      	mov	r6, r1
  data[0] = arguments >> 8;
   b526e:	ea4f 2812 	mov.w	r8, r2, lsr #8
{
   b5272:	4615      	mov	r5, r2
  data[1] = arguments & 0xFF;
   b5274:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b5278:	a901      	add	r1, sp, #4
   b527a:	2202      	movs	r2, #2
{
   b527c:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
   b527e:	f88d 8004 	strb.w	r8, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b5282:	f7ff ffda 	bl	b523a <_ZN5SCD3011computeCRC8EPhh>
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5286:	2161      	movs	r1, #97	; 0x61
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b5288:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b528a:	6820      	ldr	r0, [r4, #0]
   b528c:	f001 fbdc 	bl	b6a48 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
   b5290:	6820      	ldr	r0, [r4, #0]
   b5292:	0a31      	lsrs	r1, r6, #8
   b5294:	f7ff ff0f 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(command & 0xFF); //LSB
   b5298:	6820      	ldr	r0, [r4, #0]
   b529a:	b2f1      	uxtb	r1, r6
   b529c:	f7ff ff0b 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments >> 8); //MSB
   b52a0:	6820      	ldr	r0, [r4, #0]
   b52a2:	4641      	mov	r1, r8
   b52a4:	f7ff ff07 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments & 0xFF); //LSB
   b52a8:	6820      	ldr	r0, [r4, #0]
   b52aa:	b2e9      	uxtb	r1, r5
   b52ac:	f7ff ff03 	bl	b50b6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(crc);
   b52b0:	6820      	ldr	r0, [r4, #0]
   b52b2:	6803      	ldr	r3, [r0, #0]
   b52b4:	4639      	mov	r1, r7
   b52b6:	689b      	ldr	r3, [r3, #8]
   b52b8:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b52ba:	6820      	ldr	r0, [r4, #0]
   b52bc:	f001 fbcb 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
}
   b52c0:	fab0 f080 	clz	r0, r0
   b52c4:	0940      	lsrs	r0, r0, #5
   b52c6:	b002      	add	sp, #8
   b52c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b52cc <_ZN5SCD3022setAutoSelfCalibrationEb>:
  if (enable)
   b52cc:	460a      	mov	r2, r1
   b52ce:	b101      	cbz	r1, b52d2 <_ZN5SCD3022setAutoSelfCalibrationEb+0x6>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b52d0:	2201      	movs	r2, #1
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 0); //Deactivate continuous ASC
   b52d2:	f245 3106 	movw	r1, #21254	; 0x5306
   b52d6:	f7ff bfc7 	b.w	b5268 <_ZN5SCD3011sendCommandEtt>

000b52da <_ZN5SCD3014beginMeasuringEt>:
{
   b52da:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
   b52dc:	2110      	movs	r1, #16
   b52de:	f7ff bfc3 	b.w	b5268 <_ZN5SCD3011sendCommandEtt>

000b52e2 <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
   b52e2:	2100      	movs	r1, #0
   b52e4:	f7ff bff9 	b.w	b52da <_ZN5SCD3014beginMeasuringEt>

000b52e8 <_ZN5SCD3022setMeasurementIntervalEt>:
{
   b52e8:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
   b52ea:	f44f 418c 	mov.w	r1, #17920	; 0x4600
   b52ee:	f7ff bfbb 	b.w	b5268 <_ZN5SCD3011sendCommandEtt>

000b52f2 <_ZN5SCD305beginER7TwoWire>:
{
   b52f2:	b538      	push	{r3, r4, r5, lr}
   b52f4:	4604      	mov	r4, r0
   b52f6:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b52f8:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b52fa:	f001 fb6f 	bl	b69dc <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
   b52fe:	4620      	mov	r0, r4
   b5300:	f7ff ffef 	bl	b52e2 <_ZN5SCD3014beginMeasuringEv>
   b5304:	4605      	mov	r5, r0
   b5306:	b148      	cbz	r0, b531c <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
   b5308:	2102      	movs	r1, #2
   b530a:	4620      	mov	r0, r4
   b530c:	f7ff ffec 	bl	b52e8 <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b5310:	2201      	movs	r2, #1
   b5312:	f245 3106 	movw	r1, #21254	; 0x5306
   b5316:	4620      	mov	r0, r4
   b5318:	f7ff ffa6 	bl	b5268 <_ZN5SCD3011sendCommandEtt>
}
   b531c:	4628      	mov	r0, r5
   b531e:	bd38      	pop	{r3, r4, r5, pc}

000b5320 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   b5320:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   b5322:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   b5324:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   b5326:	7002      	strb	r2, [r0, #0]
}
   b5328:	4770      	bx	lr

000b532a <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   b532a:	b510      	push	{r4, lr}
   b532c:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   b532e:	6840      	ldr	r0, [r0, #4]
   b5330:	f001 fb94 	bl	b6a5c <_ZN7TwoWire9isEnabledEv>
   b5334:	b910      	cbnz	r0, b533c <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   b5336:	6860      	ldr	r0, [r4, #4]
   b5338:	f001 fb50 	bl	b69dc <_ZN7TwoWire5beginEv>
  }

  return true;
}
   b533c:	2001      	movs	r0, #1
   b533e:	bd10      	pop	{r4, pc}

000b5340 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   b5340:	b570      	push	{r4, r5, r6, lr}
   b5342:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   b5344:	7841      	ldrb	r1, [r0, #1]
   b5346:	6840      	ldr	r0, [r0, #4]
   b5348:	f001 fb7a 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   b534c:	7869      	ldrb	r1, [r5, #1]
   b534e:	6868      	ldr	r0, [r5, #4]
   b5350:	2202      	movs	r2, #2
   b5352:	f001 fb72 	bl	b6a3a <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   b5356:	6868      	ldr	r0, [r5, #4]
   b5358:	6803      	ldr	r3, [r0, #0]
   b535a:	695b      	ldr	r3, [r3, #20]
   b535c:	4798      	blx	r3
   b535e:	4606      	mov	r6, r0
   b5360:	6868      	ldr	r0, [r5, #4]
   b5362:	6803      	ldr	r3, [r0, #0]
   b5364:	695b      	ldr	r3, [r3, #20]
   b5366:	4798      	blx	r3
   b5368:	4604      	mov	r4, r0
   b536a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  m_i2c.endTransmission();
   b536e:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   b5370:	b2a4      	uxth	r4, r4
  m_i2c.endTransmission();
   b5372:	f001 fb70 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
  return (float)level / 1.2f; // convert to lux
   b5376:	ee07 4a90 	vmov	s15, r4
}
   b537a:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5388 <_ZN6BH175015get_light_levelEv+0x48>
  return (float)level / 1.2f; // convert to lux
   b537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b5382:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5386:	bd70      	pop	{r4, r5, r6, pc}
   b5388:	3f99999a 	.word	0x3f99999a

000b538c <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   b538c:	7803      	ldrb	r3, [r0, #0]
   b538e:	2b23      	cmp	r3, #35	; 0x23
   b5390:	d005      	beq.n	b539e <_ZN6BH175020wait_for_measurementEv+0x12>
   b5392:	2b13      	cmp	r3, #19
   b5394:	bf0c      	ite	eq
   b5396:	2018      	moveq	r0, #24
   b5398:	20b4      	movne	r0, #180	; 0xb4
   b539a:	f000 be41 	b.w	b6020 <delay>
   b539e:	2018      	movs	r0, #24
   b53a0:	e7fb      	b.n	b539a <_ZN6BH175020wait_for_measurementEv+0xe>

000b53a2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   b53a2:	b538      	push	{r3, r4, r5, lr}
   b53a4:	4604      	mov	r4, r0
   b53a6:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   b53a8:	7841      	ldrb	r1, [r0, #1]
   b53aa:	6840      	ldr	r0, [r0, #4]
   b53ac:	f001 fb48 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   b53b0:	6860      	ldr	r0, [r4, #4]
   b53b2:	6803      	ldr	r3, [r0, #0]
   b53b4:	4629      	mov	r1, r5
   b53b6:	689b      	ldr	r3, [r3, #8]
   b53b8:	4798      	blx	r3
  m_i2c.endTransmission();
   b53ba:	6860      	ldr	r0, [r4, #4]
   b53bc:	f001 fb4b 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   b53c0:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   b53c2:	4620      	mov	r0, r4
}
   b53c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   b53c8:	f7ff bfe0 	b.w	b538c <_ZN6BH175020wait_for_measurementEv>

000b53cc <_ZN6BH175023make_forced_measurementEv>:
{
   b53cc:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   b53ce:	7803      	ldrb	r3, [r0, #0]
   b53d0:	f1a3 0220 	sub.w	r2, r3, #32
   b53d4:	2a01      	cmp	r2, #1
{
   b53d6:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   b53d8:	d901      	bls.n	b53de <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   b53da:	2b23      	cmp	r3, #35	; 0x23
   b53dc:	d110      	bne.n	b5400 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   b53de:	7861      	ldrb	r1, [r4, #1]
   b53e0:	6860      	ldr	r0, [r4, #4]
   b53e2:	f001 fb2d 	bl	b6a40 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   b53e6:	6860      	ldr	r0, [r4, #4]
   b53e8:	7821      	ldrb	r1, [r4, #0]
   b53ea:	6803      	ldr	r3, [r0, #0]
   b53ec:	689b      	ldr	r3, [r3, #8]
   b53ee:	4798      	blx	r3
    m_i2c.endTransmission();
   b53f0:	6860      	ldr	r0, [r4, #4]
   b53f2:	f001 fb30 	bl	b6a56 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   b53f6:	4620      	mov	r0, r4
}
   b53f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   b53fc:	f7ff bfc6 	b.w	b538c <_ZN6BH175020wait_for_measurementEv>
}
   b5400:	bd10      	pop	{r4, pc}
	...

000b5404 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <netdb_freeaddrinfo+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	689b      	ldr	r3, [r3, #8]
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	00030268 	.word	0x00030268

000b5414 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <netdb_getaddrinfo+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	68db      	ldr	r3, [r3, #12]
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	00030268 	.word	0x00030268

000b5424 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <HAL_Pin_Mode+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	689b      	ldr	r3, [r3, #8]
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	0003022c 	.word	0x0003022c

000b5434 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <HAL_Get_Pin_Mode+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	68db      	ldr	r3, [r3, #12]
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	0003022c 	.word	0x0003022c

000b5444 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <HAL_GPIO_Write+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	691b      	ldr	r3, [r3, #16]
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	0003022c 	.word	0x0003022c

000b5454 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <HAL_GPIO_Read+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	695b      	ldr	r3, [r3, #20]
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	0003022c 	.word	0x0003022c

000b5464 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <HAL_RNG_GetRandomNumber+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	685b      	ldr	r3, [r3, #4]
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	00030218 	.word	0x00030218

000b5474 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	695b      	ldr	r3, [r3, #20]
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	00030218 	.word	0x00030218

000b5484 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <hal_rtc_time_is_valid+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	00030218 	.word	0x00030218

000b5494 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <hal_rtc_get_time+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	00030218 	.word	0x00030218

000b54a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <os_mutex_recursive_create+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	00030248 	.word	0x00030248

000b54b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <inet_inet_ntop+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	695b      	ldr	r3, [r3, #20]
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	00030264 	.word	0x00030264

000b54c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <hal_usart_write+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	68db      	ldr	r3, [r3, #12]
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	0003023c 	.word	0x0003023c

000b54d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <hal_usart_available+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	691b      	ldr	r3, [r3, #16]
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	0003023c 	.word	0x0003023c

000b54e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <hal_usart_read+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	695b      	ldr	r3, [r3, #20]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003023c 	.word	0x0003023c

000b54f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <hal_usart_peek+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	699b      	ldr	r3, [r3, #24]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003023c 	.word	0x0003023c

000b5504 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <hal_usart_flush+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	69db      	ldr	r3, [r3, #28]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	0003023c 	.word	0x0003023c

000b5514 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <hal_usart_is_enabled+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	6a1b      	ldr	r3, [r3, #32]
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	0003023c 	.word	0x0003023c

000b5524 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <hal_usart_available_data_for_write+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	0003023c 	.word	0x0003023c

000b5534 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <hal_usart_init_ex+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	0003023c 	.word	0x0003023c

000b5544 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <hal_i2c_begin+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	68db      	ldr	r3, [r3, #12]
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	00030228 	.word	0x00030228

000b5554 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <hal_i2c_begin_transmission+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	699b      	ldr	r3, [r3, #24]
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	00030228 	.word	0x00030228

000b5564 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <hal_i2c_end_transmission+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	69db      	ldr	r3, [r3, #28]
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	00030228 	.word	0x00030228

000b5574 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <hal_i2c_write+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	6a1b      	ldr	r3, [r3, #32]
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	00030228 	.word	0x00030228

000b5584 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <hal_i2c_available+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	00030228 	.word	0x00030228

000b5594 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <hal_i2c_read+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	00030228 	.word	0x00030228

000b55a4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <hal_i2c_peek+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	00030228 	.word	0x00030228

000b55b4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <hal_i2c_flush+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	00030228 	.word	0x00030228

000b55c4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <hal_i2c_is_enabled+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	00030228 	.word	0x00030228

000b55d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <hal_i2c_init+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	00030228 	.word	0x00030228

000b55e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <hal_i2c_request_ex+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	00030228 	.word	0x00030228

000b55f4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <hal_spi_begin+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	681b      	ldr	r3, [r3, #0]
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	00030230 	.word	0x00030230

000b5604 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <hal_spi_transfer+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	695b      	ldr	r3, [r3, #20]
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	00030230 	.word	0x00030230

000b5614 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <hal_spi_init+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	69db      	ldr	r3, [r3, #28]
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	00030230 	.word	0x00030230

000b5624 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <hal_spi_is_enabled+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	6a1b      	ldr	r3, [r3, #32]
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	00030230 	.word	0x00030230

000b5634 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <hal_spi_info+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	00030230 	.word	0x00030230

000b5644 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <hal_spi_set_settings+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	00030230 	.word	0x00030230

000b5654 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <hal_spi_acquire+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	00030230 	.word	0x00030230

000b5664 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <hal_spi_release+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	00030230 	.word	0x00030230

000b5674 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <HAL_USB_USART_Init+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	681b      	ldr	r3, [r3, #0]
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	0003024c 	.word	0x0003024c

000b5684 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <HAL_USB_USART_Begin+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	685b      	ldr	r3, [r3, #4]
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	0003024c 	.word	0x0003024c

000b5694 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <HAL_USB_USART_Available_Data+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	691b      	ldr	r3, [r3, #16]
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	0003024c 	.word	0x0003024c

000b56a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	695b      	ldr	r3, [r3, #20]
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	0003024c 	.word	0x0003024c

000b56b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <HAL_USB_USART_Receive_Data+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	699b      	ldr	r3, [r3, #24]
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	0003024c 	.word	0x0003024c

000b56c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <HAL_USB_USART_Send_Data+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	69db      	ldr	r3, [r3, #28]
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	0003024c 	.word	0x0003024c

000b56d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <HAL_USB_USART_Flush_Data+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	6a1b      	ldr	r3, [r3, #32]
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	0003024c 	.word	0x0003024c

000b56e4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <system_mode+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	681b      	ldr	r3, [r3, #0]
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	00030220 	.word	0x00030220

000b56f4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <set_system_mode+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	685b      	ldr	r3, [r3, #4]
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	00030220 	.word	0x00030220

000b5704 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <system_delay_ms+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	695b      	ldr	r3, [r3, #20]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	00030220 	.word	0x00030220

000b5714 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <application_thread_current+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	00030220 	.word	0x00030220

000b5724 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <application_thread_invoke+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	00030220 	.word	0x00030220

000b5734 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <system_thread_get_state+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	00030220 	.word	0x00030220

000b5744 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b03      	ldr	r3, [pc, #12]	; (b5754 <system_ctrl_set_app_request_handler+0x10>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b574e:	9301      	str	r3, [sp, #4]
   b5750:	bd08      	pop	{r3, pc}
   b5752:	0000      	.short	0x0000
   b5754:	00030220 	.word	0x00030220

000b5758 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b03      	ldr	r3, [pc, #12]	; (b5768 <system_ctrl_set_result+0x10>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5762:	9301      	str	r3, [sp, #4]
   b5764:	bd08      	pop	{r3, pc}
   b5766:	0000      	.short	0x0000
   b5768:	00030220 	.word	0x00030220

000b576c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b576c:	b508      	push	{r3, lr}
   b576e:	4b02      	ldr	r3, [pc, #8]	; (b5778 <network_connect+0xc>)
   b5770:	681b      	ldr	r3, [r3, #0]
   b5772:	685b      	ldr	r3, [r3, #4]
   b5774:	9301      	str	r3, [sp, #4]
   b5776:	bd08      	pop	{r3, pc}
   b5778:	00030240 	.word	0x00030240

000b577c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b577c:	b508      	push	{r3, lr}
   b577e:	4b02      	ldr	r3, [pc, #8]	; (b5788 <network_connecting+0xc>)
   b5780:	681b      	ldr	r3, [r3, #0]
   b5782:	689b      	ldr	r3, [r3, #8]
   b5784:	9301      	str	r3, [sp, #4]
   b5786:	bd08      	pop	{r3, pc}
   b5788:	00030240 	.word	0x00030240

000b578c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b578c:	b508      	push	{r3, lr}
   b578e:	4b02      	ldr	r3, [pc, #8]	; (b5798 <network_disconnect+0xc>)
   b5790:	681b      	ldr	r3, [r3, #0]
   b5792:	68db      	ldr	r3, [r3, #12]
   b5794:	9301      	str	r3, [sp, #4]
   b5796:	bd08      	pop	{r3, pc}
   b5798:	00030240 	.word	0x00030240

000b579c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b579c:	b508      	push	{r3, lr}
   b579e:	4b02      	ldr	r3, [pc, #8]	; (b57a8 <network_ready+0xc>)
   b57a0:	681b      	ldr	r3, [r3, #0]
   b57a2:	691b      	ldr	r3, [r3, #16]
   b57a4:	9301      	str	r3, [sp, #4]
   b57a6:	bd08      	pop	{r3, pc}
   b57a8:	00030240 	.word	0x00030240

000b57ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b57ac:	b508      	push	{r3, lr}
   b57ae:	4b02      	ldr	r3, [pc, #8]	; (b57b8 <network_on+0xc>)
   b57b0:	681b      	ldr	r3, [r3, #0]
   b57b2:	695b      	ldr	r3, [r3, #20]
   b57b4:	9301      	str	r3, [sp, #4]
   b57b6:	bd08      	pop	{r3, pc}
   b57b8:	00030240 	.word	0x00030240

000b57bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b57bc:	b508      	push	{r3, lr}
   b57be:	4b02      	ldr	r3, [pc, #8]	; (b57c8 <network_off+0xc>)
   b57c0:	681b      	ldr	r3, [r3, #0]
   b57c2:	699b      	ldr	r3, [r3, #24]
   b57c4:	9301      	str	r3, [sp, #4]
   b57c6:	bd08      	pop	{r3, pc}
   b57c8:	00030240 	.word	0x00030240

000b57cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b57cc:	b508      	push	{r3, lr}
   b57ce:	4b02      	ldr	r3, [pc, #8]	; (b57d8 <network_listen+0xc>)
   b57d0:	681b      	ldr	r3, [r3, #0]
   b57d2:	69db      	ldr	r3, [r3, #28]
   b57d4:	9301      	str	r3, [sp, #4]
   b57d6:	bd08      	pop	{r3, pc}
   b57d8:	00030240 	.word	0x00030240

000b57dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b57dc:	b508      	push	{r3, lr}
   b57de:	4b02      	ldr	r3, [pc, #8]	; (b57e8 <network_listening+0xc>)
   b57e0:	681b      	ldr	r3, [r3, #0]
   b57e2:	6a1b      	ldr	r3, [r3, #32]
   b57e4:	9301      	str	r3, [sp, #4]
   b57e6:	bd08      	pop	{r3, pc}
   b57e8:	00030240 	.word	0x00030240

000b57ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b57ec:	b508      	push	{r3, lr}
   b57ee:	4b02      	ldr	r3, [pc, #8]	; (b57f8 <network_set_listen_timeout+0xc>)
   b57f0:	681b      	ldr	r3, [r3, #0]
   b57f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57f4:	9301      	str	r3, [sp, #4]
   b57f6:	bd08      	pop	{r3, pc}
   b57f8:	00030240 	.word	0x00030240

000b57fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b57fc:	b508      	push	{r3, lr}
   b57fe:	4b02      	ldr	r3, [pc, #8]	; (b5808 <network_get_listen_timeout+0xc>)
   b5800:	681b      	ldr	r3, [r3, #0]
   b5802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5804:	9301      	str	r3, [sp, #4]
   b5806:	bd08      	pop	{r3, pc}
   b5808:	00030240 	.word	0x00030240

000b580c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b580c:	b508      	push	{r3, lr}
   b580e:	4b02      	ldr	r3, [pc, #8]	; (b5818 <network_is_on+0xc>)
   b5810:	681b      	ldr	r3, [r3, #0]
   b5812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5814:	9301      	str	r3, [sp, #4]
   b5816:	bd08      	pop	{r3, pc}
   b5818:	00030240 	.word	0x00030240

000b581c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b581c:	b508      	push	{r3, lr}
   b581e:	4b02      	ldr	r3, [pc, #8]	; (b5828 <network_is_off+0xc>)
   b5820:	681b      	ldr	r3, [r3, #0]
   b5822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5824:	9301      	str	r3, [sp, #4]
   b5826:	bd08      	pop	{r3, pc}
   b5828:	00030240 	.word	0x00030240

000b582c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b582c:	b508      	push	{r3, lr}
   b582e:	4b02      	ldr	r3, [pc, #8]	; (b5838 <spark_process+0xc>)
   b5830:	681b      	ldr	r3, [r3, #0]
   b5832:	689b      	ldr	r3, [r3, #8]
   b5834:	9301      	str	r3, [sp, #4]
   b5836:	bd08      	pop	{r3, pc}
   b5838:	00030244 	.word	0x00030244

000b583c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b583c:	b508      	push	{r3, lr}
   b583e:	4b02      	ldr	r3, [pc, #8]	; (b5848 <spark_cloud_flag_connect+0xc>)
   b5840:	681b      	ldr	r3, [r3, #0]
   b5842:	68db      	ldr	r3, [r3, #12]
   b5844:	9301      	str	r3, [sp, #4]
   b5846:	bd08      	pop	{r3, pc}
   b5848:	00030244 	.word	0x00030244

000b584c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b584c:	b508      	push	{r3, lr}
   b584e:	4b02      	ldr	r3, [pc, #8]	; (b5858 <spark_cloud_flag_connected+0xc>)
   b5850:	681b      	ldr	r3, [r3, #0]
   b5852:	695b      	ldr	r3, [r3, #20]
   b5854:	9301      	str	r3, [sp, #4]
   b5856:	bd08      	pop	{r3, pc}
   b5858:	00030244 	.word	0x00030244

000b585c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b585c:	b508      	push	{r3, lr}
   b585e:	4b02      	ldr	r3, [pc, #8]	; (b5868 <spark_send_event+0xc>)
   b5860:	681b      	ldr	r3, [r3, #0]
   b5862:	6a1b      	ldr	r3, [r3, #32]
   b5864:	9301      	str	r3, [sp, #4]
   b5866:	bd08      	pop	{r3, pc}
   b5868:	00030244 	.word	0x00030244

000b586c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b586c:	b508      	push	{r3, lr}
   b586e:	4b02      	ldr	r3, [pc, #8]	; (b5878 <spark_sync_time_pending+0xc>)
   b5870:	681b      	ldr	r3, [r3, #0]
   b5872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5874:	9301      	str	r3, [sp, #4]
   b5876:	bd08      	pop	{r3, pc}
   b5878:	00030244 	.word	0x00030244

000b587c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b587c:	b508      	push	{r3, lr}
   b587e:	4b02      	ldr	r3, [pc, #8]	; (b5888 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5880:	681b      	ldr	r3, [r3, #0]
   b5882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5884:	9301      	str	r3, [sp, #4]
   b5886:	bd08      	pop	{r3, pc}
   b5888:	00030244 	.word	0x00030244

000b588c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b588c:	b508      	push	{r3, lr}
   b588e:	4b02      	ldr	r3, [pc, #8]	; (b5898 <malloc+0xc>)
   b5890:	681b      	ldr	r3, [r3, #0]
   b5892:	681b      	ldr	r3, [r3, #0]
   b5894:	9301      	str	r3, [sp, #4]
   b5896:	bd08      	pop	{r3, pc}
   b5898:	0003021c 	.word	0x0003021c

000b589c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <free+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	685b      	ldr	r3, [r3, #4]
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	0003021c 	.word	0x0003021c

000b58ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <realloc+0xc>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	689b      	ldr	r3, [r3, #8]
   b58b4:	9301      	str	r3, [sp, #4]
   b58b6:	bd08      	pop	{r3, pc}
   b58b8:	0003021c 	.word	0x0003021c

000b58bc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b58bc:	b508      	push	{r3, lr}
   b58be:	4b02      	ldr	r3, [pc, #8]	; (b58c8 <siprintf+0xc>)
   b58c0:	681b      	ldr	r3, [r3, #0]
   b58c2:	691b      	ldr	r3, [r3, #16]
   b58c4:	9301      	str	r3, [sp, #4]
   b58c6:	bd08      	pop	{r3, pc}
   b58c8:	0003021c 	.word	0x0003021c

000b58cc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b02      	ldr	r3, [pc, #8]	; (b58d8 <snprintf+0xc>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	69db      	ldr	r3, [r3, #28]
   b58d4:	9301      	str	r3, [sp, #4]
   b58d6:	bd08      	pop	{r3, pc}
   b58d8:	0003021c 	.word	0x0003021c

000b58dc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <vsnprintf+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	0003021c 	.word	0x0003021c

000b58ec <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <abort+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	0003021c 	.word	0x0003021c

000b58fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b58fc:	b508      	push	{r3, lr}
   b58fe:	4b02      	ldr	r3, [pc, #8]	; (b5908 <_malloc_r+0xc>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	bd08      	pop	{r3, pc}
   b5908:	0003021c 	.word	0x0003021c

000b590c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <__assert_func+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	0003021c 	.word	0x0003021c

000b591c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b02      	ldr	r3, [pc, #8]	; (b5928 <newlib_impure_ptr_callback+0xc>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5924:	9301      	str	r3, [sp, #4]
   b5926:	bd08      	pop	{r3, pc}
   b5928:	0003021c 	.word	0x0003021c

000b592c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b592c:	b508      	push	{r3, lr}
   b592e:	4b02      	ldr	r3, [pc, #8]	; (b5938 <strftime+0xc>)
   b5930:	681b      	ldr	r3, [r3, #0]
   b5932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5934:	9301      	str	r3, [sp, #4]
   b5936:	bd08      	pop	{r3, pc}
   b5938:	0003021c 	.word	0x0003021c

000b593c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b593c:	b508      	push	{r3, lr}
   b593e:	4b02      	ldr	r3, [pc, #8]	; (b5948 <localtime_r+0xc>)
   b5940:	681b      	ldr	r3, [r3, #0]
   b5942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5944:	9301      	str	r3, [sp, #4]
   b5946:	bd08      	pop	{r3, pc}
   b5948:	0003021c 	.word	0x0003021c

000b594c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b594c:	2200      	movs	r2, #0
   b594e:	6840      	ldr	r0, [r0, #4]
   b5950:	4611      	mov	r1, r2
   b5952:	f7ff bf43 	b.w	b57dc <network_listening>

000b5956 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5956:	2200      	movs	r2, #0
   b5958:	6840      	ldr	r0, [r0, #4]
   b595a:	4611      	mov	r1, r2
   b595c:	f7ff bf4e 	b.w	b57fc <network_get_listen_timeout>

000b5960 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5960:	6840      	ldr	r0, [r0, #4]
   b5962:	2200      	movs	r2, #0
   b5964:	f7ff bf42 	b.w	b57ec <network_set_listen_timeout>

000b5968 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5968:	6840      	ldr	r0, [r0, #4]
   b596a:	2200      	movs	r2, #0
   b596c:	f081 0101 	eor.w	r1, r1, #1
   b5970:	f7ff bf2c 	b.w	b57cc <network_listen>

000b5974 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5974:	2300      	movs	r3, #0
   b5976:	6840      	ldr	r0, [r0, #4]
   b5978:	461a      	mov	r2, r3
   b597a:	4619      	mov	r1, r3
   b597c:	f7ff bf1e 	b.w	b57bc <network_off>

000b5980 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5980:	2300      	movs	r3, #0
   b5982:	6840      	ldr	r0, [r0, #4]
   b5984:	461a      	mov	r2, r3
   b5986:	4619      	mov	r1, r3
   b5988:	f7ff bf10 	b.w	b57ac <network_on>

000b598c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b598c:	2200      	movs	r2, #0
   b598e:	6840      	ldr	r0, [r0, #4]
   b5990:	4611      	mov	r1, r2
   b5992:	f7ff bf03 	b.w	b579c <network_ready>

000b5996 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5996:	2200      	movs	r2, #0
   b5998:	6840      	ldr	r0, [r0, #4]
   b599a:	4611      	mov	r1, r2
   b599c:	f7ff beee 	b.w	b577c <network_connecting>

000b59a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b59a0:	6840      	ldr	r0, [r0, #4]
   b59a2:	2200      	movs	r2, #0
   b59a4:	2102      	movs	r1, #2
   b59a6:	f7ff bef1 	b.w	b578c <network_disconnect>

000b59aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b59aa:	2300      	movs	r3, #0
   b59ac:	6840      	ldr	r0, [r0, #4]
   b59ae:	461a      	mov	r2, r3
   b59b0:	f7ff bedc 	b.w	b576c <network_connect>

000b59b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b59b4:	4b02      	ldr	r3, [pc, #8]	; (b59c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b59b6:	2203      	movs	r2, #3
   b59b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b59ba:	4a02      	ldr	r2, [pc, #8]	; (b59c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b59bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b59be:	4770      	bx	lr
   b59c0:	2003e6b0 	.word	0x2003e6b0
   b59c4:	000b8248 	.word	0x000b8248

000b59c8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b59c8:	2100      	movs	r1, #0
   b59ca:	f7ff be4b 	b.w	b5664 <hal_spi_release>

000b59ce <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b59ce:	2100      	movs	r1, #0
   b59d0:	f7ff be40 	b.w	b5654 <hal_spi_acquire>

000b59d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b59d4:	b510      	push	{r4, lr}
   b59d6:	4604      	mov	r4, r0
   b59d8:	4608      	mov	r0, r1
{
    _spi = spi;
   b59da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b59dc:	f7ff fe1a 	bl	b5614 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b59e0:	2300      	movs	r3, #0
   b59e2:	6063      	str	r3, [r4, #4]
}
   b59e4:	4620      	mov	r0, r4
   b59e6:	bd10      	pop	{r4, pc}

000b59e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b59e8:	b513      	push	{r0, r1, r4, lr}
   b59ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b59ec:	7800      	ldrb	r0, [r0, #0]
   b59ee:	f7ff ffee 	bl	b59ce <_ZN8SPIClass4lockEv.isra.0>
   b59f2:	b958      	cbnz	r0, b5a0c <_ZN8SPIClass5beginEv+0x24>
   b59f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b59f6:	9001      	str	r0, [sp, #4]
   b59f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b59fc:	f7ff fdfa 	bl	b55f4 <hal_spi_begin>
        unlock();
   b5a00:	9801      	ldr	r0, [sp, #4]
    }
}
   b5a02:	b002      	add	sp, #8
   b5a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5a08:	f7ff bfde 	b.w	b59c8 <_ZN8SPIClass6unlockEv.isra.0>
   b5a0c:	b002      	add	sp, #8
   b5a0e:	bd10      	pop	{r4, pc}

000b5a10 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5a10:	7800      	ldrb	r0, [r0, #0]
   b5a12:	f7ff bfd9 	b.w	b59c8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5a18 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5a18:	0840      	lsrs	r0, r0, #1
{
   b5a1a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5a1c:	6018      	str	r0, [r3, #0]
   b5a1e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5a20:	6818      	ldr	r0, [r3, #0]
   b5a22:	4288      	cmp	r0, r1
   b5a24:	b2e5      	uxtb	r5, r4
   b5a26:	d906      	bls.n	b5a36 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5a28:	3401      	adds	r4, #1
   b5a2a:	2c08      	cmp	r4, #8
   b5a2c:	d002      	beq.n	b5a34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5a2e:	0840      	lsrs	r0, r0, #1
   b5a30:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5a32:	e7f5      	b.n	b5a20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5a34:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5a36:	4b02      	ldr	r3, [pc, #8]	; (b5a40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5a38:	5d5b      	ldrb	r3, [r3, r5]
   b5a3a:	7013      	strb	r3, [r2, #0]
}
   b5a3c:	bd30      	pop	{r4, r5, pc}
   b5a3e:	bf00      	nop
   b5a40:	000b827c 	.word	0x000b827c

000b5a44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5a48:	4606      	mov	r6, r0
   b5a4a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5a4c:	7800      	ldrb	r0, [r0, #0]
{
   b5a4e:	460c      	mov	r4, r1
    CHECK(lock());
   b5a50:	f7ff ffbd 	bl	b59ce <_ZN8SPIClass4lockEv.isra.0>
   b5a54:	2800      	cmp	r0, #0
   b5a56:	db1b      	blt.n	b5a90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5a58:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5a5a:	2214      	movs	r2, #20
   b5a5c:	2100      	movs	r1, #0
   b5a5e:	a809      	add	r0, sp, #36	; 0x24
   b5a60:	f002 fa1c 	bl	b7e9c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5a64:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5a66:	2200      	movs	r2, #0
   b5a68:	a909      	add	r1, sp, #36	; 0x24
   b5a6a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5a6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5a70:	f7ff fde0 	bl	b5634 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5a74:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5a78:	b113      	cbz	r3, b5a80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5a7a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5a7e:	b155      	cbz	r5, b5a96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5a80:	2700      	movs	r7, #0
   b5a82:	46b9      	mov	r9, r7
   b5a84:	46b8      	mov	r8, r7
   b5a86:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5a88:	7923      	ldrb	r3, [r4, #4]
   b5a8a:	b15d      	cbz	r5, b5aa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5a8c:	b1c3      	cbz	r3, b5ac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5a8e:	2000      	movs	r0, #0
}
   b5a90:	b00f      	add	sp, #60	; 0x3c
   b5a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5a96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5a9a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5a9e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5aa2:	e7f1      	b.n	b5a88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5aa4:	2b00      	cmp	r3, #0
   b5aa6:	d135      	bne.n	b5b14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5aa8:	68a3      	ldr	r3, [r4, #8]
   b5aaa:	4543      	cmp	r3, r8
   b5aac:	d108      	bne.n	b5ac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5aae:	f88d 9020 	strb.w	r9, [sp, #32]
   b5ab2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5ab6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5aba:	89a3      	ldrh	r3, [r4, #12]
   b5abc:	429a      	cmp	r2, r3
   b5abe:	d0e6      	beq.n	b5a8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5ac0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5ac2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5ac4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5ac8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5aca:	ab04      	add	r3, sp, #16
   b5acc:	f10d 020f 	add.w	r2, sp, #15
   b5ad0:	f7ff ffa2 	bl	b5a18 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5ad4:	7921      	ldrb	r1, [r4, #4]
   b5ad6:	b985      	cbnz	r5, b5afa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5ad8:	b989      	cbnz	r1, b5afe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5ada:	68a3      	ldr	r3, [r4, #8]
   b5adc:	4543      	cmp	r3, r8
   b5ade:	d30e      	bcc.n	b5afe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5ae0:	f88d 9020 	strb.w	r9, [sp, #32]
   b5ae4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5ae8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5aec:	89a3      	ldrh	r3, [r4, #12]
   b5aee:	429a      	cmp	r2, r3
   b5af0:	d105      	bne.n	b5afe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5af2:	9b04      	ldr	r3, [sp, #16]
   b5af4:	4543      	cmp	r3, r8
   b5af6:	d102      	bne.n	b5afe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5af8:	e7c9      	b.n	b5a8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5afa:	2900      	cmp	r1, #0
   b5afc:	d1f9      	bne.n	b5af2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5afe:	2300      	movs	r3, #0
   b5b00:	9301      	str	r3, [sp, #4]
   b5b02:	7b63      	ldrb	r3, [r4, #13]
   b5b04:	9300      	str	r3, [sp, #0]
   b5b06:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5b0a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5b0c:	7830      	ldrb	r0, [r6, #0]
   b5b0e:	f7ff fd99 	bl	b5644 <hal_spi_set_settings>
   b5b12:	e7bc      	b.n	b5a8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5b14:	e9cd 5500 	strd	r5, r5, [sp]
   b5b18:	462b      	mov	r3, r5
   b5b1a:	462a      	mov	r2, r5
   b5b1c:	2101      	movs	r1, #1
   b5b1e:	e7f5      	b.n	b5b0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5b20 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5b20:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5b22:	7800      	ldrb	r0, [r0, #0]
   b5b24:	f7ff fd6e 	bl	b5604 <hal_spi_transfer>
}
   b5b28:	b2c0      	uxtb	r0, r0
   b5b2a:	bd08      	pop	{r3, pc}

000b5b2c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5b2c:	4b05      	ldr	r3, [pc, #20]	; (b5b44 <_GLOBAL__sub_I_System+0x18>)
   b5b2e:	2202      	movs	r2, #2
   b5b30:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5b32:	4b05      	ldr	r3, [pc, #20]	; (b5b48 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5b34:	4a05      	ldr	r2, [pc, #20]	; (b5b4c <_GLOBAL__sub_I_System+0x20>)
   b5b36:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5b38:	2000      	movs	r0, #0
   b5b3a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5b3e:	f7ff bdd9 	b.w	b56f4 <set_system_mode>
   b5b42:	bf00      	nop
   b5b44:	2003e6c4 	.word	0x2003e6c4
   b5b48:	2003e6b8 	.word	0x2003e6b8
   b5b4c:	ffff0000 	.word	0xffff0000

000b5b50 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5b50:	b510      	push	{r4, lr}
   b5b52:	4604      	mov	r4, r0
{
	free(buffer);
   b5b54:	6800      	ldr	r0, [r0, #0]
   b5b56:	f7ff fea1 	bl	b589c <free>
}
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	bd10      	pop	{r4, pc}

000b5b5e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5b5e:	b510      	push	{r4, lr}
   b5b60:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5b62:	6800      	ldr	r0, [r0, #0]
   b5b64:	b108      	cbz	r0, b5b6a <_ZN6String10invalidateEv+0xc>
   b5b66:	f7ff fe99 	bl	b589c <free>
	buffer = NULL;
   b5b6a:	2300      	movs	r3, #0
	capacity = len = 0;
   b5b6c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5b70:	6023      	str	r3, [r4, #0]
}
   b5b72:	bd10      	pop	{r4, pc}

000b5b74 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5b74:	b538      	push	{r3, r4, r5, lr}
   b5b76:	4604      	mov	r4, r0
   b5b78:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5b7a:	6800      	ldr	r0, [r0, #0]
   b5b7c:	3101      	adds	r1, #1
   b5b7e:	f7ff fe95 	bl	b58ac <realloc>
	if (newbuffer) {
   b5b82:	b110      	cbz	r0, b5b8a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5b84:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5b88:	2001      	movs	r0, #1
	}
	return 0;
}
   b5b8a:	bd38      	pop	{r3, r4, r5, pc}

000b5b8c <_ZN6String7reserveEj>:
{
   b5b8c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5b8e:	6803      	ldr	r3, [r0, #0]
{
   b5b90:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5b92:	b123      	cbz	r3, b5b9e <_ZN6String7reserveEj+0x12>
   b5b94:	6843      	ldr	r3, [r0, #4]
   b5b96:	428b      	cmp	r3, r1
   b5b98:	d301      	bcc.n	b5b9e <_ZN6String7reserveEj+0x12>
   b5b9a:	2001      	movs	r0, #1
}
   b5b9c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5b9e:	4620      	mov	r0, r4
   b5ba0:	f7ff ffe8 	bl	b5b74 <_ZN6String12changeBufferEj>
   b5ba4:	2800      	cmp	r0, #0
   b5ba6:	d0f9      	beq.n	b5b9c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5ba8:	68a3      	ldr	r3, [r4, #8]
   b5baa:	2b00      	cmp	r3, #0
   b5bac:	d1f5      	bne.n	b5b9a <_ZN6String7reserveEj+0xe>
   b5bae:	6822      	ldr	r2, [r4, #0]
   b5bb0:	7013      	strb	r3, [r2, #0]
   b5bb2:	e7f2      	b.n	b5b9a <_ZN6String7reserveEj+0xe>

000b5bb4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5bb6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5bb8:	4611      	mov	r1, r2
   b5bba:	9201      	str	r2, [sp, #4]
{
   b5bbc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5bbe:	f7ff ffe5 	bl	b5b8c <_ZN6String7reserveEj>
   b5bc2:	9a01      	ldr	r2, [sp, #4]
   b5bc4:	b928      	cbnz	r0, b5bd2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	f7ff ffc9 	bl	b5b5e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5bcc:	4620      	mov	r0, r4
   b5bce:	b003      	add	sp, #12
   b5bd0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5bd2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5bd4:	4629      	mov	r1, r5
   b5bd6:	6820      	ldr	r0, [r4, #0]
   b5bd8:	f002 f952 	bl	b7e80 <memcpy>
	buffer[len] = 0;
   b5bdc:	6822      	ldr	r2, [r4, #0]
   b5bde:	68a3      	ldr	r3, [r4, #8]
   b5be0:	2100      	movs	r1, #0
   b5be2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5be4:	e7f2      	b.n	b5bcc <_ZN6String4copyEPKcj+0x18>

000b5be6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5be6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5be8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5bea:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5bee:	4604      	mov	r4, r0
	len = 0;
   b5bf0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5bf2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5bf4:	b141      	cbz	r1, b5c08 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5bf6:	4608      	mov	r0, r1
   b5bf8:	9101      	str	r1, [sp, #4]
   b5bfa:	f002 f9b4 	bl	b7f66 <strlen>
   b5bfe:	9901      	ldr	r1, [sp, #4]
   b5c00:	4602      	mov	r2, r0
   b5c02:	4620      	mov	r0, r4
   b5c04:	f7ff ffd6 	bl	b5bb4 <_ZN6String4copyEPKcj>
}
   b5c08:	4620      	mov	r0, r4
   b5c0a:	b002      	add	sp, #8
   b5c0c:	bd10      	pop	{r4, pc}

000b5c0e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5c0e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5c10:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5c12:	4604      	mov	r4, r0
      if (_M_manager)
   b5c14:	b113      	cbz	r3, b5c1c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c16:	2203      	movs	r2, #3
   b5c18:	4601      	mov	r1, r0
   b5c1a:	4798      	blx	r3
    }
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	bd10      	pop	{r4, pc}

000b5c20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5c20:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5c22:	6843      	ldr	r3, [r0, #4]
   b5c24:	3b01      	subs	r3, #1
    {
   b5c26:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5c28:	6043      	str	r3, [r0, #4]
   b5c2a:	b963      	cbnz	r3, b5c46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5c2c:	6803      	ldr	r3, [r0, #0]
   b5c2e:	689b      	ldr	r3, [r3, #8]
   b5c30:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5c32:	68a3      	ldr	r3, [r4, #8]
   b5c34:	3b01      	subs	r3, #1
   b5c36:	60a3      	str	r3, [r4, #8]
   b5c38:	b92b      	cbnz	r3, b5c46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5c3a:	6823      	ldr	r3, [r4, #0]
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	68db      	ldr	r3, [r3, #12]
    }
   b5c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5c44:	4718      	bx	r3
    }
   b5c46:	bd10      	pop	{r4, pc}

000b5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5c48:	b510      	push	{r4, lr}
   b5c4a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5c4c:	6800      	ldr	r0, [r0, #0]
   b5c4e:	b108      	cbz	r0, b5c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5c50:	f7ff ffe6 	bl	b5c20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5c54:	4620      	mov	r0, r4
   b5c56:	bd10      	pop	{r4, pc}

000b5c58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5c58:	b513      	push	{r0, r1, r4, lr}
   b5c5a:	460b      	mov	r3, r1
   b5c5c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c5e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5c62:	466c      	mov	r4, sp
   b5c64:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5c68:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5c6c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5c70:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5c74:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5c78:	b002      	add	sp, #8
   b5c7a:	bd10      	pop	{r4, pc}

000b5c7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5c7c:	4802      	ldr	r0, [pc, #8]	; (b5c88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5c7e:	2300      	movs	r3, #0
   b5c80:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5c82:	f7ff bc0f 	b.w	b54a4 <os_mutex_recursive_create>
   b5c86:	bf00      	nop
   b5c88:	2003e6c8 	.word	0x2003e6c8

000b5c8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c8e:	4606      	mov	r6, r0
   b5c90:	460d      	mov	r5, r1
  size_t n = 0;
   b5c92:	188f      	adds	r7, r1, r2
   b5c94:	2400      	movs	r4, #0
  while (size--) {
   b5c96:	42bd      	cmp	r5, r7
   b5c98:	d00c      	beq.n	b5cb4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5c9a:	6833      	ldr	r3, [r6, #0]
   b5c9c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ca0:	689b      	ldr	r3, [r3, #8]
   b5ca2:	4630      	mov	r0, r6
   b5ca4:	4798      	blx	r3
     if (chunk>=0)
   b5ca6:	1e03      	subs	r3, r0, #0
   b5ca8:	db01      	blt.n	b5cae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5caa:	441c      	add	r4, r3
  while (size--) {
   b5cac:	e7f3      	b.n	b5c96 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5cae:	2c00      	cmp	r4, #0
   b5cb0:	bf08      	it	eq
   b5cb2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5cb4:	4620      	mov	r0, r4
   b5cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5cb8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5cb8:	b513      	push	{r0, r1, r4, lr}
   b5cba:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5cbc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5cbe:	b159      	cbz	r1, b5cd8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5cc0:	9101      	str	r1, [sp, #4]
   b5cc2:	f002 f950 	bl	b7f66 <strlen>
   b5cc6:	6823      	ldr	r3, [r4, #0]
   b5cc8:	9901      	ldr	r1, [sp, #4]
   b5cca:	68db      	ldr	r3, [r3, #12]
   b5ccc:	4602      	mov	r2, r0
   b5cce:	4620      	mov	r0, r4
    }
   b5cd0:	b002      	add	sp, #8
   b5cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5cd6:	4718      	bx	r3
    }
   b5cd8:	b002      	add	sp, #8
   b5cda:	bd10      	pop	{r4, pc}

000b5cdc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5cdc:	b508      	push	{r3, lr}
  return write(str);
   b5cde:	f7ff ffeb 	bl	b5cb8 <_ZN5Print5writeEPKc>
}
   b5ce2:	bd08      	pop	{r3, pc}

000b5ce4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5ce4:	6803      	ldr	r3, [r0, #0]
   b5ce6:	689b      	ldr	r3, [r3, #8]
   b5ce8:	4718      	bx	r3

000b5cea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5cea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5cec:	210d      	movs	r1, #13
{
   b5cee:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5cf0:	f7ff fff8 	bl	b5ce4 <_ZN5Print5printEc>
  n += print('\n');
   b5cf4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5cf6:	4604      	mov	r4, r0
  n += print('\n');
   b5cf8:	4628      	mov	r0, r5
   b5cfa:	f7ff fff3 	bl	b5ce4 <_ZN5Print5printEc>
  return n;
}
   b5cfe:	4420      	add	r0, r4
   b5d00:	bd38      	pop	{r3, r4, r5, pc}

000b5d02 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5d02:	b538      	push	{r3, r4, r5, lr}
   b5d04:	4605      	mov	r5, r0
  return write(str);
   b5d06:	f7ff ffd7 	bl	b5cb8 <_ZN5Print5writeEPKc>
   b5d0a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5d0c:	4628      	mov	r0, r5
   b5d0e:	f7ff ffec 	bl	b5cea <_ZN5Print7printlnEv>
  return n;
}
   b5d12:	4420      	add	r0, r4
   b5d14:	bd38      	pop	{r3, r4, r5, pc}

000b5d16 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5d16:	b530      	push	{r4, r5, lr}
   b5d18:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5d1a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5d1c:	2a01      	cmp	r2, #1
  *str = '\0';
   b5d1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5d22:	bf98      	it	ls
   b5d24:	220a      	movls	r2, #10
   b5d26:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5d28:	460d      	mov	r5, r1
   b5d2a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5d2e:	fb01 5312 	mls	r3, r1, r2, r5
   b5d32:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5d36:	2b09      	cmp	r3, #9
   b5d38:	bf94      	ite	ls
   b5d3a:	3330      	addls	r3, #48	; 0x30
   b5d3c:	3337      	addhi	r3, #55	; 0x37
   b5d3e:	b2db      	uxtb	r3, r3
  } while(n);
   b5d40:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5d42:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5d46:	d9ef      	bls.n	b5d28 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5d48:	4621      	mov	r1, r4
   b5d4a:	f7ff ffb5 	bl	b5cb8 <_ZN5Print5writeEPKc>
}
   b5d4e:	b00b      	add	sp, #44	; 0x2c
   b5d50:	bd30      	pop	{r4, r5, pc}

000b5d52 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d56:	b086      	sub	sp, #24
   b5d58:	af00      	add	r7, sp, #0
   b5d5a:	4605      	mov	r5, r0
   b5d5c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5d5e:	1d38      	adds	r0, r7, #4
   b5d60:	2114      	movs	r1, #20
{
   b5d62:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5d64:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5d66:	f7ff fdb9 	bl	b58dc <vsnprintf>

    if (n<bufsize)
   b5d6a:	2813      	cmp	r0, #19
   b5d6c:	d80e      	bhi.n	b5d8c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5d6e:	1d39      	adds	r1, r7, #4
   b5d70:	4628      	mov	r0, r5
   b5d72:	f7ff ffa1 	bl	b5cb8 <_ZN5Print5writeEPKc>
   b5d76:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5d78:	b11e      	cbz	r6, b5d82 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5d7a:	4628      	mov	r0, r5
   b5d7c:	f7ff ffb5 	bl	b5cea <_ZN5Print7printlnEv>
   b5d80:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5d82:	4620      	mov	r0, r4
   b5d84:	3718      	adds	r7, #24
   b5d86:	46bd      	mov	sp, r7
   b5d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5d8c:	f100 0308 	add.w	r3, r0, #8
   b5d90:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5d94:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5d96:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5d9a:	4622      	mov	r2, r4
   b5d9c:	1c41      	adds	r1, r0, #1
   b5d9e:	683b      	ldr	r3, [r7, #0]
   b5da0:	4668      	mov	r0, sp
   b5da2:	f7ff fd9b 	bl	b58dc <vsnprintf>
  return write(str);
   b5da6:	4669      	mov	r1, sp
   b5da8:	4628      	mov	r0, r5
   b5daa:	f7ff ff85 	bl	b5cb8 <_ZN5Print5writeEPKc>
   b5dae:	4604      	mov	r4, r0
   b5db0:	46c5      	mov	sp, r8
   b5db2:	e7e1      	b.n	b5d78 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5db4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5db4:	4b01      	ldr	r3, [pc, #4]	; (b5dbc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5db6:	4a02      	ldr	r2, [pc, #8]	; (b5dc0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5db8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5dba:	4770      	bx	lr
   b5dbc:	2003e6cc 	.word	0x2003e6cc
   b5dc0:	000b8284 	.word	0x000b8284

000b5dc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5dc4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5dc6:	2000      	movs	r0, #0
   b5dc8:	f7ff fd50 	bl	b586c <spark_sync_time_pending>
   b5dcc:	b128      	cbz	r0, b5dda <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5dce:	f7ff fd3d 	bl	b584c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5dd2:	f080 0001 	eor.w	r0, r0, #1
   b5dd6:	b2c0      	uxtb	r0, r0
    }
   b5dd8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5dda:	2001      	movs	r0, #1
   b5ddc:	e7fc      	b.n	b5dd8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5de0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5de0:	b530      	push	{r4, r5, lr}
   b5de2:	b093      	sub	sp, #76	; 0x4c
   b5de4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5de8:	4b19      	ldr	r3, [pc, #100]	; (b5e50 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5dea:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5dec:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5df0:	9b01      	ldr	r3, [sp, #4]
   b5df2:	1852      	adds	r2, r2, r1
   b5df4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5df8:	4816      	ldr	r0, [pc, #88]	; (b5e54 <_ZN9TimeClass7timeStrEx+0x74>)
   b5dfa:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5dfe:	1852      	adds	r2, r2, r1
   b5e00:	eb43 0300 	adc.w	r3, r3, r0
   b5e04:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5e08:	2224      	movs	r2, #36	; 0x24
   b5e0a:	eb0d 0002 	add.w	r0, sp, r2
   b5e0e:	2100      	movs	r1, #0
   b5e10:	f002 f844 	bl	b7e9c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5e14:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5e16:	a909      	add	r1, sp, #36	; 0x24
   b5e18:	4668      	mov	r0, sp
   b5e1a:	f7ff fd8f 	bl	b593c <localtime_r>
    char ascstr[26] = {};
   b5e1e:	2216      	movs	r2, #22
   b5e20:	4629      	mov	r1, r5
   b5e22:	a803      	add	r0, sp, #12
   b5e24:	9502      	str	r5, [sp, #8]
   b5e26:	f002 f839 	bl	b7e9c <memset>
    asctime_r(&calendar_time, ascstr);
   b5e2a:	a902      	add	r1, sp, #8
   b5e2c:	a809      	add	r0, sp, #36	; 0x24
   b5e2e:	f001 fff3 	bl	b7e18 <asctime_r>
    int len = strlen(ascstr);
   b5e32:	a802      	add	r0, sp, #8
   b5e34:	f002 f897 	bl	b7f66 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5e38:	ab12      	add	r3, sp, #72	; 0x48
   b5e3a:	4418      	add	r0, r3
    return String(ascstr);
   b5e3c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5e3e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5e42:	4620      	mov	r0, r4
   b5e44:	f7ff fecf 	bl	b5be6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5e48:	4620      	mov	r0, r4
   b5e4a:	b013      	add	sp, #76	; 0x4c
   b5e4c:	bd30      	pop	{r4, r5, pc}
   b5e4e:	bf00      	nop
   b5e50:	2003e6e0 	.word	0x2003e6e0
   b5e54:	2003e6d8 	.word	0x2003e6d8

000b5e58 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b5e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5e5c:	b0a4      	sub	sp, #144	; 0x90
   b5e5e:	4607      	mov	r7, r0
   b5e60:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5e62:	a814      	add	r0, sp, #80	; 0x50
{
   b5e64:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5e66:	223f      	movs	r2, #63	; 0x3f
{
   b5e68:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5e6a:	f002 f884 	bl	b7f76 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5e6e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5e70:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5e72:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5e76:	f002 f876 	bl	b7f66 <strlen>
   b5e7a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b5e7c:	bb4c      	cbnz	r4, b5ed2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b5e7e:	4929      	ldr	r1, [pc, #164]	; (b5f24 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b5e80:	a803      	add	r0, sp, #12
   b5e82:	f002 f84b 	bl	b7f1c <strcpy>
   b5e86:	ac14      	add	r4, sp, #80	; 0x50
{
   b5e88:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b5e8a:	f105 39ff 	add.w	r9, r5, #4294967295
   b5e8e:	45b1      	cmp	r9, r6
   b5e90:	d934      	bls.n	b5efc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b5e92:	7823      	ldrb	r3, [r4, #0]
   b5e94:	2b25      	cmp	r3, #37	; 0x25
   b5e96:	f106 0a01 	add.w	sl, r6, #1
   b5e9a:	d117      	bne.n	b5ecc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b5e9c:	7863      	ldrb	r3, [r4, #1]
   b5e9e:	2b7a      	cmp	r3, #122	; 0x7a
   b5ea0:	d114      	bne.n	b5ecc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b5ea2:	a803      	add	r0, sp, #12
   b5ea4:	f002 f85f 	bl	b7f66 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5ea8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b5eaa:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5eac:	1830      	adds	r0, r6, r0
   b5eae:	4418      	add	r0, r3
   b5eb0:	eba9 0206 	sub.w	r2, r9, r6
   b5eb4:	1ca1      	adds	r1, r4, #2
   b5eb6:	f001 ffe3 	bl	b7e80 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b5eba:	462a      	mov	r2, r5
   b5ebc:	a903      	add	r1, sp, #12
   b5ebe:	4620      	mov	r0, r4
   b5ec0:	f001 ffde 	bl	b7e80 <memcpy>
            len = strlen(format_str);
   b5ec4:	a814      	add	r0, sp, #80	; 0x50
   b5ec6:	f002 f84e 	bl	b7f66 <strlen>
   b5eca:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b5ecc:	3401      	adds	r4, #1
   b5ece:	4656      	mov	r6, sl
   b5ed0:	e7db      	b.n	b5e8a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b5ed2:	233c      	movs	r3, #60	; 0x3c
   b5ed4:	fb94 f2f3 	sdiv	r2, r4, r3
   b5ed8:	2a00      	cmp	r2, #0
   b5eda:	bfb8      	it	lt
   b5edc:	4252      	neglt	r2, r2
   b5ede:	fbb2 f1f3 	udiv	r1, r2, r3
   b5ee2:	fb03 2211 	mls	r2, r3, r1, r2
   b5ee6:	9200      	str	r2, [sp, #0]
   b5ee8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b5eec:	4a0e      	ldr	r2, [pc, #56]	; (b5f28 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b5eee:	fb94 f3f3 	sdiv	r3, r4, r3
   b5ef2:	2110      	movs	r1, #16
   b5ef4:	a803      	add	r0, sp, #12
   b5ef6:	f7ff fce9 	bl	b58cc <snprintf>
   b5efa:	e7c4      	b.n	b5e86 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b5efc:	2100      	movs	r1, #0
   b5efe:	222e      	movs	r2, #46	; 0x2e
   b5f00:	a808      	add	r0, sp, #32
   b5f02:	9107      	str	r1, [sp, #28]
   b5f04:	f001 ffca 	bl	b7e9c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b5f08:	4643      	mov	r3, r8
   b5f0a:	aa14      	add	r2, sp, #80	; 0x50
   b5f0c:	2132      	movs	r1, #50	; 0x32
   b5f0e:	a807      	add	r0, sp, #28
   b5f10:	f7ff fd0c 	bl	b592c <strftime>
    return String(buf);
   b5f14:	a907      	add	r1, sp, #28
   b5f16:	4638      	mov	r0, r7
   b5f18:	f7ff fe65 	bl	b5be6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5f1c:	4638      	mov	r0, r7
   b5f1e:	b024      	add	sp, #144	; 0x90
   b5f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5f24:	000b8288 	.word	0x000b8288
   b5f28:	000b828a 	.word	0x000b828a

000b5f2c <_ZN9TimeClass6formatExPKc>:
{
   b5f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5f2e:	b08d      	sub	sp, #52	; 0x34
   b5f30:	e9cd 2300 	strd	r2, r3, [sp]
   b5f34:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b5f36:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b5f38:	b915      	cbnz	r5, b5f40 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b5f3a:	4b19      	ldr	r3, [pc, #100]	; (b5fa0 <_ZN9TimeClass6formatExPKc+0x74>)
   b5f3c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b5f3e:	b12d      	cbz	r5, b5f4c <_ZN9TimeClass6formatExPKc+0x20>
   b5f40:	4b18      	ldr	r3, [pc, #96]	; (b5fa4 <_ZN9TimeClass6formatExPKc+0x78>)
   b5f42:	4628      	mov	r0, r5
   b5f44:	6819      	ldr	r1, [r3, #0]
   b5f46:	f001 ffdf 	bl	b7f08 <strcmp>
   b5f4a:	b938      	cbnz	r0, b5f5c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b5f4c:	e9dd 2300 	ldrd	r2, r3, [sp]
   b5f50:	4620      	mov	r0, r4
   b5f52:	f7ff ff45 	bl	b5de0 <_ZN9TimeClass7timeStrEx>
}
   b5f56:	4620      	mov	r0, r4
   b5f58:	b00d      	add	sp, #52	; 0x34
   b5f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b5f5c:	4e12      	ldr	r6, [pc, #72]	; (b5fa8 <_ZN9TimeClass6formatExPKc+0x7c>)
   b5f5e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b5f60:	4f12      	ldr	r7, [pc, #72]	; (b5fac <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b5f62:	e9d6 3200 	ldrd	r3, r2, [r6]
   b5f66:	185b      	adds	r3, r3, r1
   b5f68:	9901      	ldr	r1, [sp, #4]
   b5f6a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b5f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5f72:	181b      	adds	r3, r3, r0
   b5f74:	eb42 0201 	adc.w	r2, r2, r1
   b5f78:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b5f7c:	2100      	movs	r1, #0
   b5f7e:	2224      	movs	r2, #36	; 0x24
   b5f80:	a803      	add	r0, sp, #12
   b5f82:	f001 ff8b 	bl	b7e9c <memset>
    localtime_r(&t, &calendar_time);
   b5f86:	a903      	add	r1, sp, #12
   b5f88:	4668      	mov	r0, sp
   b5f8a:	f7ff fcd7 	bl	b593c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b5f8e:	6832      	ldr	r2, [r6, #0]
   b5f90:	683b      	ldr	r3, [r7, #0]
   b5f92:	a903      	add	r1, sp, #12
   b5f94:	4413      	add	r3, r2
   b5f96:	4620      	mov	r0, r4
   b5f98:	462a      	mov	r2, r5
   b5f9a:	f7ff ff5d 	bl	b5e58 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b5f9e:	e7da      	b.n	b5f56 <_ZN9TimeClass6formatExPKc+0x2a>
   b5fa0:	2003e6d4 	.word	0x2003e6d4
   b5fa4:	2003e5a0 	.word	0x2003e5a0
   b5fa8:	2003e6e0 	.word	0x2003e6e0
   b5fac:	2003e6d8 	.word	0x2003e6d8

000b5fb0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b5fb0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5fb2:	2000      	movs	r0, #0
   b5fb4:	f7ff fa66 	bl	b5484 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5fb8:	4604      	mov	r4, r0
   b5fba:	b9a0      	cbnz	r0, b5fe6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5fbc:	f7ff fb92 	bl	b56e4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5fc0:	2801      	cmp	r0, #1
   b5fc2:	d110      	bne.n	b5fe6 <_ZN9TimeClass7isValidEv+0x36>
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	f7ff fbb5 	bl	b5734 <system_thread_get_state>
   b5fca:	b960      	cbnz	r0, b5fe6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5fcc:	f7ff fefa 	bl	b5dc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5fd0:	b910      	cbnz	r0, b5fd8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5fd2:	f7ff fc2b 	bl	b582c <spark_process>
        while (_while() && !_condition()) {
   b5fd6:	e7f9      	b.n	b5fcc <_ZN9TimeClass7isValidEv+0x1c>
   b5fd8:	f7ff fef4 	bl	b5dc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5fe0:	2000      	movs	r0, #0
   b5fe2:	f7ff ba4f 	b.w	b5484 <hal_rtc_time_is_valid>
}
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	bd10      	pop	{r4, pc}

000b5fea <_ZN9TimeClass3nowEv>:
{
   b5fea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5fec:	f7ff ffe0 	bl	b5fb0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5ff0:	2210      	movs	r2, #16
   b5ff2:	2100      	movs	r1, #0
   b5ff4:	4668      	mov	r0, sp
   b5ff6:	f001 ff51 	bl	b7e9c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5ffa:	2100      	movs	r1, #0
   b5ffc:	4668      	mov	r0, sp
   b5ffe:	f7ff fa49 	bl	b5494 <hal_rtc_get_time>
}
   b6002:	9800      	ldr	r0, [sp, #0]
   b6004:	b005      	add	sp, #20
   b6006:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b600c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b600c:	4b02      	ldr	r3, [pc, #8]	; (b6018 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b600e:	681a      	ldr	r2, [r3, #0]
   b6010:	4b02      	ldr	r3, [pc, #8]	; (b601c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6012:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6014:	4770      	bx	lr
   b6016:	bf00      	nop
   b6018:	2003e5a0 	.word	0x2003e5a0
   b601c:	2003e6d4 	.word	0x2003e6d4

000b6020 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6020:	2100      	movs	r1, #0
   b6022:	f7ff bb6f 	b.w	b5704 <system_delay_ms>
	...

000b6028 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6028:	4b01      	ldr	r3, [pc, #4]	; (b6030 <_GLOBAL__sub_I_RGB+0x8>)
   b602a:	2200      	movs	r2, #0
   b602c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b602e:	4770      	bx	lr
   b6030:	2003e6e8 	.word	0x2003e6e8

000b6034 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6034:	4b01      	ldr	r3, [pc, #4]	; (b603c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6036:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6038:	4770      	bx	lr
   b603a:	bf00      	nop
   b603c:	2003e5a8 	.word	0x2003e5a8

000b6040 <serialEventRun>:
{
   b6040:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6042:	4b0b      	ldr	r3, [pc, #44]	; (b6070 <serialEventRun+0x30>)
   b6044:	b143      	cbz	r3, b6058 <serialEventRun+0x18>
   b6046:	f000 fbff 	bl	b6848 <_Z16_fetch_usbserialv>
   b604a:	6803      	ldr	r3, [r0, #0]
   b604c:	691b      	ldr	r3, [r3, #16]
   b604e:	4798      	blx	r3
   b6050:	2800      	cmp	r0, #0
   b6052:	dd01      	ble.n	b6058 <serialEventRun+0x18>
        serialEvent();
   b6054:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6058:	4b06      	ldr	r3, [pc, #24]	; (b6074 <serialEventRun+0x34>)
   b605a:	b143      	cbz	r3, b606e <serialEventRun+0x2e>
   b605c:	f000 ff90 	bl	b6f80 <_Z22__fetch_global_Serial1v>
   b6060:	6803      	ldr	r3, [r0, #0]
   b6062:	691b      	ldr	r3, [r3, #16]
   b6064:	4798      	blx	r3
   b6066:	2800      	cmp	r0, #0
   b6068:	dd01      	ble.n	b606e <serialEventRun+0x2e>
        serialEvent1();
   b606a:	f3af 8000 	nop.w
}
   b606e:	bd08      	pop	{r3, pc}
	...

000b6078 <_post_loop>:
{
   b6078:	b508      	push	{r3, lr}
	serialEventRun();
   b607a:	f7ff ffe1 	bl	b6040 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b607e:	f7ff f9f9 	bl	b5474 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6082:	4b01      	ldr	r3, [pc, #4]	; (b6088 <_post_loop+0x10>)
   b6084:	6018      	str	r0, [r3, #0]
}
   b6086:	bd08      	pop	{r3, pc}
   b6088:	2003e740 	.word	0x2003e740

000b608c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b608c:	4805      	ldr	r0, [pc, #20]	; (b60a4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b608e:	4a06      	ldr	r2, [pc, #24]	; (b60a8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6090:	4906      	ldr	r1, [pc, #24]	; (b60ac <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6092:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6094:	1a12      	subs	r2, r2, r0
   b6096:	f001 fef3 	bl	b7e80 <memcpy>
    __backup_sram_signature = signature;
   b609a:	4b05      	ldr	r3, [pc, #20]	; (b60b0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b609c:	4a05      	ldr	r2, [pc, #20]	; (b60b4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b609e:	601a      	str	r2, [r3, #0]
}
   b60a0:	bd08      	pop	{r3, pc}
   b60a2:	bf00      	nop
   b60a4:	2003f400 	.word	0x2003f400
   b60a8:	2003f404 	.word	0x2003f404
   b60ac:	000b864c 	.word	0x000b864c
   b60b0:	2003f400 	.word	0x2003f400
   b60b4:	9a271c1e 	.word	0x9a271c1e

000b60b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b60b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b60ba:	2300      	movs	r3, #0
   b60bc:	9300      	str	r3, [sp, #0]
   b60be:	461a      	mov	r2, r3
   b60c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b60c4:	f7ff fb48 	bl	b5758 <system_ctrl_set_result>
}
   b60c8:	b003      	add	sp, #12
   b60ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b60d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b60d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b60d2:	8843      	ldrh	r3, [r0, #2]
   b60d4:	2b0a      	cmp	r3, #10
   b60d6:	d008      	beq.n	b60ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b60d8:	2b50      	cmp	r3, #80	; 0x50
   b60da:	d10b      	bne.n	b60f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b60dc:	4b09      	ldr	r3, [pc, #36]	; (b6104 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b60de:	681b      	ldr	r3, [r3, #0]
   b60e0:	b14b      	cbz	r3, b60f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b60e2:	b003      	add	sp, #12
   b60e4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b60e8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b60ea:	f7ff ffe5 	bl	b60b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b60ee:	b003      	add	sp, #12
   b60f0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b60f4:	2300      	movs	r3, #0
   b60f6:	9300      	str	r3, [sp, #0]
   b60f8:	461a      	mov	r2, r3
   b60fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b60fe:	f7ff fb2b 	bl	b5758 <system_ctrl_set_result>
}
   b6102:	e7f4      	b.n	b60ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6104:	2003e6fc 	.word	0x2003e6fc

000b6108 <module_user_init_hook>:
{
   b6108:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b610a:	4812      	ldr	r0, [pc, #72]	; (b6154 <module_user_init_hook+0x4c>)
   b610c:	2100      	movs	r1, #0
   b610e:	f7ff fc05 	bl	b591c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6112:	4b11      	ldr	r3, [pc, #68]	; (b6158 <module_user_init_hook+0x50>)
   b6114:	681a      	ldr	r2, [r3, #0]
   b6116:	4b11      	ldr	r3, [pc, #68]	; (b615c <module_user_init_hook+0x54>)
   b6118:	429a      	cmp	r2, r3
   b611a:	4b11      	ldr	r3, [pc, #68]	; (b6160 <module_user_init_hook+0x58>)
   b611c:	bf0c      	ite	eq
   b611e:	2201      	moveq	r2, #1
   b6120:	2200      	movne	r2, #0
   b6122:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6124:	d001      	beq.n	b612a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6126:	f7ff ffb1 	bl	b608c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b612a:	f7ff f99b 	bl	b5464 <HAL_RNG_GetRandomNumber>
   b612e:	4604      	mov	r4, r0
    srand(seed);
   b6130:	f001 febc 	bl	b7eac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6134:	4b0b      	ldr	r3, [pc, #44]	; (b6164 <module_user_init_hook+0x5c>)
   b6136:	b113      	cbz	r3, b613e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6138:	4620      	mov	r0, r4
   b613a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b613e:	2100      	movs	r1, #0
   b6140:	4808      	ldr	r0, [pc, #32]	; (b6164 <module_user_init_hook+0x5c>)
   b6142:	f7ff fb9b 	bl	b587c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b614a:	4807      	ldr	r0, [pc, #28]	; (b6168 <module_user_init_hook+0x60>)
   b614c:	2100      	movs	r1, #0
   b614e:	f7ff baf9 	b.w	b5744 <system_ctrl_set_app_request_handler>
   b6152:	bf00      	nop
   b6154:	000b6035 	.word	0x000b6035
   b6158:	2003f400 	.word	0x2003f400
   b615c:	9a271c1e 	.word	0x9a271c1e
   b6160:	2003e6f8 	.word	0x2003e6f8
   b6164:	00000000 	.word	0x00000000
   b6168:	000b60d1 	.word	0x000b60d1

000b616c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b616c:	4770      	bx	lr

000b616e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b616e:	2000      	movs	r0, #0
   b6170:	4770      	bx	lr

000b6172 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6172:	b510      	push	{r4, lr}
   b6174:	2110      	movs	r1, #16
   b6176:	4604      	mov	r4, r0
   b6178:	f7fd ff91 	bl	b409e <_ZdlPvj>
   b617c:	4620      	mov	r0, r4
   b617e:	bd10      	pop	{r4, pc}

000b6180 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6180:	b508      	push	{r3, lr}
      { delete this; }
   b6182:	f7ff fff6 	bl	b6172 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6186:	bd08      	pop	{r3, pc}

000b6188 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6188:	b530      	push	{r4, r5, lr}
        type_(type) {
   b618a:	2200      	movs	r2, #0
   b618c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6190:	6002      	str	r2, [r0, #0]
   b6192:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6194:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6196:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6198:	680c      	ldr	r4, [r1, #0]
   b619a:	8085      	strh	r5, [r0, #4]
   b619c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b619e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b61a0:	bd30      	pop	{r4, r5, pc}

000b61a2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b61a2:	b510      	push	{r4, lr}
   b61a4:	4604      	mov	r4, r0
    free((void*)msg_);
   b61a6:	6800      	ldr	r0, [r0, #0]
   b61a8:	f7ff fb78 	bl	b589c <free>
}
   b61ac:	4620      	mov	r0, r4
   b61ae:	bd10      	pop	{r4, pc}

000b61b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b61b0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b61b2:	68c4      	ldr	r4, [r0, #12]
   b61b4:	b1f4      	cbz	r4, b61f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b61b6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b61b8:	2b02      	cmp	r3, #2
   b61ba:	d103      	bne.n	b61c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b61bc:	f104 000c 	add.w	r0, r4, #12
   b61c0:	f7ff ffef 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b61c4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b61c6:	b135      	cbz	r5, b61d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b61c8:	4628      	mov	r0, r5
   b61ca:	f7ff fd20 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
   b61ce:	2110      	movs	r1, #16
   b61d0:	4628      	mov	r0, r5
   b61d2:	f7fd ff64 	bl	b409e <_ZdlPvj>
   b61d6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b61d8:	b135      	cbz	r5, b61e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b61da:	4628      	mov	r0, r5
   b61dc:	f7ff fd17 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
   b61e0:	2110      	movs	r1, #16
   b61e2:	4628      	mov	r0, r5
   b61e4:	f7fd ff5b 	bl	b409e <_ZdlPvj>
   b61e8:	4620      	mov	r0, r4
   b61ea:	2114      	movs	r1, #20
   b61ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b61f0:	f7fd bf55 	b.w	b409e <_ZdlPvj>
   b61f4:	bd38      	pop	{r3, r4, r5, pc}

000b61f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b61f6:	680b      	ldr	r3, [r1, #0]
   b61f8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b61fa:	684b      	ldr	r3, [r1, #4]
   b61fc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b61fe:	b113      	cbz	r3, b6206 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6200:	685a      	ldr	r2, [r3, #4]
   b6202:	3201      	adds	r2, #1
   b6204:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6206:	4770      	bx	lr

000b6208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6208:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b620a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b620c:	4668      	mov	r0, sp
   b620e:	460d      	mov	r5, r1
   b6210:	f7ff fff1 	bl	b61f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6214:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6216:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6218:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b621a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b621c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b621e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6220:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6222:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6224:	f7ff fd10 	bl	b5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6228:	b135      	cbz	r5, b6238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b622a:	1d28      	adds	r0, r5, #4
   b622c:	f7ff fd0c 	bl	b5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6230:	2108      	movs	r1, #8
   b6232:	4628      	mov	r0, r5
   b6234:	f7fd ff33 	bl	b409e <_ZdlPvj>
        return p;
    }
   b6238:	4620      	mov	r0, r4
   b623a:	b003      	add	sp, #12
   b623c:	bd30      	pop	{r4, r5, pc}

000b623e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b623e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6240:	b510      	push	{r4, lr}
      if (_M_empty())
   b6242:	b90a      	cbnz	r2, b6248 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6244:	f000 fefe 	bl	b7044 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b6248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b624c:	68c3      	ldr	r3, [r0, #12]
   b624e:	4718      	bx	r3

000b6250 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6250:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6252:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6254:	f100 0110 	add.w	r1, r0, #16
   b6258:	f7ff fff1 	bl	b623e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b625c:	bd08      	pop	{r3, pc}

000b625e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b625e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6260:	b510      	push	{r4, lr}
      if (_M_empty())
   b6262:	b90a      	cbnz	r2, b6268 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6264:	f000 feee 	bl	b7044 <_ZSt25__throw_bad_function_callv>
    }
   b6268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b626c:	68c3      	ldr	r3, [r0, #12]
   b626e:	4718      	bx	r3

000b6270 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6270:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6272:	6800      	ldr	r0, [r0, #0]
   b6274:	f100 0110 	add.w	r1, r0, #16
   b6278:	f7ff fff1 	bl	b625e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b627c:	bd08      	pop	{r3, pc}
	...

000b6280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6280:	b538      	push	{r3, r4, r5, lr}
   b6282:	2300      	movs	r3, #0
   b6284:	4604      	mov	r4, r0
   b6286:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6288:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b628a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b628c:	f7fd ff03 	bl	b4096 <_Znwj>
   b6290:	b128      	cbz	r0, b629e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6292:	2301      	movs	r3, #1
   b6294:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6298:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b629a:	6003      	str	r3, [r0, #0]
   b629c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b629e:	6020      	str	r0, [r4, #0]
	}
   b62a0:	4620      	mov	r0, r4
   b62a2:	bd38      	pop	{r3, r4, r5, pc}
   b62a4:	000b82bc 	.word	0x000b82bc

000b62a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b62a8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b62aa:	2300      	movs	r3, #0
   b62ac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b62ae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b62b0:	4604      	mov	r4, r0
   b62b2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b62b4:	b12b      	cbz	r3, b62c2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b62b6:	2202      	movs	r2, #2
   b62b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b62ba:	68eb      	ldr	r3, [r5, #12]
   b62bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b62be:	68ab      	ldr	r3, [r5, #8]
   b62c0:	60a3      	str	r3, [r4, #8]
    }
   b62c2:	4620      	mov	r0, r4
   b62c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b62c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b62c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b62ca:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b62cc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b62ce:	4668      	mov	r0, sp
   b62d0:	f7ff ff5a 	bl	b6188 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b62d4:	f04f 0302 	mov.w	r3, #2
   b62d8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b62dc:	2a00      	cmp	r2, #0
   b62de:	d103      	bne.n	b62e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b62e0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b62e4:	2900      	cmp	r1, #0
   b62e6:	d1f7      	bne.n	b62d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b62e8:	d125      	bne.n	b6336 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b62ea:	f104 050c 	add.w	r5, r4, #12
   b62ee:	4669      	mov	r1, sp
   b62f0:	4628      	mov	r0, r5
   b62f2:	f7ff ff49 	bl	b6188 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b62f6:	f3bf 8f5b 	dmb	ish
   b62fa:	2301      	movs	r3, #1
   b62fc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b62fe:	2000      	movs	r0, #0
   b6300:	f104 0308 	add.w	r3, r4, #8
   b6304:	f3bf 8f5b 	dmb	ish
   b6308:	e853 6f00 	ldrex	r6, [r3]
   b630c:	e843 0200 	strex	r2, r0, [r3]
   b6310:	2a00      	cmp	r2, #0
   b6312:	d1f9      	bne.n	b6308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6314:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6318:	b16e      	cbz	r6, b6336 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b631a:	f7ff f9fb 	bl	b5714 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b631e:	b178      	cbz	r0, b6340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6320:	4629      	mov	r1, r5
   b6322:	4630      	mov	r0, r6
   b6324:	f7ff ff8b 	bl	b623e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6328:	4630      	mov	r0, r6
   b632a:	f7ff fc70 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b632e:	2110      	movs	r1, #16
   b6330:	4630      	mov	r0, r6
   b6332:	f7fd feb4 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b6336:	4668      	mov	r0, sp
   b6338:	f7ff ff33 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
    }
   b633c:	b009      	add	sp, #36	; 0x24
   b633e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6340:	4631      	mov	r1, r6
   b6342:	a802      	add	r0, sp, #8
   b6344:	f7ff ffb0 	bl	b62a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6348:	68e0      	ldr	r0, [r4, #12]
   b634a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b634e:	b108      	cbz	r0, b6354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6350:	f001 fdec 	bl	b7f2c <strdup>
        type_(type) {
   b6354:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6356:	2010      	movs	r0, #16
   b6358:	f8ad 501c 	strh.w	r5, [sp, #28]
   b635c:	f7fd fe9b 	bl	b4096 <_Znwj>
   b6360:	4605      	mov	r5, r0
   b6362:	b1e8      	cbz	r0, b63a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6364:	2700      	movs	r7, #0
   b6366:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6368:	2018      	movs	r0, #24
   b636a:	f7fd fe94 	bl	b4096 <_Znwj>
   b636e:	4604      	mov	r4, r0
   b6370:	b188      	cbz	r0, b6396 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6372:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6374:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6376:	a802      	add	r0, sp, #8
   b6378:	f7ff fc6e 	bl	b5c58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b637c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b637e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6380:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6382:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6384:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6386:	a906      	add	r1, sp, #24
   b6388:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b638a:	60e3      	str	r3, [r4, #12]
   b638c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6390:	9205      	str	r2, [sp, #20]
   b6392:	f7ff fef9 	bl	b6188 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6396:	4b08      	ldr	r3, [pc, #32]	; (b63b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6398:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b639a:	4b08      	ldr	r3, [pc, #32]	; (b63bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b639c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b639e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b63a0:	a806      	add	r0, sp, #24
   b63a2:	f7ff fefe 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b63a6:	a802      	add	r0, sp, #8
   b63a8:	f7ff fc31 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b63ac:	2200      	movs	r2, #0
   b63ae:	4629      	mov	r1, r5
   b63b0:	4803      	ldr	r0, [pc, #12]	; (b63c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b63b2:	f7ff f9b7 	bl	b5724 <application_thread_invoke>
   b63b6:	e7b7      	b.n	b6328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b63b8:	000b6251 	.word	0x000b6251
   b63bc:	000b64d5 	.word	0x000b64d5
   b63c0:	000b6939 	.word	0x000b6939

000b63c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b63c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63c8:	b08b      	sub	sp, #44	; 0x2c
   b63ca:	4605      	mov	r5, r0
   b63cc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b63d0:	460f      	mov	r7, r1
   b63d2:	4690      	mov	r8, r2
   b63d4:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b63d6:	f7ff fa39 	bl	b584c <spark_cloud_flag_connected>
   b63da:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b63dc:	4683      	mov	fp, r0
   b63de:	bb38      	cbnz	r0, b6430 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b63e0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b63e4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b63e6:	a905      	add	r1, sp, #20
   b63e8:	4630      	mov	r0, r6
   b63ea:	f8ad 3018 	strh.w	r3, [sp, #24]
   b63ee:	f7ff fecb 	bl	b6188 <_ZN8particle5ErrorC1EOS0_>
   b63f2:	2014      	movs	r0, #20
   b63f4:	f7fd fe4f 	bl	b4096 <_Znwj>
   b63f8:	4604      	mov	r4, r0
   b63fa:	b148      	cbz	r0, b6410 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b63fc:	2302      	movs	r3, #2
   b63fe:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6400:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6402:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6406:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6408:	4631      	mov	r1, r6
   b640a:	300c      	adds	r0, #12
   b640c:	f7ff febc 	bl	b6188 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6410:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6412:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6414:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6418:	f7ff ff32 	bl	b6280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b641c:	4630      	mov	r0, r6
   b641e:	f7ff fec0 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6422:	a805      	add	r0, sp, #20
   b6424:	f7ff febd 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6428:	4628      	mov	r0, r5
   b642a:	b00b      	add	sp, #44	; 0x2c
   b642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6430:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6432:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6434:	2014      	movs	r0, #20
   b6436:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b643a:	9307      	str	r3, [sp, #28]
   b643c:	f7fd fe2b 	bl	b4096 <_Znwj>
   b6440:	4601      	mov	r1, r0
   b6442:	b118      	cbz	r0, b644c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6444:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6448:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b644a:	7044      	strb	r4, [r0, #1]
   b644c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b644e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6450:	f7ff ff16 	bl	b6280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6454:	4b1e      	ldr	r3, [pc, #120]	; (b64d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6456:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6458:	2008      	movs	r0, #8
   b645a:	f7fd fe1c 	bl	b4096 <_Znwj>
   b645e:	4604      	mov	r4, r0
   b6460:	b110      	cbz	r0, b6468 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6462:	a903      	add	r1, sp, #12
   b6464:	f7ff fec7 	bl	b61f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6468:	9600      	str	r6, [sp, #0]
   b646a:	fa5f f38a 	uxtb.w	r3, sl
   b646e:	464a      	mov	r2, r9
   b6470:	4641      	mov	r1, r8
   b6472:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6474:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6476:	f7ff f9f1 	bl	b585c <spark_send_event>
   b647a:	b9b8      	cbnz	r0, b64ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b647c:	9b03      	ldr	r3, [sp, #12]
   b647e:	785b      	ldrb	r3, [r3, #1]
   b6480:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6484:	b993      	cbnz	r3, b64ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6486:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b648a:	a905      	add	r1, sp, #20
   b648c:	a803      	add	r0, sp, #12
   b648e:	9205      	str	r2, [sp, #20]
   b6490:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6494:	f7ff ff18 	bl	b62c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6498:	a805      	add	r0, sp, #20
   b649a:	f7ff fe82 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b649e:	a805      	add	r0, sp, #20
   b64a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   b64a2:	f7ff feb1 	bl	b6208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b64a6:	a806      	add	r0, sp, #24
   b64a8:	f7ff fbce 	bl	b5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64ac:	a903      	add	r1, sp, #12
   b64ae:	a805      	add	r0, sp, #20
   b64b0:	f7ff fea1 	bl	b61f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b64b4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b64b6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b64b8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b64ba:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b64bc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b64be:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b64c0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b64c2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b64c4:	f7ff fbc0 	bl	b5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64c8:	a804      	add	r0, sp, #16
   b64ca:	f7ff fbbd 	bl	b5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b64ce:	e7ab      	b.n	b6428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b64d0:	000b6551 	.word	0x000b6551

000b64d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b64d4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b64d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64d8:	4605      	mov	r5, r0
	switch (__op)
   b64da:	d103      	bne.n	b64e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b64dc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b64de:	6003      	str	r3, [r0, #0]
      }
   b64e0:	2000      	movs	r0, #0
   b64e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b64e4:	2a02      	cmp	r2, #2
   b64e6:	d010      	beq.n	b650a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b64e8:	2a03      	cmp	r2, #3
   b64ea:	d1f9      	bne.n	b64e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b64ec:	6804      	ldr	r4, [r0, #0]
   b64ee:	2c00      	cmp	r4, #0
   b64f0:	d0f6      	beq.n	b64e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b64f2:	f104 0010 	add.w	r0, r4, #16
   b64f6:	f7ff fe54 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b64fa:	4620      	mov	r0, r4
   b64fc:	f7ff fb87 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6500:	2118      	movs	r1, #24
   b6502:	4620      	mov	r0, r4
   b6504:	f7fd fdcb 	bl	b409e <_ZdlPvj>
   b6508:	e7ea      	b.n	b64e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b650a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b650c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b650e:	f7fd fdc2 	bl	b4096 <_Znwj>
   b6512:	4604      	mov	r4, r0
   b6514:	b150      	cbz	r0, b652c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6516:	4631      	mov	r1, r6
   b6518:	f7ff fec6 	bl	b62a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b651c:	6930      	ldr	r0, [r6, #16]
   b651e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6522:	b108      	cbz	r0, b6528 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6524:	f001 fd02 	bl	b7f2c <strdup>
        type_(type) {
   b6528:	6120      	str	r0, [r4, #16]
   b652a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b652c:	602c      	str	r4, [r5, #0]
	}
   b652e:	e7d7      	b.n	b64e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6530 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6530:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6532:	2300      	movs	r3, #0
   b6534:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6536:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6538:	4604      	mov	r4, r0
   b653a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b653c:	b12b      	cbz	r3, b654a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b653e:	2202      	movs	r2, #2
   b6540:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6542:	68eb      	ldr	r3, [r5, #12]
   b6544:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6546:	68ab      	ldr	r3, [r5, #8]
   b6548:	60a3      	str	r3, [r4, #8]
    }
   b654a:	4620      	mov	r0, r4
   b654c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6550 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6550:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6552:	b089      	sub	sp, #36	; 0x24
   b6554:	4604      	mov	r4, r0
   b6556:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6558:	a801      	add	r0, sp, #4
   b655a:	4611      	mov	r1, r2
   b655c:	f7ff fe54 	bl	b6208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6560:	b1a4      	cbz	r4, b658c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6562:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6564:	b11d      	cbz	r5, b656e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6566:	4628      	mov	r0, r5
   b6568:	f001 fce0 	bl	b7f2c <strdup>
   b656c:	4605      	mov	r5, r0
   b656e:	a801      	add	r0, sp, #4
   b6570:	a903      	add	r1, sp, #12
        type_(type) {
   b6572:	9503      	str	r5, [sp, #12]
   b6574:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6578:	f7ff fea6 	bl	b62c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b657c:	a803      	add	r0, sp, #12
   b657e:	f7ff fe10 	bl	b61a2 <_ZN8particle5ErrorD1Ev>
   b6582:	a802      	add	r0, sp, #8
   b6584:	f7ff fb60 	bl	b5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6588:	b009      	add	sp, #36	; 0x24
   b658a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b658c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b658e:	2301      	movs	r3, #1
   b6590:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6594:	2a00      	cmp	r2, #0
   b6596:	d103      	bne.n	b65a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6598:	e8c5 3f41 	strexb	r1, r3, [r5]
   b659c:	2900      	cmp	r1, #0
   b659e:	d1f7      	bne.n	b6590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b65a0:	d1ef      	bne.n	b6582 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b65a2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b65a4:	f3bf 8f5b 	dmb	ish
   b65a8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b65aa:	1d2b      	adds	r3, r5, #4
   b65ac:	f3bf 8f5b 	dmb	ish
   b65b0:	e853 6f00 	ldrex	r6, [r3]
   b65b4:	e843 4200 	strex	r2, r4, [r3]
   b65b8:	2a00      	cmp	r2, #0
   b65ba:	d1f9      	bne.n	b65b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b65bc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b65c0:	2e00      	cmp	r6, #0
   b65c2:	d0de      	beq.n	b6582 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b65c4:	4620      	mov	r0, r4
   b65c6:	f7ff f8a5 	bl	b5714 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b65ca:	4607      	mov	r7, r0
   b65cc:	b160      	cbz	r0, b65e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b65ce:	f105 010c 	add.w	r1, r5, #12
   b65d2:	4630      	mov	r0, r6
   b65d4:	f7ff fe43 	bl	b625e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b65d8:	4630      	mov	r0, r6
   b65da:	f7ff fb18 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b65de:	2110      	movs	r1, #16
   b65e0:	4630      	mov	r0, r6
   b65e2:	f7fd fd5c 	bl	b409e <_ZdlPvj>
   b65e6:	e7cc      	b.n	b6582 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b65e8:	4631      	mov	r1, r6
   b65ea:	a803      	add	r0, sp, #12
   b65ec:	f7ff ffa0 	bl	b6530 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b65f0:	7b2b      	ldrb	r3, [r5, #12]
   b65f2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b65f6:	2010      	movs	r0, #16
   b65f8:	f7fd fd4d 	bl	b4096 <_Znwj>
   b65fc:	4605      	mov	r5, r0
   b65fe:	b1d0      	cbz	r0, b6636 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6600:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6602:	2014      	movs	r0, #20
   b6604:	f7fd fd47 	bl	b4096 <_Znwj>
   b6608:	4604      	mov	r4, r0
   b660a:	b178      	cbz	r0, b662c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b660c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b660e:	4601      	mov	r1, r0
   b6610:	a803      	add	r0, sp, #12
   b6612:	f7ff fb21 	bl	b5c58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6616:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6618:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b661a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b661c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b661e:	9205      	str	r2, [sp, #20]
   b6620:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6622:	60e3      	str	r3, [r4, #12]
   b6624:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6628:	9206      	str	r2, [sp, #24]
   b662a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b662c:	4b06      	ldr	r3, [pc, #24]	; (b6648 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b662e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6630:	4b06      	ldr	r3, [pc, #24]	; (b664c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6632:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6634:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6636:	a803      	add	r0, sp, #12
   b6638:	f7ff fae9 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b663c:	2200      	movs	r2, #0
   b663e:	4629      	mov	r1, r5
   b6640:	4803      	ldr	r0, [pc, #12]	; (b6650 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6642:	f7ff f86f 	bl	b5724 <application_thread_invoke>
   b6646:	e7c7      	b.n	b65d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6648:	000b6271 	.word	0x000b6271
   b664c:	000b6655 	.word	0x000b6655
   b6650:	000b6939 	.word	0x000b6939

000b6654 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6654:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6656:	b570      	push	{r4, r5, r6, lr}
   b6658:	4604      	mov	r4, r0
	switch (__op)
   b665a:	d103      	bne.n	b6664 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b665c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b665e:	6003      	str	r3, [r0, #0]
      }
   b6660:	2000      	movs	r0, #0
   b6662:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6664:	2a02      	cmp	r2, #2
   b6666:	d00c      	beq.n	b6682 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6668:	2a03      	cmp	r2, #3
   b666a:	d1f9      	bne.n	b6660 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b666c:	6804      	ldr	r4, [r0, #0]
   b666e:	2c00      	cmp	r4, #0
   b6670:	d0f6      	beq.n	b6660 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6672:	4620      	mov	r0, r4
   b6674:	f7ff facb 	bl	b5c0e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6678:	2114      	movs	r1, #20
   b667a:	4620      	mov	r0, r4
   b667c:	f7fd fd0f 	bl	b409e <_ZdlPvj>
   b6680:	e7ee      	b.n	b6660 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6682:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6684:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6686:	f7fd fd06 	bl	b4096 <_Znwj>
   b668a:	4605      	mov	r5, r0
   b668c:	b120      	cbz	r0, b6698 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b668e:	4631      	mov	r1, r6
   b6690:	f7ff ff4e 	bl	b6530 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6694:	7c33      	ldrb	r3, [r6, #16]
   b6696:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6698:	6025      	str	r5, [r4, #0]
	}
   b669a:	e7e1      	b.n	b6660 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b669c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b669c:	4770      	bx	lr

000b669e <_ZN9IPAddressD0Ev>:
   b669e:	b510      	push	{r4, lr}
   b66a0:	2118      	movs	r1, #24
   b66a2:	4604      	mov	r4, r0
   b66a4:	f7fd fcfb 	bl	b409e <_ZdlPvj>
   b66a8:	4620      	mov	r0, r4
   b66aa:	bd10      	pop	{r4, pc}

000b66ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b66ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b66ae:	7d03      	ldrb	r3, [r0, #20]
   b66b0:	2b06      	cmp	r3, #6
{
   b66b2:	b08d      	sub	sp, #52	; 0x34
   b66b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66b6:	f100 0704 	add.w	r7, r0, #4
   b66ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b66be:	d012      	beq.n	b66e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b66c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b66c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b66c8:	220a      	movs	r2, #10
   b66ca:	4630      	mov	r0, r6
   b66cc:	f7ff fb23 	bl	b5d16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b66d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b66d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b66d4:	d019      	beq.n	b670a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b66d6:	2c00      	cmp	r4, #0
   b66d8:	d0f4      	beq.n	b66c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b66da:	212e      	movs	r1, #46	; 0x2e
   b66dc:	4630      	mov	r0, r6
   b66de:	f7ff fb01 	bl	b5ce4 <_ZN5Print5printEc>
   b66e2:	4404      	add	r4, r0
   b66e4:	e7ee      	b.n	b66c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66e6:	232f      	movs	r3, #47	; 0x2f
   b66e8:	466a      	mov	r2, sp
   b66ea:	4639      	mov	r1, r7
   b66ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b66ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66f2:	f7fe fedf 	bl	b54b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b66f6:	4668      	mov	r0, sp
   b66f8:	f001 fc35 	bl	b7f66 <strlen>
   b66fc:	6833      	ldr	r3, [r6, #0]
   b66fe:	4602      	mov	r2, r0
   b6700:	68db      	ldr	r3, [r3, #12]
   b6702:	4669      	mov	r1, sp
   b6704:	4630      	mov	r0, r6
   b6706:	4798      	blx	r3
   b6708:	4604      	mov	r4, r0
    }
    return n;
}
   b670a:	4620      	mov	r0, r4
   b670c:	b00d      	add	sp, #52	; 0x34
   b670e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6710 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6710:	b510      	push	{r4, lr}
   b6712:	4b05      	ldr	r3, [pc, #20]	; (b6728 <_ZN9IPAddressC1Ev+0x18>)
   b6714:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6716:	2211      	movs	r2, #17
   b6718:	f840 3b04 	str.w	r3, [r0], #4
   b671c:	2100      	movs	r1, #0
   b671e:	f001 fbbd 	bl	b7e9c <memset>
}
   b6722:	4620      	mov	r0, r4
   b6724:	bd10      	pop	{r4, pc}
   b6726:	bf00      	nop
   b6728:	000b82d8 	.word	0x000b82d8

000b672c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b672c:	4603      	mov	r3, r0
   b672e:	4a07      	ldr	r2, [pc, #28]	; (b674c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6730:	b510      	push	{r4, lr}
   b6732:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6736:	f101 0210 	add.w	r2, r1, #16
   b673a:	f851 4b04 	ldr.w	r4, [r1], #4
   b673e:	f843 4b04 	str.w	r4, [r3], #4
   b6742:	4291      	cmp	r1, r2
   b6744:	d1f9      	bne.n	b673a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6746:	780a      	ldrb	r2, [r1, #0]
   b6748:	701a      	strb	r2, [r3, #0]
}
   b674a:	bd10      	pop	{r4, pc}
   b674c:	000b82d8 	.word	0x000b82d8

000b6750 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6750:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6752:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6756:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b675a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b675e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6762:	2304      	movs	r3, #4
   b6764:	6041      	str	r1, [r0, #4]
   b6766:	7503      	strb	r3, [r0, #20]
}
   b6768:	bd10      	pop	{r4, pc}
	...

000b676c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b676c:	b507      	push	{r0, r1, r2, lr}
   b676e:	4b06      	ldr	r3, [pc, #24]	; (b6788 <_ZN9IPAddressC1EPKh+0x1c>)
   b6770:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6772:	78cb      	ldrb	r3, [r1, #3]
   b6774:	9300      	str	r3, [sp, #0]
   b6776:	788b      	ldrb	r3, [r1, #2]
   b6778:	784a      	ldrb	r2, [r1, #1]
   b677a:	7809      	ldrb	r1, [r1, #0]
   b677c:	f7ff ffe8 	bl	b6750 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6780:	b003      	add	sp, #12
   b6782:	f85d fb04 	ldr.w	pc, [sp], #4
   b6786:	bf00      	nop
   b6788:	000b82d8 	.word	0x000b82d8

000b678c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b678c:	7441      	strb	r1, [r0, #17]
}
   b678e:	4770      	bx	lr

000b6790 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6790:	4770      	bx	lr

000b6792 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6792:	4770      	bx	lr

000b6794 <_ZN9USBSerial4readEv>:
{
   b6794:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6796:	2100      	movs	r1, #0
   b6798:	7c00      	ldrb	r0, [r0, #16]
   b679a:	f7fe ff8b 	bl	b56b4 <HAL_USB_USART_Receive_Data>
}
   b679e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67a2:	bd08      	pop	{r3, pc}

000b67a4 <_ZN9USBSerial4peekEv>:
{
   b67a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b67a6:	2101      	movs	r1, #1
   b67a8:	7c00      	ldrb	r0, [r0, #16]
   b67aa:	f7fe ff83 	bl	b56b4 <HAL_USB_USART_Receive_Data>
}
   b67ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67b2:	bd08      	pop	{r3, pc}

000b67b4 <_ZN9USBSerial17availableForWriteEv>:
{
   b67b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b67b6:	7c00      	ldrb	r0, [r0, #16]
   b67b8:	f7fe ff74 	bl	b56a4 <HAL_USB_USART_Available_Data_For_Write>
}
   b67bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67c0:	bd08      	pop	{r3, pc}

000b67c2 <_ZN9USBSerial9availableEv>:
{
   b67c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b67c4:	7c00      	ldrb	r0, [r0, #16]
   b67c6:	f7fe ff65 	bl	b5694 <HAL_USB_USART_Available_Data>
}
   b67ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67ce:	bd08      	pop	{r3, pc}

000b67d0 <_ZN9USBSerial5writeEh>:
{
   b67d0:	b513      	push	{r0, r1, r4, lr}
   b67d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b67d4:	7c00      	ldrb	r0, [r0, #16]
{
   b67d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b67d8:	f7fe ff64 	bl	b56a4 <HAL_USB_USART_Available_Data_For_Write>
   b67dc:	2800      	cmp	r0, #0
   b67de:	9901      	ldr	r1, [sp, #4]
   b67e0:	dc01      	bgt.n	b67e6 <_ZN9USBSerial5writeEh+0x16>
   b67e2:	7c60      	ldrb	r0, [r4, #17]
   b67e4:	b120      	cbz	r0, b67f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b67e6:	7c20      	ldrb	r0, [r4, #16]
   b67e8:	f7fe ff6c 	bl	b56c4 <HAL_USB_USART_Send_Data>
   b67ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b67f0:	b002      	add	sp, #8
   b67f2:	bd10      	pop	{r4, pc}

000b67f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b67f4:	7c00      	ldrb	r0, [r0, #16]
   b67f6:	f7fe bf6d 	b.w	b56d4 <HAL_USB_USART_Flush_Data>

000b67fa <_ZN9USBSerialD0Ev>:
   b67fa:	b510      	push	{r4, lr}
   b67fc:	2114      	movs	r1, #20
   b67fe:	4604      	mov	r4, r0
   b6800:	f7fd fc4d 	bl	b409e <_ZdlPvj>
   b6804:	4620      	mov	r0, r4
   b6806:	bd10      	pop	{r4, pc}

000b6808 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6808:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b680a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b680e:	4604      	mov	r4, r0
   b6810:	4608      	mov	r0, r1
   b6812:	2100      	movs	r1, #0
   b6814:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6818:	4b04      	ldr	r3, [pc, #16]	; (b682c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b681a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b681c:	2301      	movs	r3, #1
  _serial = serial;
   b681e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6820:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6822:	4611      	mov	r1, r2
   b6824:	f7fe ff26 	bl	b5674 <HAL_USB_USART_Init>
}
   b6828:	4620      	mov	r0, r4
   b682a:	bd10      	pop	{r4, pc}
   b682c:	000b82ec 	.word	0x000b82ec

000b6830 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6830:	7c00      	ldrb	r0, [r0, #16]
   b6832:	2200      	movs	r2, #0
   b6834:	f7fe bf26 	b.w	b5684 <HAL_USB_USART_Begin>

000b6838 <_Z19acquireSerialBufferv>:
{
   b6838:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b683a:	2214      	movs	r2, #20
{
   b683c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b683e:	2100      	movs	r1, #0
   b6840:	f001 fb2c 	bl	b7e9c <memset>
}
   b6844:	4620      	mov	r0, r4
   b6846:	bd10      	pop	{r4, pc}

000b6848 <_Z16_fetch_usbserialv>:
{
   b6848:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b684a:	4c0f      	ldr	r4, [pc, #60]	; (b6888 <_Z16_fetch_usbserialv+0x40>)
{
   b684c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b684e:	a803      	add	r0, sp, #12
   b6850:	f7ff fff2 	bl	b6838 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6854:	7821      	ldrb	r1, [r4, #0]
   b6856:	f3bf 8f5b 	dmb	ish
   b685a:	f011 0101 	ands.w	r1, r1, #1
   b685e:	d10f      	bne.n	b6880 <_Z16_fetch_usbserialv+0x38>
   b6860:	4620      	mov	r0, r4
   b6862:	9101      	str	r1, [sp, #4]
   b6864:	f7fd fc1d 	bl	b40a2 <__cxa_guard_acquire>
   b6868:	9901      	ldr	r1, [sp, #4]
   b686a:	b148      	cbz	r0, b6880 <_Z16_fetch_usbserialv+0x38>
   b686c:	aa03      	add	r2, sp, #12
   b686e:	4807      	ldr	r0, [pc, #28]	; (b688c <_Z16_fetch_usbserialv+0x44>)
   b6870:	f7ff ffca 	bl	b6808 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6874:	4620      	mov	r0, r4
   b6876:	f7fd fc19 	bl	b40ac <__cxa_guard_release>
   b687a:	4805      	ldr	r0, [pc, #20]	; (b6890 <_Z16_fetch_usbserialv+0x48>)
   b687c:	f001 faf2 	bl	b7e64 <atexit>
	return _usbserial;
}
   b6880:	4802      	ldr	r0, [pc, #8]	; (b688c <_Z16_fetch_usbserialv+0x44>)
   b6882:	b008      	add	sp, #32
   b6884:	bd10      	pop	{r4, pc}
   b6886:	bf00      	nop
   b6888:	2003e700 	.word	0x2003e700
   b688c:	2003e704 	.word	0x2003e704
   b6890:	000b6791 	.word	0x000b6791

000b6894 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6894:	4770      	bx	lr

000b6896 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6896:	7441      	strb	r1, [r0, #17]
}
   b6898:	4770      	bx	lr

000b689a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b689a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b689c:	7c00      	ldrb	r0, [r0, #16]
   b689e:	f7fe fe41 	bl	b5524 <hal_usart_available_data_for_write>
}
   b68a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68a6:	bd08      	pop	{r3, pc}

000b68a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b68a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b68aa:	7c00      	ldrb	r0, [r0, #16]
   b68ac:	f7fe fe12 	bl	b54d4 <hal_usart_available>
}
   b68b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68b4:	bd08      	pop	{r3, pc}

000b68b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b68b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b68b8:	7c00      	ldrb	r0, [r0, #16]
   b68ba:	f7fe fe1b 	bl	b54f4 <hal_usart_peek>
}
   b68be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b68c2:	bd08      	pop	{r3, pc}

000b68c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b68c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b68c6:	7c00      	ldrb	r0, [r0, #16]
   b68c8:	f7fe fe0c 	bl	b54e4 <hal_usart_read>
}
   b68cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b68d0:	bd08      	pop	{r3, pc}

000b68d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b68d2:	7c00      	ldrb	r0, [r0, #16]
   b68d4:	f7fe be16 	b.w	b5504 <hal_usart_flush>

000b68d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b68d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b68da:	7c45      	ldrb	r5, [r0, #17]
{
   b68dc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b68de:	b12d      	cbz	r5, b68ec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b68e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b68e2:	b003      	add	sp, #12
   b68e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b68e8:	f7fe bdec 	b.w	b54c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b68ec:	7c00      	ldrb	r0, [r0, #16]
   b68ee:	9101      	str	r1, [sp, #4]
   b68f0:	f7fe fe18 	bl	b5524 <hal_usart_available_data_for_write>
   b68f4:	2800      	cmp	r0, #0
   b68f6:	9901      	ldr	r1, [sp, #4]
   b68f8:	dcf2      	bgt.n	b68e0 <_ZN11USARTSerial5writeEh+0x8>
}
   b68fa:	4628      	mov	r0, r5
   b68fc:	b003      	add	sp, #12
   b68fe:	bd30      	pop	{r4, r5, pc}

000b6900 <_ZN11USARTSerialD0Ev>:
   b6900:	b510      	push	{r4, lr}
   b6902:	2114      	movs	r1, #20
   b6904:	4604      	mov	r4, r0
   b6906:	f7fd fbca 	bl	b409e <_ZdlPvj>
   b690a:	4620      	mov	r0, r4
   b690c:	bd10      	pop	{r4, pc}
	...

000b6910 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6910:	b510      	push	{r4, lr}
   b6912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6916:	4604      	mov	r4, r0
   b6918:	4608      	mov	r0, r1
   b691a:	4611      	mov	r1, r2
   b691c:	2200      	movs	r2, #0
   b691e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6922:	4b04      	ldr	r3, [pc, #16]	; (b6934 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6924:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6926:	2301      	movs	r3, #1
  _serial = serial;
   b6928:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b692a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b692c:	f7fe fe02 	bl	b5534 <hal_usart_init_ex>
}
   b6930:	4620      	mov	r0, r4
   b6932:	bd10      	pop	{r4, pc}
   b6934:	000b831c 	.word	0x000b831c

000b6938 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6938:	b510      	push	{r4, lr}
      if (_M_empty())
   b693a:	6883      	ldr	r3, [r0, #8]
   b693c:	4604      	mov	r4, r0
   b693e:	b90b      	cbnz	r3, b6944 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6940:	f000 fb80 	bl	b7044 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6944:	68c3      	ldr	r3, [r0, #12]
   b6946:	4798      	blx	r3
      if (_M_manager)
   b6948:	68a3      	ldr	r3, [r4, #8]
   b694a:	b11b      	cbz	r3, b6954 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b694c:	2203      	movs	r2, #3
   b694e:	4621      	mov	r1, r4
   b6950:	4620      	mov	r0, r4
   b6952:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6954:	4620      	mov	r0, r4
   b6956:	2110      	movs	r1, #16
}
   b6958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b695c:	f7fd bb9f 	b.w	b409e <_ZdlPvj>

000b6960 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6960:	4770      	bx	lr

000b6962 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6964:	4606      	mov	r6, r0
   b6966:	4615      	mov	r5, r2
   b6968:	460c      	mov	r4, r1
   b696a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b696c:	42bc      	cmp	r4, r7
   b696e:	d006      	beq.n	b697e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6970:	6833      	ldr	r3, [r6, #0]
   b6972:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6976:	689b      	ldr	r3, [r3, #8]
   b6978:	4630      	mov	r0, r6
   b697a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b697c:	e7f6      	b.n	b696c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b697e:	4628      	mov	r0, r5
   b6980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6982 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6982:	7c00      	ldrb	r0, [r0, #16]
   b6984:	2200      	movs	r2, #0
   b6986:	f7fe bdf5 	b.w	b5574 <hal_i2c_write>

000b698a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b698a:	7c00      	ldrb	r0, [r0, #16]
   b698c:	2100      	movs	r1, #0
   b698e:	f7fe bdf9 	b.w	b5584 <hal_i2c_available>

000b6992 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6992:	7c00      	ldrb	r0, [r0, #16]
   b6994:	2100      	movs	r1, #0
   b6996:	f7fe bdfd 	b.w	b5594 <hal_i2c_read>

000b699a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b699a:	7c00      	ldrb	r0, [r0, #16]
   b699c:	2100      	movs	r1, #0
   b699e:	f7fe be01 	b.w	b55a4 <hal_i2c_peek>

000b69a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b69a2:	7c00      	ldrb	r0, [r0, #16]
   b69a4:	2100      	movs	r1, #0
   b69a6:	f7fe be05 	b.w	b55b4 <hal_i2c_flush>

000b69aa <_ZN7TwoWireD0Ev>:
   b69aa:	b510      	push	{r4, lr}
   b69ac:	2114      	movs	r1, #20
   b69ae:	4604      	mov	r4, r0
   b69b0:	f7fd fb75 	bl	b409e <_ZdlPvj>
   b69b4:	4620      	mov	r0, r4
   b69b6:	bd10      	pop	{r4, pc}

000b69b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b69b8:	b510      	push	{r4, lr}
   b69ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b69be:	4604      	mov	r4, r0
   b69c0:	4608      	mov	r0, r1
   b69c2:	2100      	movs	r1, #0
   b69c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b69c8:	4b03      	ldr	r3, [pc, #12]	; (b69d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b69ca:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b69cc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b69ce:	4611      	mov	r1, r2
   b69d0:	f7fe fe00 	bl	b55d4 <hal_i2c_init>
}
   b69d4:	4620      	mov	r0, r4
   b69d6:	bd10      	pop	{r4, pc}
   b69d8:	000b834c 	.word	0x000b834c

000b69dc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b69dc:	2300      	movs	r3, #0
   b69de:	7c00      	ldrb	r0, [r0, #16]
   b69e0:	461a      	mov	r2, r3
   b69e2:	4619      	mov	r1, r3
   b69e4:	f7fe bdae 	b.w	b5544 <hal_i2c_begin>

000b69e8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b69e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b69ea:	2200      	movs	r2, #0
   b69ec:	2314      	movs	r3, #20
   b69ee:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b69f2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b69f6:	780b      	ldrb	r3, [r1, #0]
   b69f8:	f88d 3008 	strb.w	r3, [sp, #8]
   b69fc:	684b      	ldr	r3, [r1, #4]
   b69fe:	9303      	str	r3, [sp, #12]
   b6a00:	68cb      	ldr	r3, [r1, #12]
   b6a02:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6a04:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6a06:	7a0b      	ldrb	r3, [r1, #8]
   b6a08:	9305      	str	r3, [sp, #20]
   b6a0a:	a901      	add	r1, sp, #4
   b6a0c:	f7fe fdea 	bl	b55e4 <hal_i2c_request_ex>
}
   b6a10:	b007      	add	sp, #28
   b6a12:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a16 <_ZN7TwoWire11requestFromEhjh>:
{
   b6a16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6a18:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6a1a:	f88d 1000 	strb.w	r1, [sp]
   b6a1e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6a22:	9103      	str	r1, [sp, #12]
   b6a24:	bf18      	it	ne
   b6a26:	2301      	movne	r3, #1
   b6a28:	4669      	mov	r1, sp
    size_ = size;
   b6a2a:	9201      	str	r2, [sp, #4]
   b6a2c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6a30:	f7ff ffda 	bl	b69e8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6a34:	b005      	add	sp, #20
   b6a36:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a3a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6a3a:	2301      	movs	r3, #1
   b6a3c:	f7ff bfeb 	b.w	b6a16 <_ZN7TwoWire11requestFromEhjh>

000b6a40 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6a40:	7c00      	ldrb	r0, [r0, #16]
   b6a42:	2200      	movs	r2, #0
   b6a44:	f7fe bd86 	b.w	b5554 <hal_i2c_begin_transmission>

000b6a48 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6a48:	b2c9      	uxtb	r1, r1
   b6a4a:	f7ff bff9 	b.w	b6a40 <_ZN7TwoWire17beginTransmissionEh>

000b6a4e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6a4e:	7c00      	ldrb	r0, [r0, #16]
   b6a50:	2200      	movs	r2, #0
   b6a52:	f7fe bd87 	b.w	b5564 <hal_i2c_end_transmission>

000b6a56 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6a56:	2101      	movs	r1, #1
   b6a58:	f7ff bff9 	b.w	b6a4e <_ZN7TwoWire15endTransmissionEh>

000b6a5c <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b6a5c:	7c00      	ldrb	r0, [r0, #16]
   b6a5e:	2100      	movs	r1, #0
   b6a60:	f7fe bdb0 	b.w	b55c4 <hal_i2c_is_enabled>

000b6a64 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6a64:	2200      	movs	r2, #0
   b6a66:	6840      	ldr	r0, [r0, #4]
   b6a68:	4611      	mov	r1, r2
   b6a6a:	f7fe be97 	b.w	b579c <network_ready>

000b6a6e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6a6e:	2200      	movs	r2, #0
   b6a70:	6840      	ldr	r0, [r0, #4]
   b6a72:	4611      	mov	r1, r2
   b6a74:	f7fe beb2 	b.w	b57dc <network_listening>

000b6a78 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6a78:	2200      	movs	r2, #0
   b6a7a:	6840      	ldr	r0, [r0, #4]
   b6a7c:	4611      	mov	r1, r2
   b6a7e:	f7fe bebd 	b.w	b57fc <network_get_listen_timeout>

000b6a82 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6a82:	6840      	ldr	r0, [r0, #4]
   b6a84:	2200      	movs	r2, #0
   b6a86:	f7fe beb1 	b.w	b57ec <network_set_listen_timeout>

000b6a8a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6a8a:	6840      	ldr	r0, [r0, #4]
   b6a8c:	2200      	movs	r2, #0
   b6a8e:	f081 0101 	eor.w	r1, r1, #1
   b6a92:	f7fe be9b 	b.w	b57cc <network_listen>

000b6a96 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6a96:	2300      	movs	r3, #0
   b6a98:	6840      	ldr	r0, [r0, #4]
   b6a9a:	461a      	mov	r2, r3
   b6a9c:	4619      	mov	r1, r3
   b6a9e:	f7fe be8d 	b.w	b57bc <network_off>

000b6aa2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6aa2:	2300      	movs	r3, #0
   b6aa4:	6840      	ldr	r0, [r0, #4]
   b6aa6:	461a      	mov	r2, r3
   b6aa8:	4619      	mov	r1, r3
   b6aaa:	f7fe be7f 	b.w	b57ac <network_on>

000b6aae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6aae:	2200      	movs	r2, #0
   b6ab0:	6840      	ldr	r0, [r0, #4]
   b6ab2:	4611      	mov	r1, r2
   b6ab4:	f7fe be62 	b.w	b577c <network_connecting>

000b6ab8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ab8:	6840      	ldr	r0, [r0, #4]
   b6aba:	2200      	movs	r2, #0
   b6abc:	2102      	movs	r1, #2
   b6abe:	f7fe be65 	b.w	b578c <network_disconnect>

000b6ac2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6ac2:	2300      	movs	r3, #0
   b6ac4:	6840      	ldr	r0, [r0, #4]
   b6ac6:	461a      	mov	r2, r3
   b6ac8:	f7fe be50 	b.w	b576c <network_connect>

000b6acc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6acc:	4b02      	ldr	r3, [pc, #8]	; (b6ad8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6ace:	2204      	movs	r2, #4
   b6ad0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6ad2:	4a02      	ldr	r2, [pc, #8]	; (b6adc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6ad4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6ad6:	4770      	bx	lr
   b6ad8:	2003e718 	.word	0x2003e718
   b6adc:	000b8374 	.word	0x000b8374

000b6ae0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6ae0:	2300      	movs	r3, #0
   b6ae2:	6840      	ldr	r0, [r0, #4]
   b6ae4:	461a      	mov	r2, r3
   b6ae6:	f7fe be41 	b.w	b576c <network_connect>

000b6aea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6aea:	6840      	ldr	r0, [r0, #4]
   b6aec:	2200      	movs	r2, #0
   b6aee:	2102      	movs	r1, #2
   b6af0:	f7fe be4c 	b.w	b578c <network_disconnect>

000b6af4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6af4:	2200      	movs	r2, #0
   b6af6:	6840      	ldr	r0, [r0, #4]
   b6af8:	4611      	mov	r1, r2
   b6afa:	f7fe be3f 	b.w	b577c <network_connecting>

000b6afe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6afe:	2200      	movs	r2, #0
   b6b00:	6840      	ldr	r0, [r0, #4]
   b6b02:	4611      	mov	r1, r2
   b6b04:	f7fe be4a 	b.w	b579c <network_ready>

000b6b08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6b08:	2300      	movs	r3, #0
   b6b0a:	6840      	ldr	r0, [r0, #4]
   b6b0c:	461a      	mov	r2, r3
   b6b0e:	4619      	mov	r1, r3
   b6b10:	f7fe be4c 	b.w	b57ac <network_on>

000b6b14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6b14:	2300      	movs	r3, #0
   b6b16:	6840      	ldr	r0, [r0, #4]
   b6b18:	461a      	mov	r2, r3
   b6b1a:	4619      	mov	r1, r3
   b6b1c:	f7fe be4e 	b.w	b57bc <network_off>

000b6b20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6b20:	6840      	ldr	r0, [r0, #4]
   b6b22:	2100      	movs	r1, #0
   b6b24:	f7fe be72 	b.w	b580c <network_is_on>

000b6b28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6b28:	6840      	ldr	r0, [r0, #4]
   b6b2a:	2100      	movs	r1, #0
   b6b2c:	f7fe be76 	b.w	b581c <network_is_off>

000b6b30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6b30:	6840      	ldr	r0, [r0, #4]
   b6b32:	2200      	movs	r2, #0
   b6b34:	f081 0101 	eor.w	r1, r1, #1
   b6b38:	f7fe be48 	b.w	b57cc <network_listen>

000b6b3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6b3c:	6840      	ldr	r0, [r0, #4]
   b6b3e:	2200      	movs	r2, #0
   b6b40:	f7fe be54 	b.w	b57ec <network_set_listen_timeout>

000b6b44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6b44:	2200      	movs	r2, #0
   b6b46:	6840      	ldr	r0, [r0, #4]
   b6b48:	4611      	mov	r1, r2
   b6b4a:	f7fe be57 	b.w	b57fc <network_get_listen_timeout>

000b6b4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6b4e:	2200      	movs	r2, #0
   b6b50:	6840      	ldr	r0, [r0, #4]
   b6b52:	4611      	mov	r1, r2
   b6b54:	f7fe be42 	b.w	b57dc <network_listening>

000b6b58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b5c:	b095      	sub	sp, #84	; 0x54
   b6b5e:	4614      	mov	r4, r2
   b6b60:	460d      	mov	r5, r1
   b6b62:	4607      	mov	r7, r0
    IPAddress addr;
   b6b64:	f7ff fdd4 	bl	b6710 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6b68:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6b6a:	221c      	movs	r2, #28
   b6b6c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6b6e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6b70:	f001 f994 	bl	b7e9c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6b74:	2340      	movs	r3, #64	; 0x40
   b6b76:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6b78:	4620      	mov	r0, r4
   b6b7a:	466b      	mov	r3, sp
   b6b7c:	aa0c      	add	r2, sp, #48	; 0x30
   b6b7e:	2100      	movs	r1, #0
   b6b80:	f7fe fc48 	bl	b5414 <netdb_getaddrinfo>
    if (!r) {
   b6b84:	4604      	mov	r4, r0
   b6b86:	2800      	cmp	r0, #0
   b6b88:	d14b      	bne.n	b6c22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6b8a:	4602      	mov	r2, r0
   b6b8c:	2101      	movs	r1, #1
   b6b8e:	6868      	ldr	r0, [r5, #4]
   b6b90:	f7fe fe04 	bl	b579c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b94:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6b96:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b98:	4622      	mov	r2, r4
   b6b9a:	6868      	ldr	r0, [r5, #4]
   b6b9c:	f7fe fdfe 	bl	b579c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ba0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ba2:	4681      	mov	r9, r0
        bool ok = false;
   b6ba4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ba6:	2e00      	cmp	r6, #0
   b6ba8:	d03b      	beq.n	b6c22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6baa:	2900      	cmp	r1, #0
   b6bac:	d139      	bne.n	b6c22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6bae:	6873      	ldr	r3, [r6, #4]
   b6bb0:	2b02      	cmp	r3, #2
   b6bb2:	d003      	beq.n	b6bbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6bb4:	2b0a      	cmp	r3, #10
   b6bb6:	d011      	beq.n	b6bdc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bb8:	69f6      	ldr	r6, [r6, #28]
   b6bba:	e7f4      	b.n	b6ba6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6bbc:	f1b8 0f00 	cmp.w	r8, #0
   b6bc0:	d0fa      	beq.n	b6bb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6bc2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6bc4:	a806      	add	r0, sp, #24
   b6bc6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6bc8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6bca:	f7ff fdcf 	bl	b676c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bd0:	1d3c      	adds	r4, r7, #4
   b6bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6bd4:	682b      	ldr	r3, [r5, #0]
   b6bd6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6bd8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6bda:	e7ed      	b.n	b6bb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6bdc:	f1b9 0f00 	cmp.w	r9, #0
   b6be0:	d0ea      	beq.n	b6bb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6be2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6be4:	2210      	movs	r2, #16
   b6be6:	a801      	add	r0, sp, #4
   b6be8:	f001 f958 	bl	b7e9c <memset>
                    a.v = 6;
   b6bec:	2306      	movs	r3, #6
   b6bee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6bf2:	ad01      	add	r5, sp, #4
   b6bf4:	f104 0308 	add.w	r3, r4, #8
   b6bf8:	3418      	adds	r4, #24
   b6bfa:	6818      	ldr	r0, [r3, #0]
   b6bfc:	6859      	ldr	r1, [r3, #4]
   b6bfe:	462a      	mov	r2, r5
   b6c00:	c203      	stmia	r2!, {r0, r1}
   b6c02:	3308      	adds	r3, #8
   b6c04:	42a3      	cmp	r3, r4
   b6c06:	4615      	mov	r5, r2
   b6c08:	d1f7      	bne.n	b6bfa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6c0a:	a901      	add	r1, sp, #4
   b6c0c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6c0e:	ad07      	add	r5, sp, #28
   b6c10:	f7ff fd8c 	bl	b672c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c16:	1d3c      	adds	r4, r7, #4
   b6c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c1a:	682b      	ldr	r3, [r5, #0]
   b6c1c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c1e:	4649      	mov	r1, r9
   b6c20:	e7ca      	b.n	b6bb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6c22:	9800      	ldr	r0, [sp, #0]
   b6c24:	f7fe fbee 	bl	b5404 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6c28:	4638      	mov	r0, r7
   b6c2a:	b015      	add	sp, #84	; 0x54
   b6c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6c30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6c30:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6c32:	4a03      	ldr	r2, [pc, #12]	; (b6c40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6c34:	601a      	str	r2, [r3, #0]
   b6c36:	2200      	movs	r2, #0
   b6c38:	605a      	str	r2, [r3, #4]

} // spark
   b6c3a:	4770      	bx	lr
   b6c3c:	2003e720 	.word	0x2003e720
   b6c40:	000b83b0 	.word	0x000b83b0

000b6c44 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   b6c44:	4770      	bx	lr

000b6c46 <_ZN5spark16JSONBufferWriterD0Ev>:
   b6c46:	b510      	push	{r4, lr}
   b6c48:	2114      	movs	r1, #20
   b6c4a:	4604      	mov	r4, r0
   b6c4c:	f7fd fa27 	bl	b409e <_ZdlPvj>
   b6c50:	4620      	mov	r0, r4
   b6c52:	bd10      	pop	{r4, pc}

000b6c54 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b6c54:	b538      	push	{r3, r4, r5, lr}
   b6c56:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   b6c58:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   b6c5c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b6c5e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   b6c60:	d207      	bcs.n	b6c72 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   b6c62:	1ad2      	subs	r2, r2, r3
   b6c64:	6880      	ldr	r0, [r0, #8]
   b6c66:	42aa      	cmp	r2, r5
   b6c68:	bf28      	it	cs
   b6c6a:	462a      	movcs	r2, r5
   b6c6c:	4418      	add	r0, r3
   b6c6e:	f001 f907 	bl	b7e80 <memcpy>
    }
    n_ += size;
   b6c72:	6922      	ldr	r2, [r4, #16]
   b6c74:	442a      	add	r2, r5
   b6c76:	6122      	str	r2, [r4, #16]
}
   b6c78:	bd38      	pop	{r3, r4, r5, pc}

000b6c7a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   b6c7a:	b40e      	push	{r1, r2, r3}
   b6c7c:	b517      	push	{r0, r1, r2, r4, lr}
   b6c7e:	ab05      	add	r3, sp, #20
   b6c80:	4604      	mov	r4, r0
   b6c82:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b6c86:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   b6c88:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b6c8a:	6903      	ldr	r3, [r0, #16]
   b6c8c:	6880      	ldr	r0, [r0, #8]
   b6c8e:	428b      	cmp	r3, r1
   b6c90:	bf38      	it	cc
   b6c92:	1ac9      	subcc	r1, r1, r3
   b6c94:	4418      	add	r0, r3
   b6c96:	bf28      	it	cs
   b6c98:	2100      	movcs	r1, #0
   b6c9a:	9b01      	ldr	r3, [sp, #4]
   b6c9c:	f7fe fe1e 	bl	b58dc <vsnprintf>
    va_end(args);
    n_ += n;
   b6ca0:	6923      	ldr	r3, [r4, #16]
   b6ca2:	4418      	add	r0, r3
   b6ca4:	6120      	str	r0, [r4, #16]
}
   b6ca6:	b003      	add	sp, #12
   b6ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6cac:	b003      	add	sp, #12
   b6cae:	4770      	bx	lr

000b6cb0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b6cb0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6cb2:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6cb4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6cb8:	689b      	ldr	r3, [r3, #8]
   b6cba:	2201      	movs	r2, #1
   b6cbc:	f10d 0107 	add.w	r1, sp, #7
   b6cc0:	4798      	blx	r3
}
   b6cc2:	b003      	add	sp, #12
   b6cc4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cc8 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6cc8:	b510      	push	{r4, lr}
    write('}');
   b6cca:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6ccc:	4604      	mov	r4, r0
    write('}');
   b6cce:	f7ff ffef 	bl	b6cb0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6cd2:	2301      	movs	r3, #1
   b6cd4:	7123      	strb	r3, [r4, #4]
}
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	bd10      	pop	{r4, pc}

000b6cda <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   b6cda:	b508      	push	{r3, lr}
    switch (state_) {
   b6cdc:	7903      	ldrb	r3, [r0, #4]
   b6cde:	2b01      	cmp	r3, #1
   b6ce0:	d002      	beq.n	b6ce8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6ce2:	2b02      	cmp	r3, #2
   b6ce4:	d004      	beq.n	b6cf0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   b6ce6:	bd08      	pop	{r3, pc}
        write(',');
   b6ce8:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6cea:	f7ff ffe1 	bl	b6cb0 <_ZN5spark10JSONWriter5writeEc>
}
   b6cee:	e7fa      	b.n	b6ce6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6cf0:	213a      	movs	r1, #58	; 0x3a
   b6cf2:	e7fa      	b.n	b6cea <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6cf4 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6cf4:	b510      	push	{r4, lr}
   b6cf6:	4604      	mov	r4, r0
    writeSeparator();
   b6cf8:	f7ff ffef 	bl	b6cda <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6cfc:	4620      	mov	r0, r4
   b6cfe:	217b      	movs	r1, #123	; 0x7b
   b6d00:	f7ff ffd6 	bl	b6cb0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6d04:	2300      	movs	r3, #0
   b6d06:	7123      	strb	r3, [r4, #4]
}
   b6d08:	4620      	mov	r0, r4
   b6d0a:	bd10      	pop	{r4, pc}

000b6d0c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6d0c:	b513      	push	{r0, r1, r4, lr}
   b6d0e:	4604      	mov	r4, r0
   b6d10:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6d12:	f7ff ffe2 	bl	b6cda <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6d16:	6823      	ldr	r3, [r4, #0]
   b6d18:	9a01      	ldr	r2, [sp, #4]
   b6d1a:	68db      	ldr	r3, [r3, #12]
   b6d1c:	4903      	ldr	r1, [pc, #12]	; (b6d2c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6d1e:	4620      	mov	r0, r4
   b6d20:	4798      	blx	r3
    state_ = NEXT;
   b6d22:	2301      	movs	r3, #1
}
   b6d24:	4620      	mov	r0, r4
    state_ = NEXT;
   b6d26:	7123      	strb	r3, [r4, #4]
}
   b6d28:	b002      	add	sp, #8
   b6d2a:	bd10      	pop	{r4, pc}
   b6d2c:	000b83e4 	.word	0x000b83e4

000b6d30 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   b6d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d32:	4604      	mov	r4, r0
   b6d34:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   b6d38:	f7ff ffcf 	bl	b6cda <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   b6d3c:	6823      	ldr	r3, [r4, #0]
   b6d3e:	4905      	ldr	r1, [pc, #20]	; (b6d54 <_ZN5spark10JSONWriter5valueEd+0x24>)
   b6d40:	68dd      	ldr	r5, [r3, #12]
   b6d42:	4620      	mov	r0, r4
   b6d44:	463b      	mov	r3, r7
   b6d46:	4632      	mov	r2, r6
   b6d48:	47a8      	blx	r5
    state_ = NEXT;
   b6d4a:	2301      	movs	r3, #1
   b6d4c:	7123      	strb	r3, [r4, #4]
}
   b6d4e:	4620      	mov	r0, r4
   b6d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6d52:	bf00      	nop
   b6d54:	000b83e7 	.word	0x000b83e7

000b6d58 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6d5c:	460d      	mov	r5, r1
    write('"');
   b6d5e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6d60:	4690      	mov	r8, r2
   b6d62:	4604      	mov	r4, r0
    write('"');
   b6d64:	f7ff ffa4 	bl	b6cb0 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
   b6d68:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6e10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6d6c:	44a8      	add	r8, r5
    const char *s = str;
   b6d6e:	462f      	mov	r7, r5
    while (s != end) {
   b6d70:	4547      	cmp	r7, r8
   b6d72:	46ba      	mov	sl, r7
   b6d74:	d03d      	beq.n	b6df2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6d76:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6d7a:	2e22      	cmp	r6, #34	; 0x22
   b6d7c:	d006      	beq.n	b6d8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6d7e:	2e5c      	cmp	r6, #92	; 0x5c
   b6d80:	d004      	beq.n	b6d8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6d82:	4630      	mov	r0, r6
   b6d84:	f001 f874 	bl	b7e70 <isprint>
   b6d88:	2800      	cmp	r0, #0
   b6d8a:	d1f1      	bne.n	b6d70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6d8c:	6823      	ldr	r3, [r4, #0]
   b6d8e:	ebaa 0205 	sub.w	r2, sl, r5
   b6d92:	689b      	ldr	r3, [r3, #8]
   b6d94:	4629      	mov	r1, r5
   b6d96:	4620      	mov	r0, r4
   b6d98:	4798      	blx	r3
            write('\\');
   b6d9a:	215c      	movs	r1, #92	; 0x5c
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	f7ff ff87 	bl	b6cb0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6da2:	2e0d      	cmp	r6, #13
   b6da4:	d80a      	bhi.n	b6dbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6da6:	2e07      	cmp	r6, #7
   b6da8:	d91c      	bls.n	b6de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6daa:	f1a6 0308 	sub.w	r3, r6, #8
   b6dae:	2b05      	cmp	r3, #5
   b6db0:	d818      	bhi.n	b6de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6db2:	e8df f003 	tbb	[pc, r3]
   b6db6:	0f0d      	.short	0x0f0d
   b6db8:	15131711 	.word	0x15131711
   b6dbc:	2e22      	cmp	r6, #34	; 0x22
   b6dbe:	d001      	beq.n	b6dc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6dc0:	2e5c      	cmp	r6, #92	; 0x5c
   b6dc2:	d10f      	bne.n	b6de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6dc4:	4631      	mov	r1, r6
                write('b');
   b6dc6:	4620      	mov	r0, r4
   b6dc8:	f7ff ff72 	bl	b6cb0 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   b6dcc:	463d      	mov	r5, r7
    while (s != end) {
   b6dce:	e7cf      	b.n	b6d70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6dd0:	2162      	movs	r1, #98	; 0x62
   b6dd2:	e7f8      	b.n	b6dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6dd4:	2174      	movs	r1, #116	; 0x74
   b6dd6:	e7f6      	b.n	b6dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6dd8:	216e      	movs	r1, #110	; 0x6e
   b6dda:	e7f4      	b.n	b6dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6ddc:	2166      	movs	r1, #102	; 0x66
   b6dde:	e7f2      	b.n	b6dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6de0:	2172      	movs	r1, #114	; 0x72
   b6de2:	e7f0      	b.n	b6dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6de4:	6823      	ldr	r3, [r4, #0]
   b6de6:	4632      	mov	r2, r6
   b6de8:	68db      	ldr	r3, [r3, #12]
   b6dea:	4649      	mov	r1, r9
   b6dec:	4620      	mov	r0, r4
   b6dee:	4798      	blx	r3
                break;
   b6df0:	e7ec      	b.n	b6dcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
   b6df2:	42bd      	cmp	r5, r7
   b6df4:	d005      	beq.n	b6e02 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b6df6:	6823      	ldr	r3, [r4, #0]
   b6df8:	1b7a      	subs	r2, r7, r5
   b6dfa:	689b      	ldr	r3, [r3, #8]
   b6dfc:	4629      	mov	r1, r5
   b6dfe:	4620      	mov	r0, r4
   b6e00:	4798      	blx	r3
    write('"');
   b6e02:	2122      	movs	r1, #34	; 0x22
   b6e04:	4620      	mov	r0, r4
   b6e06:	f7ff ff53 	bl	b6cb0 <_ZN5spark10JSONWriter5writeEc>
}
   b6e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6e0e:	bf00      	nop
   b6e10:	000b83ea 	.word	0x000b83ea

000b6e14 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6e14:	b513      	push	{r0, r1, r4, lr}
   b6e16:	4604      	mov	r4, r0
   b6e18:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6e1c:	f7ff ff5d 	bl	b6cda <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6e20:	4620      	mov	r0, r4
   b6e22:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6e26:	f7ff ff97 	bl	b6d58 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b6e2a:	2302      	movs	r3, #2
}
   b6e2c:	4620      	mov	r0, r4
    state_ = VALUE;
   b6e2e:	7123      	strb	r3, [r4, #4]
}
   b6e30:	b002      	add	sp, #8
   b6e32:	bd10      	pop	{r4, pc}

000b6e34 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b6e34:	b513      	push	{r0, r1, r4, lr}
   b6e36:	4604      	mov	r4, r0
   b6e38:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6e3c:	f7ff ff4d 	bl	b6cda <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b6e40:	4620      	mov	r0, r4
   b6e42:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6e46:	f7ff ff87 	bl	b6d58 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b6e4a:	2301      	movs	r3, #1
}
   b6e4c:	4620      	mov	r0, r4
    state_ = NEXT;
   b6e4e:	7123      	strb	r3, [r4, #4]
}
   b6e50:	b002      	add	sp, #8
   b6e52:	bd10      	pop	{r4, pc}

000b6e54 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6e54:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6e56:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6e58:	d902      	bls.n	b6e60 <pinAvailable+0xc>
    return false;
   b6e5a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6e5c:	b002      	add	sp, #8
   b6e5e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6e60:	f1a0 030b 	sub.w	r3, r0, #11
   b6e64:	2b02      	cmp	r3, #2
   b6e66:	d81a      	bhi.n	b6e9e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6e68:	4c17      	ldr	r4, [pc, #92]	; (b6ec8 <pinAvailable+0x74>)
   b6e6a:	7821      	ldrb	r1, [r4, #0]
   b6e6c:	f3bf 8f5b 	dmb	ish
   b6e70:	f011 0101 	ands.w	r1, r1, #1
   b6e74:	d10b      	bne.n	b6e8e <pinAvailable+0x3a>
   b6e76:	4620      	mov	r0, r4
   b6e78:	9101      	str	r1, [sp, #4]
   b6e7a:	f7fd f912 	bl	b40a2 <__cxa_guard_acquire>
   b6e7e:	9901      	ldr	r1, [sp, #4]
   b6e80:	b128      	cbz	r0, b6e8e <pinAvailable+0x3a>
   b6e82:	4812      	ldr	r0, [pc, #72]	; (b6ecc <pinAvailable+0x78>)
   b6e84:	f7fe fda6 	bl	b59d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6e88:	4620      	mov	r0, r4
   b6e8a:	f7fd f90f 	bl	b40ac <__cxa_guard_release>
   b6e8e:	4b0f      	ldr	r3, [pc, #60]	; (b6ecc <pinAvailable+0x78>)
   b6e90:	7818      	ldrb	r0, [r3, #0]
   b6e92:	f7fe fbc7 	bl	b5624 <hal_spi_is_enabled>
   b6e96:	2800      	cmp	r0, #0
   b6e98:	d1df      	bne.n	b6e5a <pinAvailable+0x6>
  return true; // 'pin' is available
   b6e9a:	2001      	movs	r0, #1
   b6e9c:	e7de      	b.n	b6e5c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6e9e:	2801      	cmp	r0, #1
   b6ea0:	d809      	bhi.n	b6eb6 <pinAvailable+0x62>
   b6ea2:	f000 f8a9 	bl	b6ff8 <_Z19__fetch_global_Wirev>
   b6ea6:	2100      	movs	r1, #0
   b6ea8:	7c00      	ldrb	r0, [r0, #16]
   b6eaa:	f7fe fb8b 	bl	b55c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6eae:	f080 0001 	eor.w	r0, r0, #1
   b6eb2:	b2c0      	uxtb	r0, r0
   b6eb4:	e7d2      	b.n	b6e5c <pinAvailable+0x8>
   b6eb6:	3809      	subs	r0, #9
   b6eb8:	2801      	cmp	r0, #1
   b6eba:	d8ee      	bhi.n	b6e9a <pinAvailable+0x46>
   b6ebc:	f000 f860 	bl	b6f80 <_Z22__fetch_global_Serial1v>
   b6ec0:	7c00      	ldrb	r0, [r0, #16]
   b6ec2:	f7fe fb27 	bl	b5514 <hal_usart_is_enabled>
   b6ec6:	e7f2      	b.n	b6eae <pinAvailable+0x5a>
   b6ec8:	2003e6a4 	.word	0x2003e6a4
   b6ecc:	2003e6a8 	.word	0x2003e6a8

000b6ed0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ed0:	2823      	cmp	r0, #35	; 0x23
{
   b6ed2:	b538      	push	{r3, r4, r5, lr}
   b6ed4:	4604      	mov	r4, r0
   b6ed6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ed8:	d80a      	bhi.n	b6ef0 <pinMode+0x20>
   b6eda:	29ff      	cmp	r1, #255	; 0xff
   b6edc:	d008      	beq.n	b6ef0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6ede:	f7ff ffb9 	bl	b6e54 <pinAvailable>
   b6ee2:	b128      	cbz	r0, b6ef0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6ee4:	4629      	mov	r1, r5
   b6ee6:	4620      	mov	r0, r4
}
   b6ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6eec:	f7fe ba9a 	b.w	b5424 <HAL_Pin_Mode>
}
   b6ef0:	bd38      	pop	{r3, r4, r5, pc}

000b6ef2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6ef2:	b538      	push	{r3, r4, r5, lr}
   b6ef4:	4604      	mov	r4, r0
   b6ef6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6ef8:	f7fe fa9c 	bl	b5434 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6efc:	28ff      	cmp	r0, #255	; 0xff
   b6efe:	d010      	beq.n	b6f22 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6f00:	2806      	cmp	r0, #6
   b6f02:	d804      	bhi.n	b6f0e <digitalWrite+0x1c>
   b6f04:	234d      	movs	r3, #77	; 0x4d
   b6f06:	fa23 f000 	lsr.w	r0, r3, r0
   b6f0a:	07c3      	lsls	r3, r0, #31
   b6f0c:	d409      	bmi.n	b6f22 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6f0e:	4620      	mov	r0, r4
   b6f10:	f7ff ffa0 	bl	b6e54 <pinAvailable>
   b6f14:	b128      	cbz	r0, b6f22 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6f16:	4629      	mov	r1, r5
   b6f18:	4620      	mov	r0, r4
}
   b6f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6f1e:	f7fe ba91 	b.w	b5444 <HAL_GPIO_Write>
}
   b6f22:	bd38      	pop	{r3, r4, r5, pc}

000b6f24 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6f24:	b510      	push	{r4, lr}
   b6f26:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6f28:	f7fe fa84 	bl	b5434 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6f2c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6f2e:	b2db      	uxtb	r3, r3
   b6f30:	2b01      	cmp	r3, #1
   b6f32:	d908      	bls.n	b6f46 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6f34:	4620      	mov	r0, r4
   b6f36:	f7ff ff8d 	bl	b6e54 <pinAvailable>
   b6f3a:	b120      	cbz	r0, b6f46 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6f3c:	4620      	mov	r0, r4
}
   b6f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6f42:	f7fe ba87 	b.w	b5454 <HAL_GPIO_Read>
}
   b6f46:	2000      	movs	r0, #0
   b6f48:	bd10      	pop	{r4, pc}

000b6f4a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f4a:	4770      	bx	lr

000b6f4c <_Z20acquireSerial1Bufferv>:
{
   b6f4c:	b538      	push	{r3, r4, r5, lr}
   b6f4e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6f50:	2514      	movs	r5, #20
   b6f52:	462a      	mov	r2, r5
   b6f54:	2100      	movs	r1, #0
   b6f56:	f000 ffa1 	bl	b7e9c <memset>
   b6f5a:	8025      	strh	r5, [r4, #0]
   b6f5c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f5e:	4907      	ldr	r1, [pc, #28]	; (b6f7c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6f60:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f62:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6f64:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f66:	f000 f86b 	bl	b7040 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f6a:	4904      	ldr	r1, [pc, #16]	; (b6f7c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6f6c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f6e:	4628      	mov	r0, r5
   b6f70:	f000 f866 	bl	b7040 <_ZnajRKSt9nothrow_t>
    };
   b6f74:	60e0      	str	r0, [r4, #12]
}
   b6f76:	4620      	mov	r0, r4
   b6f78:	bd38      	pop	{r3, r4, r5, pc}
   b6f7a:	bf00      	nop
   b6f7c:	000b8408 	.word	0x000b8408

000b6f80 <_Z22__fetch_global_Serial1v>:
{
   b6f80:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f82:	4d0e      	ldr	r5, [pc, #56]	; (b6fbc <_Z22__fetch_global_Serial1v+0x3c>)
   b6f84:	7829      	ldrb	r1, [r5, #0]
   b6f86:	f3bf 8f5b 	dmb	ish
   b6f8a:	f011 0401 	ands.w	r4, r1, #1
{
   b6f8e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f90:	d111      	bne.n	b6fb6 <_Z22__fetch_global_Serial1v+0x36>
   b6f92:	4628      	mov	r0, r5
   b6f94:	f7fd f885 	bl	b40a2 <__cxa_guard_acquire>
   b6f98:	b168      	cbz	r0, b6fb6 <_Z22__fetch_global_Serial1v+0x36>
   b6f9a:	a801      	add	r0, sp, #4
   b6f9c:	f7ff ffd6 	bl	b6f4c <_Z20acquireSerial1Bufferv>
   b6fa0:	aa01      	add	r2, sp, #4
   b6fa2:	4621      	mov	r1, r4
   b6fa4:	4806      	ldr	r0, [pc, #24]	; (b6fc0 <_Z22__fetch_global_Serial1v+0x40>)
   b6fa6:	f7ff fcb3 	bl	b6910 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6faa:	4628      	mov	r0, r5
   b6fac:	f7fd f87e 	bl	b40ac <__cxa_guard_release>
   b6fb0:	4804      	ldr	r0, [pc, #16]	; (b6fc4 <_Z22__fetch_global_Serial1v+0x44>)
   b6fb2:	f000 ff57 	bl	b7e64 <atexit>
    return serial1;
}
   b6fb6:	4802      	ldr	r0, [pc, #8]	; (b6fc0 <_Z22__fetch_global_Serial1v+0x40>)
   b6fb8:	b007      	add	sp, #28
   b6fba:	bd30      	pop	{r4, r5, pc}
   b6fbc:	2003e728 	.word	0x2003e728
   b6fc0:	2003e72c 	.word	0x2003e72c
   b6fc4:	000b6f4b 	.word	0x000b6f4b

000b6fc8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6fc8:	4770      	bx	lr
	...

000b6fcc <_Z17acquireWireBufferv>:
{
   b6fcc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6fce:	2520      	movs	r5, #32
   b6fd0:	2314      	movs	r3, #20
{
   b6fd2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6fd4:	6003      	str	r3, [r0, #0]
   b6fd6:	6085      	str	r5, [r0, #8]
   b6fd8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6fda:	4906      	ldr	r1, [pc, #24]	; (b6ff4 <_Z17acquireWireBufferv+0x28>)
   b6fdc:	4628      	mov	r0, r5
   b6fde:	f000 f82f 	bl	b7040 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6fe2:	4904      	ldr	r1, [pc, #16]	; (b6ff4 <_Z17acquireWireBufferv+0x28>)
	};
   b6fe4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6fe6:	4628      	mov	r0, r5
   b6fe8:	f000 f82a 	bl	b7040 <_ZnajRKSt9nothrow_t>
	};
   b6fec:	60e0      	str	r0, [r4, #12]
}
   b6fee:	4620      	mov	r0, r4
   b6ff0:	bd38      	pop	{r3, r4, r5, pc}
   b6ff2:	bf00      	nop
   b6ff4:	000b8408 	.word	0x000b8408

000b6ff8 <_Z19__fetch_global_Wirev>:
{
   b6ff8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ffa:	4d0e      	ldr	r5, [pc, #56]	; (b7034 <_Z19__fetch_global_Wirev+0x3c>)
   b6ffc:	7829      	ldrb	r1, [r5, #0]
   b6ffe:	f3bf 8f5b 	dmb	ish
   b7002:	f011 0401 	ands.w	r4, r1, #1
{
   b7006:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7008:	d111      	bne.n	b702e <_Z19__fetch_global_Wirev+0x36>
   b700a:	4628      	mov	r0, r5
   b700c:	f7fd f849 	bl	b40a2 <__cxa_guard_acquire>
   b7010:	b168      	cbz	r0, b702e <_Z19__fetch_global_Wirev+0x36>
   b7012:	a801      	add	r0, sp, #4
   b7014:	f7ff ffda 	bl	b6fcc <_Z17acquireWireBufferv>
   b7018:	aa01      	add	r2, sp, #4
   b701a:	4621      	mov	r1, r4
   b701c:	4806      	ldr	r0, [pc, #24]	; (b7038 <_Z19__fetch_global_Wirev+0x40>)
   b701e:	f7ff fccb 	bl	b69b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7022:	4628      	mov	r0, r5
   b7024:	f7fd f842 	bl	b40ac <__cxa_guard_release>
   b7028:	4804      	ldr	r0, [pc, #16]	; (b703c <_Z19__fetch_global_Wirev+0x44>)
   b702a:	f000 ff1b 	bl	b7e64 <atexit>
	return wire;
}
   b702e:	4802      	ldr	r0, [pc, #8]	; (b7038 <_Z19__fetch_global_Wirev+0x40>)
   b7030:	b007      	add	sp, #28
   b7032:	bd30      	pop	{r4, r5, pc}
   b7034:	2003e744 	.word	0x2003e744
   b7038:	2003e748 	.word	0x2003e748
   b703c:	000b6fc9 	.word	0x000b6fc9

000b7040 <_ZnajRKSt9nothrow_t>:
   b7040:	f7fd b82b 	b.w	b409a <_Znaj>

000b7044 <_ZSt25__throw_bad_function_callv>:
   b7044:	b508      	push	{r3, lr}
   b7046:	f7fe fc51 	bl	b58ec <abort>
	...

000b704c <__aeabi_drsub>:
   b704c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7050:	e002      	b.n	b7058 <__adddf3>
   b7052:	bf00      	nop

000b7054 <__aeabi_dsub>:
   b7054:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7058 <__adddf3>:
   b7058:	b530      	push	{r4, r5, lr}
   b705a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b705e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7062:	ea94 0f05 	teq	r4, r5
   b7066:	bf08      	it	eq
   b7068:	ea90 0f02 	teqeq	r0, r2
   b706c:	bf1f      	itttt	ne
   b706e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7072:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7076:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b707a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b707e:	f000 80e2 	beq.w	b7246 <__adddf3+0x1ee>
   b7082:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7086:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b708a:	bfb8      	it	lt
   b708c:	426d      	neglt	r5, r5
   b708e:	dd0c      	ble.n	b70aa <__adddf3+0x52>
   b7090:	442c      	add	r4, r5
   b7092:	ea80 0202 	eor.w	r2, r0, r2
   b7096:	ea81 0303 	eor.w	r3, r1, r3
   b709a:	ea82 0000 	eor.w	r0, r2, r0
   b709e:	ea83 0101 	eor.w	r1, r3, r1
   b70a2:	ea80 0202 	eor.w	r2, r0, r2
   b70a6:	ea81 0303 	eor.w	r3, r1, r3
   b70aa:	2d36      	cmp	r5, #54	; 0x36
   b70ac:	bf88      	it	hi
   b70ae:	bd30      	pophi	{r4, r5, pc}
   b70b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b70b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b70b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b70bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b70c0:	d002      	beq.n	b70c8 <__adddf3+0x70>
   b70c2:	4240      	negs	r0, r0
   b70c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b70c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b70cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b70d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b70d4:	d002      	beq.n	b70dc <__adddf3+0x84>
   b70d6:	4252      	negs	r2, r2
   b70d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b70dc:	ea94 0f05 	teq	r4, r5
   b70e0:	f000 80a7 	beq.w	b7232 <__adddf3+0x1da>
   b70e4:	f1a4 0401 	sub.w	r4, r4, #1
   b70e8:	f1d5 0e20 	rsbs	lr, r5, #32
   b70ec:	db0d      	blt.n	b710a <__adddf3+0xb2>
   b70ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   b70f2:	fa22 f205 	lsr.w	r2, r2, r5
   b70f6:	1880      	adds	r0, r0, r2
   b70f8:	f141 0100 	adc.w	r1, r1, #0
   b70fc:	fa03 f20e 	lsl.w	r2, r3, lr
   b7100:	1880      	adds	r0, r0, r2
   b7102:	fa43 f305 	asr.w	r3, r3, r5
   b7106:	4159      	adcs	r1, r3
   b7108:	e00e      	b.n	b7128 <__adddf3+0xd0>
   b710a:	f1a5 0520 	sub.w	r5, r5, #32
   b710e:	f10e 0e20 	add.w	lr, lr, #32
   b7112:	2a01      	cmp	r2, #1
   b7114:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7118:	bf28      	it	cs
   b711a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b711e:	fa43 f305 	asr.w	r3, r3, r5
   b7122:	18c0      	adds	r0, r0, r3
   b7124:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7128:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b712c:	d507      	bpl.n	b713e <__adddf3+0xe6>
   b712e:	f04f 0e00 	mov.w	lr, #0
   b7132:	f1dc 0c00 	rsbs	ip, ip, #0
   b7136:	eb7e 0000 	sbcs.w	r0, lr, r0
   b713a:	eb6e 0101 	sbc.w	r1, lr, r1
   b713e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7142:	d31b      	bcc.n	b717c <__adddf3+0x124>
   b7144:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7148:	d30c      	bcc.n	b7164 <__adddf3+0x10c>
   b714a:	0849      	lsrs	r1, r1, #1
   b714c:	ea5f 0030 	movs.w	r0, r0, rrx
   b7150:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7154:	f104 0401 	add.w	r4, r4, #1
   b7158:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b715c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7160:	f080 809a 	bcs.w	b7298 <__adddf3+0x240>
   b7164:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7168:	bf08      	it	eq
   b716a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b716e:	f150 0000 	adcs.w	r0, r0, #0
   b7172:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7176:	ea41 0105 	orr.w	r1, r1, r5
   b717a:	bd30      	pop	{r4, r5, pc}
   b717c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7180:	4140      	adcs	r0, r0
   b7182:	eb41 0101 	adc.w	r1, r1, r1
   b7186:	3c01      	subs	r4, #1
   b7188:	bf28      	it	cs
   b718a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b718e:	d2e9      	bcs.n	b7164 <__adddf3+0x10c>
   b7190:	f091 0f00 	teq	r1, #0
   b7194:	bf04      	itt	eq
   b7196:	4601      	moveq	r1, r0
   b7198:	2000      	moveq	r0, #0
   b719a:	fab1 f381 	clz	r3, r1
   b719e:	bf08      	it	eq
   b71a0:	3320      	addeq	r3, #32
   b71a2:	f1a3 030b 	sub.w	r3, r3, #11
   b71a6:	f1b3 0220 	subs.w	r2, r3, #32
   b71aa:	da0c      	bge.n	b71c6 <__adddf3+0x16e>
   b71ac:	320c      	adds	r2, #12
   b71ae:	dd08      	ble.n	b71c2 <__adddf3+0x16a>
   b71b0:	f102 0c14 	add.w	ip, r2, #20
   b71b4:	f1c2 020c 	rsb	r2, r2, #12
   b71b8:	fa01 f00c 	lsl.w	r0, r1, ip
   b71bc:	fa21 f102 	lsr.w	r1, r1, r2
   b71c0:	e00c      	b.n	b71dc <__adddf3+0x184>
   b71c2:	f102 0214 	add.w	r2, r2, #20
   b71c6:	bfd8      	it	le
   b71c8:	f1c2 0c20 	rsble	ip, r2, #32
   b71cc:	fa01 f102 	lsl.w	r1, r1, r2
   b71d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b71d4:	bfdc      	itt	le
   b71d6:	ea41 010c 	orrle.w	r1, r1, ip
   b71da:	4090      	lslle	r0, r2
   b71dc:	1ae4      	subs	r4, r4, r3
   b71de:	bfa2      	ittt	ge
   b71e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b71e4:	4329      	orrge	r1, r5
   b71e6:	bd30      	popge	{r4, r5, pc}
   b71e8:	ea6f 0404 	mvn.w	r4, r4
   b71ec:	3c1f      	subs	r4, #31
   b71ee:	da1c      	bge.n	b722a <__adddf3+0x1d2>
   b71f0:	340c      	adds	r4, #12
   b71f2:	dc0e      	bgt.n	b7212 <__adddf3+0x1ba>
   b71f4:	f104 0414 	add.w	r4, r4, #20
   b71f8:	f1c4 0220 	rsb	r2, r4, #32
   b71fc:	fa20 f004 	lsr.w	r0, r0, r4
   b7200:	fa01 f302 	lsl.w	r3, r1, r2
   b7204:	ea40 0003 	orr.w	r0, r0, r3
   b7208:	fa21 f304 	lsr.w	r3, r1, r4
   b720c:	ea45 0103 	orr.w	r1, r5, r3
   b7210:	bd30      	pop	{r4, r5, pc}
   b7212:	f1c4 040c 	rsb	r4, r4, #12
   b7216:	f1c4 0220 	rsb	r2, r4, #32
   b721a:	fa20 f002 	lsr.w	r0, r0, r2
   b721e:	fa01 f304 	lsl.w	r3, r1, r4
   b7222:	ea40 0003 	orr.w	r0, r0, r3
   b7226:	4629      	mov	r1, r5
   b7228:	bd30      	pop	{r4, r5, pc}
   b722a:	fa21 f004 	lsr.w	r0, r1, r4
   b722e:	4629      	mov	r1, r5
   b7230:	bd30      	pop	{r4, r5, pc}
   b7232:	f094 0f00 	teq	r4, #0
   b7236:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b723a:	bf06      	itte	eq
   b723c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7240:	3401      	addeq	r4, #1
   b7242:	3d01      	subne	r5, #1
   b7244:	e74e      	b.n	b70e4 <__adddf3+0x8c>
   b7246:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b724a:	bf18      	it	ne
   b724c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7250:	d029      	beq.n	b72a6 <__adddf3+0x24e>
   b7252:	ea94 0f05 	teq	r4, r5
   b7256:	bf08      	it	eq
   b7258:	ea90 0f02 	teqeq	r0, r2
   b725c:	d005      	beq.n	b726a <__adddf3+0x212>
   b725e:	ea54 0c00 	orrs.w	ip, r4, r0
   b7262:	bf04      	itt	eq
   b7264:	4619      	moveq	r1, r3
   b7266:	4610      	moveq	r0, r2
   b7268:	bd30      	pop	{r4, r5, pc}
   b726a:	ea91 0f03 	teq	r1, r3
   b726e:	bf1e      	ittt	ne
   b7270:	2100      	movne	r1, #0
   b7272:	2000      	movne	r0, #0
   b7274:	bd30      	popne	{r4, r5, pc}
   b7276:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b727a:	d105      	bne.n	b7288 <__adddf3+0x230>
   b727c:	0040      	lsls	r0, r0, #1
   b727e:	4149      	adcs	r1, r1
   b7280:	bf28      	it	cs
   b7282:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7286:	bd30      	pop	{r4, r5, pc}
   b7288:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b728c:	bf3c      	itt	cc
   b728e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7292:	bd30      	popcc	{r4, r5, pc}
   b7294:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7298:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b729c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b72a0:	f04f 0000 	mov.w	r0, #0
   b72a4:	bd30      	pop	{r4, r5, pc}
   b72a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b72aa:	bf1a      	itte	ne
   b72ac:	4619      	movne	r1, r3
   b72ae:	4610      	movne	r0, r2
   b72b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b72b4:	bf1c      	itt	ne
   b72b6:	460b      	movne	r3, r1
   b72b8:	4602      	movne	r2, r0
   b72ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b72be:	bf06      	itte	eq
   b72c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b72c4:	ea91 0f03 	teqeq	r1, r3
   b72c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b72cc:	bd30      	pop	{r4, r5, pc}
   b72ce:	bf00      	nop

000b72d0 <__aeabi_ui2d>:
   b72d0:	f090 0f00 	teq	r0, #0
   b72d4:	bf04      	itt	eq
   b72d6:	2100      	moveq	r1, #0
   b72d8:	4770      	bxeq	lr
   b72da:	b530      	push	{r4, r5, lr}
   b72dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b72e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b72e4:	f04f 0500 	mov.w	r5, #0
   b72e8:	f04f 0100 	mov.w	r1, #0
   b72ec:	e750      	b.n	b7190 <__adddf3+0x138>
   b72ee:	bf00      	nop

000b72f0 <__aeabi_i2d>:
   b72f0:	f090 0f00 	teq	r0, #0
   b72f4:	bf04      	itt	eq
   b72f6:	2100      	moveq	r1, #0
   b72f8:	4770      	bxeq	lr
   b72fa:	b530      	push	{r4, r5, lr}
   b72fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7300:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7304:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7308:	bf48      	it	mi
   b730a:	4240      	negmi	r0, r0
   b730c:	f04f 0100 	mov.w	r1, #0
   b7310:	e73e      	b.n	b7190 <__adddf3+0x138>
   b7312:	bf00      	nop

000b7314 <__aeabi_f2d>:
   b7314:	0042      	lsls	r2, r0, #1
   b7316:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b731a:	ea4f 0131 	mov.w	r1, r1, rrx
   b731e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7322:	bf1f      	itttt	ne
   b7324:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7328:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b732c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7330:	4770      	bxne	lr
   b7332:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7336:	bf08      	it	eq
   b7338:	4770      	bxeq	lr
   b733a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b733e:	bf04      	itt	eq
   b7340:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7344:	4770      	bxeq	lr
   b7346:	b530      	push	{r4, r5, lr}
   b7348:	f44f 7460 	mov.w	r4, #896	; 0x380
   b734c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7354:	e71c      	b.n	b7190 <__adddf3+0x138>
   b7356:	bf00      	nop

000b7358 <__aeabi_ul2d>:
   b7358:	ea50 0201 	orrs.w	r2, r0, r1
   b735c:	bf08      	it	eq
   b735e:	4770      	bxeq	lr
   b7360:	b530      	push	{r4, r5, lr}
   b7362:	f04f 0500 	mov.w	r5, #0
   b7366:	e00a      	b.n	b737e <__aeabi_l2d+0x16>

000b7368 <__aeabi_l2d>:
   b7368:	ea50 0201 	orrs.w	r2, r0, r1
   b736c:	bf08      	it	eq
   b736e:	4770      	bxeq	lr
   b7370:	b530      	push	{r4, r5, lr}
   b7372:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7376:	d502      	bpl.n	b737e <__aeabi_l2d+0x16>
   b7378:	4240      	negs	r0, r0
   b737a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b737e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7382:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7386:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b738a:	f43f aed8 	beq.w	b713e <__adddf3+0xe6>
   b738e:	f04f 0203 	mov.w	r2, #3
   b7392:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7396:	bf18      	it	ne
   b7398:	3203      	addne	r2, #3
   b739a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b739e:	bf18      	it	ne
   b73a0:	3203      	addne	r2, #3
   b73a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b73a6:	f1c2 0320 	rsb	r3, r2, #32
   b73aa:	fa00 fc03 	lsl.w	ip, r0, r3
   b73ae:	fa20 f002 	lsr.w	r0, r0, r2
   b73b2:	fa01 fe03 	lsl.w	lr, r1, r3
   b73b6:	ea40 000e 	orr.w	r0, r0, lr
   b73ba:	fa21 f102 	lsr.w	r1, r1, r2
   b73be:	4414      	add	r4, r2
   b73c0:	e6bd      	b.n	b713e <__adddf3+0xe6>
   b73c2:	bf00      	nop

000b73c4 <__aeabi_dmul>:
   b73c4:	b570      	push	{r4, r5, r6, lr}
   b73c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b73ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b73ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b73d2:	bf1d      	ittte	ne
   b73d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b73d8:	ea94 0f0c 	teqne	r4, ip
   b73dc:	ea95 0f0c 	teqne	r5, ip
   b73e0:	f000 f8de 	bleq	b75a0 <__aeabi_dmul+0x1dc>
   b73e4:	442c      	add	r4, r5
   b73e6:	ea81 0603 	eor.w	r6, r1, r3
   b73ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b73ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b73f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b73f6:	bf18      	it	ne
   b73f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b73fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7404:	d038      	beq.n	b7478 <__aeabi_dmul+0xb4>
   b7406:	fba0 ce02 	umull	ip, lr, r0, r2
   b740a:	f04f 0500 	mov.w	r5, #0
   b740e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7412:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7416:	fbe0 e503 	umlal	lr, r5, r0, r3
   b741a:	f04f 0600 	mov.w	r6, #0
   b741e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7422:	f09c 0f00 	teq	ip, #0
   b7426:	bf18      	it	ne
   b7428:	f04e 0e01 	orrne.w	lr, lr, #1
   b742c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7430:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7434:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7438:	d204      	bcs.n	b7444 <__aeabi_dmul+0x80>
   b743a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b743e:	416d      	adcs	r5, r5
   b7440:	eb46 0606 	adc.w	r6, r6, r6
   b7444:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7448:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b744c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7450:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7454:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7458:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b745c:	bf88      	it	hi
   b745e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7462:	d81e      	bhi.n	b74a2 <__aeabi_dmul+0xde>
   b7464:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7468:	bf08      	it	eq
   b746a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b746e:	f150 0000 	adcs.w	r0, r0, #0
   b7472:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7476:	bd70      	pop	{r4, r5, r6, pc}
   b7478:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b747c:	ea46 0101 	orr.w	r1, r6, r1
   b7480:	ea40 0002 	orr.w	r0, r0, r2
   b7484:	ea81 0103 	eor.w	r1, r1, r3
   b7488:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b748c:	bfc2      	ittt	gt
   b748e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7492:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7496:	bd70      	popgt	{r4, r5, r6, pc}
   b7498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b749c:	f04f 0e00 	mov.w	lr, #0
   b74a0:	3c01      	subs	r4, #1
   b74a2:	f300 80ab 	bgt.w	b75fc <__aeabi_dmul+0x238>
   b74a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b74aa:	bfde      	ittt	le
   b74ac:	2000      	movle	r0, #0
   b74ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b74b2:	bd70      	pople	{r4, r5, r6, pc}
   b74b4:	f1c4 0400 	rsb	r4, r4, #0
   b74b8:	3c20      	subs	r4, #32
   b74ba:	da35      	bge.n	b7528 <__aeabi_dmul+0x164>
   b74bc:	340c      	adds	r4, #12
   b74be:	dc1b      	bgt.n	b74f8 <__aeabi_dmul+0x134>
   b74c0:	f104 0414 	add.w	r4, r4, #20
   b74c4:	f1c4 0520 	rsb	r5, r4, #32
   b74c8:	fa00 f305 	lsl.w	r3, r0, r5
   b74cc:	fa20 f004 	lsr.w	r0, r0, r4
   b74d0:	fa01 f205 	lsl.w	r2, r1, r5
   b74d4:	ea40 0002 	orr.w	r0, r0, r2
   b74d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b74dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b74e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b74e4:	fa21 f604 	lsr.w	r6, r1, r4
   b74e8:	eb42 0106 	adc.w	r1, r2, r6
   b74ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b74f0:	bf08      	it	eq
   b74f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b74f6:	bd70      	pop	{r4, r5, r6, pc}
   b74f8:	f1c4 040c 	rsb	r4, r4, #12
   b74fc:	f1c4 0520 	rsb	r5, r4, #32
   b7500:	fa00 f304 	lsl.w	r3, r0, r4
   b7504:	fa20 f005 	lsr.w	r0, r0, r5
   b7508:	fa01 f204 	lsl.w	r2, r1, r4
   b750c:	ea40 0002 	orr.w	r0, r0, r2
   b7510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7514:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7518:	f141 0100 	adc.w	r1, r1, #0
   b751c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7520:	bf08      	it	eq
   b7522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7526:	bd70      	pop	{r4, r5, r6, pc}
   b7528:	f1c4 0520 	rsb	r5, r4, #32
   b752c:	fa00 f205 	lsl.w	r2, r0, r5
   b7530:	ea4e 0e02 	orr.w	lr, lr, r2
   b7534:	fa20 f304 	lsr.w	r3, r0, r4
   b7538:	fa01 f205 	lsl.w	r2, r1, r5
   b753c:	ea43 0302 	orr.w	r3, r3, r2
   b7540:	fa21 f004 	lsr.w	r0, r1, r4
   b7544:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7548:	fa21 f204 	lsr.w	r2, r1, r4
   b754c:	ea20 0002 	bic.w	r0, r0, r2
   b7550:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7554:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7558:	bf08      	it	eq
   b755a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b755e:	bd70      	pop	{r4, r5, r6, pc}
   b7560:	f094 0f00 	teq	r4, #0
   b7564:	d10f      	bne.n	b7586 <__aeabi_dmul+0x1c2>
   b7566:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b756a:	0040      	lsls	r0, r0, #1
   b756c:	eb41 0101 	adc.w	r1, r1, r1
   b7570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7574:	bf08      	it	eq
   b7576:	3c01      	subeq	r4, #1
   b7578:	d0f7      	beq.n	b756a <__aeabi_dmul+0x1a6>
   b757a:	ea41 0106 	orr.w	r1, r1, r6
   b757e:	f095 0f00 	teq	r5, #0
   b7582:	bf18      	it	ne
   b7584:	4770      	bxne	lr
   b7586:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b758a:	0052      	lsls	r2, r2, #1
   b758c:	eb43 0303 	adc.w	r3, r3, r3
   b7590:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7594:	bf08      	it	eq
   b7596:	3d01      	subeq	r5, #1
   b7598:	d0f7      	beq.n	b758a <__aeabi_dmul+0x1c6>
   b759a:	ea43 0306 	orr.w	r3, r3, r6
   b759e:	4770      	bx	lr
   b75a0:	ea94 0f0c 	teq	r4, ip
   b75a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b75a8:	bf18      	it	ne
   b75aa:	ea95 0f0c 	teqne	r5, ip
   b75ae:	d00c      	beq.n	b75ca <__aeabi_dmul+0x206>
   b75b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b75b4:	bf18      	it	ne
   b75b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b75ba:	d1d1      	bne.n	b7560 <__aeabi_dmul+0x19c>
   b75bc:	ea81 0103 	eor.w	r1, r1, r3
   b75c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b75c4:	f04f 0000 	mov.w	r0, #0
   b75c8:	bd70      	pop	{r4, r5, r6, pc}
   b75ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b75ce:	bf06      	itte	eq
   b75d0:	4610      	moveq	r0, r2
   b75d2:	4619      	moveq	r1, r3
   b75d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b75d8:	d019      	beq.n	b760e <__aeabi_dmul+0x24a>
   b75da:	ea94 0f0c 	teq	r4, ip
   b75de:	d102      	bne.n	b75e6 <__aeabi_dmul+0x222>
   b75e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b75e4:	d113      	bne.n	b760e <__aeabi_dmul+0x24a>
   b75e6:	ea95 0f0c 	teq	r5, ip
   b75ea:	d105      	bne.n	b75f8 <__aeabi_dmul+0x234>
   b75ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b75f0:	bf1c      	itt	ne
   b75f2:	4610      	movne	r0, r2
   b75f4:	4619      	movne	r1, r3
   b75f6:	d10a      	bne.n	b760e <__aeabi_dmul+0x24a>
   b75f8:	ea81 0103 	eor.w	r1, r1, r3
   b75fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7600:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7608:	f04f 0000 	mov.w	r0, #0
   b760c:	bd70      	pop	{r4, r5, r6, pc}
   b760e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7612:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7616:	bd70      	pop	{r4, r5, r6, pc}

000b7618 <__aeabi_ddiv>:
   b7618:	b570      	push	{r4, r5, r6, lr}
   b761a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b761e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7626:	bf1d      	ittte	ne
   b7628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b762c:	ea94 0f0c 	teqne	r4, ip
   b7630:	ea95 0f0c 	teqne	r5, ip
   b7634:	f000 f8a7 	bleq	b7786 <__aeabi_ddiv+0x16e>
   b7638:	eba4 0405 	sub.w	r4, r4, r5
   b763c:	ea81 0e03 	eor.w	lr, r1, r3
   b7640:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7644:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7648:	f000 8088 	beq.w	b775c <__aeabi_ddiv+0x144>
   b764c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7650:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7654:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7658:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b765c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7660:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7664:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7668:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b766c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7670:	429d      	cmp	r5, r3
   b7672:	bf08      	it	eq
   b7674:	4296      	cmpeq	r6, r2
   b7676:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b767a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b767e:	d202      	bcs.n	b7686 <__aeabi_ddiv+0x6e>
   b7680:	085b      	lsrs	r3, r3, #1
   b7682:	ea4f 0232 	mov.w	r2, r2, rrx
   b7686:	1ab6      	subs	r6, r6, r2
   b7688:	eb65 0503 	sbc.w	r5, r5, r3
   b768c:	085b      	lsrs	r3, r3, #1
   b768e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7692:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7696:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b769a:	ebb6 0e02 	subs.w	lr, r6, r2
   b769e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b76a2:	bf22      	ittt	cs
   b76a4:	1ab6      	subcs	r6, r6, r2
   b76a6:	4675      	movcs	r5, lr
   b76a8:	ea40 000c 	orrcs.w	r0, r0, ip
   b76ac:	085b      	lsrs	r3, r3, #1
   b76ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b76b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b76b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b76ba:	bf22      	ittt	cs
   b76bc:	1ab6      	subcs	r6, r6, r2
   b76be:	4675      	movcs	r5, lr
   b76c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b76c4:	085b      	lsrs	r3, r3, #1
   b76c6:	ea4f 0232 	mov.w	r2, r2, rrx
   b76ca:	ebb6 0e02 	subs.w	lr, r6, r2
   b76ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   b76d2:	bf22      	ittt	cs
   b76d4:	1ab6      	subcs	r6, r6, r2
   b76d6:	4675      	movcs	r5, lr
   b76d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b76dc:	085b      	lsrs	r3, r3, #1
   b76de:	ea4f 0232 	mov.w	r2, r2, rrx
   b76e2:	ebb6 0e02 	subs.w	lr, r6, r2
   b76e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b76ea:	bf22      	ittt	cs
   b76ec:	1ab6      	subcs	r6, r6, r2
   b76ee:	4675      	movcs	r5, lr
   b76f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b76f4:	ea55 0e06 	orrs.w	lr, r5, r6
   b76f8:	d018      	beq.n	b772c <__aeabi_ddiv+0x114>
   b76fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b76fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7702:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7706:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b770a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b770e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7712:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7716:	d1c0      	bne.n	b769a <__aeabi_ddiv+0x82>
   b7718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b771c:	d10b      	bne.n	b7736 <__aeabi_ddiv+0x11e>
   b771e:	ea41 0100 	orr.w	r1, r1, r0
   b7722:	f04f 0000 	mov.w	r0, #0
   b7726:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b772a:	e7b6      	b.n	b769a <__aeabi_ddiv+0x82>
   b772c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7730:	bf04      	itt	eq
   b7732:	4301      	orreq	r1, r0
   b7734:	2000      	moveq	r0, #0
   b7736:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b773a:	bf88      	it	hi
   b773c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7740:	f63f aeaf 	bhi.w	b74a2 <__aeabi_dmul+0xde>
   b7744:	ebb5 0c03 	subs.w	ip, r5, r3
   b7748:	bf04      	itt	eq
   b774a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b774e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7752:	f150 0000 	adcs.w	r0, r0, #0
   b7756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b775a:	bd70      	pop	{r4, r5, r6, pc}
   b775c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7760:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7764:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7768:	bfc2      	ittt	gt
   b776a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b776e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7772:	bd70      	popgt	{r4, r5, r6, pc}
   b7774:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7778:	f04f 0e00 	mov.w	lr, #0
   b777c:	3c01      	subs	r4, #1
   b777e:	e690      	b.n	b74a2 <__aeabi_dmul+0xde>
   b7780:	ea45 0e06 	orr.w	lr, r5, r6
   b7784:	e68d      	b.n	b74a2 <__aeabi_dmul+0xde>
   b7786:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b778a:	ea94 0f0c 	teq	r4, ip
   b778e:	bf08      	it	eq
   b7790:	ea95 0f0c 	teqeq	r5, ip
   b7794:	f43f af3b 	beq.w	b760e <__aeabi_dmul+0x24a>
   b7798:	ea94 0f0c 	teq	r4, ip
   b779c:	d10a      	bne.n	b77b4 <__aeabi_ddiv+0x19c>
   b779e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b77a2:	f47f af34 	bne.w	b760e <__aeabi_dmul+0x24a>
   b77a6:	ea95 0f0c 	teq	r5, ip
   b77aa:	f47f af25 	bne.w	b75f8 <__aeabi_dmul+0x234>
   b77ae:	4610      	mov	r0, r2
   b77b0:	4619      	mov	r1, r3
   b77b2:	e72c      	b.n	b760e <__aeabi_dmul+0x24a>
   b77b4:	ea95 0f0c 	teq	r5, ip
   b77b8:	d106      	bne.n	b77c8 <__aeabi_ddiv+0x1b0>
   b77ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b77be:	f43f aefd 	beq.w	b75bc <__aeabi_dmul+0x1f8>
   b77c2:	4610      	mov	r0, r2
   b77c4:	4619      	mov	r1, r3
   b77c6:	e722      	b.n	b760e <__aeabi_dmul+0x24a>
   b77c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b77cc:	bf18      	it	ne
   b77ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b77d2:	f47f aec5 	bne.w	b7560 <__aeabi_dmul+0x19c>
   b77d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b77da:	f47f af0d 	bne.w	b75f8 <__aeabi_dmul+0x234>
   b77de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b77e2:	f47f aeeb 	bne.w	b75bc <__aeabi_dmul+0x1f8>
   b77e6:	e712      	b.n	b760e <__aeabi_dmul+0x24a>

000b77e8 <__aeabi_d2f>:
   b77e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b77ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b77f0:	bf24      	itt	cs
   b77f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b77f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b77fa:	d90d      	bls.n	b7818 <__aeabi_d2f+0x30>
   b77fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7800:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7804:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7808:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b780c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7810:	bf08      	it	eq
   b7812:	f020 0001 	biceq.w	r0, r0, #1
   b7816:	4770      	bx	lr
   b7818:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b781c:	d121      	bne.n	b7862 <__aeabi_d2f+0x7a>
   b781e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7822:	bfbc      	itt	lt
   b7824:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7828:	4770      	bxlt	lr
   b782a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b782e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7832:	f1c2 0218 	rsb	r2, r2, #24
   b7836:	f1c2 0c20 	rsb	ip, r2, #32
   b783a:	fa10 f30c 	lsls.w	r3, r0, ip
   b783e:	fa20 f002 	lsr.w	r0, r0, r2
   b7842:	bf18      	it	ne
   b7844:	f040 0001 	orrne.w	r0, r0, #1
   b7848:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b784c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7850:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7854:	ea40 000c 	orr.w	r0, r0, ip
   b7858:	fa23 f302 	lsr.w	r3, r3, r2
   b785c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7860:	e7cc      	b.n	b77fc <__aeabi_d2f+0x14>
   b7862:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7866:	d107      	bne.n	b7878 <__aeabi_d2f+0x90>
   b7868:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b786c:	bf1e      	ittt	ne
   b786e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7872:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7876:	4770      	bxne	lr
   b7878:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b787c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7884:	4770      	bx	lr
   b7886:	bf00      	nop

000b7888 <__aeabi_frsub>:
   b7888:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b788c:	e002      	b.n	b7894 <__addsf3>
   b788e:	bf00      	nop

000b7890 <__aeabi_fsub>:
   b7890:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7894 <__addsf3>:
   b7894:	0042      	lsls	r2, r0, #1
   b7896:	bf1f      	itttt	ne
   b7898:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b789c:	ea92 0f03 	teqne	r2, r3
   b78a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b78a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b78a8:	d06a      	beq.n	b7980 <__addsf3+0xec>
   b78aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b78ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b78b2:	bfc1      	itttt	gt
   b78b4:	18d2      	addgt	r2, r2, r3
   b78b6:	4041      	eorgt	r1, r0
   b78b8:	4048      	eorgt	r0, r1
   b78ba:	4041      	eorgt	r1, r0
   b78bc:	bfb8      	it	lt
   b78be:	425b      	neglt	r3, r3
   b78c0:	2b19      	cmp	r3, #25
   b78c2:	bf88      	it	hi
   b78c4:	4770      	bxhi	lr
   b78c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b78ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b78ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b78d2:	bf18      	it	ne
   b78d4:	4240      	negne	r0, r0
   b78d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b78da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b78de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b78e2:	bf18      	it	ne
   b78e4:	4249      	negne	r1, r1
   b78e6:	ea92 0f03 	teq	r2, r3
   b78ea:	d03f      	beq.n	b796c <__addsf3+0xd8>
   b78ec:	f1a2 0201 	sub.w	r2, r2, #1
   b78f0:	fa41 fc03 	asr.w	ip, r1, r3
   b78f4:	eb10 000c 	adds.w	r0, r0, ip
   b78f8:	f1c3 0320 	rsb	r3, r3, #32
   b78fc:	fa01 f103 	lsl.w	r1, r1, r3
   b7900:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7904:	d502      	bpl.n	b790c <__addsf3+0x78>
   b7906:	4249      	negs	r1, r1
   b7908:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b790c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b7910:	d313      	bcc.n	b793a <__addsf3+0xa6>
   b7912:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b7916:	d306      	bcc.n	b7926 <__addsf3+0x92>
   b7918:	0840      	lsrs	r0, r0, #1
   b791a:	ea4f 0131 	mov.w	r1, r1, rrx
   b791e:	f102 0201 	add.w	r2, r2, #1
   b7922:	2afe      	cmp	r2, #254	; 0xfe
   b7924:	d251      	bcs.n	b79ca <__addsf3+0x136>
   b7926:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b792a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b792e:	bf08      	it	eq
   b7930:	f020 0001 	biceq.w	r0, r0, #1
   b7934:	ea40 0003 	orr.w	r0, r0, r3
   b7938:	4770      	bx	lr
   b793a:	0049      	lsls	r1, r1, #1
   b793c:	eb40 0000 	adc.w	r0, r0, r0
   b7940:	3a01      	subs	r2, #1
   b7942:	bf28      	it	cs
   b7944:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b7948:	d2ed      	bcs.n	b7926 <__addsf3+0x92>
   b794a:	fab0 fc80 	clz	ip, r0
   b794e:	f1ac 0c08 	sub.w	ip, ip, #8
   b7952:	ebb2 020c 	subs.w	r2, r2, ip
   b7956:	fa00 f00c 	lsl.w	r0, r0, ip
   b795a:	bfaa      	itet	ge
   b795c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7960:	4252      	neglt	r2, r2
   b7962:	4318      	orrge	r0, r3
   b7964:	bfbc      	itt	lt
   b7966:	40d0      	lsrlt	r0, r2
   b7968:	4318      	orrlt	r0, r3
   b796a:	4770      	bx	lr
   b796c:	f092 0f00 	teq	r2, #0
   b7970:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7974:	bf06      	itte	eq
   b7976:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b797a:	3201      	addeq	r2, #1
   b797c:	3b01      	subne	r3, #1
   b797e:	e7b5      	b.n	b78ec <__addsf3+0x58>
   b7980:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7984:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b7988:	bf18      	it	ne
   b798a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b798e:	d021      	beq.n	b79d4 <__addsf3+0x140>
   b7990:	ea92 0f03 	teq	r2, r3
   b7994:	d004      	beq.n	b79a0 <__addsf3+0x10c>
   b7996:	f092 0f00 	teq	r2, #0
   b799a:	bf08      	it	eq
   b799c:	4608      	moveq	r0, r1
   b799e:	4770      	bx	lr
   b79a0:	ea90 0f01 	teq	r0, r1
   b79a4:	bf1c      	itt	ne
   b79a6:	2000      	movne	r0, #0
   b79a8:	4770      	bxne	lr
   b79aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b79ae:	d104      	bne.n	b79ba <__addsf3+0x126>
   b79b0:	0040      	lsls	r0, r0, #1
   b79b2:	bf28      	it	cs
   b79b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b79b8:	4770      	bx	lr
   b79ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b79be:	bf3c      	itt	cc
   b79c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b79c4:	4770      	bxcc	lr
   b79c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b79ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b79ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b79d2:	4770      	bx	lr
   b79d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b79d8:	bf16      	itet	ne
   b79da:	4608      	movne	r0, r1
   b79dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b79e0:	4601      	movne	r1, r0
   b79e2:	0242      	lsls	r2, r0, #9
   b79e4:	bf06      	itte	eq
   b79e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b79ea:	ea90 0f01 	teqeq	r0, r1
   b79ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b79f2:	4770      	bx	lr

000b79f4 <__aeabi_ui2f>:
   b79f4:	f04f 0300 	mov.w	r3, #0
   b79f8:	e004      	b.n	b7a04 <__aeabi_i2f+0x8>
   b79fa:	bf00      	nop

000b79fc <__aeabi_i2f>:
   b79fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b7a00:	bf48      	it	mi
   b7a02:	4240      	negmi	r0, r0
   b7a04:	ea5f 0c00 	movs.w	ip, r0
   b7a08:	bf08      	it	eq
   b7a0a:	4770      	bxeq	lr
   b7a0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7a10:	4601      	mov	r1, r0
   b7a12:	f04f 0000 	mov.w	r0, #0
   b7a16:	e01c      	b.n	b7a52 <__aeabi_l2f+0x2a>

000b7a18 <__aeabi_ul2f>:
   b7a18:	ea50 0201 	orrs.w	r2, r0, r1
   b7a1c:	bf08      	it	eq
   b7a1e:	4770      	bxeq	lr
   b7a20:	f04f 0300 	mov.w	r3, #0
   b7a24:	e00a      	b.n	b7a3c <__aeabi_l2f+0x14>
   b7a26:	bf00      	nop

000b7a28 <__aeabi_l2f>:
   b7a28:	ea50 0201 	orrs.w	r2, r0, r1
   b7a2c:	bf08      	it	eq
   b7a2e:	4770      	bxeq	lr
   b7a30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7a34:	d502      	bpl.n	b7a3c <__aeabi_l2f+0x14>
   b7a36:	4240      	negs	r0, r0
   b7a38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7a3c:	ea5f 0c01 	movs.w	ip, r1
   b7a40:	bf02      	ittt	eq
   b7a42:	4684      	moveq	ip, r0
   b7a44:	4601      	moveq	r1, r0
   b7a46:	2000      	moveq	r0, #0
   b7a48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b7a4c:	bf08      	it	eq
   b7a4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7a52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b7a56:	fabc f28c 	clz	r2, ip
   b7a5a:	3a08      	subs	r2, #8
   b7a5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7a60:	db10      	blt.n	b7a84 <__aeabi_l2f+0x5c>
   b7a62:	fa01 fc02 	lsl.w	ip, r1, r2
   b7a66:	4463      	add	r3, ip
   b7a68:	fa00 fc02 	lsl.w	ip, r0, r2
   b7a6c:	f1c2 0220 	rsb	r2, r2, #32
   b7a70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7a74:	fa20 f202 	lsr.w	r2, r0, r2
   b7a78:	eb43 0002 	adc.w	r0, r3, r2
   b7a7c:	bf08      	it	eq
   b7a7e:	f020 0001 	biceq.w	r0, r0, #1
   b7a82:	4770      	bx	lr
   b7a84:	f102 0220 	add.w	r2, r2, #32
   b7a88:	fa01 fc02 	lsl.w	ip, r1, r2
   b7a8c:	f1c2 0220 	rsb	r2, r2, #32
   b7a90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7a94:	fa21 f202 	lsr.w	r2, r1, r2
   b7a98:	eb43 0002 	adc.w	r0, r3, r2
   b7a9c:	bf08      	it	eq
   b7a9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7aa2:	4770      	bx	lr

000b7aa4 <__aeabi_ldivmod>:
   b7aa4:	b97b      	cbnz	r3, b7ac6 <__aeabi_ldivmod+0x22>
   b7aa6:	b972      	cbnz	r2, b7ac6 <__aeabi_ldivmod+0x22>
   b7aa8:	2900      	cmp	r1, #0
   b7aaa:	bfbe      	ittt	lt
   b7aac:	2000      	movlt	r0, #0
   b7aae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b7ab2:	e006      	blt.n	b7ac2 <__aeabi_ldivmod+0x1e>
   b7ab4:	bf08      	it	eq
   b7ab6:	2800      	cmpeq	r0, #0
   b7ab8:	bf1c      	itt	ne
   b7aba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b7abe:	f04f 30ff 	movne.w	r0, #4294967295
   b7ac2:	f000 b9a7 	b.w	b7e14 <__aeabi_idiv0>
   b7ac6:	f1ad 0c08 	sub.w	ip, sp, #8
   b7aca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7ace:	2900      	cmp	r1, #0
   b7ad0:	db09      	blt.n	b7ae6 <__aeabi_ldivmod+0x42>
   b7ad2:	2b00      	cmp	r3, #0
   b7ad4:	db1a      	blt.n	b7b0c <__aeabi_ldivmod+0x68>
   b7ad6:	f000 f835 	bl	b7b44 <__udivmoddi4>
   b7ada:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7ae2:	b004      	add	sp, #16
   b7ae4:	4770      	bx	lr
   b7ae6:	4240      	negs	r0, r0
   b7ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7aec:	2b00      	cmp	r3, #0
   b7aee:	db1b      	blt.n	b7b28 <__aeabi_ldivmod+0x84>
   b7af0:	f000 f828 	bl	b7b44 <__udivmoddi4>
   b7af4:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7afc:	b004      	add	sp, #16
   b7afe:	4240      	negs	r0, r0
   b7b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b04:	4252      	negs	r2, r2
   b7b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7b0a:	4770      	bx	lr
   b7b0c:	4252      	negs	r2, r2
   b7b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7b12:	f000 f817 	bl	b7b44 <__udivmoddi4>
   b7b16:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7b1e:	b004      	add	sp, #16
   b7b20:	4240      	negs	r0, r0
   b7b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b26:	4770      	bx	lr
   b7b28:	4252      	negs	r2, r2
   b7b2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7b2e:	f000 f809 	bl	b7b44 <__udivmoddi4>
   b7b32:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7b3a:	b004      	add	sp, #16
   b7b3c:	4252      	negs	r2, r2
   b7b3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7b42:	4770      	bx	lr

000b7b44 <__udivmoddi4>:
   b7b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7b48:	9d08      	ldr	r5, [sp, #32]
   b7b4a:	4604      	mov	r4, r0
   b7b4c:	468e      	mov	lr, r1
   b7b4e:	2b00      	cmp	r3, #0
   b7b50:	d14d      	bne.n	b7bee <__udivmoddi4+0xaa>
   b7b52:	428a      	cmp	r2, r1
   b7b54:	4694      	mov	ip, r2
   b7b56:	d969      	bls.n	b7c2c <__udivmoddi4+0xe8>
   b7b58:	fab2 f282 	clz	r2, r2
   b7b5c:	b152      	cbz	r2, b7b74 <__udivmoddi4+0x30>
   b7b5e:	fa01 f302 	lsl.w	r3, r1, r2
   b7b62:	f1c2 0120 	rsb	r1, r2, #32
   b7b66:	fa20 f101 	lsr.w	r1, r0, r1
   b7b6a:	fa0c fc02 	lsl.w	ip, ip, r2
   b7b6e:	ea41 0e03 	orr.w	lr, r1, r3
   b7b72:	4094      	lsls	r4, r2
   b7b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7b78:	0c21      	lsrs	r1, r4, #16
   b7b7a:	fbbe f6f8 	udiv	r6, lr, r8
   b7b7e:	fa1f f78c 	uxth.w	r7, ip
   b7b82:	fb08 e316 	mls	r3, r8, r6, lr
   b7b86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b7b8a:	fb06 f107 	mul.w	r1, r6, r7
   b7b8e:	4299      	cmp	r1, r3
   b7b90:	d90a      	bls.n	b7ba8 <__udivmoddi4+0x64>
   b7b92:	eb1c 0303 	adds.w	r3, ip, r3
   b7b96:	f106 30ff 	add.w	r0, r6, #4294967295
   b7b9a:	f080 811f 	bcs.w	b7ddc <__udivmoddi4+0x298>
   b7b9e:	4299      	cmp	r1, r3
   b7ba0:	f240 811c 	bls.w	b7ddc <__udivmoddi4+0x298>
   b7ba4:	3e02      	subs	r6, #2
   b7ba6:	4463      	add	r3, ip
   b7ba8:	1a5b      	subs	r3, r3, r1
   b7baa:	b2a4      	uxth	r4, r4
   b7bac:	fbb3 f0f8 	udiv	r0, r3, r8
   b7bb0:	fb08 3310 	mls	r3, r8, r0, r3
   b7bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7bb8:	fb00 f707 	mul.w	r7, r0, r7
   b7bbc:	42a7      	cmp	r7, r4
   b7bbe:	d90a      	bls.n	b7bd6 <__udivmoddi4+0x92>
   b7bc0:	eb1c 0404 	adds.w	r4, ip, r4
   b7bc4:	f100 33ff 	add.w	r3, r0, #4294967295
   b7bc8:	f080 810a 	bcs.w	b7de0 <__udivmoddi4+0x29c>
   b7bcc:	42a7      	cmp	r7, r4
   b7bce:	f240 8107 	bls.w	b7de0 <__udivmoddi4+0x29c>
   b7bd2:	4464      	add	r4, ip
   b7bd4:	3802      	subs	r0, #2
   b7bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b7bda:	1be4      	subs	r4, r4, r7
   b7bdc:	2600      	movs	r6, #0
   b7bde:	b11d      	cbz	r5, b7be8 <__udivmoddi4+0xa4>
   b7be0:	40d4      	lsrs	r4, r2
   b7be2:	2300      	movs	r3, #0
   b7be4:	e9c5 4300 	strd	r4, r3, [r5]
   b7be8:	4631      	mov	r1, r6
   b7bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7bee:	428b      	cmp	r3, r1
   b7bf0:	d909      	bls.n	b7c06 <__udivmoddi4+0xc2>
   b7bf2:	2d00      	cmp	r5, #0
   b7bf4:	f000 80ef 	beq.w	b7dd6 <__udivmoddi4+0x292>
   b7bf8:	2600      	movs	r6, #0
   b7bfa:	e9c5 0100 	strd	r0, r1, [r5]
   b7bfe:	4630      	mov	r0, r6
   b7c00:	4631      	mov	r1, r6
   b7c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7c06:	fab3 f683 	clz	r6, r3
   b7c0a:	2e00      	cmp	r6, #0
   b7c0c:	d14a      	bne.n	b7ca4 <__udivmoddi4+0x160>
   b7c0e:	428b      	cmp	r3, r1
   b7c10:	d302      	bcc.n	b7c18 <__udivmoddi4+0xd4>
   b7c12:	4282      	cmp	r2, r0
   b7c14:	f200 80f9 	bhi.w	b7e0a <__udivmoddi4+0x2c6>
   b7c18:	1a84      	subs	r4, r0, r2
   b7c1a:	eb61 0303 	sbc.w	r3, r1, r3
   b7c1e:	2001      	movs	r0, #1
   b7c20:	469e      	mov	lr, r3
   b7c22:	2d00      	cmp	r5, #0
   b7c24:	d0e0      	beq.n	b7be8 <__udivmoddi4+0xa4>
   b7c26:	e9c5 4e00 	strd	r4, lr, [r5]
   b7c2a:	e7dd      	b.n	b7be8 <__udivmoddi4+0xa4>
   b7c2c:	b902      	cbnz	r2, b7c30 <__udivmoddi4+0xec>
   b7c2e:	deff      	udf	#255	; 0xff
   b7c30:	fab2 f282 	clz	r2, r2
   b7c34:	2a00      	cmp	r2, #0
   b7c36:	f040 8092 	bne.w	b7d5e <__udivmoddi4+0x21a>
   b7c3a:	eba1 010c 	sub.w	r1, r1, ip
   b7c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7c42:	fa1f fe8c 	uxth.w	lr, ip
   b7c46:	2601      	movs	r6, #1
   b7c48:	0c20      	lsrs	r0, r4, #16
   b7c4a:	fbb1 f3f7 	udiv	r3, r1, r7
   b7c4e:	fb07 1113 	mls	r1, r7, r3, r1
   b7c52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7c56:	fb0e f003 	mul.w	r0, lr, r3
   b7c5a:	4288      	cmp	r0, r1
   b7c5c:	d908      	bls.n	b7c70 <__udivmoddi4+0x12c>
   b7c5e:	eb1c 0101 	adds.w	r1, ip, r1
   b7c62:	f103 38ff 	add.w	r8, r3, #4294967295
   b7c66:	d202      	bcs.n	b7c6e <__udivmoddi4+0x12a>
   b7c68:	4288      	cmp	r0, r1
   b7c6a:	f200 80cb 	bhi.w	b7e04 <__udivmoddi4+0x2c0>
   b7c6e:	4643      	mov	r3, r8
   b7c70:	1a09      	subs	r1, r1, r0
   b7c72:	b2a4      	uxth	r4, r4
   b7c74:	fbb1 f0f7 	udiv	r0, r1, r7
   b7c78:	fb07 1110 	mls	r1, r7, r0, r1
   b7c7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7c80:	fb0e fe00 	mul.w	lr, lr, r0
   b7c84:	45a6      	cmp	lr, r4
   b7c86:	d908      	bls.n	b7c9a <__udivmoddi4+0x156>
   b7c88:	eb1c 0404 	adds.w	r4, ip, r4
   b7c8c:	f100 31ff 	add.w	r1, r0, #4294967295
   b7c90:	d202      	bcs.n	b7c98 <__udivmoddi4+0x154>
   b7c92:	45a6      	cmp	lr, r4
   b7c94:	f200 80bb 	bhi.w	b7e0e <__udivmoddi4+0x2ca>
   b7c98:	4608      	mov	r0, r1
   b7c9a:	eba4 040e 	sub.w	r4, r4, lr
   b7c9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7ca2:	e79c      	b.n	b7bde <__udivmoddi4+0x9a>
   b7ca4:	f1c6 0720 	rsb	r7, r6, #32
   b7ca8:	40b3      	lsls	r3, r6
   b7caa:	fa22 fc07 	lsr.w	ip, r2, r7
   b7cae:	ea4c 0c03 	orr.w	ip, ip, r3
   b7cb2:	fa20 f407 	lsr.w	r4, r0, r7
   b7cb6:	fa01 f306 	lsl.w	r3, r1, r6
   b7cba:	431c      	orrs	r4, r3
   b7cbc:	40f9      	lsrs	r1, r7
   b7cbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7cc2:	fa00 f306 	lsl.w	r3, r0, r6
   b7cc6:	fbb1 f8f9 	udiv	r8, r1, r9
   b7cca:	0c20      	lsrs	r0, r4, #16
   b7ccc:	fa1f fe8c 	uxth.w	lr, ip
   b7cd0:	fb09 1118 	mls	r1, r9, r8, r1
   b7cd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7cd8:	fb08 f00e 	mul.w	r0, r8, lr
   b7cdc:	4288      	cmp	r0, r1
   b7cde:	fa02 f206 	lsl.w	r2, r2, r6
   b7ce2:	d90b      	bls.n	b7cfc <__udivmoddi4+0x1b8>
   b7ce4:	eb1c 0101 	adds.w	r1, ip, r1
   b7ce8:	f108 3aff 	add.w	sl, r8, #4294967295
   b7cec:	f080 8088 	bcs.w	b7e00 <__udivmoddi4+0x2bc>
   b7cf0:	4288      	cmp	r0, r1
   b7cf2:	f240 8085 	bls.w	b7e00 <__udivmoddi4+0x2bc>
   b7cf6:	f1a8 0802 	sub.w	r8, r8, #2
   b7cfa:	4461      	add	r1, ip
   b7cfc:	1a09      	subs	r1, r1, r0
   b7cfe:	b2a4      	uxth	r4, r4
   b7d00:	fbb1 f0f9 	udiv	r0, r1, r9
   b7d04:	fb09 1110 	mls	r1, r9, r0, r1
   b7d08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7d0c:	fb00 fe0e 	mul.w	lr, r0, lr
   b7d10:	458e      	cmp	lr, r1
   b7d12:	d908      	bls.n	b7d26 <__udivmoddi4+0x1e2>
   b7d14:	eb1c 0101 	adds.w	r1, ip, r1
   b7d18:	f100 34ff 	add.w	r4, r0, #4294967295
   b7d1c:	d26c      	bcs.n	b7df8 <__udivmoddi4+0x2b4>
   b7d1e:	458e      	cmp	lr, r1
   b7d20:	d96a      	bls.n	b7df8 <__udivmoddi4+0x2b4>
   b7d22:	3802      	subs	r0, #2
   b7d24:	4461      	add	r1, ip
   b7d26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b7d2a:	fba0 9402 	umull	r9, r4, r0, r2
   b7d2e:	eba1 010e 	sub.w	r1, r1, lr
   b7d32:	42a1      	cmp	r1, r4
   b7d34:	46c8      	mov	r8, r9
   b7d36:	46a6      	mov	lr, r4
   b7d38:	d356      	bcc.n	b7de8 <__udivmoddi4+0x2a4>
   b7d3a:	d053      	beq.n	b7de4 <__udivmoddi4+0x2a0>
   b7d3c:	b15d      	cbz	r5, b7d56 <__udivmoddi4+0x212>
   b7d3e:	ebb3 0208 	subs.w	r2, r3, r8
   b7d42:	eb61 010e 	sbc.w	r1, r1, lr
   b7d46:	fa01 f707 	lsl.w	r7, r1, r7
   b7d4a:	fa22 f306 	lsr.w	r3, r2, r6
   b7d4e:	40f1      	lsrs	r1, r6
   b7d50:	431f      	orrs	r7, r3
   b7d52:	e9c5 7100 	strd	r7, r1, [r5]
   b7d56:	2600      	movs	r6, #0
   b7d58:	4631      	mov	r1, r6
   b7d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7d5e:	f1c2 0320 	rsb	r3, r2, #32
   b7d62:	40d8      	lsrs	r0, r3
   b7d64:	fa0c fc02 	lsl.w	ip, ip, r2
   b7d68:	fa21 f303 	lsr.w	r3, r1, r3
   b7d6c:	4091      	lsls	r1, r2
   b7d6e:	4301      	orrs	r1, r0
   b7d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7d74:	fa1f fe8c 	uxth.w	lr, ip
   b7d78:	fbb3 f0f7 	udiv	r0, r3, r7
   b7d7c:	fb07 3610 	mls	r6, r7, r0, r3
   b7d80:	0c0b      	lsrs	r3, r1, #16
   b7d82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b7d86:	fb00 f60e 	mul.w	r6, r0, lr
   b7d8a:	429e      	cmp	r6, r3
   b7d8c:	fa04 f402 	lsl.w	r4, r4, r2
   b7d90:	d908      	bls.n	b7da4 <__udivmoddi4+0x260>
   b7d92:	eb1c 0303 	adds.w	r3, ip, r3
   b7d96:	f100 38ff 	add.w	r8, r0, #4294967295
   b7d9a:	d22f      	bcs.n	b7dfc <__udivmoddi4+0x2b8>
   b7d9c:	429e      	cmp	r6, r3
   b7d9e:	d92d      	bls.n	b7dfc <__udivmoddi4+0x2b8>
   b7da0:	3802      	subs	r0, #2
   b7da2:	4463      	add	r3, ip
   b7da4:	1b9b      	subs	r3, r3, r6
   b7da6:	b289      	uxth	r1, r1
   b7da8:	fbb3 f6f7 	udiv	r6, r3, r7
   b7dac:	fb07 3316 	mls	r3, r7, r6, r3
   b7db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b7db4:	fb06 f30e 	mul.w	r3, r6, lr
   b7db8:	428b      	cmp	r3, r1
   b7dba:	d908      	bls.n	b7dce <__udivmoddi4+0x28a>
   b7dbc:	eb1c 0101 	adds.w	r1, ip, r1
   b7dc0:	f106 38ff 	add.w	r8, r6, #4294967295
   b7dc4:	d216      	bcs.n	b7df4 <__udivmoddi4+0x2b0>
   b7dc6:	428b      	cmp	r3, r1
   b7dc8:	d914      	bls.n	b7df4 <__udivmoddi4+0x2b0>
   b7dca:	3e02      	subs	r6, #2
   b7dcc:	4461      	add	r1, ip
   b7dce:	1ac9      	subs	r1, r1, r3
   b7dd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b7dd4:	e738      	b.n	b7c48 <__udivmoddi4+0x104>
   b7dd6:	462e      	mov	r6, r5
   b7dd8:	4628      	mov	r0, r5
   b7dda:	e705      	b.n	b7be8 <__udivmoddi4+0xa4>
   b7ddc:	4606      	mov	r6, r0
   b7dde:	e6e3      	b.n	b7ba8 <__udivmoddi4+0x64>
   b7de0:	4618      	mov	r0, r3
   b7de2:	e6f8      	b.n	b7bd6 <__udivmoddi4+0x92>
   b7de4:	454b      	cmp	r3, r9
   b7de6:	d2a9      	bcs.n	b7d3c <__udivmoddi4+0x1f8>
   b7de8:	ebb9 0802 	subs.w	r8, r9, r2
   b7dec:	eb64 0e0c 	sbc.w	lr, r4, ip
   b7df0:	3801      	subs	r0, #1
   b7df2:	e7a3      	b.n	b7d3c <__udivmoddi4+0x1f8>
   b7df4:	4646      	mov	r6, r8
   b7df6:	e7ea      	b.n	b7dce <__udivmoddi4+0x28a>
   b7df8:	4620      	mov	r0, r4
   b7dfa:	e794      	b.n	b7d26 <__udivmoddi4+0x1e2>
   b7dfc:	4640      	mov	r0, r8
   b7dfe:	e7d1      	b.n	b7da4 <__udivmoddi4+0x260>
   b7e00:	46d0      	mov	r8, sl
   b7e02:	e77b      	b.n	b7cfc <__udivmoddi4+0x1b8>
   b7e04:	3b02      	subs	r3, #2
   b7e06:	4461      	add	r1, ip
   b7e08:	e732      	b.n	b7c70 <__udivmoddi4+0x12c>
   b7e0a:	4630      	mov	r0, r6
   b7e0c:	e709      	b.n	b7c22 <__udivmoddi4+0xde>
   b7e0e:	4464      	add	r4, ip
   b7e10:	3802      	subs	r0, #2
   b7e12:	e742      	b.n	b7c9a <__udivmoddi4+0x156>

000b7e14 <__aeabi_idiv0>:
   b7e14:	4770      	bx	lr
   b7e16:	bf00      	nop

000b7e18 <asctime_r>:
   b7e18:	b510      	push	{r4, lr}
   b7e1a:	460c      	mov	r4, r1
   b7e1c:	6941      	ldr	r1, [r0, #20]
   b7e1e:	6903      	ldr	r3, [r0, #16]
   b7e20:	6982      	ldr	r2, [r0, #24]
   b7e22:	b086      	sub	sp, #24
   b7e24:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b7e28:	9104      	str	r1, [sp, #16]
   b7e2a:	6801      	ldr	r1, [r0, #0]
   b7e2c:	9103      	str	r1, [sp, #12]
   b7e2e:	6841      	ldr	r1, [r0, #4]
   b7e30:	9102      	str	r1, [sp, #8]
   b7e32:	6881      	ldr	r1, [r0, #8]
   b7e34:	9101      	str	r1, [sp, #4]
   b7e36:	68c1      	ldr	r1, [r0, #12]
   b7e38:	9100      	str	r1, [sp, #0]
   b7e3a:	4907      	ldr	r1, [pc, #28]	; (b7e58 <asctime_r+0x40>)
   b7e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7e40:	440b      	add	r3, r1
   b7e42:	4906      	ldr	r1, [pc, #24]	; (b7e5c <asctime_r+0x44>)
   b7e44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7e48:	440a      	add	r2, r1
   b7e4a:	4620      	mov	r0, r4
   b7e4c:	4904      	ldr	r1, [pc, #16]	; (b7e60 <asctime_r+0x48>)
   b7e4e:	f7fd fd35 	bl	b58bc <siprintf>
   b7e52:	4620      	mov	r0, r4
   b7e54:	b006      	add	sp, #24
   b7e56:	bd10      	pop	{r4, pc}
   b7e58:	000b843e 	.word	0x000b843e
   b7e5c:	000b8429 	.word	0x000b8429
   b7e60:	000b8409 	.word	0x000b8409

000b7e64 <atexit>:
   b7e64:	2300      	movs	r3, #0
   b7e66:	4601      	mov	r1, r0
   b7e68:	461a      	mov	r2, r3
   b7e6a:	4618      	mov	r0, r3
   b7e6c:	f000 b896 	b.w	b7f9c <__register_exitproc>

000b7e70 <isprint>:
   b7e70:	4b02      	ldr	r3, [pc, #8]	; (b7e7c <isprint+0xc>)
   b7e72:	4418      	add	r0, r3
   b7e74:	7840      	ldrb	r0, [r0, #1]
   b7e76:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7e7a:	4770      	bx	lr
   b7e7c:	000b84f6 	.word	0x000b84f6

000b7e80 <memcpy>:
   b7e80:	440a      	add	r2, r1
   b7e82:	4291      	cmp	r1, r2
   b7e84:	f100 33ff 	add.w	r3, r0, #4294967295
   b7e88:	d100      	bne.n	b7e8c <memcpy+0xc>
   b7e8a:	4770      	bx	lr
   b7e8c:	b510      	push	{r4, lr}
   b7e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7e92:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7e96:	4291      	cmp	r1, r2
   b7e98:	d1f9      	bne.n	b7e8e <memcpy+0xe>
   b7e9a:	bd10      	pop	{r4, pc}

000b7e9c <memset>:
   b7e9c:	4402      	add	r2, r0
   b7e9e:	4603      	mov	r3, r0
   b7ea0:	4293      	cmp	r3, r2
   b7ea2:	d100      	bne.n	b7ea6 <memset+0xa>
   b7ea4:	4770      	bx	lr
   b7ea6:	f803 1b01 	strb.w	r1, [r3], #1
   b7eaa:	e7f9      	b.n	b7ea0 <memset+0x4>

000b7eac <srand>:
   b7eac:	b538      	push	{r3, r4, r5, lr}
   b7eae:	4b10      	ldr	r3, [pc, #64]	; (b7ef0 <srand+0x44>)
   b7eb0:	681d      	ldr	r5, [r3, #0]
   b7eb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7eb4:	4604      	mov	r4, r0
   b7eb6:	b9b3      	cbnz	r3, b7ee6 <srand+0x3a>
   b7eb8:	2018      	movs	r0, #24
   b7eba:	f7fd fce7 	bl	b588c <malloc>
   b7ebe:	4602      	mov	r2, r0
   b7ec0:	63a8      	str	r0, [r5, #56]	; 0x38
   b7ec2:	b920      	cbnz	r0, b7ece <srand+0x22>
   b7ec4:	4b0b      	ldr	r3, [pc, #44]	; (b7ef4 <srand+0x48>)
   b7ec6:	480c      	ldr	r0, [pc, #48]	; (b7ef8 <srand+0x4c>)
   b7ec8:	2142      	movs	r1, #66	; 0x42
   b7eca:	f7fd fd1f 	bl	b590c <__assert_func>
   b7ece:	490b      	ldr	r1, [pc, #44]	; (b7efc <srand+0x50>)
   b7ed0:	4b0b      	ldr	r3, [pc, #44]	; (b7f00 <srand+0x54>)
   b7ed2:	e9c0 1300 	strd	r1, r3, [r0]
   b7ed6:	4b0b      	ldr	r3, [pc, #44]	; (b7f04 <srand+0x58>)
   b7ed8:	6083      	str	r3, [r0, #8]
   b7eda:	230b      	movs	r3, #11
   b7edc:	8183      	strh	r3, [r0, #12]
   b7ede:	2100      	movs	r1, #0
   b7ee0:	2001      	movs	r0, #1
   b7ee2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7ee6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ee8:	2200      	movs	r2, #0
   b7eea:	611c      	str	r4, [r3, #16]
   b7eec:	615a      	str	r2, [r3, #20]
   b7eee:	bd38      	pop	{r3, r4, r5, pc}
   b7ef0:	2003e5a8 	.word	0x2003e5a8
   b7ef4:	000b8462 	.word	0x000b8462
   b7ef8:	000b8479 	.word	0x000b8479
   b7efc:	abcd330e 	.word	0xabcd330e
   b7f00:	e66d1234 	.word	0xe66d1234
   b7f04:	0005deec 	.word	0x0005deec

000b7f08 <strcmp>:
   b7f08:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7f10:	2a01      	cmp	r2, #1
   b7f12:	bf28      	it	cs
   b7f14:	429a      	cmpcs	r2, r3
   b7f16:	d0f7      	beq.n	b7f08 <strcmp>
   b7f18:	1ad0      	subs	r0, r2, r3
   b7f1a:	4770      	bx	lr

000b7f1c <strcpy>:
   b7f1c:	4603      	mov	r3, r0
   b7f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7f22:	f803 2b01 	strb.w	r2, [r3], #1
   b7f26:	2a00      	cmp	r2, #0
   b7f28:	d1f9      	bne.n	b7f1e <strcpy+0x2>
   b7f2a:	4770      	bx	lr

000b7f2c <strdup>:
   b7f2c:	4b02      	ldr	r3, [pc, #8]	; (b7f38 <strdup+0xc>)
   b7f2e:	4601      	mov	r1, r0
   b7f30:	6818      	ldr	r0, [r3, #0]
   b7f32:	f000 b803 	b.w	b7f3c <_strdup_r>
   b7f36:	bf00      	nop
   b7f38:	2003e5a8 	.word	0x2003e5a8

000b7f3c <_strdup_r>:
   b7f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7f3e:	4604      	mov	r4, r0
   b7f40:	4608      	mov	r0, r1
   b7f42:	460d      	mov	r5, r1
   b7f44:	f000 f80f 	bl	b7f66 <strlen>
   b7f48:	1c42      	adds	r2, r0, #1
   b7f4a:	4611      	mov	r1, r2
   b7f4c:	4620      	mov	r0, r4
   b7f4e:	9201      	str	r2, [sp, #4]
   b7f50:	f7fd fcd4 	bl	b58fc <_malloc_r>
   b7f54:	4604      	mov	r4, r0
   b7f56:	b118      	cbz	r0, b7f60 <_strdup_r+0x24>
   b7f58:	9a01      	ldr	r2, [sp, #4]
   b7f5a:	4629      	mov	r1, r5
   b7f5c:	f7ff ff90 	bl	b7e80 <memcpy>
   b7f60:	4620      	mov	r0, r4
   b7f62:	b003      	add	sp, #12
   b7f64:	bd30      	pop	{r4, r5, pc}

000b7f66 <strlen>:
   b7f66:	4603      	mov	r3, r0
   b7f68:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7f6c:	2a00      	cmp	r2, #0
   b7f6e:	d1fb      	bne.n	b7f68 <strlen+0x2>
   b7f70:	1a18      	subs	r0, r3, r0
   b7f72:	3801      	subs	r0, #1
   b7f74:	4770      	bx	lr

000b7f76 <strncpy>:
   b7f76:	b510      	push	{r4, lr}
   b7f78:	3901      	subs	r1, #1
   b7f7a:	4603      	mov	r3, r0
   b7f7c:	b132      	cbz	r2, b7f8c <strncpy+0x16>
   b7f7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7f82:	f803 4b01 	strb.w	r4, [r3], #1
   b7f86:	3a01      	subs	r2, #1
   b7f88:	2c00      	cmp	r4, #0
   b7f8a:	d1f7      	bne.n	b7f7c <strncpy+0x6>
   b7f8c:	441a      	add	r2, r3
   b7f8e:	2100      	movs	r1, #0
   b7f90:	4293      	cmp	r3, r2
   b7f92:	d100      	bne.n	b7f96 <strncpy+0x20>
   b7f94:	bd10      	pop	{r4, pc}
   b7f96:	f803 1b01 	strb.w	r1, [r3], #1
   b7f9a:	e7f9      	b.n	b7f90 <strncpy+0x1a>

000b7f9c <__register_exitproc>:
   b7f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7fa0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b805c <__register_exitproc+0xc0>
   b7fa4:	4606      	mov	r6, r0
   b7fa6:	f8d8 0000 	ldr.w	r0, [r8]
   b7faa:	461f      	mov	r7, r3
   b7fac:	460d      	mov	r5, r1
   b7fae:	4691      	mov	r9, r2
   b7fb0:	f000 f856 	bl	b8060 <__retarget_lock_acquire_recursive>
   b7fb4:	4b25      	ldr	r3, [pc, #148]	; (b804c <__register_exitproc+0xb0>)
   b7fb6:	681c      	ldr	r4, [r3, #0]
   b7fb8:	b934      	cbnz	r4, b7fc8 <__register_exitproc+0x2c>
   b7fba:	4c25      	ldr	r4, [pc, #148]	; (b8050 <__register_exitproc+0xb4>)
   b7fbc:	601c      	str	r4, [r3, #0]
   b7fbe:	4b25      	ldr	r3, [pc, #148]	; (b8054 <__register_exitproc+0xb8>)
   b7fc0:	b113      	cbz	r3, b7fc8 <__register_exitproc+0x2c>
   b7fc2:	681b      	ldr	r3, [r3, #0]
   b7fc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7fc8:	6863      	ldr	r3, [r4, #4]
   b7fca:	2b1f      	cmp	r3, #31
   b7fcc:	dd07      	ble.n	b7fde <__register_exitproc+0x42>
   b7fce:	f8d8 0000 	ldr.w	r0, [r8]
   b7fd2:	f000 f847 	bl	b8064 <__retarget_lock_release_recursive>
   b7fd6:	f04f 30ff 	mov.w	r0, #4294967295
   b7fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7fde:	b34e      	cbz	r6, b8034 <__register_exitproc+0x98>
   b7fe0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7fe4:	b988      	cbnz	r0, b800a <__register_exitproc+0x6e>
   b7fe6:	4b1c      	ldr	r3, [pc, #112]	; (b8058 <__register_exitproc+0xbc>)
   b7fe8:	b923      	cbnz	r3, b7ff4 <__register_exitproc+0x58>
   b7fea:	f8d8 0000 	ldr.w	r0, [r8]
   b7fee:	f000 f838 	bl	b8062 <__retarget_lock_release>
   b7ff2:	e7f0      	b.n	b7fd6 <__register_exitproc+0x3a>
   b7ff4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7ff8:	f7fd fc48 	bl	b588c <malloc>
   b7ffc:	2800      	cmp	r0, #0
   b7ffe:	d0f4      	beq.n	b7fea <__register_exitproc+0x4e>
   b8000:	2300      	movs	r3, #0
   b8002:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8006:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b800a:	6863      	ldr	r3, [r4, #4]
   b800c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8010:	2201      	movs	r2, #1
   b8012:	409a      	lsls	r2, r3
   b8014:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8018:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b801c:	4313      	orrs	r3, r2
   b801e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8022:	2e02      	cmp	r6, #2
   b8024:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8028:	bf02      	ittt	eq
   b802a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b802e:	4313      	orreq	r3, r2
   b8030:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8034:	6863      	ldr	r3, [r4, #4]
   b8036:	f8d8 0000 	ldr.w	r0, [r8]
   b803a:	1c5a      	adds	r2, r3, #1
   b803c:	3302      	adds	r3, #2
   b803e:	6062      	str	r2, [r4, #4]
   b8040:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8044:	f000 f80e 	bl	b8064 <__retarget_lock_release_recursive>
   b8048:	2000      	movs	r0, #0
   b804a:	e7c6      	b.n	b7fda <__register_exitproc+0x3e>
   b804c:	2003e7e8 	.word	0x2003e7e8
   b8050:	2003e75c 	.word	0x2003e75c
   b8054:	00000000 	.word	0x00000000
   b8058:	000b588d 	.word	0x000b588d
   b805c:	2003e60c 	.word	0x2003e60c

000b8060 <__retarget_lock_acquire_recursive>:
   b8060:	4770      	bx	lr

000b8062 <__retarget_lock_release>:
   b8062:	4770      	bx	lr

000b8064 <__retarget_lock_release_recursive>:
   b8064:	4770      	bx	lr

000b8066 <link_code_end>:
	...

000b8068 <dynalib_user>:
   b8068:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8078:	0000 0000 6144 6574 6954 656d 4200 3148     ....DateTime.BH1
   b8088:	3537 0030 694c 6867 2d74 756c 0078 4353     750.Light-lux.SC
   b8098:	3344 0030 4f43 2d32 7070 006d 6554 706d     D30.CO2-ppm.Temp
   b80a8:	432d 5200 2d48 0025 4d50 4153 3030 4933     -C.RH-%.PMSA003I
   b80b8:	5300 6474 505f 314d 302e 5300 6474 505f     .Std_PM1.0.Std_P
   b80c8:	324d 352e 5300 6474 505f 314d 0030 6e45     M2.5.Std_PM10.En
   b80d8:	5f76 4d50 2e31 0030 6e45 5f76 4d50 2e32     v_PM1.0.Env_PM2.
   b80e8:	0035 6e45 5f76 4d50 3031 7100 6977 6369     5.Env_PM10.qwiic
   b80f8:	4100 4344 762d 6c61 6400 0042 4556 4c4d     .ADC-val.dB.VEML
   b8108:	3036 3037 5500 2d56 766c 006c 4d42 3245     6070.UV-lvl.BME2
   b8118:	3038 5000 6d2d 6162 0072 6573 736e 726f     80.P-mbar.sensor
   b8128:	645f 7461 0061 6843 6365 206b 6f63 6e6e     _data.Check conn
   b8138:	6365 6974 6e6f 2e73 4e20 206f 6c73 7661     ections. No slav
   b8148:	2065 7461 6174 6863 6465 002e 7254 6979     e attached..Tryi
   b8158:	676e 7420 206f 6f63 6e6e 6365 2074 4842     ng to connect BH
   b8168:	3731 3035 4c20 7875 5320 6e65 6f73 0072     1750 Lux Sensor.
   b8178:	7254 6979 676e 7420 206f 6f63 6e6e 6365     Trying to connec
   b8188:	2074 4d42 3245 3038 5020 4854 5320 6e65     t BME280 PTH Sen
   b8198:	6f73 0072 7254 6979 676e 7420 206f 6f63     sor.Trying to co
   b81a8:	6e6e 6365 2074 4353 3344 2030 4f43 2032     nnect SCD30 CO2 
   b81b8:	6553 736e 726f 5a00 6f69 5120 6977 6369     Sensor.Zio Qwiic
   b81c8:	4c20 756f 6e64 7365 2073 6553 736e 726f      Loudness Sensor
   b81d8:	4d20 7361 6574 2072 7741 6b61 0065 6564      Master Awake.de
   b81e8:	6166 6c75 2074 4d00 4253 4c00 4253 3c00     fault .MSB.LSB.<
   b81f8:	5053 5349 7465 6974 676e 2073 6564 6166     SPISettings defa
   b8208:	6c75 3e74 3c00 5053 5349 7465 6974 676e     ult>.<SPISetting
   b8218:	2073 7325 7525 2520 2073 4f4d 4544 7525     s %s%u %s MODE%u
   b8228:	003e 0000                                   >...

000b822c <_ZTVN8particle11SPISettingsE>:
	...
   b8234:	4729 000b 46fb 000b 46fd 000b               )G...F...F..

000b8240 <_ZTVN5spark13EthernetClassE>:
	...
   b8248:	59ab 000b 59a1 000b 5997 000b 598d 000b     .Y...Y...Y...Y..
   b8258:	5981 000b 5975 000b 6b21 000b 6b29 000b     .Y..uY..!k..)k..
   b8268:	5969 000b 5961 000b 5957 000b 594d 000b     iY..aY..WY..MY..
   b8278:	6b59 000b                                   Yk..

000b827c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b827c:	0800 1810 2820 3830 7061 0070 005a 2b25     .... (08app.Z.%+
   b828c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   b829c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   b82ac:	6974 656d 0000 0000                         time....

000b82b4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b82bc:	616d 000b 6173 000b 61b1 000b 6181 000b     ma..sa...a...a..
   b82cc:	616f 000b                                   oa..

000b82d0 <_ZTV9IPAddress>:
	...
   b82d8:	66ad 000b 669d 000b 669f 000b               .f...f...f..

000b82e4 <_ZTV9USBSerial>:
	...
   b82ec:	6793 000b 67fb 000b 67d1 000b 5c8d 000b     .g...g...g...\..
   b82fc:	67c3 000b 6795 000b 67a5 000b 67f5 000b     .g...g...g...g..
   b830c:	67b5 000b 678d 000b                         .g...g..

000b8314 <_ZTV11USARTSerial>:
	...
   b831c:	6895 000b 6901 000b 68d9 000b 5c8d 000b     .h...i...h...\..
   b832c:	68a9 000b 68c5 000b 68b7 000b 68d3 000b     .h...h...h...h..
   b833c:	6897 000b 689b 000b                         .h...h..

000b8344 <_ZTV7TwoWire>:
	...
   b834c:	6961 000b 69ab 000b 6983 000b 6963 000b     ai...i...i..ci..
   b835c:	698b 000b 6993 000b 699b 000b 69a3 000b     .i...i...i...i..

000b836c <_ZTVN5spark9WiFiClassE>:
	...
   b8374:	6ac3 000b 6ab9 000b 6aaf 000b 6a65 000b     .j...j...j..ej..
   b8384:	6aa3 000b 6a97 000b 6b21 000b 6b29 000b     .j...j..!k..)k..
   b8394:	6a8b 000b 6a83 000b 6a79 000b 6a6f 000b     .j...j..yj..oj..
   b83a4:	6b59 000b                                   Yk..

000b83a8 <_ZTVN5spark12NetworkClassE>:
	...
   b83b0:	6ae1 000b 6aeb 000b 6af5 000b 6aff 000b     .j...j...j...j..
   b83c0:	6b09 000b 6b15 000b 6b21 000b 6b29 000b     .k...k..!k..)k..
   b83d0:	6b31 000b 6b3d 000b 6b45 000b 6b4f 000b     1k..=k..Ek..Ok..
   b83e0:	6b59 000b 6425 2500 0067 2575 3430 0078     Yk..%d.%g.u%04x.

000b83f0 <_ZTVN5spark16JSONBufferWriterE>:
	...
   b83f8:	6c45 000b 6c47 000b 6c55 000b 6c7b 000b     El..Gl..Ul..{l..

000b8408 <_ZSt7nothrow>:
   b8408:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b8418:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b8429 <day_name.1>:
   b8429:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b8439:	6972 6153                                    riSat

000b843e <mon_name.0>:
   b843e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b844e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b845e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b846e:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b847e:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b848e:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b849e:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b84ae:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b84be:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b84ce:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b84de:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b84ee:	722f 6e61 2e64 0063                         /rand.c.

000b84f6 <_ctype_>:
   b84f6:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8506:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8516:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8526:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8536:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8546:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8556:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8566:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8576:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b85f7 <link_const_variable_data_end>:
	...

000b85f8 <link_constructors_location>:
   b85f8:	000b4631 	.word	0x000b4631
   b85fc:	000b59b5 	.word	0x000b59b5
   b8600:	000b5b2d 	.word	0x000b5b2d
   b8604:	000b5c7d 	.word	0x000b5c7d
   b8608:	000b5db5 	.word	0x000b5db5
   b860c:	000b600d 	.word	0x000b600d
   b8610:	000b6029 	.word	0x000b6029
   b8614:	000b6acd 	.word	0x000b6acd
   b8618:	000b6c31 	.word	0x000b6c31

000b861c <link_constructors_end>:
   b861c:	00000000 	.word	0x00000000
