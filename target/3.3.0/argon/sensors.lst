
d:/JSN/Desktop/repos/c53-iot/sensors/target/3.3.0/argon/sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ff0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8010  000b8010  00008010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b8034  000b8034  00008034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b803c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5a0  000b8040  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e0  2003e610  2003e610  0002e610  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b80b0  000b80b0  000280b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b80d8  000b80d8  000280d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001348e5  00000000  00000000  000280dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015f2e  00000000  00000000  0015c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003a6f3  00000000  00000000  001728ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002d70  00000000  00000000  001acfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a128  00000000  00000000  001afd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fdaf  00000000  00000000  001b9e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000494c5  00000000  00000000  001f9c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013374f  00000000  00000000  002430ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008214  00000000  00000000  00376840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fc25 	bl	b7880 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fc2d 	bl	b789c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5a0 	.word	0x2003e5a0
   b404c:	000b8040 	.word	0x000b8040
   b4050:	2003e610 	.word	0x2003e610
   b4054:	2003e610 	.word	0x2003e610
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 ffd7 	bl	b6014 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7fe8 	.word	0x000b7fe8
   b4080:	000b800c 	.word	0x000b800c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 baa6 	b.w	b45d4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa11 	bl	b44b0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bf77 	b.w	b5f84 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bbc5 	b.w	b5824 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bbc3 	b.w	b5824 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bbc9 	b.w	b5834 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b40b2:	6880      	ldr	r0, [r0, #8]
   b40b4:	6803      	ldr	r3, [r0, #0]
   b40b6:	68db      	ldr	r3, [r3, #12]
   b40b8:	4718      	bx	r3

000b40ba <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b40ba:	4770      	bx	lr

000b40bc <_ZN5spark16JSONStreamWriterD0Ev>:
   b40bc:	b510      	push	{r4, lr}
   b40be:	210c      	movs	r1, #12
   b40c0:	4604      	mov	r4, r0
   b40c2:	f7ff ffec 	bl	b409e <_ZdlPvj>
   b40c6:	4620      	mov	r0, r4
   b40c8:	bd10      	pop	{r4, pc}

000b40ca <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b40ca:	b513      	push	{r0, r1, r4, lr}
   b40cc:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b40ce:	4608      	mov	r0, r1
   b40d0:	9101      	str	r1, [sp, #4]
   b40d2:	f003 fc2b 	bl	b792c <strlen>
   b40d6:	9901      	ldr	r1, [sp, #4]
   b40d8:	4602      	mov	r2, r0
   b40da:	4620      	mov	r0, r4
}
   b40dc:	b002      	add	sp, #8
   b40de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b40e2:	f002 bb73 	b.w	b67cc <_ZN5spark10JSONWriter4nameEPKcj>
	...

000b40e8 <_Z13qwiicGetValuev>:
	return;
}


void qwiicGetValue()
{
   b40e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Wire.beginTransmission(qwiicAddress);
   b40ec:	f002 fc60 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b40f0:	2130      	movs	r1, #48	; 0x30
   b40f2:	f002 f97f 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(COMMAND_GET_VALUE); // command for status
   b40f6:	f002 fc5b 	bl	b69b0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40fa:	6803      	ldr	r3, [r0, #0]
	{ // slave may send less than requested
		uint8_t ADC_VALUE_L = Wire.read();
		uint8_t ADC_VALUE_H = Wire.read();
		ADC_VALUE=ADC_VALUE_H;
		ADC_VALUE<<=8;
		ADC_VALUE|=ADC_VALUE_L;
   b40fc:	f8df 908c 	ldr.w	r9, [pc, #140]	; b418c <_Z13qwiicGetValuev+0xa4>
   b4100:	689b      	ldr	r3, [r3, #8]
   b4102:	2105      	movs	r1, #5
   b4104:	4798      	blx	r3
	Wire.endTransmission(); // stop transmitting //this looks like it was essential.
   b4106:	f002 fc53 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b410a:	f002 f97e 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(qwiicAddress, 2); // request 1 bytes from slave device qwiicAddress
   b410e:	f002 fc4f 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b4112:	2202      	movs	r2, #2
   b4114:	2130      	movs	r1, #48	; 0x30
   b4116:	f002 f96a 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b411a:	a718      	add	r7, pc, #96	; (adr r7, b417c <_Z13qwiicGetValuev+0x94>)
   b411c:	e9d7 6700 	ldrd	r6, r7, [r7]
   b4120:	a518      	add	r5, pc, #96	; (adr r5, b4184 <_Z13qwiicGetValuev+0x9c>)
   b4122:	e9d5 4500 	ldrd	r4, r5, [r5]
	while (Wire.available())
   b4126:	f002 fc43 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b412a:	6803      	ldr	r3, [r0, #0]
   b412c:	691b      	ldr	r3, [r3, #16]
   b412e:	4798      	blx	r3
   b4130:	b300      	cbz	r0, b4174 <_Z13qwiicGetValuev+0x8c>
		uint8_t ADC_VALUE_L = Wire.read();
   b4132:	f002 fc3d 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b4136:	6803      	ldr	r3, [r0, #0]
   b4138:	695b      	ldr	r3, [r3, #20]
   b413a:	4798      	blx	r3
   b413c:	4680      	mov	r8, r0
		uint8_t ADC_VALUE_H = Wire.read();
   b413e:	f002 fc37 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b4142:	6803      	ldr	r3, [r0, #0]
   b4144:	695b      	ldr	r3, [r3, #20]
   b4146:	4798      	blx	r3
		ADC_VALUE=ADC_VALUE_H;
   b4148:	b2c3      	uxtb	r3, r0
		ADC_VALUE|=ADC_VALUE_L;
   b414a:	fa5f f088 	uxtb.w	r0, r8
   b414e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   b4152:	f8a9 0000 	strh.w	r0, [r9]
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b4156:	f002 fda3 	bl	b6ca0 <__aeabi_i2d>
   b415a:	4632      	mov	r2, r6
   b415c:	463b      	mov	r3, r7
   b415e:	f002 fc53 	bl	b6a08 <__adddf3>
   b4162:	462b      	mov	r3, r5
   b4164:	4622      	mov	r2, r4
   b4166:	f002 ff2f 	bl	b6fc8 <__aeabi_ddiv>
   b416a:	f003 f83d 	bl	b71e8 <__aeabi_d2f>
   b416e:	4b02      	ldr	r3, [pc, #8]	; (b4178 <_Z13qwiicGetValuev+0x90>)
   b4170:	6018      	str	r0, [r3, #0]
	while (Wire.available())
   b4172:	e7d8      	b.n	b4126 <_Z13qwiicGetValuev+0x3e>
	}
	return;
}
   b4174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4178:	2003e69c 	.word	0x2003e69c
   b417c:	67381d7e 	.word	0x67381d7e
   b4180:	4054cd44 	.word	0x4054cd44
   b4184:	374bc6a8 	.word	0x374bc6a8
   b4188:	40260189 	.word	0x40260189
   b418c:	2003e610 	.word	0x2003e610

000b4190 <_Z17getSensorReadingsv>:
{
   b4190:	b510      	push	{r4, lr}
   b4192:	ed2d 8b02 	vpush	{d8}
   b4196:	b08e      	sub	sp, #56	; 0x38
	JSONStreamWriter writer(Serial);
   b4198:	f002 f844 	bl	b6224 <_Z16_fetch_usbserialv>
        state_(BEGIN) {
   b419c:	2300      	movs	r3, #0
   b419e:	f88d 3010 	strb.w	r3, [sp, #16]
        strm_(stream) {
   b41a2:	9005      	str	r0, [sp, #20]
   b41a4:	4ba3      	ldr	r3, [pc, #652]	; (b4434 <_Z17getSensorReadingsv+0x2a4>)
   b41a6:	9303      	str	r3, [sp, #12]
	writer.beginObject();
   b41a8:	a803      	add	r0, sp, #12
   b41aa:	f002 fa7f 	bl	b66ac <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("DeviceID").value(System.deviceID());
   b41ae:	49a2      	ldr	r1, [pc, #648]	; (b4438 <_Z17getSensorReadingsv+0x2a8>)
   b41b0:	a803      	add	r0, sp, #12
   b41b2:	f7ff ff8a 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b41b6:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b41b8:	a806      	add	r0, sp, #24
   b41ba:	f001 fb1b 	bl	b57f4 <spark_deviceID>
    return value(val.c_str(), val.length());
   b41be:	9a08      	ldr	r2, [sp, #32]
   b41c0:	9906      	ldr	r1, [sp, #24]
   b41c2:	4620      	mov	r0, r4
   b41c4:	f002 fb12 	bl	b67ec <_ZN5spark10JSONWriter5valueEPKcj>
   b41c8:	a806      	add	r0, sp, #24
   b41ca:	f001 fc7d 	bl	b5ac8 <_ZN6StringD1Ev>
		writer.name("DateTime").value(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL));
   b41ce:	499b      	ldr	r1, [pc, #620]	; (b443c <_Z17getSensorReadingsv+0x2ac>)
   b41d0:	a803      	add	r0, sp, #12
   b41d2:	f7ff ff7a 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b41d6:	4604      	mov	r4, r0
   b41d8:	f001 fe8d 	bl	b5ef6 <_ZN9TimeClass3nowEv>
   b41dc:	4b98      	ldr	r3, [pc, #608]	; (b4440 <_Z17getSensorReadingsv+0x2b0>)
   b41de:	4999      	ldr	r1, [pc, #612]	; (b4444 <_Z17getSensorReadingsv+0x2b4>)
   b41e0:	681b      	ldr	r3, [r3, #0]
   b41e2:	9300      	str	r3, [sp, #0]
   b41e4:	4602      	mov	r2, r0
   b41e6:	17c3      	asrs	r3, r0, #31
   b41e8:	a806      	add	r0, sp, #24
   b41ea:	f001 fe25 	bl	b5e38 <_ZN9TimeClass6formatExPKc>
   b41ee:	9a08      	ldr	r2, [sp, #32]
   b41f0:	9906      	ldr	r1, [sp, #24]
   b41f2:	4620      	mov	r0, r4
   b41f4:	f002 fafa 	bl	b67ec <_ZN5spark10JSONWriter5valueEPKcj>
   b41f8:	a806      	add	r0, sp, #24
   b41fa:	f001 fc65 	bl	b5ac8 <_ZN6StringD1Ev>
		bh.make_forced_measurement();
   b41fe:	4892      	ldr	r0, [pc, #584]	; (b4448 <_Z17getSensorReadingsv+0x2b8>)
   b4200:	f001 f8c0 	bl	b5384 <_ZN6BH175023make_forced_measurementEv>
		float lux = (int)(bh.get_light_level() * 10 + 0.5);	
   b4204:	4890      	ldr	r0, [pc, #576]	; (b4448 <_Z17getSensorReadingsv+0x2b8>)
   b4206:	f001 f877 	bl	b52f8 <_ZN6BH175015get_light_levelEv>
   b420a:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
   b420e:	ee60 7a28 	vmul.f32	s15, s0, s17
   b4212:	ee17 0a90 	vmov	r0, s15
   b4216:	f002 fd55 	bl	b6cc4 <__aeabi_f2d>
   b421a:	4b8c      	ldr	r3, [pc, #560]	; (b444c <_Z17getSensorReadingsv+0x2bc>)
   b421c:	2200      	movs	r2, #0
   b421e:	f002 fbf3 	bl	b6a08 <__adddf3>
   b4222:	f002 ffb9 	bl	b7198 <__aeabi_d2iz>
   b4226:	ee07 0a90 	vmov	s15, r0
		writer.name("BH1750").beginObject();
   b422a:	4989      	ldr	r1, [pc, #548]	; (b4450 <_Z17getSensorReadingsv+0x2c0>)
   b422c:	a803      	add	r0, sp, #12
		float lux = (int)(bh.get_light_level() * 10 + 0.5);	
   b422e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
		writer.name("BH1750").beginObject();
   b4232:	f7ff ff4a 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4236:	f002 fa39 	bl	b66ac <_ZN5spark10JSONWriter11beginObjectEv>
			writer.name("Light_level(lux)").value(lux);
   b423a:	4986      	ldr	r1, [pc, #536]	; (b4454 <_Z17getSensorReadingsv+0x2c4>)
   b423c:	a803      	add	r0, sp, #12
   b423e:	f7ff ff44 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4242:	eec8 7a28 	vdiv.f32	s15, s16, s17
   b4246:	4604      	mov	r4, r0
   b4248:	ee17 0a90 	vmov	r0, s15
   b424c:	f002 fd3a 	bl	b6cc4 <__aeabi_f2d>
   b4250:	ec41 0b10 	vmov	d0, r0, r1
   b4254:	4620      	mov	r0, r4
   b4256:	f002 fa47 	bl	b66e8 <_ZN5spark10JSONWriter5valueEd>
		writer.endObject();
   b425a:	a803      	add	r0, sp, #12
   b425c:	f002 fa10 	bl	b6680 <_ZN5spark10JSONWriter9endObjectEv>
		if (airSensor.dataAvailable())
   b4260:	487d      	ldr	r0, [pc, #500]	; (b4458 <_Z17getSensorReadingsv+0x2c8>)
   b4262:	f000 ff46 	bl	b50f2 <_ZN5SCD3013dataAvailableEv>
   b4266:	2800      	cmp	r0, #0
   b4268:	d036      	beq.n	b42d8 <_Z17getSensorReadingsv+0x148>
			writer.name("SCD30").beginObject();
   b426a:	497c      	ldr	r1, [pc, #496]	; (b445c <_Z17getSensorReadingsv+0x2cc>)
   b426c:	a803      	add	r0, sp, #12
   b426e:	f7ff ff2c 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4272:	f002 fa1b 	bl	b66ac <_ZN5spark10JSONWriter11beginObjectEv>
				writer.name("CO2(ppm)").value(airSensor.getCO2());
   b4276:	497a      	ldr	r1, [pc, #488]	; (b4460 <_Z17getSensorReadingsv+0x2d0>)
   b4278:	a803      	add	r0, sp, #12
   b427a:	f7ff ff26 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b427e:	4604      	mov	r4, r0
   b4280:	4875      	ldr	r0, [pc, #468]	; (b4458 <_Z17getSensorReadingsv+0x2c8>)
   b4282:	f000 ff96 	bl	b51b2 <_ZN5SCD306getCO2Ev>
   b4286:	4601      	mov	r1, r0
   b4288:	4620      	mov	r0, r4
   b428a:	f002 fa1b 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
				writer.name("Temperature(C)").value(airSensor.getTemperature());
   b428e:	4975      	ldr	r1, [pc, #468]	; (b4464 <_Z17getSensorReadingsv+0x2d4>)
   b4290:	a803      	add	r0, sp, #12
   b4292:	f7ff ff1a 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4296:	4604      	mov	r4, r0
   b4298:	486f      	ldr	r0, [pc, #444]	; (b4458 <_Z17getSensorReadingsv+0x2c8>)
   b429a:	f000 ffa5 	bl	b51e8 <_ZN5SCD3014getTemperatureEv>
   b429e:	ee10 0a10 	vmov	r0, s0
   b42a2:	f002 fd0f 	bl	b6cc4 <__aeabi_f2d>
   b42a6:	ec41 0b10 	vmov	d0, r0, r1
   b42aa:	4620      	mov	r0, r4
   b42ac:	f002 fa1c 	bl	b66e8 <_ZN5spark10JSONWriter5valueEd>
				writer.name("Humidity(%)").value(airSensor.getHumidity());
   b42b0:	496d      	ldr	r1, [pc, #436]	; (b4468 <_Z17getSensorReadingsv+0x2d8>)
   b42b2:	a803      	add	r0, sp, #12
   b42b4:	f7ff ff09 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42b8:	4604      	mov	r4, r0
   b42ba:	4867      	ldr	r0, [pc, #412]	; (b4458 <_Z17getSensorReadingsv+0x2c8>)
   b42bc:	f000 ff89 	bl	b51d2 <_ZN5SCD3011getHumidityEv>
   b42c0:	ee10 0a10 	vmov	r0, s0
   b42c4:	f002 fcfe 	bl	b6cc4 <__aeabi_f2d>
   b42c8:	ec41 0b10 	vmov	d0, r0, r1
   b42cc:	4620      	mov	r0, r4
   b42ce:	f002 fa0b 	bl	b66e8 <_ZN5spark10JSONWriter5valueEd>
			writer.endObject();
   b42d2:	a803      	add	r0, sp, #12
   b42d4:	f002 f9d4 	bl	b6680 <_ZN5spark10JSONWriter9endObjectEv>
		writer.name("PMSA003I").beginObject();
   b42d8:	4964      	ldr	r1, [pc, #400]	; (b446c <_Z17getSensorReadingsv+0x2dc>)
   b42da:	a803      	add	r0, sp, #12
   b42dc:	f7ff fef5 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42e0:	f002 f9e4 	bl	b66ac <_ZN5spark10JSONWriter11beginObjectEv>
			writer.name("Standard_PM1.0").value(data.pm10_standard);
   b42e4:	4962      	ldr	r1, [pc, #392]	; (b4470 <_Z17getSensorReadingsv+0x2e0>)
   b42e6:	a803      	add	r0, sp, #12
   b42e8:	f7ff feef 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42ec:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   b42f0:	f002 f9e8 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
			writer.name("Standard_PM2.5").value(data.pm25_standard);
   b42f4:	495f      	ldr	r1, [pc, #380]	; (b4474 <_Z17getSensorReadingsv+0x2e4>)
   b42f6:	a803      	add	r0, sp, #12
   b42f8:	f7ff fee7 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b42fc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   b4300:	f002 f9e0 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
			writer.name("Standard_PM10").value(data.pm100_standard);
   b4304:	495c      	ldr	r1, [pc, #368]	; (b4478 <_Z17getSensorReadingsv+0x2e8>)
   b4306:	a803      	add	r0, sp, #12
   b4308:	f7ff fedf 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b430c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   b4310:	f002 f9d8 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
			writer.name("Environmental_PM1.0").value(data.pm10_env);
   b4314:	4959      	ldr	r1, [pc, #356]	; (b447c <_Z17getSensorReadingsv+0x2ec>)
   b4316:	a803      	add	r0, sp, #12
   b4318:	f7ff fed7 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b431c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   b4320:	f002 f9d0 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
			writer.name("Environmental_PM2.5").value(data.pm25_env);
   b4324:	4956      	ldr	r1, [pc, #344]	; (b4480 <_Z17getSensorReadingsv+0x2f0>)
   b4326:	a803      	add	r0, sp, #12
   b4328:	f7ff fecf 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b432c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   b4330:	f002 f9c8 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
			writer.name("Environmental_PM10").value(data.pm100_env);
   b4334:	4953      	ldr	r1, [pc, #332]	; (b4484 <_Z17getSensorReadingsv+0x2f4>)
   b4336:	a803      	add	r0, sp, #12
   b4338:	f7ff fec7 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b433c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   b4340:	f002 f9c0 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
		writer.endObject();
   b4344:	a803      	add	r0, sp, #12
   b4346:	f002 f99b 	bl	b6680 <_ZN5spark10JSONWriter9endObjectEv>
		qwiicGetValue();
   b434a:	f7ff fecd 	bl	b40e8 <_Z13qwiicGetValuev>
		writer.name("PMSA003I").beginObject();
   b434e:	4947      	ldr	r1, [pc, #284]	; (b446c <_Z17getSensorReadingsv+0x2dc>)
   b4350:	a803      	add	r0, sp, #12
   b4352:	f7ff feba 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4356:	f002 f9a9 	bl	b66ac <_ZN5spark10JSONWriter11beginObjectEv>
			writer.name("ADC_Value").value(ADC_VALUE);
   b435a:	494b      	ldr	r1, [pc, #300]	; (b4488 <_Z17getSensorReadingsv+0x2f8>)
   b435c:	a803      	add	r0, sp, #12
   b435e:	f7ff feb4 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4362:	4b4a      	ldr	r3, [pc, #296]	; (b448c <_Z17getSensorReadingsv+0x2fc>)
   b4364:	8819      	ldrh	r1, [r3, #0]
   b4366:	f002 f9ad 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
			writer.name("dB").value(dBnumber);
   b436a:	4949      	ldr	r1, [pc, #292]	; (b4490 <_Z17getSensorReadingsv+0x300>)
   b436c:	a803      	add	r0, sp, #12
   b436e:	f7ff feac 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4372:	4b48      	ldr	r3, [pc, #288]	; (b4494 <_Z17getSensorReadingsv+0x304>)
   b4374:	4604      	mov	r4, r0
   b4376:	6818      	ldr	r0, [r3, #0]
   b4378:	f002 fca4 	bl	b6cc4 <__aeabi_f2d>
   b437c:	ec41 0b10 	vmov	d0, r0, r1
   b4380:	4620      	mov	r0, r4
   b4382:	f002 f9b1 	bl	b66e8 <_ZN5spark10JSONWriter5valueEd>
		writer.endObject();
   b4386:	a803      	add	r0, sp, #12
   b4388:	f002 f97a 	bl	b6680 <_ZN5spark10JSONWriter9endObjectEv>
		writer.name("VEML6070").beginObject();
   b438c:	4942      	ldr	r1, [pc, #264]	; (b4498 <_Z17getSensorReadingsv+0x308>)
   b438e:	a803      	add	r0, sp, #12
   b4390:	f7ff fe9b 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4394:	f002 f98a 	bl	b66ac <_ZN5spark10JSONWriter11beginObjectEv>
			writer.name("UV_light_level").value(uv.readUV());
   b4398:	4940      	ldr	r1, [pc, #256]	; (b449c <_Z17getSensorReadingsv+0x30c>)
   b439a:	a803      	add	r0, sp, #12
   b439c:	f7ff fe95 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b43a0:	4604      	mov	r4, r0
   b43a2:	483f      	ldr	r0, [pc, #252]	; (b44a0 <_Z17getSensorReadingsv+0x310>)
   b43a4:	f000 fe45 	bl	b5032 <_ZN17Adafruit_VEML60706readUVEv>
   b43a8:	4601      	mov	r1, r0
   b43aa:	4620      	mov	r0, r4
   b43ac:	f002 f98a 	bl	b66c4 <_ZN5spark10JSONWriter5valueEi>
			writer.name("Pressure(mbar)").value(bme.readPressure()/100.0F);
   b43b0:	493c      	ldr	r1, [pc, #240]	; (b44a4 <_Z17getSensorReadingsv+0x314>)
   b43b2:	a803      	add	r0, sp, #12
   b43b4:	f7ff fe89 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b43b8:	4604      	mov	r4, r0
   b43ba:	483b      	ldr	r0, [pc, #236]	; (b44a8 <_Z17getSensorReadingsv+0x318>)
   b43bc:	f000 fcde 	bl	b4d7c <_ZN15Adafruit_BME28012readPressureEv>
   b43c0:	eddf 7a3a 	vldr	s15, [pc, #232]	; b44ac <_Z17getSensorReadingsv+0x31c>
   b43c4:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b43c8:	ee17 0a90 	vmov	r0, s15
   b43cc:	f002 fc7a 	bl	b6cc4 <__aeabi_f2d>
   b43d0:	ec41 0b10 	vmov	d0, r0, r1
   b43d4:	4620      	mov	r0, r4
   b43d6:	f002 f987 	bl	b66e8 <_ZN5spark10JSONWriter5valueEd>
			writer.name("Humidity(%)").value(bme.readHumidity());
   b43da:	4923      	ldr	r1, [pc, #140]	; (b4468 <_Z17getSensorReadingsv+0x2d8>)
   b43dc:	a803      	add	r0, sp, #12
   b43de:	f7ff fe74 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b43e2:	4604      	mov	r4, r0
   b43e4:	4830      	ldr	r0, [pc, #192]	; (b44a8 <_Z17getSensorReadingsv+0x318>)
   b43e6:	f000 fc7f 	bl	b4ce8 <_ZN15Adafruit_BME28012readHumidityEv>
   b43ea:	ee10 0a10 	vmov	r0, s0
   b43ee:	f002 fc69 	bl	b6cc4 <__aeabi_f2d>
   b43f2:	ec41 0b10 	vmov	d0, r0, r1
   b43f6:	4620      	mov	r0, r4
   b43f8:	f002 f976 	bl	b66e8 <_ZN5spark10JSONWriter5valueEd>
			writer.name("Temperature(C)").value(bme.readTemperature());
   b43fc:	4919      	ldr	r1, [pc, #100]	; (b4464 <_Z17getSensorReadingsv+0x2d4>)
   b43fe:	a803      	add	r0, sp, #12
   b4400:	f7ff fe63 	bl	b40ca <_ZN5spark10JSONWriter4nameEPKc>
   b4404:	4604      	mov	r4, r0
   b4406:	4828      	ldr	r0, [pc, #160]	; (b44a8 <_Z17getSensorReadingsv+0x318>)
   b4408:	f000 fc3e 	bl	b4c88 <_ZN15Adafruit_BME28015readTemperatureEv>
   b440c:	ee10 0a10 	vmov	r0, s0
   b4410:	f002 fc58 	bl	b6cc4 <__aeabi_f2d>
   b4414:	ec41 0b10 	vmov	d0, r0, r1
   b4418:	4620      	mov	r0, r4
   b441a:	f002 f965 	bl	b66e8 <_ZN5spark10JSONWriter5valueEd>
		writer.endObject();
   b441e:	a803      	add	r0, sp, #12
   b4420:	f002 f92e 	bl	b6680 <_ZN5spark10JSONWriter9endObjectEv>
	writer.endObject();
   b4424:	a803      	add	r0, sp, #12
   b4426:	f002 f92b 	bl	b6680 <_ZN5spark10JSONWriter9endObjectEv>
}
   b442a:	b00e      	add	sp, #56	; 0x38
   b442c:	ecbd 8b02 	vpop	{d8}
   b4430:	bd10      	pop	{r4, pc}
   b4432:	bf00      	nop
   b4434:	000b7bfc 	.word	0x000b7bfc
   b4438:	000b7a44 	.word	0x000b7a44
   b443c:	000b7a4d 	.word	0x000b7a4d
   b4440:	2003e5a4 	.word	0x2003e5a4
   b4444:	2003e6d0 	.word	0x2003e6d0
   b4448:	2003e650 	.word	0x2003e650
   b444c:	3fe00000 	.word	0x3fe00000
   b4450:	000b7a56 	.word	0x000b7a56
   b4454:	000b7a5d 	.word	0x000b7a5d
   b4458:	2003e614 	.word	0x2003e614
   b445c:	000b7a6e 	.word	0x000b7a6e
   b4460:	000b7a74 	.word	0x000b7a74
   b4464:	000b7a7d 	.word	0x000b7a7d
   b4468:	000b7a8c 	.word	0x000b7a8c
   b446c:	000b7a98 	.word	0x000b7a98
   b4470:	000b7aa1 	.word	0x000b7aa1
   b4474:	000b7ab0 	.word	0x000b7ab0
   b4478:	000b7abf 	.word	0x000b7abf
   b447c:	000b7acd 	.word	0x000b7acd
   b4480:	000b7ae1 	.word	0x000b7ae1
   b4484:	000b7af5 	.word	0x000b7af5
   b4488:	000b7b08 	.word	0x000b7b08
   b448c:	2003e610 	.word	0x2003e610
   b4490:	000b7b12 	.word	0x000b7b12
   b4494:	2003e69c 	.word	0x2003e69c
   b4498:	000b7b15 	.word	0x000b7b15
   b449c:	000b7b1e 	.word	0x000b7b1e
   b44a0:	2003e6a0 	.word	0x2003e6a0
   b44a4:	000b7b2d 	.word	0x000b7b2d
   b44a8:	2003e658 	.word	0x2003e658
   b44ac:	42c80000 	.word	0x42c80000

000b44b0 <loop>:
void loop() {
   b44b0:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b44b2:	f001 f997 	bl	b57e4 <spark_cloud_flag_connected>
	if (Particle.connected() == false) {
   b44b6:	b908      	cbnz	r0, b44bc <loop+0xc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b44b8:	f001 f98c 	bl	b57d4 <spark_cloud_flag_connect>
	digitalWrite(D7,HIGH);
   b44bc:	2101      	movs	r1, #1
   b44be:	2007      	movs	r0, #7
   b44c0:	f002 f9f3 	bl	b68aa <digitalWrite>
	getSensorReadings();
   b44c4:	f7ff fe64 	bl	b4190 <_Z17getSensorReadingsv>
	digitalWrite(D7,LOW);
   b44c8:	2100      	movs	r1, #0
   b44ca:	2007      	movs	r0, #7
   b44cc:	f002 f9ed 	bl	b68aa <digitalWrite>
	Serial.println("");
   b44d0:	f001 fea8 	bl	b6224 <_Z16_fetch_usbserialv>
   b44d4:	4904      	ldr	r1, [pc, #16]	; (b44e8 <loop+0x38>)
   b44d6:	f001 fb9a 	bl	b5c0e <_ZN5Print7printlnEPKc>
}
   b44da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   b44de:	f64e 2060 	movw	r0, #60000	; 0xea60
   b44e2:	f001 bd23 	b.w	b5f2c <delay>
   b44e6:	bf00      	nop
   b44e8:	000b7e18 	.word	0x000b7e18

000b44ec <_Z24qwiicTestForConnectivityv>:

// qwiicTestForConnectivity() checks for an ACK from an Sensor. If no ACK
// program freezes and notifies user.
void qwiicTestForConnectivity()
{
   b44ec:	b508      	push	{r3, lr}
	Wire.beginTransmission(qwiicAddress);
   b44ee:	f002 fa5f 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b44f2:	2130      	movs	r1, #48	; 0x30
   b44f4:	f001 ff7e 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
	//check here for an ACK from the slave, if no ACK don't allow change?
	if (Wire.endTransmission() != 0)
   b44f8:	f002 fa5a 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b44fc:	f001 ff85 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
   b4500:	b128      	cbz	r0, b450e <_Z24qwiicTestForConnectivityv+0x22>
	{
		Serial.println("Check connections. No slave attached.");
   b4502:	f001 fe8f 	bl	b6224 <_Z16_fetch_usbserialv>
   b4506:	4902      	ldr	r1, [pc, #8]	; (b4510 <_Z24qwiicTestForConnectivityv+0x24>)
   b4508:	f001 fb81 	bl	b5c0e <_ZN5Print7printlnEPKc>
		while (1);
   b450c:	e7fe      	b.n	b450c <_Z24qwiicTestForConnectivityv+0x20>
	}
	return;
   b450e:	bd08      	pop	{r3, pc}
   b4510:	000b7b3c 	.word	0x000b7b3c

000b4514 <_Z17initializeSensorsv>:
{
   b4514:	b538      	push	{r3, r4, r5, lr}
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b4516:	4c26      	ldr	r4, [pc, #152]	; (b45b0 <_Z17initializeSensorsv+0x9c>)
	while (!bh.begin())
   b4518:	4826      	ldr	r0, [pc, #152]	; (b45b4 <_Z17initializeSensorsv+0xa0>)
   b451a:	f000 fee1 	bl	b52e0 <_ZN6BH17505beginEv>
   b451e:	b948      	cbnz	r0, b4534 <_Z17initializeSensorsv+0x20>
		delay(500);
   b4520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4524:	f001 fd02 	bl	b5f2c <delay>
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b4528:	f001 fe7c 	bl	b6224 <_Z16_fetch_usbserialv>
   b452c:	4621      	mov	r1, r4
   b452e:	f001 fb6e 	bl	b5c0e <_ZN5Print7printlnEPKc>
	while (!bh.begin())
   b4532:	e7f1      	b.n	b4518 <_Z17initializeSensorsv+0x4>
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b4534:	481f      	ldr	r0, [pc, #124]	; (b45b4 <_Z17initializeSensorsv+0xa0>)
	while (!bme.begin())
   b4536:	4d20      	ldr	r5, [pc, #128]	; (b45b8 <_Z17initializeSensorsv+0xa4>)
		Serial.println("Trying to connect BME280 PTH Sensor");
   b4538:	4c20      	ldr	r4, [pc, #128]	; (b45bc <_Z17initializeSensorsv+0xa8>)
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b453a:	2123      	movs	r1, #35	; 0x23
   b453c:	f000 ff0d 	bl	b535a <_ZN6BH175015set_sensor_modeENS_8SensModeE>
	while (!bme.begin())
   b4540:	4628      	mov	r0, r5
   b4542:	f000 fd44 	bl	b4fce <_ZN15Adafruit_BME2805beginEv>
   b4546:	b188      	cbz	r0, b456c <_Z17initializeSensorsv+0x58>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b4548:	4c1d      	ldr	r4, [pc, #116]	; (b45c0 <_Z17initializeSensorsv+0xac>)
	while (!airSensor.begin())
   b454a:	f002 fa31 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b454e:	4601      	mov	r1, r0
   b4550:	481c      	ldr	r0, [pc, #112]	; (b45c4 <_Z17initializeSensorsv+0xb0>)
   b4552:	f000 fea9 	bl	b52a8 <_ZN5SCD305beginER7TwoWire>
   b4556:	b998      	cbnz	r0, b4580 <_Z17initializeSensorsv+0x6c>
		delay(500);
   b4558:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b455c:	f001 fce6 	bl	b5f2c <delay>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b4560:	f001 fe60 	bl	b6224 <_Z16_fetch_usbserialv>
   b4564:	4621      	mov	r1, r4
   b4566:	f001 fb52 	bl	b5c0e <_ZN5Print7printlnEPKc>
	while (!airSensor.begin())
   b456a:	e7ee      	b.n	b454a <_Z17initializeSensorsv+0x36>
		delay(500);
   b456c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4570:	f001 fcdc 	bl	b5f2c <delay>
		Serial.println("Trying to connect BME280 PTH Sensor");
   b4574:	f001 fe56 	bl	b6224 <_Z16_fetch_usbserialv>
   b4578:	4621      	mov	r1, r4
   b457a:	f001 fb48 	bl	b5c0e <_ZN5Print7printlnEPKc>
	while (!bme.begin())
   b457e:	e7df      	b.n	b4540 <_Z17initializeSensorsv+0x2c>
	airSensor.setMeasurementInterval(2);
   b4580:	2102      	movs	r1, #2
   b4582:	4810      	ldr	r0, [pc, #64]	; (b45c4 <_Z17initializeSensorsv+0xb0>)
   b4584:	f000 fe8b 	bl	b529e <_ZN5SCD3022setMeasurementIntervalEt>
	aqi.begin_I2C();	// Particulate sensor PM2.5
   b4588:	f002 fa12 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b458c:	4601      	mov	r1, r0
   b458e:	480e      	ldr	r0, [pc, #56]	; (b45c8 <_Z17initializeSensorsv+0xb4>)
   b4590:	f000 f854 	bl	b463c <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
	Serial.println("Zio Qwiic Loudness Sensor Master Awake");
   b4594:	f001 fe46 	bl	b6224 <_Z16_fetch_usbserialv>
   b4598:	490c      	ldr	r1, [pc, #48]	; (b45cc <_Z17initializeSensorsv+0xb8>)
   b459a:	f001 fb38 	bl	b5c0e <_ZN5Print7printlnEPKc>
	qwiicTestForConnectivity();
   b459e:	f7ff ffa5 	bl	b44ec <_Z24qwiicTestForConnectivityv>
}
   b45a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uv.begin(VEML6070_1_T);
   b45a6:	480a      	ldr	r0, [pc, #40]	; (b45d0 <_Z17initializeSensorsv+0xbc>)
   b45a8:	2101      	movs	r1, #1
   b45aa:	f000 bd23 	b.w	b4ff4 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>
   b45ae:	bf00      	nop
   b45b0:	000b7b62 	.word	0x000b7b62
   b45b4:	2003e650 	.word	0x2003e650
   b45b8:	2003e658 	.word	0x2003e658
   b45bc:	000b7b86 	.word	0x000b7b86
   b45c0:	000b7baa 	.word	0x000b7baa
   b45c4:	2003e614 	.word	0x2003e614
   b45c8:	2003e628 	.word	0x2003e628
   b45cc:	000b7bcd 	.word	0x000b7bcd
   b45d0:	2003e6a0 	.word	0x2003e6a0

000b45d4 <setup>:
void setup() {
   b45d4:	b508      	push	{r3, lr}
	Wire.begin();
   b45d6:	f002 f9eb 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b45da:	f001 fed9 	bl	b6390 <_ZN7TwoWire5beginEv>
	pinMode(D7,OUTPUT);
   b45de:	2101      	movs	r1, #1
   b45e0:	2007      	movs	r0, #7
   b45e2:	f002 f951 	bl	b6888 <pinMode>
	Serial.begin(9600);
   b45e6:	f001 fe1d 	bl	b6224 <_Z16_fetch_usbserialv>
   b45ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45ee:	f001 fe0d 	bl	b620c <_ZN9USBSerial5beginEl>
}
   b45f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	initializeSensors();
   b45f6:	f7ff bf8d 	b.w	b4514 <_Z17initializeSensorsv>
	...

000b45fc <_GLOBAL__sub_I_bh>:
   b45fc:	b508      	push	{r3, lr}
BH1750 bh;
   b45fe:	f002 f9d7 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b4602:	2123      	movs	r1, #35	; 0x23
   b4604:	4602      	mov	r2, r0
   b4606:	4807      	ldr	r0, [pc, #28]	; (b4624 <_GLOBAL__sub_I_bh+0x28>)
   b4608:	f000 fe65 	bl	b52d6 <_ZN6BH1750C1EhR7TwoWire>
Adafruit_BME280 bme;
   b460c:	4806      	ldr	r0, [pc, #24]	; (b4628 <_GLOBAL__sub_I_bh+0x2c>)
   b460e:	f000 f897 	bl	b4740 <_ZN15Adafruit_BME280C1Ev>
SCD30 airSensor;
   b4612:	4806      	ldr	r0, [pc, #24]	; (b462c <_GLOBAL__sub_I_bh+0x30>)
   b4614:	f000 fd35 	bl	b5082 <_ZN5SCD30C1Ev>
   b4618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_PM25AQI aqi = Adafruit_PM25AQI();
   b461c:	4804      	ldr	r0, [pc, #16]	; (b4630 <_GLOBAL__sub_I_bh+0x34>)
   b461e:	f000 b809 	b.w	b4634 <_ZN16Adafruit_PM25AQIC1Ev>
   b4622:	bf00      	nop
   b4624:	2003e650 	.word	0x2003e650
   b4628:	2003e658 	.word	0x2003e658
   b462c:	2003e614 	.word	0x2003e614
   b4630:	2003e628 	.word	0x2003e628

000b4634 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
   b4634:	2200      	movs	r2, #0
   b4636:	e9c0 2200 	strd	r2, r2, [r0]
   b463a:	4770      	bx	lr

000b463c <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b463c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b463e:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b4640:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b4642:	b953      	cbnz	r3, b465a <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
   b4644:	2010      	movs	r0, #16
   b4646:	9101      	str	r1, [sp, #4]
   b4648:	f7ff fd25 	bl	b4096 <_Znwj>
   b464c:	4605      	mov	r5, r0
   b464e:	b118      	cbz	r0, b4658 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
   b4650:	9a01      	ldr	r2, [sp, #4]
   b4652:	2112      	movs	r1, #18
   b4654:	f000 f808 	bl	b4668 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4658:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
   b465a:	6820      	ldr	r0, [r4, #0]
   b465c:	2101      	movs	r1, #1
    return false;
  }

  return true;
}
   b465e:	b003      	add	sp, #12
   b4660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
   b4664:	f000 b81c 	b.w	b46a0 <_ZN18Adafruit_I2CDevice5beginEb>

000b4668 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b4668:	6042      	str	r2, [r0, #4]
  _begun = false;
   b466a:	2200      	movs	r2, #0
   b466c:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b466e:	2220      	movs	r2, #32
  _addr = addr;
   b4670:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b4672:	60c2      	str	r2, [r0, #12]
#endif
}
   b4674:	4770      	bx	lr

000b4676 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b4676:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b4678:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b467a:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b467c:	b153      	cbz	r3, b4694 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b467e:	7821      	ldrb	r1, [r4, #0]
   b4680:	6860      	ldr	r0, [r4, #4]
   b4682:	f001 feb7 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b4686:	6860      	ldr	r0, [r4, #4]
   b4688:	f001 febf 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
   b468c:	fab0 f080 	clz	r0, r0
   b4690:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b4692:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b4694:	2101      	movs	r1, #1
   b4696:	f000 f803 	bl	b46a0 <_ZN18Adafruit_I2CDevice5beginEb>
   b469a:	2800      	cmp	r0, #0
   b469c:	d1ef      	bne.n	b467e <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b469e:	e7f8      	b.n	b4692 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b46a0 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b46a0:	b538      	push	{r3, r4, r5, lr}
   b46a2:	4604      	mov	r4, r0
  _wire->begin();
   b46a4:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b46a6:	460d      	mov	r5, r1
  _wire->begin();
   b46a8:	f001 fe72 	bl	b6390 <_ZN7TwoWire5beginEv>
  _begun = true;
   b46ac:	2001      	movs	r0, #1
   b46ae:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b46b0:	b125      	cbz	r5, b46bc <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b46b2:	4620      	mov	r0, r4
}
   b46b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b46b8:	f7ff bfdd 	b.w	b4676 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b46bc:	bd38      	pop	{r3, r4, r5, pc}

000b46be <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b46be:	4770      	bx	lr

000b46c0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b46c0:	b510      	push	{r4, lr}
  }
   b46c2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b46c4:	4604      	mov	r4, r0
  }
   b46c6:	f7ff fcea 	bl	b409e <_ZdlPvj>
   b46ca:	4620      	mov	r0, r4
   b46cc:	bd10      	pop	{r4, pc}

000b46ce <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b46ce:	b40e      	push	{r1, r2, r3}
   b46d0:	b503      	push	{r0, r1, lr}
   b46d2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b46d4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b46d6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b46da:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b46dc:	f001 fabf 	bl	b5c5e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b46e0:	b002      	add	sp, #8
   b46e2:	f85d eb04 	ldr.w	lr, [sp], #4
   b46e6:	b003      	add	sp, #12
   b46e8:	4770      	bx	lr
	...

000b46ec <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b46ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b46ee:	4604      	mov	r4, r0
   b46f0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b46f2:	7922      	ldrb	r2, [r4, #4]
   b46f4:	68a3      	ldr	r3, [r4, #8]
   b46f6:	b132      	cbz	r2, b4706 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b46f8:	b9a3      	cbnz	r3, b4724 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b46fa:	490b      	ldr	r1, [pc, #44]	; (b4728 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b46fc:	b002      	add	sp, #8
   b46fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4702:	f001 ba71 	b.w	b5be8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4706:	4a09      	ldr	r2, [pc, #36]	; (b472c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4708:	7b26      	ldrb	r6, [r4, #12]
   b470a:	4d09      	ldr	r5, [pc, #36]	; (b4730 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b470c:	4909      	ldr	r1, [pc, #36]	; (b4734 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b470e:	7b64      	ldrb	r4, [r4, #13]
   b4710:	2e01      	cmp	r6, #1
   b4712:	bf18      	it	ne
   b4714:	4629      	movne	r1, r5
   b4716:	e9cd 1400 	strd	r1, r4, [sp]
   b471a:	4907      	ldr	r1, [pc, #28]	; (b4738 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b471c:	f7ff ffd7 	bl	b46ce <_ZN5Print6printfEPKcz>
  }
   b4720:	b002      	add	sp, #8
   b4722:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4724:	4a05      	ldr	r2, [pc, #20]	; (b473c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4726:	e7ef      	b.n	b4708 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4728:	000b7c1d 	.word	0x000b7c1d
   b472c:	000b7e18 	.word	0x000b7e18
   b4730:	000b7c19 	.word	0x000b7c19
   b4734:	000b7c15 	.word	0x000b7c15
   b4738:	000b7c33 	.word	0x000b7c33
   b473c:	000b7c0c 	.word	0x000b7c0c

000b4740 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4740:	f04f 33ff 	mov.w	r3, #4294967295
   b4744:	6103      	str	r3, [r0, #16]
{ }
   b4746:	4770      	bx	lr

000b4748 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4748:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b474a:	4c0b      	ldr	r4, [pc, #44]	; (b4778 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b474c:	7821      	ldrb	r1, [r4, #0]
   b474e:	f3bf 8f5b 	dmb	ish
   b4752:	f011 0101 	ands.w	r1, r1, #1
   b4756:	d10b      	bne.n	b4770 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4758:	4620      	mov	r0, r4
   b475a:	9101      	str	r1, [sp, #4]
   b475c:	f7ff fca1 	bl	b40a2 <__cxa_guard_acquire>
   b4760:	9901      	ldr	r1, [sp, #4]
   b4762:	b128      	cbz	r0, b4770 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4764:	4805      	ldr	r0, [pc, #20]	; (b477c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4766:	f001 f8f1 	bl	b594c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b476a:	4620      	mov	r0, r4
   b476c:	f7ff fc9e 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b4770:	4802      	ldr	r0, [pc, #8]	; (b477c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4772:	b002      	add	sp, #8
   b4774:	bd10      	pop	{r4, pc}
   b4776:	bf00      	nop
   b4778:	2003e6a4 	.word	0x2003e6a4
   b477c:	2003e6a8 	.word	0x2003e6a8

000b4780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4780:	b508      	push	{r3, lr}
        instance().endTransaction();
   b4782:	f7ff ffe1 	bl	b4748 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b4786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b478a:	f001 b8fd 	b.w	b5988 <_ZN8SPIClass14endTransactionEv>

000b478e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b478e:	b507      	push	{r0, r1, r2, lr}
   b4790:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b4792:	f7ff ffd9 	bl	b4748 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4796:	9901      	ldr	r1, [sp, #4]
    }
   b4798:	b003      	add	sp, #12
   b479a:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b479e:	f001 b90d 	b.w	b59bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b47a2 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b47a6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b47aa:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47ac:	4605      	mov	r5, r0
   b47ae:	460f      	mov	r7, r1
    if (_sck == -1)
   b47b0:	d106      	bne.n	b47c0 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b47b2:	f7ff ffc9 	bl	b4748 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47b6:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b47b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b47bc:	f001 b96c 	b.w	b5a98 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b47c0:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b47c2:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b47c4:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b47c8:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47cc:	2100      	movs	r1, #0
   b47ce:	b280      	uxth	r0, r0
   b47d0:	f002 f86b 	bl	b68aa <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b47d4:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b47d8:	fa08 f106 	lsl.w	r1, r8, r6
   b47dc:	4039      	ands	r1, r7
   b47de:	b280      	uxth	r0, r0
   b47e0:	f002 f863 	bl	b68aa <digitalWrite>
        digitalWrite(_sck, HIGH);
   b47e4:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47e8:	2101      	movs	r1, #1
   b47ea:	b280      	uxth	r0, r0
   b47ec:	f002 f85d 	bl	b68aa <digitalWrite>
        if (digitalRead(_miso))
   b47f0:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b47f4:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b47f6:	b280      	uxth	r0, r0
        reply <<= 1;
   b47f8:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b47fa:	f002 f86f 	bl	b68dc <digitalRead>
   b47fe:	b108      	cbz	r0, b4804 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4800:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4804:	3e01      	subs	r6, #1
   b4806:	d2df      	bcs.n	b47c8 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4808:	4620      	mov	r0, r4
   b480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4810 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4810:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4812:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4816:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4818:	4604      	mov	r4, r0
   b481a:	460e      	mov	r6, r1
   b481c:	4615      	mov	r5, r2
    if (_cs == -1) {
   b481e:	d113      	bne.n	b4848 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4820:	7901      	ldrb	r1, [r0, #4]
   b4822:	6800      	ldr	r0, [r0, #0]
   b4824:	f001 fde6 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4828:	6820      	ldr	r0, [r4, #0]
   b482a:	6803      	ldr	r3, [r0, #0]
   b482c:	4631      	mov	r1, r6
   b482e:	689b      	ldr	r3, [r3, #8]
   b4830:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4832:	6820      	ldr	r0, [r4, #0]
   b4834:	6803      	ldr	r3, [r0, #0]
   b4836:	4629      	mov	r1, r5
   b4838:	689b      	ldr	r3, [r3, #8]
   b483a:	4798      	blx	r3
        _wire -> endTransmission();
   b483c:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b483e:	b004      	add	sp, #16
   b4840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4844:	f001 bde1 	b.w	b640a <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4848:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b484c:	3301      	adds	r3, #1
   b484e:	d10c      	bne.n	b486a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4850:	4b16      	ldr	r3, [pc, #88]	; (b48ac <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4852:	9300      	str	r3, [sp, #0]
   b4854:	2300      	movs	r3, #0
   b4856:	f88d 3004 	strb.w	r3, [sp, #4]
   b485a:	4b15      	ldr	r3, [pc, #84]	; (b48b0 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b485c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b485e:	4668      	mov	r0, sp
   b4860:	2301      	movs	r3, #1
   b4862:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4866:	f7ff ff92 	bl	b478e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b486a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b486e:	2100      	movs	r1, #0
   b4870:	b280      	uxth	r0, r0
   b4872:	f002 f81a 	bl	b68aa <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4876:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b487a:	4620      	mov	r0, r4
   b487c:	f7ff ff91 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4880:	4629      	mov	r1, r5
   b4882:	4620      	mov	r0, r4
   b4884:	f7ff ff8d 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4888:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b488c:	2101      	movs	r1, #1
   b488e:	b280      	uxth	r0, r0
   b4890:	f002 f80b 	bl	b68aa <digitalWrite>
    if (_sck == -1)
   b4894:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4898:	3301      	adds	r3, #1
   b489a:	d104      	bne.n	b48a6 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b489c:	b004      	add	sp, #16
   b489e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b48a2:	f7ff bf6d 	b.w	b4780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b48a6:	b004      	add	sp, #16
   b48a8:	bd70      	pop	{r4, r5, r6, pc}
   b48aa:	bf00      	nop
   b48ac:	000b7c58 	.word	0x000b7c58
   b48b0:	0007a120 	.word	0x0007a120

000b48b4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b48b6:	00db      	lsls	r3, r3, #3
   b48b8:	f002 0207 	and.w	r2, r2, #7
   b48bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b48c0:	4313      	orrs	r3, r2
   b48c2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b48c6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b48ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b48ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b48d2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b48d6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b48da:	f366 1347 	bfi	r3, r6, #5, #3
   b48de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b48e2:	00ed      	lsls	r5, r5, #3
   b48e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b48e8:	f007 0707 	and.w	r7, r7, #7
   b48ec:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b48f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b48f4:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b48f6:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b48f8:	431d      	orrs	r5, r3
   b48fa:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b48fe:	f006 0207 	and.w	r2, r6, #7
   b4902:	21f2      	movs	r1, #242	; 0xf2
   b4904:	f7ff ff84 	bl	b4810 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4908:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b490c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4910:	f002 0107 	and.w	r1, r2, #7
   b4914:	009b      	lsls	r3, r3, #2
   b4916:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b491a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b491e:	4620      	mov	r0, r4
   b4920:	21f5      	movs	r1, #245	; 0xf5
   b4922:	f7ff ff75 	bl	b4810 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4926:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b492a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b492e:	f002 0107 	and.w	r1, r2, #7
   b4932:	009b      	lsls	r3, r3, #2
   b4934:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4938:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b493c:	4620      	mov	r0, r4
   b493e:	21f4      	movs	r1, #244	; 0xf4
}
   b4940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4944:	f7ff bf64 	b.w	b4810 <_ZN15Adafruit_BME2806write8Ehh>

000b4948 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4948:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b494a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b494e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4950:	b085      	sub	sp, #20
   b4952:	4604      	mov	r4, r0
   b4954:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4956:	d118      	bne.n	b498a <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4958:	7901      	ldrb	r1, [r0, #4]
   b495a:	6800      	ldr	r0, [r0, #0]
   b495c:	f001 fd4a 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4960:	6820      	ldr	r0, [r4, #0]
   b4962:	6803      	ldr	r3, [r0, #0]
   b4964:	4629      	mov	r1, r5
   b4966:	689b      	ldr	r3, [r3, #8]
   b4968:	4798      	blx	r3
        _wire -> endTransmission();
   b496a:	6820      	ldr	r0, [r4, #0]
   b496c:	f001 fd4d 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4970:	7921      	ldrb	r1, [r4, #4]
   b4972:	6820      	ldr	r0, [r4, #0]
   b4974:	2201      	movs	r2, #1
   b4976:	f001 fd3a 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b497a:	6820      	ldr	r0, [r4, #0]
   b497c:	6803      	ldr	r3, [r0, #0]
   b497e:	695b      	ldr	r3, [r3, #20]
   b4980:	4798      	blx	r3
   b4982:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4984:	4628      	mov	r0, r5
   b4986:	b005      	add	sp, #20
   b4988:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b498a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b498e:	3301      	adds	r3, #1
   b4990:	d10c      	bne.n	b49ac <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4992:	4b15      	ldr	r3, [pc, #84]	; (b49e8 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4994:	9300      	str	r3, [sp, #0]
   b4996:	2300      	movs	r3, #0
   b4998:	f88d 3004 	strb.w	r3, [sp, #4]
   b499c:	4b13      	ldr	r3, [pc, #76]	; (b49ec <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b499e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b49a0:	4668      	mov	r0, sp
   b49a2:	2301      	movs	r3, #1
   b49a4:	f8ad 300c 	strh.w	r3, [sp, #12]
   b49a8:	f7ff fef1 	bl	b478e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b49ac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49b0:	2100      	movs	r1, #0
   b49b2:	b280      	uxth	r0, r0
   b49b4:	f001 ff79 	bl	b68aa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b49b8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49bc:	4620      	mov	r0, r4
   b49be:	f7ff fef0 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b49c2:	2100      	movs	r1, #0
   b49c4:	4620      	mov	r0, r4
   b49c6:	f7ff feec 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
   b49ca:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b49cc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49d0:	2101      	movs	r1, #1
   b49d2:	b280      	uxth	r0, r0
   b49d4:	f001 ff69 	bl	b68aa <digitalWrite>
        if (_sck == -1)
   b49d8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b49dc:	3301      	adds	r3, #1
   b49de:	d1d1      	bne.n	b4984 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b49e0:	f7ff fece 	bl	b4780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b49e4:	e7ce      	b.n	b4984 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b49e6:	bf00      	nop
   b49e8:	000b7c58 	.word	0x000b7c58
   b49ec:	0007a120 	.word	0x0007a120

000b49f0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b49f0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b49f2:	21f3      	movs	r1, #243	; 0xf3
   b49f4:	f7ff ffa8 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b49f8:	f000 0001 	and.w	r0, r0, #1
   b49fc:	bd08      	pop	{r3, pc}
	...

000b4a00 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4a00:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4a02:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a06:	3301      	adds	r3, #1
{
   b4a08:	b085      	sub	sp, #20
   b4a0a:	4604      	mov	r4, r0
   b4a0c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4a0e:	d11f      	bne.n	b4a50 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a10:	7901      	ldrb	r1, [r0, #4]
   b4a12:	6800      	ldr	r0, [r0, #0]
   b4a14:	f001 fcee 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a18:	6820      	ldr	r0, [r4, #0]
   b4a1a:	6803      	ldr	r3, [r0, #0]
   b4a1c:	4629      	mov	r1, r5
   b4a1e:	689b      	ldr	r3, [r3, #8]
   b4a20:	4798      	blx	r3
        _wire -> endTransmission();
   b4a22:	6820      	ldr	r0, [r4, #0]
   b4a24:	f001 fcf1 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4a28:	7921      	ldrb	r1, [r4, #4]
   b4a2a:	6820      	ldr	r0, [r4, #0]
   b4a2c:	2202      	movs	r2, #2
   b4a2e:	f001 fcde 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4a32:	6820      	ldr	r0, [r4, #0]
   b4a34:	6803      	ldr	r3, [r0, #0]
   b4a36:	695b      	ldr	r3, [r3, #20]
   b4a38:	4798      	blx	r3
   b4a3a:	4605      	mov	r5, r0
   b4a3c:	6820      	ldr	r0, [r4, #0]
   b4a3e:	6803      	ldr	r3, [r0, #0]
   b4a40:	695b      	ldr	r3, [r3, #20]
   b4a42:	4798      	blx	r3
   b4a44:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a48:	b285      	uxth	r5, r0
}
   b4a4a:	4628      	mov	r0, r5
   b4a4c:	b005      	add	sp, #20
   b4a4e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4a50:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a54:	3301      	adds	r3, #1
   b4a56:	d10c      	bne.n	b4a72 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4a58:	4b18      	ldr	r3, [pc, #96]	; (b4abc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4a5a:	9300      	str	r3, [sp, #0]
   b4a5c:	2300      	movs	r3, #0
   b4a5e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a62:	4b17      	ldr	r3, [pc, #92]	; (b4ac0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4a64:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a66:	4668      	mov	r0, sp
   b4a68:	2301      	movs	r3, #1
   b4a6a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a6e:	f7ff fe8e 	bl	b478e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a72:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a76:	2100      	movs	r1, #0
   b4a78:	b280      	uxth	r0, r0
   b4a7a:	f001 ff16 	bl	b68aa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a7e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a82:	4620      	mov	r0, r4
   b4a84:	f7ff fe8d 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4a88:	2100      	movs	r1, #0
   b4a8a:	4620      	mov	r0, r4
   b4a8c:	f7ff fe89 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
   b4a90:	2100      	movs	r1, #0
   b4a92:	4605      	mov	r5, r0
   b4a94:	4620      	mov	r0, r4
   b4a96:	f7ff fe84 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
   b4a9a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a9e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4aa0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4aa4:	2101      	movs	r1, #1
   b4aa6:	b280      	uxth	r0, r0
   b4aa8:	f001 feff 	bl	b68aa <digitalWrite>
        if (_sck == -1)
   b4aac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4ab0:	3301      	adds	r3, #1
   b4ab2:	d1ca      	bne.n	b4a4a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4ab4:	f7ff fe64 	bl	b4780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4ab8:	e7c7      	b.n	b4a4a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4aba:	bf00      	nop
   b4abc:	000b7c58 	.word	0x000b7c58
   b4ac0:	0007a120 	.word	0x0007a120

000b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4ac4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4ac6:	f7ff ff9b 	bl	b4a00 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4aca:	ba40      	rev16	r0, r0
}
   b4acc:	b280      	uxth	r0, r0
   b4ace:	bd08      	pop	{r3, pc}

000b4ad0 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4ad0:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ad2:	2188      	movs	r1, #136	; 0x88
{
   b4ad4:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ad6:	f7ff fff5 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4ada:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4adc:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4ade:	4620      	mov	r0, r4
   b4ae0:	f7ff fff0 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ae4:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4ae6:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4ae8:	4620      	mov	r0, r4
   b4aea:	f7ff ffeb 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4aee:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4af0:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4af2:	4620      	mov	r0, r4
   b4af4:	f7ff ffe6 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4af8:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4afa:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4afc:	4620      	mov	r0, r4
   b4afe:	f7ff ffe1 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b02:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4b04:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4b06:	4620      	mov	r0, r4
   b4b08:	f7ff ffdc 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b0c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4b0e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4b10:	4620      	mov	r0, r4
   b4b12:	f7ff ffd7 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b16:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4b18:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4b1a:	4620      	mov	r0, r4
   b4b1c:	f7ff ffd2 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b20:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4b22:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4b24:	4620      	mov	r0, r4
   b4b26:	f7ff ffcd 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b2a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4b2c:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4b2e:	4620      	mov	r0, r4
   b4b30:	f7ff ffc8 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b34:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4b36:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4b38:	4620      	mov	r0, r4
   b4b3a:	f7ff ffc3 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b3e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4b40:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4b42:	4620      	mov	r0, r4
   b4b44:	f7ff ffbe 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b48:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4b4a:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b4c:	4620      	mov	r0, r4
   b4b4e:	f7ff fefb 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4b52:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b54:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4b58:	4620      	mov	r0, r4
   b4b5a:	f7ff ffb3 	bl	b4ac4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b5e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4b60:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b62:	4620      	mov	r0, r4
   b4b64:	f7ff fef0 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b68:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b6a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b6e:	4620      	mov	r0, r4
   b4b70:	f7ff feea 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
   b4b74:	21e5      	movs	r1, #229	; 0xe5
   b4b76:	4605      	mov	r5, r0
   b4b78:	4620      	mov	r0, r4
   b4b7a:	f7ff fee5 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
   b4b7e:	f000 030f 	and.w	r3, r0, #15
   b4b82:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b86:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4b88:	21e6      	movs	r1, #230	; 0xe6
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff fedc 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
   b4b90:	21e5      	movs	r1, #229	; 0xe5
   b4b92:	4605      	mov	r5, r0
   b4b94:	4620      	mov	r0, r4
   b4b96:	f7ff fed7 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
   b4b9a:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4b9e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4ba2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4ba4:	21e7      	movs	r1, #231	; 0xe7
   b4ba6:	4620      	mov	r0, r4
   b4ba8:	f7ff fece 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
   b4bac:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4bb0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4bb4 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4bb4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4bb6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4bba:	3301      	adds	r3, #1
{
   b4bbc:	b085      	sub	sp, #20
   b4bbe:	4604      	mov	r4, r0
   b4bc0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4bc2:	d123      	bne.n	b4c0c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4bc4:	7901      	ldrb	r1, [r0, #4]
   b4bc6:	6800      	ldr	r0, [r0, #0]
   b4bc8:	f001 fc14 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4bcc:	6820      	ldr	r0, [r4, #0]
   b4bce:	6803      	ldr	r3, [r0, #0]
   b4bd0:	4629      	mov	r1, r5
   b4bd2:	689b      	ldr	r3, [r3, #8]
   b4bd4:	4798      	blx	r3
        _wire -> endTransmission();
   b4bd6:	6820      	ldr	r0, [r4, #0]
   b4bd8:	f001 fc17 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4bdc:	7921      	ldrb	r1, [r4, #4]
   b4bde:	6820      	ldr	r0, [r4, #0]
   b4be0:	2203      	movs	r2, #3
   b4be2:	f001 fc04 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4be6:	6820      	ldr	r0, [r4, #0]
   b4be8:	6803      	ldr	r3, [r0, #0]
   b4bea:	695b      	ldr	r3, [r3, #20]
   b4bec:	4798      	blx	r3
        value <<= 8;
   b4bee:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4bf0:	6820      	ldr	r0, [r4, #0]
   b4bf2:	6803      	ldr	r3, [r0, #0]
   b4bf4:	695b      	ldr	r3, [r3, #20]
   b4bf6:	4798      	blx	r3
   b4bf8:	4328      	orrs	r0, r5
        value <<= 8;
   b4bfa:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4bfc:	6820      	ldr	r0, [r4, #0]
   b4bfe:	6803      	ldr	r3, [r0, #0]
   b4c00:	695b      	ldr	r3, [r3, #20]
   b4c02:	4798      	blx	r3
   b4c04:	4305      	orrs	r5, r0
}
   b4c06:	4628      	mov	r0, r5
   b4c08:	b005      	add	sp, #20
   b4c0a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c0c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c10:	3301      	adds	r3, #1
   b4c12:	d10c      	bne.n	b4c2e <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4c14:	4b1a      	ldr	r3, [pc, #104]	; (b4c80 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4c16:	9300      	str	r3, [sp, #0]
   b4c18:	2300      	movs	r3, #0
   b4c1a:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c1e:	4b19      	ldr	r3, [pc, #100]	; (b4c84 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4c20:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c22:	4668      	mov	r0, sp
   b4c24:	2301      	movs	r3, #1
   b4c26:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c2a:	f7ff fdb0 	bl	b478e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c2e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c32:	2100      	movs	r1, #0
   b4c34:	b280      	uxth	r0, r0
   b4c36:	f001 fe38 	bl	b68aa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c3a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c3e:	4620      	mov	r0, r4
   b4c40:	f7ff fdaf 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4c44:	2100      	movs	r1, #0
   b4c46:	4620      	mov	r0, r4
   b4c48:	f7ff fdab 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4c4c:	2100      	movs	r1, #0
        value <<= 8;
   b4c4e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c50:	4620      	mov	r0, r4
   b4c52:	f7ff fda6 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
   b4c56:	4328      	orrs	r0, r5
        value <<= 8;
   b4c58:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c5a:	2100      	movs	r1, #0
   b4c5c:	4620      	mov	r0, r4
   b4c5e:	f7ff fda0 	bl	b47a2 <_ZN15Adafruit_BME2807spixferEh>
   b4c62:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4c64:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c68:	2101      	movs	r1, #1
   b4c6a:	b280      	uxth	r0, r0
   b4c6c:	f001 fe1d 	bl	b68aa <digitalWrite>
        if (_sck == -1)
   b4c70:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4c74:	3301      	adds	r3, #1
   b4c76:	d1c6      	bne.n	b4c06 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4c78:	f7ff fd82 	bl	b4780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4c7c:	e7c3      	b.n	b4c06 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4c7e:	bf00      	nop
   b4c80:	000b7c58 	.word	0x000b7c58
   b4c84:	0007a120 	.word	0x0007a120

000b4c88 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4c88:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c8a:	21fa      	movs	r1, #250	; 0xfa
{
   b4c8c:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c8e:	f7ff ff91 	bl	b4bb4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4c92:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4c96:	d01f      	beq.n	b4cd8 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c98:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4c9a:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4ce0 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c9e:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4ca0:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ca4:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4ca8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cac:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cae:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4cb2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4cb6:	131b      	asrs	r3, r3, #12
   b4cb8:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cba:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4cbc:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4cc0:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4cc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4cc6:	3380      	adds	r3, #128	; 0x80
   b4cc8:	121b      	asrs	r3, r3, #8
   b4cca:	ee07 3a90 	vmov	s15, r3
   b4cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4cd2:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4cd6:	bd10      	pop	{r4, pc}
        return NAN;
   b4cd8:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4ce4 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4cdc:	e7fb      	b.n	b4cd6 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4cde:	bf00      	nop
   b4ce0:	42c80000 	.word	0x42c80000
   b4ce4:	7fc00000 	.word	0x7fc00000

000b4ce8 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4ce8:	b538      	push	{r3, r4, r5, lr}
   b4cea:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4cec:	f7ff ffcc 	bl	b4c88 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4cf0:	21fd      	movs	r1, #253	; 0xfd
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	f7ff fe84 	bl	b4a00 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4cf8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4cfc:	d038      	beq.n	b4d70 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4cfe:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d00:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d04:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d08:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4d0c:	0509      	lsls	r1, r1, #20
   b4d0e:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4d12:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4d1a:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d1c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d20:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d24:	436b      	muls	r3, r5
   b4d26:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d28:	4369      	muls	r1, r5
   b4d2a:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d30:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d32:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d34:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d3c:	434b      	muls	r3, r1
   b4d3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4d42:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d44:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d46:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4d48:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d4c:	4352      	muls	r2, r2
   b4d4e:	11d2      	asrs	r2, r2, #7
   b4d50:	434a      	muls	r2, r1
   b4d52:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4d56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4d5a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4d5e:	bfa8      	it	ge
   b4d60:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4d64:	131b      	asrs	r3, r3, #12
   b4d66:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4d6a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4d6e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4d70:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4d78 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4d74:	e7fb      	b.n	b4d6e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4d76:	bf00      	nop
   b4d78:	7fc00000 	.word	0x7fc00000

000b4d7c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d80:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4d82:	f7ff ff81 	bl	b4c88 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4d86:	21f7      	movs	r1, #247	; 0xf7
   b4d88:	4628      	mov	r0, r5
   b4d8a:	f7ff ff13 	bl	b4bb4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4d8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4d92:	f000 80b6 	beq.w	b4f02 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4d96:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d98:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4d9c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4da0:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4da4:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4da8:	17dc      	asrs	r4, r3, #31
   b4daa:	fb03 f20e 	mul.w	r2, r3, lr
   b4dae:	fb01 2204 	mla	r2, r1, r4, r2
   b4db2:	fba3 3401 	umull	r3, r4, r3, r1
   b4db6:	4422      	add	r2, r4
   b4db8:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4dba:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4dbe:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4dc0:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4dc4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4dc8:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4dcc:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4dd0:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4dd4:	fb03 f608 	mul.w	r6, r3, r8
   b4dd8:	fb07 660c 	mla	r6, r7, ip, r6
   b4ddc:	fba3 3c07 	umull	r3, ip, r3, r7
   b4de0:	4466      	add	r6, ip
   b4de2:	0a1b      	lsrs	r3, r3, #8
   b4de4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4de8:	191b      	adds	r3, r3, r4
   b4dea:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4dee:	8b6e      	ldrh	r6, [r5, #26]
   b4df0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4df4:	fba3 3406 	umull	r3, r4, r3, r6
   b4df8:	fb06 4402 	mla	r4, r6, r2, r4
   b4dfc:	17e3      	asrs	r3, r4, #31
   b4dfe:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4e00:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e04:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4e08:	d07e      	beq.n	b4f08 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e0a:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4e0e:	fb04 f608 	mul.w	r6, r4, r8
   b4e12:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4e16:	fb07 6609 	mla	r6, r7, r9, r6
   b4e1a:	fba4 4707 	umull	r4, r7, r4, r7
   b4e1e:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e20:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4e24:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4e28:	fb07 fe0e 	mul.w	lr, r7, lr
   b4e2c:	fb01 ee08 	mla	lr, r1, r8, lr
   b4e30:	fba7 7101 	umull	r7, r1, r7, r1
   b4e34:	4471      	add	r1, lr
   b4e36:	0449      	lsls	r1, r1, #17
   b4e38:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4e3c:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e3e:	047f      	lsls	r7, r7, #17
   b4e40:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4e42:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e46:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4e4a:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e4e:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4e52:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4e56:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4e5a:	07e4      	lsls	r4, r4, #31
   b4e5c:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4e5e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4e62:	f640 4135 	movw	r1, #3125	; 0xc35
   b4e66:	eb60 0606 	sbc.w	r6, r0, r6
   b4e6a:	fba4 0401 	umull	r0, r4, r4, r1
   b4e6e:	fb01 4106 	mla	r1, r1, r6, r4
   b4e72:	f002 fb17 	bl	b74a4 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e76:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e7a:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e7e:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4e82:	0b43      	lsrs	r3, r0, #13
   b4e84:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4e88:	fb02 f70c 	mul.w	r7, r2, ip
   b4e8c:	17d4      	asrs	r4, r2, #31
   b4e8e:	fb03 7704 	mla	r7, r3, r4, r7
   b4e92:	fba2 2403 	umull	r2, r4, r2, r3
   b4e96:	443c      	add	r4, r7
   b4e98:	fb02 f70c 	mul.w	r7, r2, ip
   b4e9c:	fb03 7704 	mla	r7, r3, r4, r7
   b4ea0:	fba2 2303 	umull	r2, r3, r2, r3
   b4ea4:	441f      	add	r7, r3
   b4ea6:	0e53      	lsrs	r3, r2, #25
   b4ea8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4eac:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4eae:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4eb2:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4eb6:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4eb8:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ebc:	fb02 4100 	mla	r1, r2, r0, r4
   b4ec0:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ec4:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ec8:	4431      	add	r1, r6
   b4eca:	0cc0      	lsrs	r0, r0, #19
   b4ecc:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ed0:	1818      	adds	r0, r3, r0
   b4ed2:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4ed6:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4eda:	0a00      	lsrs	r0, r0, #8
   b4edc:	012d      	lsls	r5, r5, #4
   b4ede:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4ee2:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4ee6:	0124      	lsls	r4, r4, #4
   b4ee8:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4eea:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4eee:	f002 fa9b 	bl	b7428 <__aeabi_l2f>
   b4ef2:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4f10 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4ef6:	ee07 0a90 	vmov	s15, r0
   b4efa:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4f02:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4f14 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4f06:	e7fa      	b.n	b4efe <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4f08:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4f18 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4f0c:	e7f7      	b.n	b4efe <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4f0e:	bf00      	nop
   b4f10:	3b800000 	.word	0x3b800000
   b4f14:	7fc00000 	.word	0x7fc00000
   b4f18:	00000000 	.word	0x00000000

000b4f1c <_ZN15Adafruit_BME2804initEv>:
{
   b4f1c:	b530      	push	{r4, r5, lr}
   b4f1e:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4f20:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4f24:	1c42      	adds	r2, r0, #1
{
   b4f26:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4f28:	d119      	bne.n	b4f5e <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4f2a:	6820      	ldr	r0, [r4, #0]
   b4f2c:	f001 fa30 	bl	b6390 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f30:	21d0      	movs	r1, #208	; 0xd0
   b4f32:	4620      	mov	r0, r4
   b4f34:	f7ff fd08 	bl	b4948 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4f38:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f3a:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4f3c:	d145      	bne.n	b4fca <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4f3e:	4620      	mov	r0, r4
   b4f40:	22b6      	movs	r2, #182	; 0xb6
   b4f42:	21e0      	movs	r1, #224	; 0xe0
   b4f44:	f7ff fc64 	bl	b4810 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4f48:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4f4c:	f000 ffee 	bl	b5f2c <delay>
    while (isReadingCalibration())
   b4f50:	4620      	mov	r0, r4
   b4f52:	f7ff fd4d 	bl	b49f0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4f56:	4605      	mov	r5, r0
   b4f58:	b328      	cbz	r0, b4fa6 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4f5a:	2064      	movs	r0, #100	; 0x64
   b4f5c:	e7f6      	b.n	b4f4c <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4f5e:	2101      	movs	r1, #1
   b4f60:	b280      	uxth	r0, r0
   b4f62:	f001 fca2 	bl	b68aa <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4f66:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4f6a:	2101      	movs	r1, #1
   b4f6c:	b280      	uxth	r0, r0
   b4f6e:	f001 fc8b 	bl	b6888 <pinMode>
        if (_sck == -1) {
   b4f72:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4f76:	1c43      	adds	r3, r0, #1
   b4f78:	d104      	bne.n	b4f84 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4f7a:	f7ff fbe5 	bl	b4748 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f7e:	f000 fcef 	bl	b5960 <_ZN8SPIClass5beginEv>
    }
   b4f82:	e7d5      	b.n	b4f30 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4f84:	2101      	movs	r1, #1
   b4f86:	b280      	uxth	r0, r0
   b4f88:	f001 fc7e 	bl	b6888 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4f8c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4f90:	2101      	movs	r1, #1
   b4f92:	b280      	uxth	r0, r0
   b4f94:	f001 fc78 	bl	b6888 <pinMode>
            pinMode(_miso, INPUT);
   b4f98:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4f9c:	2100      	movs	r1, #0
   b4f9e:	b280      	uxth	r0, r0
   b4fa0:	f001 fc72 	bl	b6888 <pinMode>
   b4fa4:	e7c4      	b.n	b4f30 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4fa6:	4620      	mov	r0, r4
   b4fa8:	f7ff fd92 	bl	b4ad0 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4fac:	2305      	movs	r3, #5
   b4fae:	9300      	str	r3, [sp, #0]
   b4fb0:	461a      	mov	r2, r3
   b4fb2:	2103      	movs	r1, #3
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4fba:	f7ff fc7b 	bl	b48b4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4fbe:	2064      	movs	r0, #100	; 0x64
   b4fc0:	f000 ffb4 	bl	b5f2c <delay>
    return true;
   b4fc4:	2001      	movs	r0, #1
}
   b4fc6:	b005      	add	sp, #20
   b4fc8:	bd30      	pop	{r4, r5, pc}
        return false;
   b4fca:	2000      	movs	r0, #0
   b4fcc:	e7fb      	b.n	b4fc6 <_ZN15Adafruit_BME2804initEv+0xaa>

000b4fce <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b4fce:	2377      	movs	r3, #119	; 0x77
{
   b4fd0:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b4fd2:	7103      	strb	r3, [r0, #4]
{
   b4fd4:	4604      	mov	r4, r0
	_wire = &Wire;
   b4fd6:	f001 fceb 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b4fda:	6020      	str	r0, [r4, #0]
	status = init();
   b4fdc:	4620      	mov	r0, r4
   b4fde:	f7ff ff9d 	bl	b4f1c <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b4fe2:	b930      	cbnz	r0, b4ff2 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b4fe4:	2376      	movs	r3, #118	; 0x76
   b4fe6:	7123      	strb	r3, [r4, #4]
 		status = init();
   b4fe8:	4620      	mov	r0, r4
}
   b4fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b4fee:	f7ff bf95 	b.w	b4f1c <_ZN15Adafruit_BME2804initEv>
}
   b4ff2:	bd10      	pop	{r4, pc}

000b4ff4 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
  BSD license, all text above must be included in any redistribution
 ****************************************************/
#include "application.h"
#include "Adafruit_VEML6070.h"

void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
   b4ff4:	b510      	push	{r4, lr}
   b4ff6:	460c      	mov	r4, r1
  Wire.begin();
   b4ff8:	f001 fcda 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b4ffc:	f001 f9c8 	bl	b6390 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(VEML6070_ADDR_L);
   b5000:	f001 fcd6 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b5004:	2138      	movs	r1, #56	; 0x38
   b5006:	f001 f9f9 	bl	b63fc <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((itime << 2) | 0x02);
   b500a:	f001 fcd1 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b500e:	00a1      	lsls	r1, r4, #2
   b5010:	6803      	ldr	r3, [r0, #0]
   b5012:	f041 0102 	orr.w	r1, r1, #2
   b5016:	689b      	ldr	r3, [r3, #8]
   b5018:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   b501c:	4798      	blx	r3
  Wire.endTransmission();
   b501e:	f001 fcc7 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b5022:	f001 f9f2 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
  delay(500);
}
   b5026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
   b502a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b502e:	f000 bf7d 	b.w	b5f2c <delay>

000b5032 <_ZN17Adafruit_VEML60706readUVEv>:

uint16_t Adafruit_VEML6070::readUV() {
   b5032:	b538      	push	{r3, r4, r5, lr}
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
   b5034:	f001 fcbc 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b5038:	2201      	movs	r2, #1
   b503a:	2139      	movs	r1, #57	; 0x39
   b503c:	f001 f9d7 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
   b5040:	2801      	cmp	r0, #1
   b5042:	4604      	mov	r4, r0
   b5044:	d002      	beq.n	b504c <_ZN17Adafruit_VEML60706readUVEv+0x1a>
   b5046:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
  uvi |= Wire.read();

  return uvi;  
}
   b504a:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t uvi = Wire.read();
   b504c:	f001 fcb0 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b5050:	6803      	ldr	r3, [r0, #0]
   b5052:	695b      	ldr	r3, [r3, #20]
   b5054:	4798      	blx	r3
   b5056:	4605      	mov	r5, r0
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
   b5058:	f001 fcaa 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b505c:	4622      	mov	r2, r4
   b505e:	2138      	movs	r1, #56	; 0x38
   b5060:	f001 f9c5 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
   b5064:	2801      	cmp	r0, #1
   b5066:	d1ee      	bne.n	b5046 <_ZN17Adafruit_VEML60706readUVEv+0x14>
  uvi |= Wire.read();
   b5068:	f001 fca2 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b506c:	6803      	ldr	r3, [r0, #0]
   b506e:	695b      	ldr	r3, [r3, #20]
   b5070:	4798      	blx	r3
   b5072:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b5076:	b280      	uxth	r0, r0
  return uvi;  
   b5078:	e7e7      	b.n	b504a <_ZN17Adafruit_VEML60706readUVEv+0x18>

000b507a <_ZN7TwoWire5writeEi.isra.0>:
   b507a:	6803      	ldr	r3, [r0, #0]
   b507c:	b2c9      	uxtb	r1, r1
   b507e:	689b      	ldr	r3, [r3, #8]
   b5080:	4718      	bx	r3

000b5082 <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
   b5082:	2200      	movs	r2, #0
   b5084:	6042      	str	r2, [r0, #4]
   b5086:	6082      	str	r2, [r0, #8]
   b5088:	60c2      	str	r2, [r0, #12]
   b508a:	f240 1201 	movw	r2, #257	; 0x101
   b508e:	8202      	strh	r2, [r0, #16]
   b5090:	2201      	movs	r2, #1
   b5092:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
   b5094:	4770      	bx	lr

000b5096 <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
   b5096:	b538      	push	{r3, r4, r5, lr}
   b5098:	4604      	mov	r4, r0
   b509a:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b509c:	6800      	ldr	r0, [r0, #0]
   b509e:	2161      	movs	r1, #97	; 0x61
   b50a0:	f001 f9ac 	bl	b63fc <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
   b50a4:	6820      	ldr	r0, [r4, #0]
   b50a6:	0a29      	lsrs	r1, r5, #8
   b50a8:	f7ff ffe7 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   b50ac:	6820      	ldr	r0, [r4, #0]
   b50ae:	b2e9      	uxtb	r1, r5
   b50b0:	f7ff ffe3 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b50b4:	6820      	ldr	r0, [r4, #0]
   b50b6:	f001 f9a8 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
   b50ba:	b108      	cbz	r0, b50c0 <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   b50bc:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
   b50be:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
   b50c0:	6820      	ldr	r0, [r4, #0]
   b50c2:	2202      	movs	r2, #2
   b50c4:	2161      	movs	r1, #97	; 0x61
   b50c6:	f001 f992 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b50ca:	6820      	ldr	r0, [r4, #0]
   b50cc:	6803      	ldr	r3, [r0, #0]
   b50ce:	691b      	ldr	r3, [r3, #16]
   b50d0:	4798      	blx	r3
   b50d2:	2800      	cmp	r0, #0
   b50d4:	d0f2      	beq.n	b50bc <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
   b50d6:	6820      	ldr	r0, [r4, #0]
   b50d8:	6803      	ldr	r3, [r0, #0]
   b50da:	695b      	ldr	r3, [r3, #20]
   b50dc:	4798      	blx	r3
   b50de:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
   b50e0:	6820      	ldr	r0, [r4, #0]
   b50e2:	6803      	ldr	r3, [r0, #0]
   b50e4:	695b      	ldr	r3, [r3, #20]
   b50e6:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b50e8:	b2c3      	uxtb	r3, r0
   b50ea:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
   b50ee:	b280      	uxth	r0, r0
   b50f0:	e7e5      	b.n	b50be <_ZN5SCD3012readRegisterEt+0x28>

000b50f2 <_ZN5SCD3013dataAvailableEv>:
{
   b50f2:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   b50f4:	f240 2102 	movw	r1, #514	; 0x202
   b50f8:	f7ff ffcd 	bl	b5096 <_ZN5SCD3012readRegisterEt>
}
   b50fc:	1e43      	subs	r3, r0, #1
   b50fe:	4258      	negs	r0, r3
   b5100:	4158      	adcs	r0, r3
   b5102:	bd08      	pop	{r3, pc}

000b5104 <_ZN5SCD3015readMeasurementEv>:
{
   b5104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5108:	4604      	mov	r4, r0
  if (dataAvailable() == false)
   b510a:	f7ff fff2 	bl	b50f2 <_ZN5SCD3013dataAvailableEv>
   b510e:	4607      	mov	r7, r0
   b5110:	b918      	cbnz	r0, b511a <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
   b5112:	2700      	movs	r7, #0
}
   b5114:	4638      	mov	r0, r7
   b5116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b511a:	6820      	ldr	r0, [r4, #0]
   b511c:	2161      	movs	r1, #97	; 0x61
   b511e:	f001 f96d 	bl	b63fc <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
   b5122:	6820      	ldr	r0, [r4, #0]
   b5124:	2103      	movs	r1, #3
   b5126:	f7ff ffa8 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   b512a:	6820      	ldr	r0, [r4, #0]
   b512c:	2100      	movs	r1, #0
   b512e:	f7ff ffa4 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b5132:	6820      	ldr	r0, [r4, #0]
   b5134:	f001 f969 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
   b5138:	4605      	mov	r5, r0
   b513a:	2800      	cmp	r0, #0
   b513c:	d1e9      	bne.n	b5112 <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
   b513e:	2212      	movs	r2, #18
   b5140:	2161      	movs	r1, #97	; 0x61
   b5142:	6820      	ldr	r0, [r4, #0]
   b5144:	f001 f953 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5148:	6820      	ldr	r0, [r4, #0]
   b514a:	6803      	ldr	r3, [r0, #0]
   b514c:	691b      	ldr	r3, [r3, #16]
   b514e:	4798      	blx	r3
   b5150:	4606      	mov	r6, r0
   b5152:	b358      	cbz	r0, b51ac <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
   b5154:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
   b5156:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
   b5158:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
   b515a:	6820      	ldr	r0, [r4, #0]
   b515c:	6803      	ldr	r3, [r0, #0]
   b515e:	695b      	ldr	r3, [r3, #20]
   b5160:	4798      	blx	r3
      switch (x)
   b5162:	b2eb      	uxtb	r3, r5
   b5164:	2b10      	cmp	r3, #16
   b5166:	d80d      	bhi.n	b5184 <_ZN5SCD3015readMeasurementEv+0x80>
   b5168:	e8df f003 	tbb	[pc, r3]
   b516c:	090c0909 	.word	0x090c0909
   b5170:	18180c09 	.word	0x18180c09
   b5174:	0c18180c 	.word	0x0c18180c
   b5178:	1c0c1c1c 	.word	0x1c0c1c1c
   b517c:	1c          	.byte	0x1c
   b517d:	00          	.byte	0x00
          tempCO2 |= incoming;
   b517e:	b2c3      	uxtb	r3, r0
   b5180:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
   b5184:	3501      	adds	r5, #1
   b5186:	2d12      	cmp	r5, #18
   b5188:	d1e7      	bne.n	b515a <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
   b518a:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
   b518c:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
   b5190:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
   b5192:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
   b5196:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
   b5198:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
   b519a:	e7bb      	b.n	b5114 <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
   b519c:	b2c3      	uxtb	r3, r0
   b519e:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
   b51a2:	e7ef      	b.n	b5184 <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
   b51a4:	b2c3      	uxtb	r3, r0
   b51a6:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
   b51aa:	e7eb      	b.n	b5184 <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
   b51ac:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
   b51ae:	4681      	mov	r9, r0
   b51b0:	e7eb      	b.n	b518a <_ZN5SCD3015readMeasurementEv+0x86>

000b51b2 <_ZN5SCD306getCO2Ev>:
{
   b51b2:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
   b51b4:	7c03      	ldrb	r3, [r0, #16]
{
   b51b6:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
   b51b8:	b10b      	cbz	r3, b51be <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b51ba:	f7ff ffa3 	bl	b5104 <_ZN5SCD3015readMeasurementEv>
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
   b51be:	edd4 7a01 	vldr	s15, [r4, #4]
   b51c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  co2HasBeenReported = true;
   b51c6:	2301      	movs	r3, #1
   b51c8:	7423      	strb	r3, [r4, #16]
}
   b51ca:	ee17 3a90 	vmov	r3, s15
   b51ce:	b298      	uxth	r0, r3
   b51d0:	bd10      	pop	{r4, pc}

000b51d2 <_ZN5SCD3011getHumidityEv>:
{
   b51d2:	b510      	push	{r4, lr}
  if (humidityHasBeenReported == true) //Trigger a new read
   b51d4:	7c43      	ldrb	r3, [r0, #17]
{
   b51d6:	4604      	mov	r4, r0
  if (humidityHasBeenReported == true) //Trigger a new read
   b51d8:	b10b      	cbz	r3, b51de <_ZN5SCD3011getHumidityEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b51da:	f7ff ff93 	bl	b5104 <_ZN5SCD3015readMeasurementEv>
  humidityHasBeenReported = true;
   b51de:	2301      	movs	r3, #1
}
   b51e0:	ed94 0a03 	vldr	s0, [r4, #12]
  humidityHasBeenReported = true;
   b51e4:	7463      	strb	r3, [r4, #17]
}
   b51e6:	bd10      	pop	{r4, pc}

000b51e8 <_ZN5SCD3014getTemperatureEv>:
{
   b51e8:	b510      	push	{r4, lr}
  if (temperatureHasBeenReported == true) //Trigger a new read
   b51ea:	7c83      	ldrb	r3, [r0, #18]
{
   b51ec:	4604      	mov	r4, r0
  if (temperatureHasBeenReported == true) //Trigger a new read
   b51ee:	b10b      	cbz	r3, b51f4 <_ZN5SCD3014getTemperatureEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b51f0:	f7ff ff88 	bl	b5104 <_ZN5SCD3015readMeasurementEv>
  temperatureHasBeenReported = true;
   b51f4:	2301      	movs	r3, #1
}
   b51f6:	ed94 0a02 	vldr	s0, [r4, #8]
  temperatureHasBeenReported = true;
   b51fa:	74a3      	strb	r3, [r4, #18]
}
   b51fc:	bd10      	pop	{r4, pc}

000b51fe <_ZN5SCD3011computeCRC8EPhh>:
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0 ; x < len ; x++)
   b51fe:	440a      	add	r2, r1
  uint8_t crc = 0xFF; //Init with 0xFF
   b5200:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t x = 0 ; x < len ; x++)
   b5202:	428a      	cmp	r2, r1
   b5204:	d011      	beq.n	b522a <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
   b5206:	f811 3b01 	ldrb.w	r3, [r1], #1
   b520a:	4058      	eors	r0, r3
   b520c:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
   b520e:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t i = 0 ; i < 8 ; i++)
   b5212:	f103 33ff 	add.w	r3, r3, #4294967295
   b5216:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   b521a:	bf18      	it	ne
   b521c:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
   b5220:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   b5224:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
   b5226:	d1f2      	bne.n	b520e <_ZN5SCD3011computeCRC8EPhh+0x10>
   b5228:	e7eb      	b.n	b5202 <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
   b522a:	4770      	bx	lr

000b522c <_ZN5SCD3011sendCommandEtt>:
{
   b522c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5230:	460e      	mov	r6, r1
  data[0] = arguments >> 8;
   b5232:	ea4f 2812 	mov.w	r8, r2, lsr #8
{
   b5236:	4615      	mov	r5, r2
  data[1] = arguments & 0xFF;
   b5238:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b523c:	a901      	add	r1, sp, #4
   b523e:	2202      	movs	r2, #2
{
   b5240:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
   b5242:	f88d 8004 	strb.w	r8, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b5246:	f7ff ffda 	bl	b51fe <_ZN5SCD3011computeCRC8EPhh>
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b524a:	2161      	movs	r1, #97	; 0x61
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b524c:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b524e:	6820      	ldr	r0, [r4, #0]
   b5250:	f001 f8d4 	bl	b63fc <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
   b5254:	6820      	ldr	r0, [r4, #0]
   b5256:	0a31      	lsrs	r1, r6, #8
   b5258:	f7ff ff0f 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(command & 0xFF); //LSB
   b525c:	6820      	ldr	r0, [r4, #0]
   b525e:	b2f1      	uxtb	r1, r6
   b5260:	f7ff ff0b 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments >> 8); //MSB
   b5264:	6820      	ldr	r0, [r4, #0]
   b5266:	4641      	mov	r1, r8
   b5268:	f7ff ff07 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments & 0xFF); //LSB
   b526c:	6820      	ldr	r0, [r4, #0]
   b526e:	b2e9      	uxtb	r1, r5
   b5270:	f7ff ff03 	bl	b507a <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(crc);
   b5274:	6820      	ldr	r0, [r4, #0]
   b5276:	6803      	ldr	r3, [r0, #0]
   b5278:	4639      	mov	r1, r7
   b527a:	689b      	ldr	r3, [r3, #8]
   b527c:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b527e:	6820      	ldr	r0, [r4, #0]
   b5280:	f001 f8c3 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
}
   b5284:	fab0 f080 	clz	r0, r0
   b5288:	0940      	lsrs	r0, r0, #5
   b528a:	b002      	add	sp, #8
   b528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5290 <_ZN5SCD3014beginMeasuringEt>:
{
   b5290:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
   b5292:	2110      	movs	r1, #16
   b5294:	f7ff bfca 	b.w	b522c <_ZN5SCD3011sendCommandEtt>

000b5298 <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
   b5298:	2100      	movs	r1, #0
   b529a:	f7ff bff9 	b.w	b5290 <_ZN5SCD3014beginMeasuringEt>

000b529e <_ZN5SCD3022setMeasurementIntervalEt>:
{
   b529e:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
   b52a0:	f44f 418c 	mov.w	r1, #17920	; 0x4600
   b52a4:	f7ff bfc2 	b.w	b522c <_ZN5SCD3011sendCommandEtt>

000b52a8 <_ZN5SCD305beginER7TwoWire>:
{
   b52a8:	b538      	push	{r3, r4, r5, lr}
   b52aa:	4604      	mov	r4, r0
   b52ac:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b52ae:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b52b0:	f001 f86e 	bl	b6390 <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
   b52b4:	4620      	mov	r0, r4
   b52b6:	f7ff ffef 	bl	b5298 <_ZN5SCD3014beginMeasuringEv>
   b52ba:	4605      	mov	r5, r0
   b52bc:	b148      	cbz	r0, b52d2 <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
   b52be:	2102      	movs	r1, #2
   b52c0:	4620      	mov	r0, r4
   b52c2:	f7ff ffec 	bl	b529e <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b52c6:	2201      	movs	r2, #1
   b52c8:	f245 3106 	movw	r1, #21254	; 0x5306
   b52cc:	4620      	mov	r0, r4
   b52ce:	f7ff ffad 	bl	b522c <_ZN5SCD3011sendCommandEtt>
}
   b52d2:	4628      	mov	r0, r5
   b52d4:	bd38      	pop	{r3, r4, r5, pc}

000b52d6 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   b52d6:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   b52d8:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   b52da:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   b52dc:	7002      	strb	r2, [r0, #0]
}
   b52de:	4770      	bx	lr

000b52e0 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   b52e0:	b510      	push	{r4, lr}
   b52e2:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   b52e4:	6840      	ldr	r0, [r0, #4]
   b52e6:	f001 f893 	bl	b6410 <_ZN7TwoWire9isEnabledEv>
   b52ea:	b910      	cbnz	r0, b52f2 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   b52ec:	6860      	ldr	r0, [r4, #4]
   b52ee:	f001 f84f 	bl	b6390 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   b52f2:	2001      	movs	r0, #1
   b52f4:	bd10      	pop	{r4, pc}
	...

000b52f8 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   b52f8:	b570      	push	{r4, r5, r6, lr}
   b52fa:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   b52fc:	7841      	ldrb	r1, [r0, #1]
   b52fe:	6840      	ldr	r0, [r0, #4]
   b5300:	f001 f878 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   b5304:	7869      	ldrb	r1, [r5, #1]
   b5306:	6868      	ldr	r0, [r5, #4]
   b5308:	2202      	movs	r2, #2
   b530a:	f001 f870 	bl	b63ee <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   b530e:	6868      	ldr	r0, [r5, #4]
   b5310:	6803      	ldr	r3, [r0, #0]
   b5312:	695b      	ldr	r3, [r3, #20]
   b5314:	4798      	blx	r3
   b5316:	4606      	mov	r6, r0
   b5318:	6868      	ldr	r0, [r5, #4]
   b531a:	6803      	ldr	r3, [r0, #0]
   b531c:	695b      	ldr	r3, [r3, #20]
   b531e:	4798      	blx	r3
   b5320:	4604      	mov	r4, r0
   b5322:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  m_i2c.endTransmission();
   b5326:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   b5328:	b2a4      	uxth	r4, r4
  m_i2c.endTransmission();
   b532a:	f001 f86e 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
  return (float)level / 1.2f; // convert to lux
   b532e:	ee07 4a90 	vmov	s15, r4
}
   b5332:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5340 <_ZN6BH175015get_light_levelEv+0x48>
  return (float)level / 1.2f; // convert to lux
   b5336:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b533a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b533e:	bd70      	pop	{r4, r5, r6, pc}
   b5340:	3f99999a 	.word	0x3f99999a

000b5344 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   b5344:	7803      	ldrb	r3, [r0, #0]
   b5346:	2b23      	cmp	r3, #35	; 0x23
   b5348:	d005      	beq.n	b5356 <_ZN6BH175020wait_for_measurementEv+0x12>
   b534a:	2b13      	cmp	r3, #19
   b534c:	bf0c      	ite	eq
   b534e:	2018      	moveq	r0, #24
   b5350:	20b4      	movne	r0, #180	; 0xb4
   b5352:	f000 bdeb 	b.w	b5f2c <delay>
   b5356:	2018      	movs	r0, #24
   b5358:	e7fb      	b.n	b5352 <_ZN6BH175020wait_for_measurementEv+0xe>

000b535a <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   b535a:	b538      	push	{r3, r4, r5, lr}
   b535c:	4604      	mov	r4, r0
   b535e:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   b5360:	7841      	ldrb	r1, [r0, #1]
   b5362:	6840      	ldr	r0, [r0, #4]
   b5364:	f001 f846 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   b5368:	6860      	ldr	r0, [r4, #4]
   b536a:	6803      	ldr	r3, [r0, #0]
   b536c:	4629      	mov	r1, r5
   b536e:	689b      	ldr	r3, [r3, #8]
   b5370:	4798      	blx	r3
  m_i2c.endTransmission();
   b5372:	6860      	ldr	r0, [r4, #4]
   b5374:	f001 f849 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   b5378:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   b537a:	4620      	mov	r0, r4
}
   b537c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   b5380:	f7ff bfe0 	b.w	b5344 <_ZN6BH175020wait_for_measurementEv>

000b5384 <_ZN6BH175023make_forced_measurementEv>:
{
   b5384:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   b5386:	7803      	ldrb	r3, [r0, #0]
   b5388:	f1a3 0220 	sub.w	r2, r3, #32
   b538c:	2a01      	cmp	r2, #1
{
   b538e:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   b5390:	d901      	bls.n	b5396 <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   b5392:	2b23      	cmp	r3, #35	; 0x23
   b5394:	d110      	bne.n	b53b8 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   b5396:	7861      	ldrb	r1, [r4, #1]
   b5398:	6860      	ldr	r0, [r4, #4]
   b539a:	f001 f82b 	bl	b63f4 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   b539e:	6860      	ldr	r0, [r4, #4]
   b53a0:	7821      	ldrb	r1, [r4, #0]
   b53a2:	6803      	ldr	r3, [r0, #0]
   b53a4:	689b      	ldr	r3, [r3, #8]
   b53a6:	4798      	blx	r3
    m_i2c.endTransmission();
   b53a8:	6860      	ldr	r0, [r4, #4]
   b53aa:	f001 f82e 	bl	b640a <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   b53ae:	4620      	mov	r0, r4
}
   b53b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   b53b4:	f7ff bfc6 	b.w	b5344 <_ZN6BH175020wait_for_measurementEv>
}
   b53b8:	bd10      	pop	{r4, pc}
	...

000b53bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b53bc:	b508      	push	{r3, lr}
   b53be:	4b02      	ldr	r3, [pc, #8]	; (b53c8 <netdb_freeaddrinfo+0xc>)
   b53c0:	681b      	ldr	r3, [r3, #0]
   b53c2:	689b      	ldr	r3, [r3, #8]
   b53c4:	9301      	str	r3, [sp, #4]
   b53c6:	bd08      	pop	{r3, pc}
   b53c8:	00030268 	.word	0x00030268

000b53cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b53cc:	b508      	push	{r3, lr}
   b53ce:	4b02      	ldr	r3, [pc, #8]	; (b53d8 <netdb_getaddrinfo+0xc>)
   b53d0:	681b      	ldr	r3, [r3, #0]
   b53d2:	68db      	ldr	r3, [r3, #12]
   b53d4:	9301      	str	r3, [sp, #4]
   b53d6:	bd08      	pop	{r3, pc}
   b53d8:	00030268 	.word	0x00030268

000b53dc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b53dc:	b508      	push	{r3, lr}
   b53de:	4b02      	ldr	r3, [pc, #8]	; (b53e8 <HAL_Pin_Mode+0xc>)
   b53e0:	681b      	ldr	r3, [r3, #0]
   b53e2:	689b      	ldr	r3, [r3, #8]
   b53e4:	9301      	str	r3, [sp, #4]
   b53e6:	bd08      	pop	{r3, pc}
   b53e8:	0003022c 	.word	0x0003022c

000b53ec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b53ec:	b508      	push	{r3, lr}
   b53ee:	4b02      	ldr	r3, [pc, #8]	; (b53f8 <HAL_Get_Pin_Mode+0xc>)
   b53f0:	681b      	ldr	r3, [r3, #0]
   b53f2:	68db      	ldr	r3, [r3, #12]
   b53f4:	9301      	str	r3, [sp, #4]
   b53f6:	bd08      	pop	{r3, pc}
   b53f8:	0003022c 	.word	0x0003022c

000b53fc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b53fc:	b508      	push	{r3, lr}
   b53fe:	4b02      	ldr	r3, [pc, #8]	; (b5408 <HAL_GPIO_Write+0xc>)
   b5400:	681b      	ldr	r3, [r3, #0]
   b5402:	691b      	ldr	r3, [r3, #16]
   b5404:	9301      	str	r3, [sp, #4]
   b5406:	bd08      	pop	{r3, pc}
   b5408:	0003022c 	.word	0x0003022c

000b540c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b540c:	b508      	push	{r3, lr}
   b540e:	4b02      	ldr	r3, [pc, #8]	; (b5418 <HAL_GPIO_Read+0xc>)
   b5410:	681b      	ldr	r3, [r3, #0]
   b5412:	695b      	ldr	r3, [r3, #20]
   b5414:	9301      	str	r3, [sp, #4]
   b5416:	bd08      	pop	{r3, pc}
   b5418:	0003022c 	.word	0x0003022c

000b541c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b541c:	b508      	push	{r3, lr}
   b541e:	4b02      	ldr	r3, [pc, #8]	; (b5428 <HAL_RNG_GetRandomNumber+0xc>)
   b5420:	681b      	ldr	r3, [r3, #0]
   b5422:	685b      	ldr	r3, [r3, #4]
   b5424:	9301      	str	r3, [sp, #4]
   b5426:	bd08      	pop	{r3, pc}
   b5428:	00030218 	.word	0x00030218

000b542c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b542c:	b508      	push	{r3, lr}
   b542e:	4b02      	ldr	r3, [pc, #8]	; (b5438 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5430:	681b      	ldr	r3, [r3, #0]
   b5432:	695b      	ldr	r3, [r3, #20]
   b5434:	9301      	str	r3, [sp, #4]
   b5436:	bd08      	pop	{r3, pc}
   b5438:	00030218 	.word	0x00030218

000b543c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b543c:	b508      	push	{r3, lr}
   b543e:	4b02      	ldr	r3, [pc, #8]	; (b5448 <hal_rtc_time_is_valid+0xc>)
   b5440:	681b      	ldr	r3, [r3, #0]
   b5442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5444:	9301      	str	r3, [sp, #4]
   b5446:	bd08      	pop	{r3, pc}
   b5448:	00030218 	.word	0x00030218

000b544c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b544c:	b508      	push	{r3, lr}
   b544e:	4b02      	ldr	r3, [pc, #8]	; (b5458 <hal_rtc_get_time+0xc>)
   b5450:	681b      	ldr	r3, [r3, #0]
   b5452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5454:	9301      	str	r3, [sp, #4]
   b5456:	bd08      	pop	{r3, pc}
   b5458:	00030218 	.word	0x00030218

000b545c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b545c:	b508      	push	{r3, lr}
   b545e:	4b02      	ldr	r3, [pc, #8]	; (b5468 <os_mutex_recursive_create+0xc>)
   b5460:	681b      	ldr	r3, [r3, #0]
   b5462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5464:	9301      	str	r3, [sp, #4]
   b5466:	bd08      	pop	{r3, pc}
   b5468:	00030248 	.word	0x00030248

000b546c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b546c:	b508      	push	{r3, lr}
   b546e:	4b02      	ldr	r3, [pc, #8]	; (b5478 <inet_inet_ntop+0xc>)
   b5470:	681b      	ldr	r3, [r3, #0]
   b5472:	695b      	ldr	r3, [r3, #20]
   b5474:	9301      	str	r3, [sp, #4]
   b5476:	bd08      	pop	{r3, pc}
   b5478:	00030264 	.word	0x00030264

000b547c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b547c:	b508      	push	{r3, lr}
   b547e:	4b02      	ldr	r3, [pc, #8]	; (b5488 <hal_usart_write+0xc>)
   b5480:	681b      	ldr	r3, [r3, #0]
   b5482:	68db      	ldr	r3, [r3, #12]
   b5484:	9301      	str	r3, [sp, #4]
   b5486:	bd08      	pop	{r3, pc}
   b5488:	0003023c 	.word	0x0003023c

000b548c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b548c:	b508      	push	{r3, lr}
   b548e:	4b02      	ldr	r3, [pc, #8]	; (b5498 <hal_usart_available+0xc>)
   b5490:	681b      	ldr	r3, [r3, #0]
   b5492:	691b      	ldr	r3, [r3, #16]
   b5494:	9301      	str	r3, [sp, #4]
   b5496:	bd08      	pop	{r3, pc}
   b5498:	0003023c 	.word	0x0003023c

000b549c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b549c:	b508      	push	{r3, lr}
   b549e:	4b02      	ldr	r3, [pc, #8]	; (b54a8 <hal_usart_read+0xc>)
   b54a0:	681b      	ldr	r3, [r3, #0]
   b54a2:	695b      	ldr	r3, [r3, #20]
   b54a4:	9301      	str	r3, [sp, #4]
   b54a6:	bd08      	pop	{r3, pc}
   b54a8:	0003023c 	.word	0x0003023c

000b54ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b54ac:	b508      	push	{r3, lr}
   b54ae:	4b02      	ldr	r3, [pc, #8]	; (b54b8 <hal_usart_peek+0xc>)
   b54b0:	681b      	ldr	r3, [r3, #0]
   b54b2:	699b      	ldr	r3, [r3, #24]
   b54b4:	9301      	str	r3, [sp, #4]
   b54b6:	bd08      	pop	{r3, pc}
   b54b8:	0003023c 	.word	0x0003023c

000b54bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b54bc:	b508      	push	{r3, lr}
   b54be:	4b02      	ldr	r3, [pc, #8]	; (b54c8 <hal_usart_flush+0xc>)
   b54c0:	681b      	ldr	r3, [r3, #0]
   b54c2:	69db      	ldr	r3, [r3, #28]
   b54c4:	9301      	str	r3, [sp, #4]
   b54c6:	bd08      	pop	{r3, pc}
   b54c8:	0003023c 	.word	0x0003023c

000b54cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b54cc:	b508      	push	{r3, lr}
   b54ce:	4b02      	ldr	r3, [pc, #8]	; (b54d8 <hal_usart_is_enabled+0xc>)
   b54d0:	681b      	ldr	r3, [r3, #0]
   b54d2:	6a1b      	ldr	r3, [r3, #32]
   b54d4:	9301      	str	r3, [sp, #4]
   b54d6:	bd08      	pop	{r3, pc}
   b54d8:	0003023c 	.word	0x0003023c

000b54dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b54dc:	b508      	push	{r3, lr}
   b54de:	4b02      	ldr	r3, [pc, #8]	; (b54e8 <hal_usart_available_data_for_write+0xc>)
   b54e0:	681b      	ldr	r3, [r3, #0]
   b54e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b54e4:	9301      	str	r3, [sp, #4]
   b54e6:	bd08      	pop	{r3, pc}
   b54e8:	0003023c 	.word	0x0003023c

000b54ec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b54ec:	b508      	push	{r3, lr}
   b54ee:	4b02      	ldr	r3, [pc, #8]	; (b54f8 <hal_usart_init_ex+0xc>)
   b54f0:	681b      	ldr	r3, [r3, #0]
   b54f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54f4:	9301      	str	r3, [sp, #4]
   b54f6:	bd08      	pop	{r3, pc}
   b54f8:	0003023c 	.word	0x0003023c

000b54fc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b54fc:	b508      	push	{r3, lr}
   b54fe:	4b02      	ldr	r3, [pc, #8]	; (b5508 <hal_i2c_begin+0xc>)
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	68db      	ldr	r3, [r3, #12]
   b5504:	9301      	str	r3, [sp, #4]
   b5506:	bd08      	pop	{r3, pc}
   b5508:	00030228 	.word	0x00030228

000b550c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b550c:	b508      	push	{r3, lr}
   b550e:	4b02      	ldr	r3, [pc, #8]	; (b5518 <hal_i2c_begin_transmission+0xc>)
   b5510:	681b      	ldr	r3, [r3, #0]
   b5512:	699b      	ldr	r3, [r3, #24]
   b5514:	9301      	str	r3, [sp, #4]
   b5516:	bd08      	pop	{r3, pc}
   b5518:	00030228 	.word	0x00030228

000b551c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b551c:	b508      	push	{r3, lr}
   b551e:	4b02      	ldr	r3, [pc, #8]	; (b5528 <hal_i2c_end_transmission+0xc>)
   b5520:	681b      	ldr	r3, [r3, #0]
   b5522:	69db      	ldr	r3, [r3, #28]
   b5524:	9301      	str	r3, [sp, #4]
   b5526:	bd08      	pop	{r3, pc}
   b5528:	00030228 	.word	0x00030228

000b552c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b552c:	b508      	push	{r3, lr}
   b552e:	4b02      	ldr	r3, [pc, #8]	; (b5538 <hal_i2c_write+0xc>)
   b5530:	681b      	ldr	r3, [r3, #0]
   b5532:	6a1b      	ldr	r3, [r3, #32]
   b5534:	9301      	str	r3, [sp, #4]
   b5536:	bd08      	pop	{r3, pc}
   b5538:	00030228 	.word	0x00030228

000b553c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b553c:	b508      	push	{r3, lr}
   b553e:	4b02      	ldr	r3, [pc, #8]	; (b5548 <hal_i2c_available+0xc>)
   b5540:	681b      	ldr	r3, [r3, #0]
   b5542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5544:	9301      	str	r3, [sp, #4]
   b5546:	bd08      	pop	{r3, pc}
   b5548:	00030228 	.word	0x00030228

000b554c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b554c:	b508      	push	{r3, lr}
   b554e:	4b02      	ldr	r3, [pc, #8]	; (b5558 <hal_i2c_read+0xc>)
   b5550:	681b      	ldr	r3, [r3, #0]
   b5552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5554:	9301      	str	r3, [sp, #4]
   b5556:	bd08      	pop	{r3, pc}
   b5558:	00030228 	.word	0x00030228

000b555c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b555c:	b508      	push	{r3, lr}
   b555e:	4b02      	ldr	r3, [pc, #8]	; (b5568 <hal_i2c_peek+0xc>)
   b5560:	681b      	ldr	r3, [r3, #0]
   b5562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5564:	9301      	str	r3, [sp, #4]
   b5566:	bd08      	pop	{r3, pc}
   b5568:	00030228 	.word	0x00030228

000b556c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b556c:	b508      	push	{r3, lr}
   b556e:	4b02      	ldr	r3, [pc, #8]	; (b5578 <hal_i2c_flush+0xc>)
   b5570:	681b      	ldr	r3, [r3, #0]
   b5572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5574:	9301      	str	r3, [sp, #4]
   b5576:	bd08      	pop	{r3, pc}
   b5578:	00030228 	.word	0x00030228

000b557c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b557c:	b508      	push	{r3, lr}
   b557e:	4b02      	ldr	r3, [pc, #8]	; (b5588 <hal_i2c_is_enabled+0xc>)
   b5580:	681b      	ldr	r3, [r3, #0]
   b5582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5584:	9301      	str	r3, [sp, #4]
   b5586:	bd08      	pop	{r3, pc}
   b5588:	00030228 	.word	0x00030228

000b558c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b558c:	b508      	push	{r3, lr}
   b558e:	4b02      	ldr	r3, [pc, #8]	; (b5598 <hal_i2c_init+0xc>)
   b5590:	681b      	ldr	r3, [r3, #0]
   b5592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5594:	9301      	str	r3, [sp, #4]
   b5596:	bd08      	pop	{r3, pc}
   b5598:	00030228 	.word	0x00030228

000b559c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b559c:	b508      	push	{r3, lr}
   b559e:	4b02      	ldr	r3, [pc, #8]	; (b55a8 <hal_i2c_request_ex+0xc>)
   b55a0:	681b      	ldr	r3, [r3, #0]
   b55a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b55a4:	9301      	str	r3, [sp, #4]
   b55a6:	bd08      	pop	{r3, pc}
   b55a8:	00030228 	.word	0x00030228

000b55ac <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b55ac:	b508      	push	{r3, lr}
   b55ae:	4b02      	ldr	r3, [pc, #8]	; (b55b8 <hal_spi_begin+0xc>)
   b55b0:	681b      	ldr	r3, [r3, #0]
   b55b2:	681b      	ldr	r3, [r3, #0]
   b55b4:	9301      	str	r3, [sp, #4]
   b55b6:	bd08      	pop	{r3, pc}
   b55b8:	00030230 	.word	0x00030230

000b55bc <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b02      	ldr	r3, [pc, #8]	; (b55c8 <hal_spi_transfer+0xc>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	695b      	ldr	r3, [r3, #20]
   b55c4:	9301      	str	r3, [sp, #4]
   b55c6:	bd08      	pop	{r3, pc}
   b55c8:	00030230 	.word	0x00030230

000b55cc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b55cc:	b508      	push	{r3, lr}
   b55ce:	4b02      	ldr	r3, [pc, #8]	; (b55d8 <hal_spi_init+0xc>)
   b55d0:	681b      	ldr	r3, [r3, #0]
   b55d2:	69db      	ldr	r3, [r3, #28]
   b55d4:	9301      	str	r3, [sp, #4]
   b55d6:	bd08      	pop	{r3, pc}
   b55d8:	00030230 	.word	0x00030230

000b55dc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b02      	ldr	r3, [pc, #8]	; (b55e8 <hal_spi_is_enabled+0xc>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	6a1b      	ldr	r3, [r3, #32]
   b55e4:	9301      	str	r3, [sp, #4]
   b55e6:	bd08      	pop	{r3, pc}
   b55e8:	00030230 	.word	0x00030230

000b55ec <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b55ec:	b508      	push	{r3, lr}
   b55ee:	4b02      	ldr	r3, [pc, #8]	; (b55f8 <hal_spi_info+0xc>)
   b55f0:	681b      	ldr	r3, [r3, #0]
   b55f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b55f4:	9301      	str	r3, [sp, #4]
   b55f6:	bd08      	pop	{r3, pc}
   b55f8:	00030230 	.word	0x00030230

000b55fc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b55fc:	b508      	push	{r3, lr}
   b55fe:	4b02      	ldr	r3, [pc, #8]	; (b5608 <hal_spi_set_settings+0xc>)
   b5600:	681b      	ldr	r3, [r3, #0]
   b5602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5604:	9301      	str	r3, [sp, #4]
   b5606:	bd08      	pop	{r3, pc}
   b5608:	00030230 	.word	0x00030230

000b560c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b02      	ldr	r3, [pc, #8]	; (b5618 <hal_spi_acquire+0xc>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5614:	9301      	str	r3, [sp, #4]
   b5616:	bd08      	pop	{r3, pc}
   b5618:	00030230 	.word	0x00030230

000b561c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b561c:	b508      	push	{r3, lr}
   b561e:	4b02      	ldr	r3, [pc, #8]	; (b5628 <hal_spi_release+0xc>)
   b5620:	681b      	ldr	r3, [r3, #0]
   b5622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5624:	9301      	str	r3, [sp, #4]
   b5626:	bd08      	pop	{r3, pc}
   b5628:	00030230 	.word	0x00030230

000b562c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b562c:	b508      	push	{r3, lr}
   b562e:	4b02      	ldr	r3, [pc, #8]	; (b5638 <HAL_USB_USART_Init+0xc>)
   b5630:	681b      	ldr	r3, [r3, #0]
   b5632:	681b      	ldr	r3, [r3, #0]
   b5634:	9301      	str	r3, [sp, #4]
   b5636:	bd08      	pop	{r3, pc}
   b5638:	0003024c 	.word	0x0003024c

000b563c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b02      	ldr	r3, [pc, #8]	; (b5648 <HAL_USB_USART_Begin+0xc>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	685b      	ldr	r3, [r3, #4]
   b5644:	9301      	str	r3, [sp, #4]
   b5646:	bd08      	pop	{r3, pc}
   b5648:	0003024c 	.word	0x0003024c

000b564c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b564c:	b508      	push	{r3, lr}
   b564e:	4b02      	ldr	r3, [pc, #8]	; (b5658 <HAL_USB_USART_Available_Data+0xc>)
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	691b      	ldr	r3, [r3, #16]
   b5654:	9301      	str	r3, [sp, #4]
   b5656:	bd08      	pop	{r3, pc}
   b5658:	0003024c 	.word	0x0003024c

000b565c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	695b      	ldr	r3, [r3, #20]
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	0003024c 	.word	0x0003024c

000b566c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <HAL_USB_USART_Receive_Data+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	699b      	ldr	r3, [r3, #24]
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	0003024c 	.word	0x0003024c

000b567c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <HAL_USB_USART_Send_Data+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	69db      	ldr	r3, [r3, #28]
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	0003024c 	.word	0x0003024c

000b568c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b02      	ldr	r3, [pc, #8]	; (b5698 <HAL_USB_USART_Flush_Data+0xc>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	6a1b      	ldr	r3, [r3, #32]
   b5694:	9301      	str	r3, [sp, #4]
   b5696:	bd08      	pop	{r3, pc}
   b5698:	0003024c 	.word	0x0003024c

000b569c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b569c:	b508      	push	{r3, lr}
   b569e:	4b02      	ldr	r3, [pc, #8]	; (b56a8 <system_mode+0xc>)
   b56a0:	681b      	ldr	r3, [r3, #0]
   b56a2:	681b      	ldr	r3, [r3, #0]
   b56a4:	9301      	str	r3, [sp, #4]
   b56a6:	bd08      	pop	{r3, pc}
   b56a8:	00030220 	.word	0x00030220

000b56ac <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b56ac:	b508      	push	{r3, lr}
   b56ae:	4b02      	ldr	r3, [pc, #8]	; (b56b8 <set_system_mode+0xc>)
   b56b0:	681b      	ldr	r3, [r3, #0]
   b56b2:	685b      	ldr	r3, [r3, #4]
   b56b4:	9301      	str	r3, [sp, #4]
   b56b6:	bd08      	pop	{r3, pc}
   b56b8:	00030220 	.word	0x00030220

000b56bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b02      	ldr	r3, [pc, #8]	; (b56c8 <system_delay_ms+0xc>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	695b      	ldr	r3, [r3, #20]
   b56c4:	9301      	str	r3, [sp, #4]
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	00030220 	.word	0x00030220

000b56cc <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b56cc:	b508      	push	{r3, lr}
   b56ce:	4b02      	ldr	r3, [pc, #8]	; (b56d8 <system_thread_get_state+0xc>)
   b56d0:	681b      	ldr	r3, [r3, #0]
   b56d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	bd08      	pop	{r3, pc}
   b56d8:	00030220 	.word	0x00030220

000b56dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b03      	ldr	r3, [pc, #12]	; (b56ec <system_ctrl_set_app_request_handler+0x10>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b56e6:	9301      	str	r3, [sp, #4]
   b56e8:	bd08      	pop	{r3, pc}
   b56ea:	0000      	.short	0x0000
   b56ec:	00030220 	.word	0x00030220

000b56f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b03      	ldr	r3, [pc, #12]	; (b5700 <system_ctrl_set_result+0x10>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b56fa:	9301      	str	r3, [sp, #4]
   b56fc:	bd08      	pop	{r3, pc}
   b56fe:	0000      	.short	0x0000
   b5700:	00030220 	.word	0x00030220

000b5704 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <network_connect+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	685b      	ldr	r3, [r3, #4]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	00030240 	.word	0x00030240

000b5714 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <network_connecting+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	689b      	ldr	r3, [r3, #8]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	00030240 	.word	0x00030240

000b5724 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <network_disconnect+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	68db      	ldr	r3, [r3, #12]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	00030240 	.word	0x00030240

000b5734 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <network_ready+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	691b      	ldr	r3, [r3, #16]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	00030240 	.word	0x00030240

000b5744 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <network_on+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	695b      	ldr	r3, [r3, #20]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	00030240 	.word	0x00030240

000b5754 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <network_off+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	699b      	ldr	r3, [r3, #24]
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	00030240 	.word	0x00030240

000b5764 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <network_listen+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	69db      	ldr	r3, [r3, #28]
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	00030240 	.word	0x00030240

000b5774 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <network_listening+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	6a1b      	ldr	r3, [r3, #32]
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	00030240 	.word	0x00030240

000b5784 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <network_set_listen_timeout+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	00030240 	.word	0x00030240

000b5794 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <network_get_listen_timeout+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	00030240 	.word	0x00030240

000b57a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <network_is_on+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	00030240 	.word	0x00030240

000b57b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <network_is_off+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	00030240 	.word	0x00030240

000b57c4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <spark_process+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	689b      	ldr	r3, [r3, #8]
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	00030244 	.word	0x00030244

000b57d4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <spark_cloud_flag_connect+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	68db      	ldr	r3, [r3, #12]
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	00030244 	.word	0x00030244

000b57e4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <spark_cloud_flag_connected+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	695b      	ldr	r3, [r3, #20]
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	00030244 	.word	0x00030244

000b57f4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <spark_deviceID+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	69db      	ldr	r3, [r3, #28]
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	00030244 	.word	0x00030244

000b5804 <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5804:	b508      	push	{r3, lr}
   b5806:	4b02      	ldr	r3, [pc, #8]	; (b5810 <spark_sync_time_pending+0xc>)
   b5808:	681b      	ldr	r3, [r3, #0]
   b580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b580c:	9301      	str	r3, [sp, #4]
   b580e:	bd08      	pop	{r3, pc}
   b5810:	00030244 	.word	0x00030244

000b5814 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b581c:	9301      	str	r3, [sp, #4]
   b581e:	bd08      	pop	{r3, pc}
   b5820:	00030244 	.word	0x00030244

000b5824 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b02      	ldr	r3, [pc, #8]	; (b5830 <malloc+0xc>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	681b      	ldr	r3, [r3, #0]
   b582c:	9301      	str	r3, [sp, #4]
   b582e:	bd08      	pop	{r3, pc}
   b5830:	0003021c 	.word	0x0003021c

000b5834 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5834:	b508      	push	{r3, lr}
   b5836:	4b02      	ldr	r3, [pc, #8]	; (b5840 <free+0xc>)
   b5838:	681b      	ldr	r3, [r3, #0]
   b583a:	685b      	ldr	r3, [r3, #4]
   b583c:	9301      	str	r3, [sp, #4]
   b583e:	bd08      	pop	{r3, pc}
   b5840:	0003021c 	.word	0x0003021c

000b5844 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5844:	b508      	push	{r3, lr}
   b5846:	4b02      	ldr	r3, [pc, #8]	; (b5850 <realloc+0xc>)
   b5848:	681b      	ldr	r3, [r3, #0]
   b584a:	689b      	ldr	r3, [r3, #8]
   b584c:	9301      	str	r3, [sp, #4]
   b584e:	bd08      	pop	{r3, pc}
   b5850:	0003021c 	.word	0x0003021c

000b5854 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b5854:	b508      	push	{r3, lr}
   b5856:	4b02      	ldr	r3, [pc, #8]	; (b5860 <siprintf+0xc>)
   b5858:	681b      	ldr	r3, [r3, #0]
   b585a:	691b      	ldr	r3, [r3, #16]
   b585c:	9301      	str	r3, [sp, #4]
   b585e:	bd08      	pop	{r3, pc}
   b5860:	0003021c 	.word	0x0003021c

000b5864 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5864:	b508      	push	{r3, lr}
   b5866:	4b02      	ldr	r3, [pc, #8]	; (b5870 <snprintf+0xc>)
   b5868:	681b      	ldr	r3, [r3, #0]
   b586a:	69db      	ldr	r3, [r3, #28]
   b586c:	9301      	str	r3, [sp, #4]
   b586e:	bd08      	pop	{r3, pc}
   b5870:	0003021c 	.word	0x0003021c

000b5874 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5874:	b508      	push	{r3, lr}
   b5876:	4b02      	ldr	r3, [pc, #8]	; (b5880 <vsnprintf+0xc>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b587c:	9301      	str	r3, [sp, #4]
   b587e:	bd08      	pop	{r3, pc}
   b5880:	0003021c 	.word	0x0003021c

000b5884 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5884:	b508      	push	{r3, lr}
   b5886:	4b02      	ldr	r3, [pc, #8]	; (b5890 <__assert_func+0xc>)
   b5888:	681b      	ldr	r3, [r3, #0]
   b588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b588c:	9301      	str	r3, [sp, #4]
   b588e:	bd08      	pop	{r3, pc}
   b5890:	0003021c 	.word	0x0003021c

000b5894 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5894:	b508      	push	{r3, lr}
   b5896:	4b02      	ldr	r3, [pc, #8]	; (b58a0 <newlib_impure_ptr_callback+0xc>)
   b5898:	681b      	ldr	r3, [r3, #0]
   b589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b589c:	9301      	str	r3, [sp, #4]
   b589e:	bd08      	pop	{r3, pc}
   b58a0:	0003021c 	.word	0x0003021c

000b58a4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b58a4:	b508      	push	{r3, lr}
   b58a6:	4b02      	ldr	r3, [pc, #8]	; (b58b0 <strftime+0xc>)
   b58a8:	681b      	ldr	r3, [r3, #0]
   b58aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b58ac:	9301      	str	r3, [sp, #4]
   b58ae:	bd08      	pop	{r3, pc}
   b58b0:	0003021c 	.word	0x0003021c

000b58b4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b58b4:	b508      	push	{r3, lr}
   b58b6:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <localtime_r+0xc>)
   b58b8:	681b      	ldr	r3, [r3, #0]
   b58ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b58bc:	9301      	str	r3, [sp, #4]
   b58be:	bd08      	pop	{r3, pc}
   b58c0:	0003021c 	.word	0x0003021c

000b58c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b58c4:	2200      	movs	r2, #0
   b58c6:	6840      	ldr	r0, [r0, #4]
   b58c8:	4611      	mov	r1, r2
   b58ca:	f7ff bf53 	b.w	b5774 <network_listening>

000b58ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b58ce:	2200      	movs	r2, #0
   b58d0:	6840      	ldr	r0, [r0, #4]
   b58d2:	4611      	mov	r1, r2
   b58d4:	f7ff bf5e 	b.w	b5794 <network_get_listen_timeout>

000b58d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b58d8:	6840      	ldr	r0, [r0, #4]
   b58da:	2200      	movs	r2, #0
   b58dc:	f7ff bf52 	b.w	b5784 <network_set_listen_timeout>

000b58e0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b58e0:	6840      	ldr	r0, [r0, #4]
   b58e2:	2200      	movs	r2, #0
   b58e4:	f081 0101 	eor.w	r1, r1, #1
   b58e8:	f7ff bf3c 	b.w	b5764 <network_listen>

000b58ec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b58ec:	2300      	movs	r3, #0
   b58ee:	6840      	ldr	r0, [r0, #4]
   b58f0:	461a      	mov	r2, r3
   b58f2:	4619      	mov	r1, r3
   b58f4:	f7ff bf2e 	b.w	b5754 <network_off>

000b58f8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b58f8:	2300      	movs	r3, #0
   b58fa:	6840      	ldr	r0, [r0, #4]
   b58fc:	461a      	mov	r2, r3
   b58fe:	4619      	mov	r1, r3
   b5900:	f7ff bf20 	b.w	b5744 <network_on>

000b5904 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5904:	2200      	movs	r2, #0
   b5906:	6840      	ldr	r0, [r0, #4]
   b5908:	4611      	mov	r1, r2
   b590a:	f7ff bf13 	b.w	b5734 <network_ready>

000b590e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b590e:	2200      	movs	r2, #0
   b5910:	6840      	ldr	r0, [r0, #4]
   b5912:	4611      	mov	r1, r2
   b5914:	f7ff befe 	b.w	b5714 <network_connecting>

000b5918 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5918:	6840      	ldr	r0, [r0, #4]
   b591a:	2200      	movs	r2, #0
   b591c:	2102      	movs	r1, #2
   b591e:	f7ff bf01 	b.w	b5724 <network_disconnect>

000b5922 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5922:	2300      	movs	r3, #0
   b5924:	6840      	ldr	r0, [r0, #4]
   b5926:	461a      	mov	r2, r3
   b5928:	f7ff beec 	b.w	b5704 <network_connect>

000b592c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b592c:	4b02      	ldr	r3, [pc, #8]	; (b5938 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b592e:	2203      	movs	r2, #3
   b5930:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5932:	4a02      	ldr	r2, [pc, #8]	; (b593c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5934:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5936:	4770      	bx	lr
   b5938:	2003e6b0 	.word	0x2003e6b0
   b593c:	000b7c6c 	.word	0x000b7c6c

000b5940 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5940:	2100      	movs	r1, #0
   b5942:	f7ff be6b 	b.w	b561c <hal_spi_release>

000b5946 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5946:	2100      	movs	r1, #0
   b5948:	f7ff be60 	b.w	b560c <hal_spi_acquire>

000b594c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b594c:	b510      	push	{r4, lr}
   b594e:	4604      	mov	r4, r0
   b5950:	4608      	mov	r0, r1
{
    _spi = spi;
   b5952:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5954:	f7ff fe3a 	bl	b55cc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5958:	2300      	movs	r3, #0
   b595a:	6063      	str	r3, [r4, #4]
}
   b595c:	4620      	mov	r0, r4
   b595e:	bd10      	pop	{r4, pc}

000b5960 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5960:	b513      	push	{r0, r1, r4, lr}
   b5962:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5964:	7800      	ldrb	r0, [r0, #0]
   b5966:	f7ff ffee 	bl	b5946 <_ZN8SPIClass4lockEv.isra.0>
   b596a:	b958      	cbnz	r0, b5984 <_ZN8SPIClass5beginEv+0x24>
   b596c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b596e:	9001      	str	r0, [sp, #4]
   b5970:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5974:	f7ff fe1a 	bl	b55ac <hal_spi_begin>
        unlock();
   b5978:	9801      	ldr	r0, [sp, #4]
    }
}
   b597a:	b002      	add	sp, #8
   b597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5980:	f7ff bfde 	b.w	b5940 <_ZN8SPIClass6unlockEv.isra.0>
   b5984:	b002      	add	sp, #8
   b5986:	bd10      	pop	{r4, pc}

000b5988 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5988:	7800      	ldrb	r0, [r0, #0]
   b598a:	f7ff bfd9 	b.w	b5940 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5990 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5990:	0840      	lsrs	r0, r0, #1
{
   b5992:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5994:	6018      	str	r0, [r3, #0]
   b5996:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5998:	6818      	ldr	r0, [r3, #0]
   b599a:	4288      	cmp	r0, r1
   b599c:	b2e5      	uxtb	r5, r4
   b599e:	d906      	bls.n	b59ae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b59a0:	3401      	adds	r4, #1
   b59a2:	2c08      	cmp	r4, #8
   b59a4:	d002      	beq.n	b59ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b59a6:	0840      	lsrs	r0, r0, #1
   b59a8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b59aa:	e7f5      	b.n	b5998 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b59ac:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b59ae:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b59b0:	5d5b      	ldrb	r3, [r3, r5]
   b59b2:	7013      	strb	r3, [r2, #0]
}
   b59b4:	bd30      	pop	{r4, r5, pc}
   b59b6:	bf00      	nop
   b59b8:	000b7ca0 	.word	0x000b7ca0

000b59bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b59bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59c0:	4606      	mov	r6, r0
   b59c2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b59c4:	7800      	ldrb	r0, [r0, #0]
{
   b59c6:	460c      	mov	r4, r1
    CHECK(lock());
   b59c8:	f7ff ffbd 	bl	b5946 <_ZN8SPIClass4lockEv.isra.0>
   b59cc:	2800      	cmp	r0, #0
   b59ce:	db1b      	blt.n	b5a08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b59d0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b59d2:	2214      	movs	r2, #20
   b59d4:	2100      	movs	r1, #0
   b59d6:	a809      	add	r0, sp, #36	; 0x24
   b59d8:	f001 ff60 	bl	b789c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b59dc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b59de:	2200      	movs	r2, #0
   b59e0:	a909      	add	r1, sp, #36	; 0x24
   b59e2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b59e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b59e8:	f7ff fe00 	bl	b55ec <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b59ec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b59f0:	b113      	cbz	r3, b59f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b59f2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b59f6:	b155      	cbz	r5, b5a0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b59f8:	2700      	movs	r7, #0
   b59fa:	46b9      	mov	r9, r7
   b59fc:	46b8      	mov	r8, r7
   b59fe:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5a00:	7923      	ldrb	r3, [r4, #4]
   b5a02:	b15d      	cbz	r5, b5a1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5a04:	b1c3      	cbz	r3, b5a38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5a06:	2000      	movs	r0, #0
}
   b5a08:	b00f      	add	sp, #60	; 0x3c
   b5a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5a0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5a12:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5a16:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5a1a:	e7f1      	b.n	b5a00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5a1c:	2b00      	cmp	r3, #0
   b5a1e:	d135      	bne.n	b5a8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5a20:	68a3      	ldr	r3, [r4, #8]
   b5a22:	4543      	cmp	r3, r8
   b5a24:	d108      	bne.n	b5a38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5a26:	f88d 9020 	strb.w	r9, [sp, #32]
   b5a2a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5a2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5a32:	89a3      	ldrh	r3, [r4, #12]
   b5a34:	429a      	cmp	r2, r3
   b5a36:	d0e6      	beq.n	b5a06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5a38:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5a3a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5a3c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5a40:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5a42:	ab04      	add	r3, sp, #16
   b5a44:	f10d 020f 	add.w	r2, sp, #15
   b5a48:	f7ff ffa2 	bl	b5990 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5a4c:	7921      	ldrb	r1, [r4, #4]
   b5a4e:	b985      	cbnz	r5, b5a72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5a50:	b989      	cbnz	r1, b5a76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5a52:	68a3      	ldr	r3, [r4, #8]
   b5a54:	4543      	cmp	r3, r8
   b5a56:	d30e      	bcc.n	b5a76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5a58:	f88d 9020 	strb.w	r9, [sp, #32]
   b5a5c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5a60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5a64:	89a3      	ldrh	r3, [r4, #12]
   b5a66:	429a      	cmp	r2, r3
   b5a68:	d105      	bne.n	b5a76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5a6a:	9b04      	ldr	r3, [sp, #16]
   b5a6c:	4543      	cmp	r3, r8
   b5a6e:	d102      	bne.n	b5a76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5a70:	e7c9      	b.n	b5a06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5a72:	2900      	cmp	r1, #0
   b5a74:	d1f9      	bne.n	b5a6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5a76:	2300      	movs	r3, #0
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	7b63      	ldrb	r3, [r4, #13]
   b5a7c:	9300      	str	r3, [sp, #0]
   b5a7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5a82:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5a84:	7830      	ldrb	r0, [r6, #0]
   b5a86:	f7ff fdb9 	bl	b55fc <hal_spi_set_settings>
   b5a8a:	e7bc      	b.n	b5a06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5a8c:	e9cd 5500 	strd	r5, r5, [sp]
   b5a90:	462b      	mov	r3, r5
   b5a92:	462a      	mov	r2, r5
   b5a94:	2101      	movs	r1, #1
   b5a96:	e7f5      	b.n	b5a84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5a98 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5a98:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5a9a:	7800      	ldrb	r0, [r0, #0]
   b5a9c:	f7ff fd8e 	bl	b55bc <hal_spi_transfer>
}
   b5aa0:	b2c0      	uxtb	r0, r0
   b5aa2:	bd08      	pop	{r3, pc}

000b5aa4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5aa4:	4b05      	ldr	r3, [pc, #20]	; (b5abc <_GLOBAL__sub_I_System+0x18>)
   b5aa6:	2202      	movs	r2, #2
   b5aa8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5aaa:	4b05      	ldr	r3, [pc, #20]	; (b5ac0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5aac:	4a05      	ldr	r2, [pc, #20]	; (b5ac4 <_GLOBAL__sub_I_System+0x20>)
   b5aae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ab0:	2000      	movs	r0, #0
   b5ab2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5ab6:	f7ff bdf9 	b.w	b56ac <set_system_mode>
   b5aba:	bf00      	nop
   b5abc:	2003e6c4 	.word	0x2003e6c4
   b5ac0:	2003e6b8 	.word	0x2003e6b8
   b5ac4:	ffff0000 	.word	0xffff0000

000b5ac8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5ac8:	b510      	push	{r4, lr}
   b5aca:	4604      	mov	r4, r0
{
	free(buffer);
   b5acc:	6800      	ldr	r0, [r0, #0]
   b5ace:	f7ff feb1 	bl	b5834 <free>
}
   b5ad2:	4620      	mov	r0, r4
   b5ad4:	bd10      	pop	{r4, pc}

000b5ad6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5ad6:	b510      	push	{r4, lr}
   b5ad8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5ada:	6800      	ldr	r0, [r0, #0]
   b5adc:	b108      	cbz	r0, b5ae2 <_ZN6String10invalidateEv+0xc>
   b5ade:	f7ff fea9 	bl	b5834 <free>
	buffer = NULL;
   b5ae2:	2300      	movs	r3, #0
	capacity = len = 0;
   b5ae4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5ae8:	6023      	str	r3, [r4, #0]
}
   b5aea:	bd10      	pop	{r4, pc}

000b5aec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5aec:	b538      	push	{r3, r4, r5, lr}
   b5aee:	4604      	mov	r4, r0
   b5af0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5af2:	6800      	ldr	r0, [r0, #0]
   b5af4:	3101      	adds	r1, #1
   b5af6:	f7ff fea5 	bl	b5844 <realloc>
	if (newbuffer) {
   b5afa:	b110      	cbz	r0, b5b02 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5afc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5b00:	2001      	movs	r0, #1
	}
	return 0;
}
   b5b02:	bd38      	pop	{r3, r4, r5, pc}

000b5b04 <_ZN6String7reserveEj>:
{
   b5b04:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5b06:	6803      	ldr	r3, [r0, #0]
{
   b5b08:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5b0a:	b123      	cbz	r3, b5b16 <_ZN6String7reserveEj+0x12>
   b5b0c:	6843      	ldr	r3, [r0, #4]
   b5b0e:	428b      	cmp	r3, r1
   b5b10:	d301      	bcc.n	b5b16 <_ZN6String7reserveEj+0x12>
   b5b12:	2001      	movs	r0, #1
}
   b5b14:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5b16:	4620      	mov	r0, r4
   b5b18:	f7ff ffe8 	bl	b5aec <_ZN6String12changeBufferEj>
   b5b1c:	2800      	cmp	r0, #0
   b5b1e:	d0f9      	beq.n	b5b14 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5b20:	68a3      	ldr	r3, [r4, #8]
   b5b22:	2b00      	cmp	r3, #0
   b5b24:	d1f5      	bne.n	b5b12 <_ZN6String7reserveEj+0xe>
   b5b26:	6822      	ldr	r2, [r4, #0]
   b5b28:	7013      	strb	r3, [r2, #0]
   b5b2a:	e7f2      	b.n	b5b12 <_ZN6String7reserveEj+0xe>

000b5b2c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5b2e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5b30:	4611      	mov	r1, r2
   b5b32:	9201      	str	r2, [sp, #4]
{
   b5b34:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5b36:	f7ff ffe5 	bl	b5b04 <_ZN6String7reserveEj>
   b5b3a:	9a01      	ldr	r2, [sp, #4]
   b5b3c:	b928      	cbnz	r0, b5b4a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5b3e:	4620      	mov	r0, r4
   b5b40:	f7ff ffc9 	bl	b5ad6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5b44:	4620      	mov	r0, r4
   b5b46:	b003      	add	sp, #12
   b5b48:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5b4a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5b4c:	4629      	mov	r1, r5
   b5b4e:	6820      	ldr	r0, [r4, #0]
   b5b50:	f001 fe96 	bl	b7880 <memcpy>
	buffer[len] = 0;
   b5b54:	6822      	ldr	r2, [r4, #0]
   b5b56:	68a3      	ldr	r3, [r4, #8]
   b5b58:	2100      	movs	r1, #0
   b5b5a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5b5c:	e7f2      	b.n	b5b44 <_ZN6String4copyEPKcj+0x18>

000b5b5e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5b5e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5b60:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5b62:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5b66:	4604      	mov	r4, r0
	len = 0;
   b5b68:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5b6a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5b6c:	b141      	cbz	r1, b5b80 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5b6e:	4608      	mov	r0, r1
   b5b70:	9101      	str	r1, [sp, #4]
   b5b72:	f001 fedb 	bl	b792c <strlen>
   b5b76:	9901      	ldr	r1, [sp, #4]
   b5b78:	4602      	mov	r2, r0
   b5b7a:	4620      	mov	r0, r4
   b5b7c:	f7ff ffd6 	bl	b5b2c <_ZN6String4copyEPKcj>
}
   b5b80:	4620      	mov	r0, r4
   b5b82:	b002      	add	sp, #8
   b5b84:	bd10      	pop	{r4, pc}
	...

000b5b88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5b88:	4802      	ldr	r0, [pc, #8]	; (b5b94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5b8a:	2300      	movs	r3, #0
   b5b8c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5b8e:	f7ff bc65 	b.w	b545c <os_mutex_recursive_create>
   b5b92:	bf00      	nop
   b5b94:	2003e6c8 	.word	0x2003e6c8

000b5b98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b9a:	4606      	mov	r6, r0
   b5b9c:	460d      	mov	r5, r1
  size_t n = 0;
   b5b9e:	188f      	adds	r7, r1, r2
   b5ba0:	2400      	movs	r4, #0
  while (size--) {
   b5ba2:	42bd      	cmp	r5, r7
   b5ba4:	d00c      	beq.n	b5bc0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5ba6:	6833      	ldr	r3, [r6, #0]
   b5ba8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5bac:	689b      	ldr	r3, [r3, #8]
   b5bae:	4630      	mov	r0, r6
   b5bb0:	4798      	blx	r3
     if (chunk>=0)
   b5bb2:	1e03      	subs	r3, r0, #0
   b5bb4:	db01      	blt.n	b5bba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5bb6:	441c      	add	r4, r3
  while (size--) {
   b5bb8:	e7f3      	b.n	b5ba2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5bba:	2c00      	cmp	r4, #0
   b5bbc:	bf08      	it	eq
   b5bbe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bc4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5bc4:	b513      	push	{r0, r1, r4, lr}
   b5bc6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5bc8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5bca:	b159      	cbz	r1, b5be4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5bcc:	9101      	str	r1, [sp, #4]
   b5bce:	f001 fead 	bl	b792c <strlen>
   b5bd2:	6823      	ldr	r3, [r4, #0]
   b5bd4:	9901      	ldr	r1, [sp, #4]
   b5bd6:	68db      	ldr	r3, [r3, #12]
   b5bd8:	4602      	mov	r2, r0
   b5bda:	4620      	mov	r0, r4
    }
   b5bdc:	b002      	add	sp, #8
   b5bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5be2:	4718      	bx	r3
    }
   b5be4:	b002      	add	sp, #8
   b5be6:	bd10      	pop	{r4, pc}

000b5be8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5be8:	b508      	push	{r3, lr}
  return write(str);
   b5bea:	f7ff ffeb 	bl	b5bc4 <_ZN5Print5writeEPKc>
}
   b5bee:	bd08      	pop	{r3, pc}

000b5bf0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5bf0:	6803      	ldr	r3, [r0, #0]
   b5bf2:	689b      	ldr	r3, [r3, #8]
   b5bf4:	4718      	bx	r3

000b5bf6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5bf6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5bf8:	210d      	movs	r1, #13
{
   b5bfa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5bfc:	f7ff fff8 	bl	b5bf0 <_ZN5Print5printEc>
  n += print('\n');
   b5c00:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5c02:	4604      	mov	r4, r0
  n += print('\n');
   b5c04:	4628      	mov	r0, r5
   b5c06:	f7ff fff3 	bl	b5bf0 <_ZN5Print5printEc>
  return n;
}
   b5c0a:	4420      	add	r0, r4
   b5c0c:	bd38      	pop	{r3, r4, r5, pc}

000b5c0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5c0e:	b538      	push	{r3, r4, r5, lr}
   b5c10:	4605      	mov	r5, r0
  return write(str);
   b5c12:	f7ff ffd7 	bl	b5bc4 <_ZN5Print5writeEPKc>
   b5c16:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5c18:	4628      	mov	r0, r5
   b5c1a:	f7ff ffec 	bl	b5bf6 <_ZN5Print7printlnEv>
  return n;
}
   b5c1e:	4420      	add	r0, r4
   b5c20:	bd38      	pop	{r3, r4, r5, pc}

000b5c22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5c22:	b530      	push	{r4, r5, lr}
   b5c24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5c26:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5c28:	2a01      	cmp	r2, #1
  *str = '\0';
   b5c2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5c2e:	bf98      	it	ls
   b5c30:	220a      	movls	r2, #10
   b5c32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5c34:	460d      	mov	r5, r1
   b5c36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5c3a:	fb01 5312 	mls	r3, r1, r2, r5
   b5c3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c42:	2b09      	cmp	r3, #9
   b5c44:	bf94      	ite	ls
   b5c46:	3330      	addls	r3, #48	; 0x30
   b5c48:	3337      	addhi	r3, #55	; 0x37
   b5c4a:	b2db      	uxtb	r3, r3
  } while(n);
   b5c4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5c52:	d9ef      	bls.n	b5c34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5c54:	4621      	mov	r1, r4
   b5c56:	f7ff ffb5 	bl	b5bc4 <_ZN5Print5writeEPKc>
}
   b5c5a:	b00b      	add	sp, #44	; 0x2c
   b5c5c:	bd30      	pop	{r4, r5, pc}

000b5c5e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c62:	b086      	sub	sp, #24
   b5c64:	af00      	add	r7, sp, #0
   b5c66:	4605      	mov	r5, r0
   b5c68:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5c6a:	1d38      	adds	r0, r7, #4
   b5c6c:	2114      	movs	r1, #20
{
   b5c6e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5c70:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5c72:	f7ff fdff 	bl	b5874 <vsnprintf>

    if (n<bufsize)
   b5c76:	2813      	cmp	r0, #19
   b5c78:	d80e      	bhi.n	b5c98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5c7a:	1d39      	adds	r1, r7, #4
   b5c7c:	4628      	mov	r0, r5
   b5c7e:	f7ff ffa1 	bl	b5bc4 <_ZN5Print5writeEPKc>
   b5c82:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5c84:	b11e      	cbz	r6, b5c8e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5c86:	4628      	mov	r0, r5
   b5c88:	f7ff ffb5 	bl	b5bf6 <_ZN5Print7printlnEv>
   b5c8c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5c8e:	4620      	mov	r0, r4
   b5c90:	3718      	adds	r7, #24
   b5c92:	46bd      	mov	sp, r7
   b5c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5c98:	f100 0308 	add.w	r3, r0, #8
   b5c9c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5ca0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5ca2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5ca6:	4622      	mov	r2, r4
   b5ca8:	1c41      	adds	r1, r0, #1
   b5caa:	683b      	ldr	r3, [r7, #0]
   b5cac:	4668      	mov	r0, sp
   b5cae:	f7ff fde1 	bl	b5874 <vsnprintf>
  return write(str);
   b5cb2:	4669      	mov	r1, sp
   b5cb4:	4628      	mov	r0, r5
   b5cb6:	f7ff ff85 	bl	b5bc4 <_ZN5Print5writeEPKc>
   b5cba:	4604      	mov	r4, r0
   b5cbc:	46c5      	mov	sp, r8
   b5cbe:	e7e1      	b.n	b5c84 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5cc0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5cc0:	4b01      	ldr	r3, [pc, #4]	; (b5cc8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5cc2:	4a02      	ldr	r2, [pc, #8]	; (b5ccc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5cc4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5cc6:	4770      	bx	lr
   b5cc8:	2003e6cc 	.word	0x2003e6cc
   b5ccc:	000b7ca8 	.word	0x000b7ca8

000b5cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5cd0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5cd2:	2000      	movs	r0, #0
   b5cd4:	f7ff fd96 	bl	b5804 <spark_sync_time_pending>
   b5cd8:	b128      	cbz	r0, b5ce6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5cda:	f7ff fd83 	bl	b57e4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5cde:	f080 0001 	eor.w	r0, r0, #1
   b5ce2:	b2c0      	uxtb	r0, r0
    }
   b5ce4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5ce6:	2001      	movs	r0, #1
   b5ce8:	e7fc      	b.n	b5ce4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5cec <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5cec:	b530      	push	{r4, r5, lr}
   b5cee:	b093      	sub	sp, #76	; 0x4c
   b5cf0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5cf4:	4b19      	ldr	r3, [pc, #100]	; (b5d5c <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5cf6:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5cf8:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5cfc:	9b01      	ldr	r3, [sp, #4]
   b5cfe:	1852      	adds	r2, r2, r1
   b5d00:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5d04:	4816      	ldr	r0, [pc, #88]	; (b5d60 <_ZN9TimeClass7timeStrEx+0x74>)
   b5d06:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5d0a:	1852      	adds	r2, r2, r1
   b5d0c:	eb43 0300 	adc.w	r3, r3, r0
   b5d10:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5d14:	2224      	movs	r2, #36	; 0x24
   b5d16:	eb0d 0002 	add.w	r0, sp, r2
   b5d1a:	2100      	movs	r1, #0
   b5d1c:	f001 fdbe 	bl	b789c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5d20:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5d22:	a909      	add	r1, sp, #36	; 0x24
   b5d24:	4668      	mov	r0, sp
   b5d26:	f7ff fdc5 	bl	b58b4 <localtime_r>
    char ascstr[26] = {};
   b5d2a:	2216      	movs	r2, #22
   b5d2c:	4629      	mov	r1, r5
   b5d2e:	a803      	add	r0, sp, #12
   b5d30:	9502      	str	r5, [sp, #8]
   b5d32:	f001 fdb3 	bl	b789c <memset>
    asctime_r(&calendar_time, ascstr);
   b5d36:	a902      	add	r1, sp, #8
   b5d38:	a809      	add	r0, sp, #36	; 0x24
   b5d3a:	f001 fd6d 	bl	b7818 <asctime_r>
    int len = strlen(ascstr);
   b5d3e:	a802      	add	r0, sp, #8
   b5d40:	f001 fdf4 	bl	b792c <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5d44:	ab12      	add	r3, sp, #72	; 0x48
   b5d46:	4418      	add	r0, r3
    return String(ascstr);
   b5d48:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5d4a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5d4e:	4620      	mov	r0, r4
   b5d50:	f7ff ff05 	bl	b5b5e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5d54:	4620      	mov	r0, r4
   b5d56:	b013      	add	sp, #76	; 0x4c
   b5d58:	bd30      	pop	{r4, r5, pc}
   b5d5a:	bf00      	nop
   b5d5c:	2003e6e0 	.word	0x2003e6e0
   b5d60:	2003e6d8 	.word	0x2003e6d8

000b5d64 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b5d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5d68:	b0a4      	sub	sp, #144	; 0x90
   b5d6a:	4607      	mov	r7, r0
   b5d6c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5d6e:	a814      	add	r0, sp, #80	; 0x50
{
   b5d70:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5d72:	223f      	movs	r2, #63	; 0x3f
{
   b5d74:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5d76:	f001 fde1 	bl	b793c <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5d7a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5d7c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5d7e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5d82:	f001 fdd3 	bl	b792c <strlen>
   b5d86:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b5d88:	bb4c      	cbnz	r4, b5dde <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b5d8a:	4929      	ldr	r1, [pc, #164]	; (b5e30 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b5d8c:	a803      	add	r0, sp, #12
   b5d8e:	f001 fdc5 	bl	b791c <strcpy>
   b5d92:	ac14      	add	r4, sp, #80	; 0x50
{
   b5d94:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b5d96:	f105 39ff 	add.w	r9, r5, #4294967295
   b5d9a:	45b1      	cmp	r9, r6
   b5d9c:	d934      	bls.n	b5e08 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b5d9e:	7823      	ldrb	r3, [r4, #0]
   b5da0:	2b25      	cmp	r3, #37	; 0x25
   b5da2:	f106 0a01 	add.w	sl, r6, #1
   b5da6:	d117      	bne.n	b5dd8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b5da8:	7863      	ldrb	r3, [r4, #1]
   b5daa:	2b7a      	cmp	r3, #122	; 0x7a
   b5dac:	d114      	bne.n	b5dd8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b5dae:	a803      	add	r0, sp, #12
   b5db0:	f001 fdbc 	bl	b792c <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5db4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b5db6:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5db8:	1830      	adds	r0, r6, r0
   b5dba:	4418      	add	r0, r3
   b5dbc:	eba9 0206 	sub.w	r2, r9, r6
   b5dc0:	1ca1      	adds	r1, r4, #2
   b5dc2:	f001 fd5d 	bl	b7880 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b5dc6:	462a      	mov	r2, r5
   b5dc8:	a903      	add	r1, sp, #12
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f001 fd58 	bl	b7880 <memcpy>
            len = strlen(format_str);
   b5dd0:	a814      	add	r0, sp, #80	; 0x50
   b5dd2:	f001 fdab 	bl	b792c <strlen>
   b5dd6:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b5dd8:	3401      	adds	r4, #1
   b5dda:	4656      	mov	r6, sl
   b5ddc:	e7db      	b.n	b5d96 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b5dde:	233c      	movs	r3, #60	; 0x3c
   b5de0:	fb94 f2f3 	sdiv	r2, r4, r3
   b5de4:	2a00      	cmp	r2, #0
   b5de6:	bfb8      	it	lt
   b5de8:	4252      	neglt	r2, r2
   b5dea:	fbb2 f1f3 	udiv	r1, r2, r3
   b5dee:	fb03 2211 	mls	r2, r3, r1, r2
   b5df2:	9200      	str	r2, [sp, #0]
   b5df4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b5df8:	4a0e      	ldr	r2, [pc, #56]	; (b5e34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b5dfa:	fb94 f3f3 	sdiv	r3, r4, r3
   b5dfe:	2110      	movs	r1, #16
   b5e00:	a803      	add	r0, sp, #12
   b5e02:	f7ff fd2f 	bl	b5864 <snprintf>
   b5e06:	e7c4      	b.n	b5d92 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b5e08:	2100      	movs	r1, #0
   b5e0a:	222e      	movs	r2, #46	; 0x2e
   b5e0c:	a808      	add	r0, sp, #32
   b5e0e:	9107      	str	r1, [sp, #28]
   b5e10:	f001 fd44 	bl	b789c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b5e14:	4643      	mov	r3, r8
   b5e16:	aa14      	add	r2, sp, #80	; 0x50
   b5e18:	2132      	movs	r1, #50	; 0x32
   b5e1a:	a807      	add	r0, sp, #28
   b5e1c:	f7ff fd42 	bl	b58a4 <strftime>
    return String(buf);
   b5e20:	a907      	add	r1, sp, #28
   b5e22:	4638      	mov	r0, r7
   b5e24:	f7ff fe9b 	bl	b5b5e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5e28:	4638      	mov	r0, r7
   b5e2a:	b024      	add	sp, #144	; 0x90
   b5e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5e30:	000b7cac 	.word	0x000b7cac
   b5e34:	000b7cae 	.word	0x000b7cae

000b5e38 <_ZN9TimeClass6formatExPKc>:
{
   b5e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e3a:	b08d      	sub	sp, #52	; 0x34
   b5e3c:	e9cd 2300 	strd	r2, r3, [sp]
   b5e40:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b5e42:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b5e44:	b915      	cbnz	r5, b5e4c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b5e46:	4b19      	ldr	r3, [pc, #100]	; (b5eac <_ZN9TimeClass6formatExPKc+0x74>)
   b5e48:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b5e4a:	b12d      	cbz	r5, b5e58 <_ZN9TimeClass6formatExPKc+0x20>
   b5e4c:	4b18      	ldr	r3, [pc, #96]	; (b5eb0 <_ZN9TimeClass6formatExPKc+0x78>)
   b5e4e:	4628      	mov	r0, r5
   b5e50:	6819      	ldr	r1, [r3, #0]
   b5e52:	f001 fd59 	bl	b7908 <strcmp>
   b5e56:	b938      	cbnz	r0, b5e68 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b5e58:	e9dd 2300 	ldrd	r2, r3, [sp]
   b5e5c:	4620      	mov	r0, r4
   b5e5e:	f7ff ff45 	bl	b5cec <_ZN9TimeClass7timeStrEx>
}
   b5e62:	4620      	mov	r0, r4
   b5e64:	b00d      	add	sp, #52	; 0x34
   b5e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b5e68:	4e12      	ldr	r6, [pc, #72]	; (b5eb4 <_ZN9TimeClass6formatExPKc+0x7c>)
   b5e6a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b5e6c:	4f12      	ldr	r7, [pc, #72]	; (b5eb8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b5e6e:	e9d6 3200 	ldrd	r3, r2, [r6]
   b5e72:	185b      	adds	r3, r3, r1
   b5e74:	9901      	ldr	r1, [sp, #4]
   b5e76:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b5e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5e7e:	181b      	adds	r3, r3, r0
   b5e80:	eb42 0201 	adc.w	r2, r2, r1
   b5e84:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b5e88:	2100      	movs	r1, #0
   b5e8a:	2224      	movs	r2, #36	; 0x24
   b5e8c:	a803      	add	r0, sp, #12
   b5e8e:	f001 fd05 	bl	b789c <memset>
    localtime_r(&t, &calendar_time);
   b5e92:	a903      	add	r1, sp, #12
   b5e94:	4668      	mov	r0, sp
   b5e96:	f7ff fd0d 	bl	b58b4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b5e9a:	6832      	ldr	r2, [r6, #0]
   b5e9c:	683b      	ldr	r3, [r7, #0]
   b5e9e:	a903      	add	r1, sp, #12
   b5ea0:	4413      	add	r3, r2
   b5ea2:	4620      	mov	r0, r4
   b5ea4:	462a      	mov	r2, r5
   b5ea6:	f7ff ff5d 	bl	b5d64 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b5eaa:	e7da      	b.n	b5e62 <_ZN9TimeClass6formatExPKc+0x2a>
   b5eac:	2003e6d4 	.word	0x2003e6d4
   b5eb0:	2003e5a0 	.word	0x2003e5a0
   b5eb4:	2003e6e0 	.word	0x2003e6e0
   b5eb8:	2003e6d8 	.word	0x2003e6d8

000b5ebc <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b5ebc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5ebe:	2000      	movs	r0, #0
   b5ec0:	f7ff fabc 	bl	b543c <hal_rtc_time_is_valid>
    if (rtcstate)
   b5ec4:	4604      	mov	r4, r0
   b5ec6:	b9a0      	cbnz	r0, b5ef2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5ec8:	f7ff fbe8 	bl	b569c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5ecc:	2801      	cmp	r0, #1
   b5ece:	d110      	bne.n	b5ef2 <_ZN9TimeClass7isValidEv+0x36>
   b5ed0:	4620      	mov	r0, r4
   b5ed2:	f7ff fbfb 	bl	b56cc <system_thread_get_state>
   b5ed6:	b960      	cbnz	r0, b5ef2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5ed8:	f7ff fefa 	bl	b5cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5edc:	b910      	cbnz	r0, b5ee4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5ede:	f7ff fc71 	bl	b57c4 <spark_process>
        while (_while() && !_condition()) {
   b5ee2:	e7f9      	b.n	b5ed8 <_ZN9TimeClass7isValidEv+0x1c>
   b5ee4:	f7ff fef4 	bl	b5cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5eec:	2000      	movs	r0, #0
   b5eee:	f7ff baa5 	b.w	b543c <hal_rtc_time_is_valid>
}
   b5ef2:	4620      	mov	r0, r4
   b5ef4:	bd10      	pop	{r4, pc}

000b5ef6 <_ZN9TimeClass3nowEv>:
{
   b5ef6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5ef8:	f7ff ffe0 	bl	b5ebc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5efc:	2210      	movs	r2, #16
   b5efe:	2100      	movs	r1, #0
   b5f00:	4668      	mov	r0, sp
   b5f02:	f001 fccb 	bl	b789c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5f06:	2100      	movs	r1, #0
   b5f08:	4668      	mov	r0, sp
   b5f0a:	f7ff fa9f 	bl	b544c <hal_rtc_get_time>
}
   b5f0e:	9800      	ldr	r0, [sp, #0]
   b5f10:	b005      	add	sp, #20
   b5f12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5f18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5f18:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5f1a:	681a      	ldr	r2, [r3, #0]
   b5f1c:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5f1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5f20:	4770      	bx	lr
   b5f22:	bf00      	nop
   b5f24:	2003e5a0 	.word	0x2003e5a0
   b5f28:	2003e6d4 	.word	0x2003e6d4

000b5f2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5f2c:	2100      	movs	r1, #0
   b5f2e:	f7ff bbc5 	b.w	b56bc <system_delay_ms>
	...

000b5f34 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5f34:	4b01      	ldr	r3, [pc, #4]	; (b5f3c <_GLOBAL__sub_I_RGB+0x8>)
   b5f36:	2200      	movs	r2, #0
   b5f38:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5f3a:	4770      	bx	lr
   b5f3c:	2003e6e8 	.word	0x2003e6e8

000b5f40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5f40:	4b01      	ldr	r3, [pc, #4]	; (b5f48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5f42:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5f44:	4770      	bx	lr
   b5f46:	bf00      	nop
   b5f48:	2003e5a8 	.word	0x2003e5a8

000b5f4c <serialEventRun>:
{
   b5f4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5f4e:	4b0b      	ldr	r3, [pc, #44]	; (b5f7c <serialEventRun+0x30>)
   b5f50:	b143      	cbz	r3, b5f64 <serialEventRun+0x18>
   b5f52:	f000 f967 	bl	b6224 <_Z16_fetch_usbserialv>
   b5f56:	6803      	ldr	r3, [r0, #0]
   b5f58:	691b      	ldr	r3, [r3, #16]
   b5f5a:	4798      	blx	r3
   b5f5c:	2800      	cmp	r0, #0
   b5f5e:	dd01      	ble.n	b5f64 <serialEventRun+0x18>
        serialEvent();
   b5f60:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5f64:	4b06      	ldr	r3, [pc, #24]	; (b5f80 <serialEventRun+0x34>)
   b5f66:	b143      	cbz	r3, b5f7a <serialEventRun+0x2e>
   b5f68:	f000 fce6 	bl	b6938 <_Z22__fetch_global_Serial1v>
   b5f6c:	6803      	ldr	r3, [r0, #0]
   b5f6e:	691b      	ldr	r3, [r3, #16]
   b5f70:	4798      	blx	r3
   b5f72:	2800      	cmp	r0, #0
   b5f74:	dd01      	ble.n	b5f7a <serialEventRun+0x2e>
        serialEvent1();
   b5f76:	f3af 8000 	nop.w
}
   b5f7a:	bd08      	pop	{r3, pc}
	...

000b5f84 <_post_loop>:
{
   b5f84:	b508      	push	{r3, lr}
	serialEventRun();
   b5f86:	f7ff ffe1 	bl	b5f4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5f8a:	f7ff fa4f 	bl	b542c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5f8e:	4b01      	ldr	r3, [pc, #4]	; (b5f94 <_post_loop+0x10>)
   b5f90:	6018      	str	r0, [r3, #0]
}
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	2003e740 	.word	0x2003e740

000b5f98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f98:	4805      	ldr	r0, [pc, #20]	; (b5fb0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5f9a:	4a06      	ldr	r2, [pc, #24]	; (b5fb4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5f9c:	4906      	ldr	r1, [pc, #24]	; (b5fb8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5f9e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5fa0:	1a12      	subs	r2, r2, r0
   b5fa2:	f001 fc6d 	bl	b7880 <memcpy>
    __backup_sram_signature = signature;
   b5fa6:	4b05      	ldr	r3, [pc, #20]	; (b5fbc <_Z33system_initialize_user_backup_ramv+0x24>)
   b5fa8:	4a05      	ldr	r2, [pc, #20]	; (b5fc0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5faa:	601a      	str	r2, [r3, #0]
}
   b5fac:	bd08      	pop	{r3, pc}
   b5fae:	bf00      	nop
   b5fb0:	2003f400 	.word	0x2003f400
   b5fb4:	2003f404 	.word	0x2003f404
   b5fb8:	000b803c 	.word	0x000b803c
   b5fbc:	2003f400 	.word	0x2003f400
   b5fc0:	9a271c1e 	.word	0x9a271c1e

000b5fc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5fc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5fc6:	2300      	movs	r3, #0
   b5fc8:	9300      	str	r3, [sp, #0]
   b5fca:	461a      	mov	r2, r3
   b5fcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5fd0:	f7ff fb8e 	bl	b56f0 <system_ctrl_set_result>
}
   b5fd4:	b003      	add	sp, #12
   b5fd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5fdc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5fdc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5fde:	8843      	ldrh	r3, [r0, #2]
   b5fe0:	2b0a      	cmp	r3, #10
   b5fe2:	d008      	beq.n	b5ff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5fe4:	2b50      	cmp	r3, #80	; 0x50
   b5fe6:	d10b      	bne.n	b6000 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5fe8:	4b09      	ldr	r3, [pc, #36]	; (b6010 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5fea:	681b      	ldr	r3, [r3, #0]
   b5fec:	b14b      	cbz	r3, b6002 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5fee:	b003      	add	sp, #12
   b5ff0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5ff4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5ff6:	f7ff ffe5 	bl	b5fc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5ffa:	b003      	add	sp, #12
   b5ffc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6000:	2300      	movs	r3, #0
   b6002:	9300      	str	r3, [sp, #0]
   b6004:	461a      	mov	r2, r3
   b6006:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b600a:	f7ff fb71 	bl	b56f0 <system_ctrl_set_result>
}
   b600e:	e7f4      	b.n	b5ffa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6010:	2003e6fc 	.word	0x2003e6fc

000b6014 <module_user_init_hook>:
{
   b6014:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6016:	4812      	ldr	r0, [pc, #72]	; (b6060 <module_user_init_hook+0x4c>)
   b6018:	2100      	movs	r1, #0
   b601a:	f7ff fc3b 	bl	b5894 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b601e:	4b11      	ldr	r3, [pc, #68]	; (b6064 <module_user_init_hook+0x50>)
   b6020:	681a      	ldr	r2, [r3, #0]
   b6022:	4b11      	ldr	r3, [pc, #68]	; (b6068 <module_user_init_hook+0x54>)
   b6024:	429a      	cmp	r2, r3
   b6026:	4b11      	ldr	r3, [pc, #68]	; (b606c <module_user_init_hook+0x58>)
   b6028:	bf0c      	ite	eq
   b602a:	2201      	moveq	r2, #1
   b602c:	2200      	movne	r2, #0
   b602e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6030:	d001      	beq.n	b6036 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6032:	f7ff ffb1 	bl	b5f98 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6036:	f7ff f9f1 	bl	b541c <HAL_RNG_GetRandomNumber>
   b603a:	4604      	mov	r4, r0
    srand(seed);
   b603c:	f001 fc36 	bl	b78ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6040:	4b0b      	ldr	r3, [pc, #44]	; (b6070 <module_user_init_hook+0x5c>)
   b6042:	b113      	cbz	r3, b604a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6044:	4620      	mov	r0, r4
   b6046:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b604a:	2100      	movs	r1, #0
   b604c:	4808      	ldr	r0, [pc, #32]	; (b6070 <module_user_init_hook+0x5c>)
   b604e:	f7ff fbe1 	bl	b5814 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6056:	4807      	ldr	r0, [pc, #28]	; (b6074 <module_user_init_hook+0x60>)
   b6058:	2100      	movs	r1, #0
   b605a:	f7ff bb3f 	b.w	b56dc <system_ctrl_set_app_request_handler>
   b605e:	bf00      	nop
   b6060:	000b5f41 	.word	0x000b5f41
   b6064:	2003f400 	.word	0x2003f400
   b6068:	9a271c1e 	.word	0x9a271c1e
   b606c:	2003e6f8 	.word	0x2003e6f8
   b6070:	00000000 	.word	0x00000000
   b6074:	000b5fdd 	.word	0x000b5fdd

000b6078 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6078:	4770      	bx	lr

000b607a <_ZN9IPAddressD0Ev>:
   b607a:	b510      	push	{r4, lr}
   b607c:	2118      	movs	r1, #24
   b607e:	4604      	mov	r4, r0
   b6080:	f7fe f80d 	bl	b409e <_ZdlPvj>
   b6084:	4620      	mov	r0, r4
   b6086:	bd10      	pop	{r4, pc}

000b6088 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6088:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b608a:	7d03      	ldrb	r3, [r0, #20]
   b608c:	2b06      	cmp	r3, #6
{
   b608e:	b08d      	sub	sp, #52	; 0x34
   b6090:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6092:	f100 0704 	add.w	r7, r0, #4
   b6096:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b609a:	d012      	beq.n	b60c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b609c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b60a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b60a4:	220a      	movs	r2, #10
   b60a6:	4630      	mov	r0, r6
   b60a8:	f7ff fdbb 	bl	b5c22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b60ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b60ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b60b0:	d019      	beq.n	b60e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b60b2:	2c00      	cmp	r4, #0
   b60b4:	d0f4      	beq.n	b60a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b60b6:	212e      	movs	r1, #46	; 0x2e
   b60b8:	4630      	mov	r0, r6
   b60ba:	f7ff fd99 	bl	b5bf0 <_ZN5Print5printEc>
   b60be:	4404      	add	r4, r0
   b60c0:	e7ee      	b.n	b60a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b60c2:	232f      	movs	r3, #47	; 0x2f
   b60c4:	466a      	mov	r2, sp
   b60c6:	4639      	mov	r1, r7
   b60c8:	200a      	movs	r0, #10
		buf[0] = 0;
   b60ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b60ce:	f7ff f9cd 	bl	b546c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b60d2:	4668      	mov	r0, sp
   b60d4:	f001 fc2a 	bl	b792c <strlen>
   b60d8:	6833      	ldr	r3, [r6, #0]
   b60da:	4602      	mov	r2, r0
   b60dc:	68db      	ldr	r3, [r3, #12]
   b60de:	4669      	mov	r1, sp
   b60e0:	4630      	mov	r0, r6
   b60e2:	4798      	blx	r3
   b60e4:	4604      	mov	r4, r0
    }
    return n;
}
   b60e6:	4620      	mov	r0, r4
   b60e8:	b00d      	add	sp, #52	; 0x34
   b60ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b60ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b60ec:	b510      	push	{r4, lr}
   b60ee:	4b05      	ldr	r3, [pc, #20]	; (b6104 <_ZN9IPAddressC1Ev+0x18>)
   b60f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b60f2:	2211      	movs	r2, #17
   b60f4:	f840 3b04 	str.w	r3, [r0], #4
   b60f8:	2100      	movs	r1, #0
   b60fa:	f001 fbcf 	bl	b789c <memset>
}
   b60fe:	4620      	mov	r0, r4
   b6100:	bd10      	pop	{r4, pc}
   b6102:	bf00      	nop
   b6104:	000b7ce0 	.word	0x000b7ce0

000b6108 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6108:	4603      	mov	r3, r0
   b610a:	4a07      	ldr	r2, [pc, #28]	; (b6128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b610c:	b510      	push	{r4, lr}
   b610e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6112:	f101 0210 	add.w	r2, r1, #16
   b6116:	f851 4b04 	ldr.w	r4, [r1], #4
   b611a:	f843 4b04 	str.w	r4, [r3], #4
   b611e:	4291      	cmp	r1, r2
   b6120:	d1f9      	bne.n	b6116 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6122:	780a      	ldrb	r2, [r1, #0]
   b6124:	701a      	strb	r2, [r3, #0]
}
   b6126:	bd10      	pop	{r4, pc}
   b6128:	000b7ce0 	.word	0x000b7ce0

000b612c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b612c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b612e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6132:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6136:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b613a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b613e:	2304      	movs	r3, #4
   b6140:	6041      	str	r1, [r0, #4]
   b6142:	7503      	strb	r3, [r0, #20]
}
   b6144:	bd10      	pop	{r4, pc}
	...

000b6148 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6148:	b507      	push	{r0, r1, r2, lr}
   b614a:	4b06      	ldr	r3, [pc, #24]	; (b6164 <_ZN9IPAddressC1EPKh+0x1c>)
   b614c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b614e:	78cb      	ldrb	r3, [r1, #3]
   b6150:	9300      	str	r3, [sp, #0]
   b6152:	788b      	ldrb	r3, [r1, #2]
   b6154:	784a      	ldrb	r2, [r1, #1]
   b6156:	7809      	ldrb	r1, [r1, #0]
   b6158:	f7ff ffe8 	bl	b612c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b615c:	b003      	add	sp, #12
   b615e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6162:	bf00      	nop
   b6164:	000b7ce0 	.word	0x000b7ce0

000b6168 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6168:	7441      	strb	r1, [r0, #17]
}
   b616a:	4770      	bx	lr

000b616c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b616c:	4770      	bx	lr

000b616e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b616e:	4770      	bx	lr

000b6170 <_ZN9USBSerial4readEv>:
{
   b6170:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6172:	2100      	movs	r1, #0
   b6174:	7c00      	ldrb	r0, [r0, #16]
   b6176:	f7ff fa79 	bl	b566c <HAL_USB_USART_Receive_Data>
}
   b617a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b617e:	bd08      	pop	{r3, pc}

000b6180 <_ZN9USBSerial4peekEv>:
{
   b6180:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6182:	2101      	movs	r1, #1
   b6184:	7c00      	ldrb	r0, [r0, #16]
   b6186:	f7ff fa71 	bl	b566c <HAL_USB_USART_Receive_Data>
}
   b618a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b618e:	bd08      	pop	{r3, pc}

000b6190 <_ZN9USBSerial17availableForWriteEv>:
{
   b6190:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6192:	7c00      	ldrb	r0, [r0, #16]
   b6194:	f7ff fa62 	bl	b565c <HAL_USB_USART_Available_Data_For_Write>
}
   b6198:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b619c:	bd08      	pop	{r3, pc}

000b619e <_ZN9USBSerial9availableEv>:
{
   b619e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b61a0:	7c00      	ldrb	r0, [r0, #16]
   b61a2:	f7ff fa53 	bl	b564c <HAL_USB_USART_Available_Data>
}
   b61a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b61aa:	bd08      	pop	{r3, pc}

000b61ac <_ZN9USBSerial5writeEh>:
{
   b61ac:	b513      	push	{r0, r1, r4, lr}
   b61ae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61b0:	7c00      	ldrb	r0, [r0, #16]
{
   b61b2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61b4:	f7ff fa52 	bl	b565c <HAL_USB_USART_Available_Data_For_Write>
   b61b8:	2800      	cmp	r0, #0
   b61ba:	9901      	ldr	r1, [sp, #4]
   b61bc:	dc01      	bgt.n	b61c2 <_ZN9USBSerial5writeEh+0x16>
   b61be:	7c60      	ldrb	r0, [r4, #17]
   b61c0:	b120      	cbz	r0, b61cc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b61c2:	7c20      	ldrb	r0, [r4, #16]
   b61c4:	f7ff fa5a 	bl	b567c <HAL_USB_USART_Send_Data>
   b61c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b61cc:	b002      	add	sp, #8
   b61ce:	bd10      	pop	{r4, pc}

000b61d0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b61d0:	7c00      	ldrb	r0, [r0, #16]
   b61d2:	f7ff ba5b 	b.w	b568c <HAL_USB_USART_Flush_Data>

000b61d6 <_ZN9USBSerialD0Ev>:
   b61d6:	b510      	push	{r4, lr}
   b61d8:	2114      	movs	r1, #20
   b61da:	4604      	mov	r4, r0
   b61dc:	f7fd ff5f 	bl	b409e <_ZdlPvj>
   b61e0:	4620      	mov	r0, r4
   b61e2:	bd10      	pop	{r4, pc}

000b61e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b61e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b61e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61ea:	4604      	mov	r4, r0
   b61ec:	4608      	mov	r0, r1
   b61ee:	2100      	movs	r1, #0
   b61f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b61f4:	4b04      	ldr	r3, [pc, #16]	; (b6208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b61f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61f8:	2301      	movs	r3, #1
  _serial = serial;
   b61fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b61fe:	4611      	mov	r1, r2
   b6200:	f7ff fa14 	bl	b562c <HAL_USB_USART_Init>
}
   b6204:	4620      	mov	r0, r4
   b6206:	bd10      	pop	{r4, pc}
   b6208:	000b7cf4 	.word	0x000b7cf4

000b620c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b620c:	7c00      	ldrb	r0, [r0, #16]
   b620e:	2200      	movs	r2, #0
   b6210:	f7ff ba14 	b.w	b563c <HAL_USB_USART_Begin>

000b6214 <_Z19acquireSerialBufferv>:
{
   b6214:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6216:	2214      	movs	r2, #20
{
   b6218:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b621a:	2100      	movs	r1, #0
   b621c:	f001 fb3e 	bl	b789c <memset>
}
   b6220:	4620      	mov	r0, r4
   b6222:	bd10      	pop	{r4, pc}

000b6224 <_Z16_fetch_usbserialv>:
{
   b6224:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6226:	4c0f      	ldr	r4, [pc, #60]	; (b6264 <_Z16_fetch_usbserialv+0x40>)
{
   b6228:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b622a:	a803      	add	r0, sp, #12
   b622c:	f7ff fff2 	bl	b6214 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6230:	7821      	ldrb	r1, [r4, #0]
   b6232:	f3bf 8f5b 	dmb	ish
   b6236:	f011 0101 	ands.w	r1, r1, #1
   b623a:	d10f      	bne.n	b625c <_Z16_fetch_usbserialv+0x38>
   b623c:	4620      	mov	r0, r4
   b623e:	9101      	str	r1, [sp, #4]
   b6240:	f7fd ff2f 	bl	b40a2 <__cxa_guard_acquire>
   b6244:	9901      	ldr	r1, [sp, #4]
   b6246:	b148      	cbz	r0, b625c <_Z16_fetch_usbserialv+0x38>
   b6248:	aa03      	add	r2, sp, #12
   b624a:	4807      	ldr	r0, [pc, #28]	; (b6268 <_Z16_fetch_usbserialv+0x44>)
   b624c:	f7ff ffca 	bl	b61e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6250:	4620      	mov	r0, r4
   b6252:	f7fd ff2b 	bl	b40ac <__cxa_guard_release>
   b6256:	4805      	ldr	r0, [pc, #20]	; (b626c <_Z16_fetch_usbserialv+0x48>)
   b6258:	f001 fb04 	bl	b7864 <atexit>
	return _usbserial;
}
   b625c:	4802      	ldr	r0, [pc, #8]	; (b6268 <_Z16_fetch_usbserialv+0x44>)
   b625e:	b008      	add	sp, #32
   b6260:	bd10      	pop	{r4, pc}
   b6262:	bf00      	nop
   b6264:	2003e700 	.word	0x2003e700
   b6268:	2003e704 	.word	0x2003e704
   b626c:	000b616d 	.word	0x000b616d

000b6270 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6270:	4770      	bx	lr

000b6272 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6272:	7441      	strb	r1, [r0, #17]
}
   b6274:	4770      	bx	lr

000b6276 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6276:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6278:	7c00      	ldrb	r0, [r0, #16]
   b627a:	f7ff f92f 	bl	b54dc <hal_usart_available_data_for_write>
}
   b627e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6282:	bd08      	pop	{r3, pc}

000b6284 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6284:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6286:	7c00      	ldrb	r0, [r0, #16]
   b6288:	f7ff f900 	bl	b548c <hal_usart_available>
}
   b628c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6290:	bd08      	pop	{r3, pc}

000b6292 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6292:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6294:	7c00      	ldrb	r0, [r0, #16]
   b6296:	f7ff f909 	bl	b54ac <hal_usart_peek>
}
   b629a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b629e:	bd08      	pop	{r3, pc}

000b62a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b62a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b62a2:	7c00      	ldrb	r0, [r0, #16]
   b62a4:	f7ff f8fa 	bl	b549c <hal_usart_read>
}
   b62a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62ac:	bd08      	pop	{r3, pc}

000b62ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b62ae:	7c00      	ldrb	r0, [r0, #16]
   b62b0:	f7ff b904 	b.w	b54bc <hal_usart_flush>

000b62b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b62b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62b6:	7c45      	ldrb	r5, [r0, #17]
{
   b62b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62ba:	b12d      	cbz	r5, b62c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b62bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b62be:	b003      	add	sp, #12
   b62c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b62c4:	f7ff b8da 	b.w	b547c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62c8:	7c00      	ldrb	r0, [r0, #16]
   b62ca:	9101      	str	r1, [sp, #4]
   b62cc:	f7ff f906 	bl	b54dc <hal_usart_available_data_for_write>
   b62d0:	2800      	cmp	r0, #0
   b62d2:	9901      	ldr	r1, [sp, #4]
   b62d4:	dcf2      	bgt.n	b62bc <_ZN11USARTSerial5writeEh+0x8>
}
   b62d6:	4628      	mov	r0, r5
   b62d8:	b003      	add	sp, #12
   b62da:	bd30      	pop	{r4, r5, pc}

000b62dc <_ZN11USARTSerialD0Ev>:
   b62dc:	b510      	push	{r4, lr}
   b62de:	2114      	movs	r1, #20
   b62e0:	4604      	mov	r4, r0
   b62e2:	f7fd fedc 	bl	b409e <_ZdlPvj>
   b62e6:	4620      	mov	r0, r4
   b62e8:	bd10      	pop	{r4, pc}
	...

000b62ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b62ec:	b510      	push	{r4, lr}
   b62ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b62f2:	4604      	mov	r4, r0
   b62f4:	4608      	mov	r0, r1
   b62f6:	4611      	mov	r1, r2
   b62f8:	2200      	movs	r2, #0
   b62fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b62fe:	4b04      	ldr	r3, [pc, #16]	; (b6310 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6300:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6302:	2301      	movs	r3, #1
  _serial = serial;
   b6304:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6306:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6308:	f7ff f8f0 	bl	b54ec <hal_usart_init_ex>
}
   b630c:	4620      	mov	r0, r4
   b630e:	bd10      	pop	{r4, pc}
   b6310:	000b7d24 	.word	0x000b7d24

000b6314 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6314:	4770      	bx	lr

000b6316 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6318:	4606      	mov	r6, r0
   b631a:	4615      	mov	r5, r2
   b631c:	460c      	mov	r4, r1
   b631e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6320:	42bc      	cmp	r4, r7
   b6322:	d006      	beq.n	b6332 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6324:	6833      	ldr	r3, [r6, #0]
   b6326:	f814 1b01 	ldrb.w	r1, [r4], #1
   b632a:	689b      	ldr	r3, [r3, #8]
   b632c:	4630      	mov	r0, r6
   b632e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6330:	e7f6      	b.n	b6320 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6332:	4628      	mov	r0, r5
   b6334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6336 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6336:	7c00      	ldrb	r0, [r0, #16]
   b6338:	2200      	movs	r2, #0
   b633a:	f7ff b8f7 	b.w	b552c <hal_i2c_write>

000b633e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b633e:	7c00      	ldrb	r0, [r0, #16]
   b6340:	2100      	movs	r1, #0
   b6342:	f7ff b8fb 	b.w	b553c <hal_i2c_available>

000b6346 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6346:	7c00      	ldrb	r0, [r0, #16]
   b6348:	2100      	movs	r1, #0
   b634a:	f7ff b8ff 	b.w	b554c <hal_i2c_read>

000b634e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b634e:	7c00      	ldrb	r0, [r0, #16]
   b6350:	2100      	movs	r1, #0
   b6352:	f7ff b903 	b.w	b555c <hal_i2c_peek>

000b6356 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6356:	7c00      	ldrb	r0, [r0, #16]
   b6358:	2100      	movs	r1, #0
   b635a:	f7ff b907 	b.w	b556c <hal_i2c_flush>

000b635e <_ZN7TwoWireD0Ev>:
   b635e:	b510      	push	{r4, lr}
   b6360:	2114      	movs	r1, #20
   b6362:	4604      	mov	r4, r0
   b6364:	f7fd fe9b 	bl	b409e <_ZdlPvj>
   b6368:	4620      	mov	r0, r4
   b636a:	bd10      	pop	{r4, pc}

000b636c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b636c:	b510      	push	{r4, lr}
   b636e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6372:	4604      	mov	r4, r0
   b6374:	4608      	mov	r0, r1
   b6376:	2100      	movs	r1, #0
   b6378:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b637c:	4b03      	ldr	r3, [pc, #12]	; (b638c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b637e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6380:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6382:	4611      	mov	r1, r2
   b6384:	f7ff f902 	bl	b558c <hal_i2c_init>
}
   b6388:	4620      	mov	r0, r4
   b638a:	bd10      	pop	{r4, pc}
   b638c:	000b7d54 	.word	0x000b7d54

000b6390 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6390:	2300      	movs	r3, #0
   b6392:	7c00      	ldrb	r0, [r0, #16]
   b6394:	461a      	mov	r2, r3
   b6396:	4619      	mov	r1, r3
   b6398:	f7ff b8b0 	b.w	b54fc <hal_i2c_begin>

000b639c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b639c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b639e:	2200      	movs	r2, #0
   b63a0:	2314      	movs	r3, #20
   b63a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b63a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b63aa:	780b      	ldrb	r3, [r1, #0]
   b63ac:	f88d 3008 	strb.w	r3, [sp, #8]
   b63b0:	684b      	ldr	r3, [r1, #4]
   b63b2:	9303      	str	r3, [sp, #12]
   b63b4:	68cb      	ldr	r3, [r1, #12]
   b63b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b63b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b63ba:	7a0b      	ldrb	r3, [r1, #8]
   b63bc:	9305      	str	r3, [sp, #20]
   b63be:	a901      	add	r1, sp, #4
   b63c0:	f7ff f8ec 	bl	b559c <hal_i2c_request_ex>
}
   b63c4:	b007      	add	sp, #28
   b63c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b63ca <_ZN7TwoWire11requestFromEhjh>:
{
   b63ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b63cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b63ce:	f88d 1000 	strb.w	r1, [sp]
   b63d2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b63d6:	9103      	str	r1, [sp, #12]
   b63d8:	bf18      	it	ne
   b63da:	2301      	movne	r3, #1
   b63dc:	4669      	mov	r1, sp
    size_ = size;
   b63de:	9201      	str	r2, [sp, #4]
   b63e0:	f88d 3008 	strb.w	r3, [sp, #8]
   b63e4:	f7ff ffda 	bl	b639c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b63e8:	b005      	add	sp, #20
   b63ea:	f85d fb04 	ldr.w	pc, [sp], #4

000b63ee <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b63ee:	2301      	movs	r3, #1
   b63f0:	f7ff bfeb 	b.w	b63ca <_ZN7TwoWire11requestFromEhjh>

000b63f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b63f4:	7c00      	ldrb	r0, [r0, #16]
   b63f6:	2200      	movs	r2, #0
   b63f8:	f7ff b888 	b.w	b550c <hal_i2c_begin_transmission>

000b63fc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b63fc:	b2c9      	uxtb	r1, r1
   b63fe:	f7ff bff9 	b.w	b63f4 <_ZN7TwoWire17beginTransmissionEh>

000b6402 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6402:	7c00      	ldrb	r0, [r0, #16]
   b6404:	2200      	movs	r2, #0
   b6406:	f7ff b889 	b.w	b551c <hal_i2c_end_transmission>

000b640a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b640a:	2101      	movs	r1, #1
   b640c:	f7ff bff9 	b.w	b6402 <_ZN7TwoWire15endTransmissionEh>

000b6410 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b6410:	7c00      	ldrb	r0, [r0, #16]
   b6412:	2100      	movs	r1, #0
   b6414:	f7ff b8b2 	b.w	b557c <hal_i2c_is_enabled>

000b6418 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6418:	2200      	movs	r2, #0
   b641a:	6840      	ldr	r0, [r0, #4]
   b641c:	4611      	mov	r1, r2
   b641e:	f7ff b989 	b.w	b5734 <network_ready>

000b6422 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6422:	2200      	movs	r2, #0
   b6424:	6840      	ldr	r0, [r0, #4]
   b6426:	4611      	mov	r1, r2
   b6428:	f7ff b9a4 	b.w	b5774 <network_listening>

000b642c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b642c:	2200      	movs	r2, #0
   b642e:	6840      	ldr	r0, [r0, #4]
   b6430:	4611      	mov	r1, r2
   b6432:	f7ff b9af 	b.w	b5794 <network_get_listen_timeout>

000b6436 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6436:	6840      	ldr	r0, [r0, #4]
   b6438:	2200      	movs	r2, #0
   b643a:	f7ff b9a3 	b.w	b5784 <network_set_listen_timeout>

000b643e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b643e:	6840      	ldr	r0, [r0, #4]
   b6440:	2200      	movs	r2, #0
   b6442:	f081 0101 	eor.w	r1, r1, #1
   b6446:	f7ff b98d 	b.w	b5764 <network_listen>

000b644a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b644a:	2300      	movs	r3, #0
   b644c:	6840      	ldr	r0, [r0, #4]
   b644e:	461a      	mov	r2, r3
   b6450:	4619      	mov	r1, r3
   b6452:	f7ff b97f 	b.w	b5754 <network_off>

000b6456 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6456:	2300      	movs	r3, #0
   b6458:	6840      	ldr	r0, [r0, #4]
   b645a:	461a      	mov	r2, r3
   b645c:	4619      	mov	r1, r3
   b645e:	f7ff b971 	b.w	b5744 <network_on>

000b6462 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6462:	2200      	movs	r2, #0
   b6464:	6840      	ldr	r0, [r0, #4]
   b6466:	4611      	mov	r1, r2
   b6468:	f7ff b954 	b.w	b5714 <network_connecting>

000b646c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b646c:	6840      	ldr	r0, [r0, #4]
   b646e:	2200      	movs	r2, #0
   b6470:	2102      	movs	r1, #2
   b6472:	f7ff b957 	b.w	b5724 <network_disconnect>

000b6476 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6476:	2300      	movs	r3, #0
   b6478:	6840      	ldr	r0, [r0, #4]
   b647a:	461a      	mov	r2, r3
   b647c:	f7ff b942 	b.w	b5704 <network_connect>

000b6480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6480:	4b02      	ldr	r3, [pc, #8]	; (b648c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6482:	2204      	movs	r2, #4
   b6484:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6486:	4a02      	ldr	r2, [pc, #8]	; (b6490 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6488:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b648a:	4770      	bx	lr
   b648c:	2003e718 	.word	0x2003e718
   b6490:	000b7d7c 	.word	0x000b7d7c

000b6494 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6494:	2300      	movs	r3, #0
   b6496:	6840      	ldr	r0, [r0, #4]
   b6498:	461a      	mov	r2, r3
   b649a:	f7ff b933 	b.w	b5704 <network_connect>

000b649e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b649e:	6840      	ldr	r0, [r0, #4]
   b64a0:	2200      	movs	r2, #0
   b64a2:	2102      	movs	r1, #2
   b64a4:	f7ff b93e 	b.w	b5724 <network_disconnect>

000b64a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b64a8:	2200      	movs	r2, #0
   b64aa:	6840      	ldr	r0, [r0, #4]
   b64ac:	4611      	mov	r1, r2
   b64ae:	f7ff b931 	b.w	b5714 <network_connecting>

000b64b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b64b2:	2200      	movs	r2, #0
   b64b4:	6840      	ldr	r0, [r0, #4]
   b64b6:	4611      	mov	r1, r2
   b64b8:	f7ff b93c 	b.w	b5734 <network_ready>

000b64bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b64bc:	2300      	movs	r3, #0
   b64be:	6840      	ldr	r0, [r0, #4]
   b64c0:	461a      	mov	r2, r3
   b64c2:	4619      	mov	r1, r3
   b64c4:	f7ff b93e 	b.w	b5744 <network_on>

000b64c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b64c8:	2300      	movs	r3, #0
   b64ca:	6840      	ldr	r0, [r0, #4]
   b64cc:	461a      	mov	r2, r3
   b64ce:	4619      	mov	r1, r3
   b64d0:	f7ff b940 	b.w	b5754 <network_off>

000b64d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b64d4:	6840      	ldr	r0, [r0, #4]
   b64d6:	2100      	movs	r1, #0
   b64d8:	f7ff b964 	b.w	b57a4 <network_is_on>

000b64dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b64dc:	6840      	ldr	r0, [r0, #4]
   b64de:	2100      	movs	r1, #0
   b64e0:	f7ff b968 	b.w	b57b4 <network_is_off>

000b64e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b64e4:	6840      	ldr	r0, [r0, #4]
   b64e6:	2200      	movs	r2, #0
   b64e8:	f081 0101 	eor.w	r1, r1, #1
   b64ec:	f7ff b93a 	b.w	b5764 <network_listen>

000b64f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b64f0:	6840      	ldr	r0, [r0, #4]
   b64f2:	2200      	movs	r2, #0
   b64f4:	f7ff b946 	b.w	b5784 <network_set_listen_timeout>

000b64f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b64f8:	2200      	movs	r2, #0
   b64fa:	6840      	ldr	r0, [r0, #4]
   b64fc:	4611      	mov	r1, r2
   b64fe:	f7ff b949 	b.w	b5794 <network_get_listen_timeout>

000b6502 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6502:	2200      	movs	r2, #0
   b6504:	6840      	ldr	r0, [r0, #4]
   b6506:	4611      	mov	r1, r2
   b6508:	f7ff b934 	b.w	b5774 <network_listening>

000b650c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b650c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6510:	b095      	sub	sp, #84	; 0x54
   b6512:	4614      	mov	r4, r2
   b6514:	460d      	mov	r5, r1
   b6516:	4607      	mov	r7, r0
    IPAddress addr;
   b6518:	f7ff fde8 	bl	b60ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b651c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b651e:	221c      	movs	r2, #28
   b6520:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6522:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6524:	f001 f9ba 	bl	b789c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6528:	2340      	movs	r3, #64	; 0x40
   b652a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b652c:	4620      	mov	r0, r4
   b652e:	466b      	mov	r3, sp
   b6530:	aa0c      	add	r2, sp, #48	; 0x30
   b6532:	2100      	movs	r1, #0
   b6534:	f7fe ff4a 	bl	b53cc <netdb_getaddrinfo>
    if (!r) {
   b6538:	4604      	mov	r4, r0
   b653a:	2800      	cmp	r0, #0
   b653c:	d14b      	bne.n	b65d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b653e:	4602      	mov	r2, r0
   b6540:	2101      	movs	r1, #1
   b6542:	6868      	ldr	r0, [r5, #4]
   b6544:	f7ff f8f6 	bl	b5734 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6548:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b654a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b654c:	4622      	mov	r2, r4
   b654e:	6868      	ldr	r0, [r5, #4]
   b6550:	f7ff f8f0 	bl	b5734 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6554:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6556:	4681      	mov	r9, r0
        bool ok = false;
   b6558:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b655a:	2e00      	cmp	r6, #0
   b655c:	d03b      	beq.n	b65d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b655e:	2900      	cmp	r1, #0
   b6560:	d139      	bne.n	b65d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6562:	6873      	ldr	r3, [r6, #4]
   b6564:	2b02      	cmp	r3, #2
   b6566:	d003      	beq.n	b6570 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6568:	2b0a      	cmp	r3, #10
   b656a:	d011      	beq.n	b6590 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b656c:	69f6      	ldr	r6, [r6, #28]
   b656e:	e7f4      	b.n	b655a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6570:	f1b8 0f00 	cmp.w	r8, #0
   b6574:	d0fa      	beq.n	b656c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6576:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6578:	a806      	add	r0, sp, #24
   b657a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b657c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b657e:	f7ff fde3 	bl	b6148 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6584:	1d3c      	adds	r4, r7, #4
   b6586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6588:	682b      	ldr	r3, [r5, #0]
   b658a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b658c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b658e:	e7ed      	b.n	b656c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6590:	f1b9 0f00 	cmp.w	r9, #0
   b6594:	d0ea      	beq.n	b656c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6596:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6598:	2210      	movs	r2, #16
   b659a:	a801      	add	r0, sp, #4
   b659c:	f001 f97e 	bl	b789c <memset>
                    a.v = 6;
   b65a0:	2306      	movs	r3, #6
   b65a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b65a6:	ad01      	add	r5, sp, #4
   b65a8:	f104 0308 	add.w	r3, r4, #8
   b65ac:	3418      	adds	r4, #24
   b65ae:	6818      	ldr	r0, [r3, #0]
   b65b0:	6859      	ldr	r1, [r3, #4]
   b65b2:	462a      	mov	r2, r5
   b65b4:	c203      	stmia	r2!, {r0, r1}
   b65b6:	3308      	adds	r3, #8
   b65b8:	42a3      	cmp	r3, r4
   b65ba:	4615      	mov	r5, r2
   b65bc:	d1f7      	bne.n	b65ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b65be:	a901      	add	r1, sp, #4
   b65c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b65c2:	ad07      	add	r5, sp, #28
   b65c4:	f7ff fda0 	bl	b6108 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b65c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65ca:	1d3c      	adds	r4, r7, #4
   b65cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65ce:	682b      	ldr	r3, [r5, #0]
   b65d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b65d2:	4649      	mov	r1, r9
   b65d4:	e7ca      	b.n	b656c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b65d6:	9800      	ldr	r0, [sp, #0]
   b65d8:	f7fe fef0 	bl	b53bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b65dc:	4638      	mov	r0, r7
   b65de:	b015      	add	sp, #84	; 0x54
   b65e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b65e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b65e4:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b65e6:	4a03      	ldr	r2, [pc, #12]	; (b65f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b65e8:	601a      	str	r2, [r3, #0]
   b65ea:	2200      	movs	r2, #0
   b65ec:	605a      	str	r2, [r3, #4]

} // spark
   b65ee:	4770      	bx	lr
   b65f0:	2003e720 	.word	0x2003e720
   b65f4:	000b7db8 	.word	0x000b7db8

000b65f8 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b65f8:	b40e      	push	{r1, r2, r3}
   b65fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65fc:	b088      	sub	sp, #32
   b65fe:	af00      	add	r7, sp, #0
   b6600:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6604:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6606:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b660a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b660c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b660e:	462b      	mov	r3, r5
   b6610:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6612:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6614:	f7ff f92e 	bl	b5874 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6618:	280f      	cmp	r0, #15
   b661a:	687a      	ldr	r2, [r7, #4]
   b661c:	d91a      	bls.n	b6654 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b661e:	f100 0308 	add.w	r3, r0, #8
   b6622:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6626:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6628:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b662c:	1c41      	adds	r1, r0, #1
   b662e:	462b      	mov	r3, r5
   b6630:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6632:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6634:	f7ff f91e 	bl	b5874 <vsnprintf>
        if (n > 0) {
   b6638:	1e02      	subs	r2, r0, #0
   b663a:	dd04      	ble.n	b6646 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b663c:	6823      	ldr	r3, [r4, #0]
   b663e:	4669      	mov	r1, sp
   b6640:	689b      	ldr	r3, [r3, #8]
   b6642:	4620      	mov	r0, r4
   b6644:	4798      	blx	r3
   b6646:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6648:	3720      	adds	r7, #32
   b664a:	46bd      	mov	sp, r7
   b664c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6650:	b003      	add	sp, #12
   b6652:	4770      	bx	lr
    } else if (n > 0) {
   b6654:	2800      	cmp	r0, #0
   b6656:	d0f7      	beq.n	b6648 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6658:	6823      	ldr	r3, [r4, #0]
   b665a:	4602      	mov	r2, r0
   b665c:	689b      	ldr	r3, [r3, #8]
   b665e:	f107 0110 	add.w	r1, r7, #16
   b6662:	4620      	mov	r0, r4
   b6664:	4798      	blx	r3
}
   b6666:	e7ef      	b.n	b6648 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6668 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b6668:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b666a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b666c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6670:	689b      	ldr	r3, [r3, #8]
   b6672:	2201      	movs	r2, #1
   b6674:	f10d 0107 	add.w	r1, sp, #7
   b6678:	4798      	blx	r3
}
   b667a:	b003      	add	sp, #12
   b667c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6680 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6680:	b510      	push	{r4, lr}
    write('}');
   b6682:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6684:	4604      	mov	r4, r0
    write('}');
   b6686:	f7ff ffef 	bl	b6668 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b668a:	2301      	movs	r3, #1
   b668c:	7123      	strb	r3, [r4, #4]
}
   b668e:	4620      	mov	r0, r4
   b6690:	bd10      	pop	{r4, pc}

000b6692 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6692:	b508      	push	{r3, lr}
    switch (state_) {
   b6694:	7903      	ldrb	r3, [r0, #4]
   b6696:	2b01      	cmp	r3, #1
   b6698:	d002      	beq.n	b66a0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b669a:	2b02      	cmp	r3, #2
   b669c:	d004      	beq.n	b66a8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b669e:	bd08      	pop	{r3, pc}
        write(',');
   b66a0:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b66a2:	f7ff ffe1 	bl	b6668 <_ZN5spark10JSONWriter5writeEc>
}
   b66a6:	e7fa      	b.n	b669e <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b66a8:	213a      	movs	r1, #58	; 0x3a
   b66aa:	e7fa      	b.n	b66a2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b66ac <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b66ac:	b510      	push	{r4, lr}
   b66ae:	4604      	mov	r4, r0
    writeSeparator();
   b66b0:	f7ff ffef 	bl	b6692 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b66b4:	4620      	mov	r0, r4
   b66b6:	217b      	movs	r1, #123	; 0x7b
   b66b8:	f7ff ffd6 	bl	b6668 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b66bc:	2300      	movs	r3, #0
   b66be:	7123      	strb	r3, [r4, #4]
}
   b66c0:	4620      	mov	r0, r4
   b66c2:	bd10      	pop	{r4, pc}

000b66c4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b66c4:	b513      	push	{r0, r1, r4, lr}
   b66c6:	4604      	mov	r4, r0
   b66c8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b66ca:	f7ff ffe2 	bl	b6692 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b66ce:	6823      	ldr	r3, [r4, #0]
   b66d0:	9a01      	ldr	r2, [sp, #4]
   b66d2:	68db      	ldr	r3, [r3, #12]
   b66d4:	4903      	ldr	r1, [pc, #12]	; (b66e4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b66d6:	4620      	mov	r0, r4
   b66d8:	4798      	blx	r3
    state_ = NEXT;
   b66da:	2301      	movs	r3, #1
}
   b66dc:	4620      	mov	r0, r4
    state_ = NEXT;
   b66de:	7123      	strb	r3, [r4, #4]
}
   b66e0:	b002      	add	sp, #8
   b66e2:	bd10      	pop	{r4, pc}
   b66e4:	000b7dec 	.word	0x000b7dec

000b66e8 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   b66e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66ea:	4604      	mov	r4, r0
   b66ec:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   b66f0:	f7ff ffcf 	bl	b6692 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   b66f4:	6823      	ldr	r3, [r4, #0]
   b66f6:	4905      	ldr	r1, [pc, #20]	; (b670c <_ZN5spark10JSONWriter5valueEd+0x24>)
   b66f8:	68dd      	ldr	r5, [r3, #12]
   b66fa:	4620      	mov	r0, r4
   b66fc:	463b      	mov	r3, r7
   b66fe:	4632      	mov	r2, r6
   b6700:	47a8      	blx	r5
    state_ = NEXT;
   b6702:	2301      	movs	r3, #1
   b6704:	7123      	strb	r3, [r4, #4]
}
   b6706:	4620      	mov	r0, r4
   b6708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b670a:	bf00      	nop
   b670c:	000b7def 	.word	0x000b7def

000b6710 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6714:	460d      	mov	r5, r1
    write('"');
   b6716:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6718:	4690      	mov	r8, r2
   b671a:	4604      	mov	r4, r0
    write('"');
   b671c:	f7ff ffa4 	bl	b6668 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6720:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b67c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6724:	44a8      	add	r8, r5
    const char *s = str;
   b6726:	462f      	mov	r7, r5
    while (s != end) {
   b6728:	4547      	cmp	r7, r8
   b672a:	46ba      	mov	sl, r7
   b672c:	d03d      	beq.n	b67aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b672e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6732:	2e22      	cmp	r6, #34	; 0x22
   b6734:	d006      	beq.n	b6744 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6736:	2e5c      	cmp	r6, #92	; 0x5c
   b6738:	d004      	beq.n	b6744 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b673a:	4630      	mov	r0, r6
   b673c:	f001 f898 	bl	b7870 <isprint>
   b6740:	2800      	cmp	r0, #0
   b6742:	d1f1      	bne.n	b6728 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6744:	6823      	ldr	r3, [r4, #0]
   b6746:	ebaa 0205 	sub.w	r2, sl, r5
   b674a:	689b      	ldr	r3, [r3, #8]
   b674c:	4629      	mov	r1, r5
   b674e:	4620      	mov	r0, r4
   b6750:	4798      	blx	r3
            write('\\');
   b6752:	215c      	movs	r1, #92	; 0x5c
   b6754:	4620      	mov	r0, r4
   b6756:	f7ff ff87 	bl	b6668 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b675a:	2e0d      	cmp	r6, #13
   b675c:	d80a      	bhi.n	b6774 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b675e:	2e07      	cmp	r6, #7
   b6760:	d91c      	bls.n	b679c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6762:	f1a6 0308 	sub.w	r3, r6, #8
   b6766:	2b05      	cmp	r3, #5
   b6768:	d818      	bhi.n	b679c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b676a:	e8df f003 	tbb	[pc, r3]
   b676e:	0f0d      	.short	0x0f0d
   b6770:	15131711 	.word	0x15131711
   b6774:	2e22      	cmp	r6, #34	; 0x22
   b6776:	d001      	beq.n	b677c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6778:	2e5c      	cmp	r6, #92	; 0x5c
   b677a:	d10f      	bne.n	b679c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b677c:	4631      	mov	r1, r6
                write('b');
   b677e:	4620      	mov	r0, r4
   b6780:	f7ff ff72 	bl	b6668 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6784:	463d      	mov	r5, r7
    while (s != end) {
   b6786:	e7cf      	b.n	b6728 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6788:	2162      	movs	r1, #98	; 0x62
   b678a:	e7f8      	b.n	b677e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b678c:	2174      	movs	r1, #116	; 0x74
   b678e:	e7f6      	b.n	b677e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6790:	216e      	movs	r1, #110	; 0x6e
   b6792:	e7f4      	b.n	b677e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6794:	2166      	movs	r1, #102	; 0x66
   b6796:	e7f2      	b.n	b677e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6798:	2172      	movs	r1, #114	; 0x72
   b679a:	e7f0      	b.n	b677e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b679c:	6823      	ldr	r3, [r4, #0]
   b679e:	4632      	mov	r2, r6
   b67a0:	68db      	ldr	r3, [r3, #12]
   b67a2:	4649      	mov	r1, r9
   b67a4:	4620      	mov	r0, r4
   b67a6:	4798      	blx	r3
                break;
   b67a8:	e7ec      	b.n	b6784 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b67aa:	42bd      	cmp	r5, r7
   b67ac:	d005      	beq.n	b67ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b67ae:	6823      	ldr	r3, [r4, #0]
   b67b0:	1b7a      	subs	r2, r7, r5
   b67b2:	689b      	ldr	r3, [r3, #8]
   b67b4:	4629      	mov	r1, r5
   b67b6:	4620      	mov	r0, r4
   b67b8:	4798      	blx	r3
    }
    write('"');
   b67ba:	2122      	movs	r1, #34	; 0x22
   b67bc:	4620      	mov	r0, r4
   b67be:	f7ff ff53 	bl	b6668 <_ZN5spark10JSONWriter5writeEc>
}
   b67c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b67c6:	bf00      	nop
   b67c8:	000b7df2 	.word	0x000b7df2

000b67cc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b67cc:	b513      	push	{r0, r1, r4, lr}
   b67ce:	4604      	mov	r4, r0
   b67d0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b67d4:	f7ff ff5d 	bl	b6692 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b67d8:	4620      	mov	r0, r4
   b67da:	e9dd 2100 	ldrd	r2, r1, [sp]
   b67de:	f7ff ff97 	bl	b6710 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b67e2:	2302      	movs	r3, #2
}
   b67e4:	4620      	mov	r0, r4
    state_ = VALUE;
   b67e6:	7123      	strb	r3, [r4, #4]
}
   b67e8:	b002      	add	sp, #8
   b67ea:	bd10      	pop	{r4, pc}

000b67ec <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b67ec:	b513      	push	{r0, r1, r4, lr}
   b67ee:	4604      	mov	r4, r0
   b67f0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b67f4:	f7ff ff4d 	bl	b6692 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b67f8:	4620      	mov	r0, r4
   b67fa:	e9dd 2100 	ldrd	r2, r1, [sp]
   b67fe:	f7ff ff87 	bl	b6710 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b6802:	2301      	movs	r3, #1
}
   b6804:	4620      	mov	r0, r4
    state_ = NEXT;
   b6806:	7123      	strb	r3, [r4, #4]
}
   b6808:	b002      	add	sp, #8
   b680a:	bd10      	pop	{r4, pc}

000b680c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b680c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b680e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6810:	d902      	bls.n	b6818 <pinAvailable+0xc>
    return false;
   b6812:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6814:	b002      	add	sp, #8
   b6816:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6818:	f1a0 030b 	sub.w	r3, r0, #11
   b681c:	2b02      	cmp	r3, #2
   b681e:	d81a      	bhi.n	b6856 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6820:	4c17      	ldr	r4, [pc, #92]	; (b6880 <pinAvailable+0x74>)
   b6822:	7821      	ldrb	r1, [r4, #0]
   b6824:	f3bf 8f5b 	dmb	ish
   b6828:	f011 0101 	ands.w	r1, r1, #1
   b682c:	d10b      	bne.n	b6846 <pinAvailable+0x3a>
   b682e:	4620      	mov	r0, r4
   b6830:	9101      	str	r1, [sp, #4]
   b6832:	f7fd fc36 	bl	b40a2 <__cxa_guard_acquire>
   b6836:	9901      	ldr	r1, [sp, #4]
   b6838:	b128      	cbz	r0, b6846 <pinAvailable+0x3a>
   b683a:	4812      	ldr	r0, [pc, #72]	; (b6884 <pinAvailable+0x78>)
   b683c:	f7ff f886 	bl	b594c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6840:	4620      	mov	r0, r4
   b6842:	f7fd fc33 	bl	b40ac <__cxa_guard_release>
   b6846:	4b0f      	ldr	r3, [pc, #60]	; (b6884 <pinAvailable+0x78>)
   b6848:	7818      	ldrb	r0, [r3, #0]
   b684a:	f7fe fec7 	bl	b55dc <hal_spi_is_enabled>
   b684e:	2800      	cmp	r0, #0
   b6850:	d1df      	bne.n	b6812 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6852:	2001      	movs	r0, #1
   b6854:	e7de      	b.n	b6814 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6856:	2801      	cmp	r0, #1
   b6858:	d809      	bhi.n	b686e <pinAvailable+0x62>
   b685a:	f000 f8a9 	bl	b69b0 <_Z19__fetch_global_Wirev>
   b685e:	2100      	movs	r1, #0
   b6860:	7c00      	ldrb	r0, [r0, #16]
   b6862:	f7fe fe8b 	bl	b557c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6866:	f080 0001 	eor.w	r0, r0, #1
   b686a:	b2c0      	uxtb	r0, r0
   b686c:	e7d2      	b.n	b6814 <pinAvailable+0x8>
   b686e:	3809      	subs	r0, #9
   b6870:	2801      	cmp	r0, #1
   b6872:	d8ee      	bhi.n	b6852 <pinAvailable+0x46>
   b6874:	f000 f860 	bl	b6938 <_Z22__fetch_global_Serial1v>
   b6878:	7c00      	ldrb	r0, [r0, #16]
   b687a:	f7fe fe27 	bl	b54cc <hal_usart_is_enabled>
   b687e:	e7f2      	b.n	b6866 <pinAvailable+0x5a>
   b6880:	2003e6a4 	.word	0x2003e6a4
   b6884:	2003e6a8 	.word	0x2003e6a8

000b6888 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6888:	2823      	cmp	r0, #35	; 0x23
{
   b688a:	b538      	push	{r3, r4, r5, lr}
   b688c:	4604      	mov	r4, r0
   b688e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6890:	d80a      	bhi.n	b68a8 <pinMode+0x20>
   b6892:	29ff      	cmp	r1, #255	; 0xff
   b6894:	d008      	beq.n	b68a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6896:	f7ff ffb9 	bl	b680c <pinAvailable>
   b689a:	b128      	cbz	r0, b68a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b689c:	4629      	mov	r1, r5
   b689e:	4620      	mov	r0, r4
}
   b68a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b68a4:	f7fe bd9a 	b.w	b53dc <HAL_Pin_Mode>
}
   b68a8:	bd38      	pop	{r3, r4, r5, pc}

000b68aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b68aa:	b538      	push	{r3, r4, r5, lr}
   b68ac:	4604      	mov	r4, r0
   b68ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b68b0:	f7fe fd9c 	bl	b53ec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b68b4:	28ff      	cmp	r0, #255	; 0xff
   b68b6:	d010      	beq.n	b68da <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b68b8:	2806      	cmp	r0, #6
   b68ba:	d804      	bhi.n	b68c6 <digitalWrite+0x1c>
   b68bc:	234d      	movs	r3, #77	; 0x4d
   b68be:	fa23 f000 	lsr.w	r0, r3, r0
   b68c2:	07c3      	lsls	r3, r0, #31
   b68c4:	d409      	bmi.n	b68da <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b68c6:	4620      	mov	r0, r4
   b68c8:	f7ff ffa0 	bl	b680c <pinAvailable>
   b68cc:	b128      	cbz	r0, b68da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b68ce:	4629      	mov	r1, r5
   b68d0:	4620      	mov	r0, r4
}
   b68d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b68d6:	f7fe bd91 	b.w	b53fc <HAL_GPIO_Write>
}
   b68da:	bd38      	pop	{r3, r4, r5, pc}

000b68dc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b68dc:	b510      	push	{r4, lr}
   b68de:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b68e0:	f7fe fd84 	bl	b53ec <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b68e4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b68e6:	b2db      	uxtb	r3, r3
   b68e8:	2b01      	cmp	r3, #1
   b68ea:	d908      	bls.n	b68fe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b68ec:	4620      	mov	r0, r4
   b68ee:	f7ff ff8d 	bl	b680c <pinAvailable>
   b68f2:	b120      	cbz	r0, b68fe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b68f4:	4620      	mov	r0, r4
}
   b68f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b68fa:	f7fe bd87 	b.w	b540c <HAL_GPIO_Read>
}
   b68fe:	2000      	movs	r0, #0
   b6900:	bd10      	pop	{r4, pc}

000b6902 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6902:	4770      	bx	lr

000b6904 <_Z20acquireSerial1Bufferv>:
{
   b6904:	b538      	push	{r3, r4, r5, lr}
   b6906:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6908:	2514      	movs	r5, #20
   b690a:	462a      	mov	r2, r5
   b690c:	2100      	movs	r1, #0
   b690e:	f000 ffc5 	bl	b789c <memset>
   b6912:	8025      	strh	r5, [r4, #0]
   b6914:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6916:	4907      	ldr	r1, [pc, #28]	; (b6934 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6918:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b691a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b691c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b691e:	f000 f86b 	bl	b69f8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6922:	4904      	ldr	r1, [pc, #16]	; (b6934 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6924:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6926:	4628      	mov	r0, r5
   b6928:	f000 f866 	bl	b69f8 <_ZnajRKSt9nothrow_t>
    };
   b692c:	60e0      	str	r0, [r4, #12]
}
   b692e:	4620      	mov	r0, r4
   b6930:	bd38      	pop	{r3, r4, r5, pc}
   b6932:	bf00      	nop
   b6934:	000b7df8 	.word	0x000b7df8

000b6938 <_Z22__fetch_global_Serial1v>:
{
   b6938:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b693a:	4d0e      	ldr	r5, [pc, #56]	; (b6974 <_Z22__fetch_global_Serial1v+0x3c>)
   b693c:	7829      	ldrb	r1, [r5, #0]
   b693e:	f3bf 8f5b 	dmb	ish
   b6942:	f011 0401 	ands.w	r4, r1, #1
{
   b6946:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6948:	d111      	bne.n	b696e <_Z22__fetch_global_Serial1v+0x36>
   b694a:	4628      	mov	r0, r5
   b694c:	f7fd fba9 	bl	b40a2 <__cxa_guard_acquire>
   b6950:	b168      	cbz	r0, b696e <_Z22__fetch_global_Serial1v+0x36>
   b6952:	a801      	add	r0, sp, #4
   b6954:	f7ff ffd6 	bl	b6904 <_Z20acquireSerial1Bufferv>
   b6958:	aa01      	add	r2, sp, #4
   b695a:	4621      	mov	r1, r4
   b695c:	4806      	ldr	r0, [pc, #24]	; (b6978 <_Z22__fetch_global_Serial1v+0x40>)
   b695e:	f7ff fcc5 	bl	b62ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6962:	4628      	mov	r0, r5
   b6964:	f7fd fba2 	bl	b40ac <__cxa_guard_release>
   b6968:	4804      	ldr	r0, [pc, #16]	; (b697c <_Z22__fetch_global_Serial1v+0x44>)
   b696a:	f000 ff7b 	bl	b7864 <atexit>
    return serial1;
}
   b696e:	4802      	ldr	r0, [pc, #8]	; (b6978 <_Z22__fetch_global_Serial1v+0x40>)
   b6970:	b007      	add	sp, #28
   b6972:	bd30      	pop	{r4, r5, pc}
   b6974:	2003e728 	.word	0x2003e728
   b6978:	2003e72c 	.word	0x2003e72c
   b697c:	000b6903 	.word	0x000b6903

000b6980 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6980:	4770      	bx	lr
	...

000b6984 <_Z17acquireWireBufferv>:
{
   b6984:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6986:	2520      	movs	r5, #32
   b6988:	2314      	movs	r3, #20
{
   b698a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b698c:	6003      	str	r3, [r0, #0]
   b698e:	6085      	str	r5, [r0, #8]
   b6990:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6992:	4906      	ldr	r1, [pc, #24]	; (b69ac <_Z17acquireWireBufferv+0x28>)
   b6994:	4628      	mov	r0, r5
   b6996:	f000 f82f 	bl	b69f8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b699a:	4904      	ldr	r1, [pc, #16]	; (b69ac <_Z17acquireWireBufferv+0x28>)
	};
   b699c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b699e:	4628      	mov	r0, r5
   b69a0:	f000 f82a 	bl	b69f8 <_ZnajRKSt9nothrow_t>
	};
   b69a4:	60e0      	str	r0, [r4, #12]
}
   b69a6:	4620      	mov	r0, r4
   b69a8:	bd38      	pop	{r3, r4, r5, pc}
   b69aa:	bf00      	nop
   b69ac:	000b7df8 	.word	0x000b7df8

000b69b0 <_Z19__fetch_global_Wirev>:
{
   b69b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69b2:	4d0e      	ldr	r5, [pc, #56]	; (b69ec <_Z19__fetch_global_Wirev+0x3c>)
   b69b4:	7829      	ldrb	r1, [r5, #0]
   b69b6:	f3bf 8f5b 	dmb	ish
   b69ba:	f011 0401 	ands.w	r4, r1, #1
{
   b69be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69c0:	d111      	bne.n	b69e6 <_Z19__fetch_global_Wirev+0x36>
   b69c2:	4628      	mov	r0, r5
   b69c4:	f7fd fb6d 	bl	b40a2 <__cxa_guard_acquire>
   b69c8:	b168      	cbz	r0, b69e6 <_Z19__fetch_global_Wirev+0x36>
   b69ca:	a801      	add	r0, sp, #4
   b69cc:	f7ff ffda 	bl	b6984 <_Z17acquireWireBufferv>
   b69d0:	aa01      	add	r2, sp, #4
   b69d2:	4621      	mov	r1, r4
   b69d4:	4806      	ldr	r0, [pc, #24]	; (b69f0 <_Z19__fetch_global_Wirev+0x40>)
   b69d6:	f7ff fcc9 	bl	b636c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b69da:	4628      	mov	r0, r5
   b69dc:	f7fd fb66 	bl	b40ac <__cxa_guard_release>
   b69e0:	4804      	ldr	r0, [pc, #16]	; (b69f4 <_Z19__fetch_global_Wirev+0x44>)
   b69e2:	f000 ff3f 	bl	b7864 <atexit>
	return wire;
}
   b69e6:	4802      	ldr	r0, [pc, #8]	; (b69f0 <_Z19__fetch_global_Wirev+0x40>)
   b69e8:	b007      	add	sp, #28
   b69ea:	bd30      	pop	{r4, r5, pc}
   b69ec:	2003e744 	.word	0x2003e744
   b69f0:	2003e748 	.word	0x2003e748
   b69f4:	000b6981 	.word	0x000b6981

000b69f8 <_ZnajRKSt9nothrow_t>:
   b69f8:	f7fd bb4f 	b.w	b409a <_Znaj>

000b69fc <__aeabi_drsub>:
   b69fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6a00:	e002      	b.n	b6a08 <__adddf3>
   b6a02:	bf00      	nop

000b6a04 <__aeabi_dsub>:
   b6a04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6a08 <__adddf3>:
   b6a08:	b530      	push	{r4, r5, lr}
   b6a0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6a0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6a12:	ea94 0f05 	teq	r4, r5
   b6a16:	bf08      	it	eq
   b6a18:	ea90 0f02 	teqeq	r0, r2
   b6a1c:	bf1f      	itttt	ne
   b6a1e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6a22:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6a26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6a2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6a2e:	f000 80e2 	beq.w	b6bf6 <__adddf3+0x1ee>
   b6a32:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6a36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6a3a:	bfb8      	it	lt
   b6a3c:	426d      	neglt	r5, r5
   b6a3e:	dd0c      	ble.n	b6a5a <__adddf3+0x52>
   b6a40:	442c      	add	r4, r5
   b6a42:	ea80 0202 	eor.w	r2, r0, r2
   b6a46:	ea81 0303 	eor.w	r3, r1, r3
   b6a4a:	ea82 0000 	eor.w	r0, r2, r0
   b6a4e:	ea83 0101 	eor.w	r1, r3, r1
   b6a52:	ea80 0202 	eor.w	r2, r0, r2
   b6a56:	ea81 0303 	eor.w	r3, r1, r3
   b6a5a:	2d36      	cmp	r5, #54	; 0x36
   b6a5c:	bf88      	it	hi
   b6a5e:	bd30      	pophi	{r4, r5, pc}
   b6a60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6a64:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6a68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6a6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6a70:	d002      	beq.n	b6a78 <__adddf3+0x70>
   b6a72:	4240      	negs	r0, r0
   b6a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6a78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6a7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6a80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6a84:	d002      	beq.n	b6a8c <__adddf3+0x84>
   b6a86:	4252      	negs	r2, r2
   b6a88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6a8c:	ea94 0f05 	teq	r4, r5
   b6a90:	f000 80a7 	beq.w	b6be2 <__adddf3+0x1da>
   b6a94:	f1a4 0401 	sub.w	r4, r4, #1
   b6a98:	f1d5 0e20 	rsbs	lr, r5, #32
   b6a9c:	db0d      	blt.n	b6aba <__adddf3+0xb2>
   b6a9e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6aa2:	fa22 f205 	lsr.w	r2, r2, r5
   b6aa6:	1880      	adds	r0, r0, r2
   b6aa8:	f141 0100 	adc.w	r1, r1, #0
   b6aac:	fa03 f20e 	lsl.w	r2, r3, lr
   b6ab0:	1880      	adds	r0, r0, r2
   b6ab2:	fa43 f305 	asr.w	r3, r3, r5
   b6ab6:	4159      	adcs	r1, r3
   b6ab8:	e00e      	b.n	b6ad8 <__adddf3+0xd0>
   b6aba:	f1a5 0520 	sub.w	r5, r5, #32
   b6abe:	f10e 0e20 	add.w	lr, lr, #32
   b6ac2:	2a01      	cmp	r2, #1
   b6ac4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6ac8:	bf28      	it	cs
   b6aca:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6ace:	fa43 f305 	asr.w	r3, r3, r5
   b6ad2:	18c0      	adds	r0, r0, r3
   b6ad4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6ad8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6adc:	d507      	bpl.n	b6aee <__adddf3+0xe6>
   b6ade:	f04f 0e00 	mov.w	lr, #0
   b6ae2:	f1dc 0c00 	rsbs	ip, ip, #0
   b6ae6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6aea:	eb6e 0101 	sbc.w	r1, lr, r1
   b6aee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6af2:	d31b      	bcc.n	b6b2c <__adddf3+0x124>
   b6af4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6af8:	d30c      	bcc.n	b6b14 <__adddf3+0x10c>
   b6afa:	0849      	lsrs	r1, r1, #1
   b6afc:	ea5f 0030 	movs.w	r0, r0, rrx
   b6b00:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6b04:	f104 0401 	add.w	r4, r4, #1
   b6b08:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6b0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6b10:	f080 809a 	bcs.w	b6c48 <__adddf3+0x240>
   b6b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6b18:	bf08      	it	eq
   b6b1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b1e:	f150 0000 	adcs.w	r0, r0, #0
   b6b22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b26:	ea41 0105 	orr.w	r1, r1, r5
   b6b2a:	bd30      	pop	{r4, r5, pc}
   b6b2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6b30:	4140      	adcs	r0, r0
   b6b32:	eb41 0101 	adc.w	r1, r1, r1
   b6b36:	3c01      	subs	r4, #1
   b6b38:	bf28      	it	cs
   b6b3a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6b3e:	d2e9      	bcs.n	b6b14 <__adddf3+0x10c>
   b6b40:	f091 0f00 	teq	r1, #0
   b6b44:	bf04      	itt	eq
   b6b46:	4601      	moveq	r1, r0
   b6b48:	2000      	moveq	r0, #0
   b6b4a:	fab1 f381 	clz	r3, r1
   b6b4e:	bf08      	it	eq
   b6b50:	3320      	addeq	r3, #32
   b6b52:	f1a3 030b 	sub.w	r3, r3, #11
   b6b56:	f1b3 0220 	subs.w	r2, r3, #32
   b6b5a:	da0c      	bge.n	b6b76 <__adddf3+0x16e>
   b6b5c:	320c      	adds	r2, #12
   b6b5e:	dd08      	ble.n	b6b72 <__adddf3+0x16a>
   b6b60:	f102 0c14 	add.w	ip, r2, #20
   b6b64:	f1c2 020c 	rsb	r2, r2, #12
   b6b68:	fa01 f00c 	lsl.w	r0, r1, ip
   b6b6c:	fa21 f102 	lsr.w	r1, r1, r2
   b6b70:	e00c      	b.n	b6b8c <__adddf3+0x184>
   b6b72:	f102 0214 	add.w	r2, r2, #20
   b6b76:	bfd8      	it	le
   b6b78:	f1c2 0c20 	rsble	ip, r2, #32
   b6b7c:	fa01 f102 	lsl.w	r1, r1, r2
   b6b80:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6b84:	bfdc      	itt	le
   b6b86:	ea41 010c 	orrle.w	r1, r1, ip
   b6b8a:	4090      	lslle	r0, r2
   b6b8c:	1ae4      	subs	r4, r4, r3
   b6b8e:	bfa2      	ittt	ge
   b6b90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6b94:	4329      	orrge	r1, r5
   b6b96:	bd30      	popge	{r4, r5, pc}
   b6b98:	ea6f 0404 	mvn.w	r4, r4
   b6b9c:	3c1f      	subs	r4, #31
   b6b9e:	da1c      	bge.n	b6bda <__adddf3+0x1d2>
   b6ba0:	340c      	adds	r4, #12
   b6ba2:	dc0e      	bgt.n	b6bc2 <__adddf3+0x1ba>
   b6ba4:	f104 0414 	add.w	r4, r4, #20
   b6ba8:	f1c4 0220 	rsb	r2, r4, #32
   b6bac:	fa20 f004 	lsr.w	r0, r0, r4
   b6bb0:	fa01 f302 	lsl.w	r3, r1, r2
   b6bb4:	ea40 0003 	orr.w	r0, r0, r3
   b6bb8:	fa21 f304 	lsr.w	r3, r1, r4
   b6bbc:	ea45 0103 	orr.w	r1, r5, r3
   b6bc0:	bd30      	pop	{r4, r5, pc}
   b6bc2:	f1c4 040c 	rsb	r4, r4, #12
   b6bc6:	f1c4 0220 	rsb	r2, r4, #32
   b6bca:	fa20 f002 	lsr.w	r0, r0, r2
   b6bce:	fa01 f304 	lsl.w	r3, r1, r4
   b6bd2:	ea40 0003 	orr.w	r0, r0, r3
   b6bd6:	4629      	mov	r1, r5
   b6bd8:	bd30      	pop	{r4, r5, pc}
   b6bda:	fa21 f004 	lsr.w	r0, r1, r4
   b6bde:	4629      	mov	r1, r5
   b6be0:	bd30      	pop	{r4, r5, pc}
   b6be2:	f094 0f00 	teq	r4, #0
   b6be6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6bea:	bf06      	itte	eq
   b6bec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6bf0:	3401      	addeq	r4, #1
   b6bf2:	3d01      	subne	r5, #1
   b6bf4:	e74e      	b.n	b6a94 <__adddf3+0x8c>
   b6bf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6bfa:	bf18      	it	ne
   b6bfc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6c00:	d029      	beq.n	b6c56 <__adddf3+0x24e>
   b6c02:	ea94 0f05 	teq	r4, r5
   b6c06:	bf08      	it	eq
   b6c08:	ea90 0f02 	teqeq	r0, r2
   b6c0c:	d005      	beq.n	b6c1a <__adddf3+0x212>
   b6c0e:	ea54 0c00 	orrs.w	ip, r4, r0
   b6c12:	bf04      	itt	eq
   b6c14:	4619      	moveq	r1, r3
   b6c16:	4610      	moveq	r0, r2
   b6c18:	bd30      	pop	{r4, r5, pc}
   b6c1a:	ea91 0f03 	teq	r1, r3
   b6c1e:	bf1e      	ittt	ne
   b6c20:	2100      	movne	r1, #0
   b6c22:	2000      	movne	r0, #0
   b6c24:	bd30      	popne	{r4, r5, pc}
   b6c26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6c2a:	d105      	bne.n	b6c38 <__adddf3+0x230>
   b6c2c:	0040      	lsls	r0, r0, #1
   b6c2e:	4149      	adcs	r1, r1
   b6c30:	bf28      	it	cs
   b6c32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6c36:	bd30      	pop	{r4, r5, pc}
   b6c38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6c3c:	bf3c      	itt	cc
   b6c3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6c42:	bd30      	popcc	{r4, r5, pc}
   b6c44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6c48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6c4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6c50:	f04f 0000 	mov.w	r0, #0
   b6c54:	bd30      	pop	{r4, r5, pc}
   b6c56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6c5a:	bf1a      	itte	ne
   b6c5c:	4619      	movne	r1, r3
   b6c5e:	4610      	movne	r0, r2
   b6c60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6c64:	bf1c      	itt	ne
   b6c66:	460b      	movne	r3, r1
   b6c68:	4602      	movne	r2, r0
   b6c6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6c6e:	bf06      	itte	eq
   b6c70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6c74:	ea91 0f03 	teqeq	r1, r3
   b6c78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6c7c:	bd30      	pop	{r4, r5, pc}
   b6c7e:	bf00      	nop

000b6c80 <__aeabi_ui2d>:
   b6c80:	f090 0f00 	teq	r0, #0
   b6c84:	bf04      	itt	eq
   b6c86:	2100      	moveq	r1, #0
   b6c88:	4770      	bxeq	lr
   b6c8a:	b530      	push	{r4, r5, lr}
   b6c8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6c90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6c94:	f04f 0500 	mov.w	r5, #0
   b6c98:	f04f 0100 	mov.w	r1, #0
   b6c9c:	e750      	b.n	b6b40 <__adddf3+0x138>
   b6c9e:	bf00      	nop

000b6ca0 <__aeabi_i2d>:
   b6ca0:	f090 0f00 	teq	r0, #0
   b6ca4:	bf04      	itt	eq
   b6ca6:	2100      	moveq	r1, #0
   b6ca8:	4770      	bxeq	lr
   b6caa:	b530      	push	{r4, r5, lr}
   b6cac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6cb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6cb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6cb8:	bf48      	it	mi
   b6cba:	4240      	negmi	r0, r0
   b6cbc:	f04f 0100 	mov.w	r1, #0
   b6cc0:	e73e      	b.n	b6b40 <__adddf3+0x138>
   b6cc2:	bf00      	nop

000b6cc4 <__aeabi_f2d>:
   b6cc4:	0042      	lsls	r2, r0, #1
   b6cc6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6cca:	ea4f 0131 	mov.w	r1, r1, rrx
   b6cce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6cd2:	bf1f      	itttt	ne
   b6cd4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6cd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6cdc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6ce0:	4770      	bxne	lr
   b6ce2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6ce6:	bf08      	it	eq
   b6ce8:	4770      	bxeq	lr
   b6cea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6cee:	bf04      	itt	eq
   b6cf0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6cf4:	4770      	bxeq	lr
   b6cf6:	b530      	push	{r4, r5, lr}
   b6cf8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6cfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6d00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6d04:	e71c      	b.n	b6b40 <__adddf3+0x138>
   b6d06:	bf00      	nop

000b6d08 <__aeabi_ul2d>:
   b6d08:	ea50 0201 	orrs.w	r2, r0, r1
   b6d0c:	bf08      	it	eq
   b6d0e:	4770      	bxeq	lr
   b6d10:	b530      	push	{r4, r5, lr}
   b6d12:	f04f 0500 	mov.w	r5, #0
   b6d16:	e00a      	b.n	b6d2e <__aeabi_l2d+0x16>

000b6d18 <__aeabi_l2d>:
   b6d18:	ea50 0201 	orrs.w	r2, r0, r1
   b6d1c:	bf08      	it	eq
   b6d1e:	4770      	bxeq	lr
   b6d20:	b530      	push	{r4, r5, lr}
   b6d22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6d26:	d502      	bpl.n	b6d2e <__aeabi_l2d+0x16>
   b6d28:	4240      	negs	r0, r0
   b6d2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6d2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6d32:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6d36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6d3a:	f43f aed8 	beq.w	b6aee <__adddf3+0xe6>
   b6d3e:	f04f 0203 	mov.w	r2, #3
   b6d42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d46:	bf18      	it	ne
   b6d48:	3203      	addne	r2, #3
   b6d4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6d4e:	bf18      	it	ne
   b6d50:	3203      	addne	r2, #3
   b6d52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6d56:	f1c2 0320 	rsb	r3, r2, #32
   b6d5a:	fa00 fc03 	lsl.w	ip, r0, r3
   b6d5e:	fa20 f002 	lsr.w	r0, r0, r2
   b6d62:	fa01 fe03 	lsl.w	lr, r1, r3
   b6d66:	ea40 000e 	orr.w	r0, r0, lr
   b6d6a:	fa21 f102 	lsr.w	r1, r1, r2
   b6d6e:	4414      	add	r4, r2
   b6d70:	e6bd      	b.n	b6aee <__adddf3+0xe6>
   b6d72:	bf00      	nop

000b6d74 <__aeabi_dmul>:
   b6d74:	b570      	push	{r4, r5, r6, lr}
   b6d76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6d7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6d7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6d82:	bf1d      	ittte	ne
   b6d84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6d88:	ea94 0f0c 	teqne	r4, ip
   b6d8c:	ea95 0f0c 	teqne	r5, ip
   b6d90:	f000 f8de 	bleq	b6f50 <__aeabi_dmul+0x1dc>
   b6d94:	442c      	add	r4, r5
   b6d96:	ea81 0603 	eor.w	r6, r1, r3
   b6d9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6d9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6da2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6da6:	bf18      	it	ne
   b6da8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6dac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6db4:	d038      	beq.n	b6e28 <__aeabi_dmul+0xb4>
   b6db6:	fba0 ce02 	umull	ip, lr, r0, r2
   b6dba:	f04f 0500 	mov.w	r5, #0
   b6dbe:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6dc2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6dc6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6dca:	f04f 0600 	mov.w	r6, #0
   b6dce:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6dd2:	f09c 0f00 	teq	ip, #0
   b6dd6:	bf18      	it	ne
   b6dd8:	f04e 0e01 	orrne.w	lr, lr, #1
   b6ddc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6de0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6de4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6de8:	d204      	bcs.n	b6df4 <__aeabi_dmul+0x80>
   b6dea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6dee:	416d      	adcs	r5, r5
   b6df0:	eb46 0606 	adc.w	r6, r6, r6
   b6df4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6df8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6dfc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6e00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6e04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6e08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6e0c:	bf88      	it	hi
   b6e0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e12:	d81e      	bhi.n	b6e52 <__aeabi_dmul+0xde>
   b6e14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6e18:	bf08      	it	eq
   b6e1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6e1e:	f150 0000 	adcs.w	r0, r0, #0
   b6e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6e26:	bd70      	pop	{r4, r5, r6, pc}
   b6e28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6e2c:	ea46 0101 	orr.w	r1, r6, r1
   b6e30:	ea40 0002 	orr.w	r0, r0, r2
   b6e34:	ea81 0103 	eor.w	r1, r1, r3
   b6e38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6e3c:	bfc2      	ittt	gt
   b6e3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6e42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6e46:	bd70      	popgt	{r4, r5, r6, pc}
   b6e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e4c:	f04f 0e00 	mov.w	lr, #0
   b6e50:	3c01      	subs	r4, #1
   b6e52:	f300 80ab 	bgt.w	b6fac <__aeabi_dmul+0x238>
   b6e56:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6e5a:	bfde      	ittt	le
   b6e5c:	2000      	movle	r0, #0
   b6e5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6e62:	bd70      	pople	{r4, r5, r6, pc}
   b6e64:	f1c4 0400 	rsb	r4, r4, #0
   b6e68:	3c20      	subs	r4, #32
   b6e6a:	da35      	bge.n	b6ed8 <__aeabi_dmul+0x164>
   b6e6c:	340c      	adds	r4, #12
   b6e6e:	dc1b      	bgt.n	b6ea8 <__aeabi_dmul+0x134>
   b6e70:	f104 0414 	add.w	r4, r4, #20
   b6e74:	f1c4 0520 	rsb	r5, r4, #32
   b6e78:	fa00 f305 	lsl.w	r3, r0, r5
   b6e7c:	fa20 f004 	lsr.w	r0, r0, r4
   b6e80:	fa01 f205 	lsl.w	r2, r1, r5
   b6e84:	ea40 0002 	orr.w	r0, r0, r2
   b6e88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6e8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6e90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6e94:	fa21 f604 	lsr.w	r6, r1, r4
   b6e98:	eb42 0106 	adc.w	r1, r2, r6
   b6e9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6ea0:	bf08      	it	eq
   b6ea2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6ea6:	bd70      	pop	{r4, r5, r6, pc}
   b6ea8:	f1c4 040c 	rsb	r4, r4, #12
   b6eac:	f1c4 0520 	rsb	r5, r4, #32
   b6eb0:	fa00 f304 	lsl.w	r3, r0, r4
   b6eb4:	fa20 f005 	lsr.w	r0, r0, r5
   b6eb8:	fa01 f204 	lsl.w	r2, r1, r4
   b6ebc:	ea40 0002 	orr.w	r0, r0, r2
   b6ec0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6ec4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6ec8:	f141 0100 	adc.w	r1, r1, #0
   b6ecc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6ed0:	bf08      	it	eq
   b6ed2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6ed6:	bd70      	pop	{r4, r5, r6, pc}
   b6ed8:	f1c4 0520 	rsb	r5, r4, #32
   b6edc:	fa00 f205 	lsl.w	r2, r0, r5
   b6ee0:	ea4e 0e02 	orr.w	lr, lr, r2
   b6ee4:	fa20 f304 	lsr.w	r3, r0, r4
   b6ee8:	fa01 f205 	lsl.w	r2, r1, r5
   b6eec:	ea43 0302 	orr.w	r3, r3, r2
   b6ef0:	fa21 f004 	lsr.w	r0, r1, r4
   b6ef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6ef8:	fa21 f204 	lsr.w	r2, r1, r4
   b6efc:	ea20 0002 	bic.w	r0, r0, r2
   b6f00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6f04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6f08:	bf08      	it	eq
   b6f0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f0e:	bd70      	pop	{r4, r5, r6, pc}
   b6f10:	f094 0f00 	teq	r4, #0
   b6f14:	d10f      	bne.n	b6f36 <__aeabi_dmul+0x1c2>
   b6f16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6f1a:	0040      	lsls	r0, r0, #1
   b6f1c:	eb41 0101 	adc.w	r1, r1, r1
   b6f20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6f24:	bf08      	it	eq
   b6f26:	3c01      	subeq	r4, #1
   b6f28:	d0f7      	beq.n	b6f1a <__aeabi_dmul+0x1a6>
   b6f2a:	ea41 0106 	orr.w	r1, r1, r6
   b6f2e:	f095 0f00 	teq	r5, #0
   b6f32:	bf18      	it	ne
   b6f34:	4770      	bxne	lr
   b6f36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6f3a:	0052      	lsls	r2, r2, #1
   b6f3c:	eb43 0303 	adc.w	r3, r3, r3
   b6f40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6f44:	bf08      	it	eq
   b6f46:	3d01      	subeq	r5, #1
   b6f48:	d0f7      	beq.n	b6f3a <__aeabi_dmul+0x1c6>
   b6f4a:	ea43 0306 	orr.w	r3, r3, r6
   b6f4e:	4770      	bx	lr
   b6f50:	ea94 0f0c 	teq	r4, ip
   b6f54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6f58:	bf18      	it	ne
   b6f5a:	ea95 0f0c 	teqne	r5, ip
   b6f5e:	d00c      	beq.n	b6f7a <__aeabi_dmul+0x206>
   b6f60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6f64:	bf18      	it	ne
   b6f66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6f6a:	d1d1      	bne.n	b6f10 <__aeabi_dmul+0x19c>
   b6f6c:	ea81 0103 	eor.w	r1, r1, r3
   b6f70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f74:	f04f 0000 	mov.w	r0, #0
   b6f78:	bd70      	pop	{r4, r5, r6, pc}
   b6f7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6f7e:	bf06      	itte	eq
   b6f80:	4610      	moveq	r0, r2
   b6f82:	4619      	moveq	r1, r3
   b6f84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6f88:	d019      	beq.n	b6fbe <__aeabi_dmul+0x24a>
   b6f8a:	ea94 0f0c 	teq	r4, ip
   b6f8e:	d102      	bne.n	b6f96 <__aeabi_dmul+0x222>
   b6f90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6f94:	d113      	bne.n	b6fbe <__aeabi_dmul+0x24a>
   b6f96:	ea95 0f0c 	teq	r5, ip
   b6f9a:	d105      	bne.n	b6fa8 <__aeabi_dmul+0x234>
   b6f9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6fa0:	bf1c      	itt	ne
   b6fa2:	4610      	movne	r0, r2
   b6fa4:	4619      	movne	r1, r3
   b6fa6:	d10a      	bne.n	b6fbe <__aeabi_dmul+0x24a>
   b6fa8:	ea81 0103 	eor.w	r1, r1, r3
   b6fac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6fb0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6fb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6fb8:	f04f 0000 	mov.w	r0, #0
   b6fbc:	bd70      	pop	{r4, r5, r6, pc}
   b6fbe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6fc2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6fc6:	bd70      	pop	{r4, r5, r6, pc}

000b6fc8 <__aeabi_ddiv>:
   b6fc8:	b570      	push	{r4, r5, r6, lr}
   b6fca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6fce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6fd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6fd6:	bf1d      	ittte	ne
   b6fd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6fdc:	ea94 0f0c 	teqne	r4, ip
   b6fe0:	ea95 0f0c 	teqne	r5, ip
   b6fe4:	f000 f8a7 	bleq	b7136 <__aeabi_ddiv+0x16e>
   b6fe8:	eba4 0405 	sub.w	r4, r4, r5
   b6fec:	ea81 0e03 	eor.w	lr, r1, r3
   b6ff0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6ff4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ff8:	f000 8088 	beq.w	b710c <__aeabi_ddiv+0x144>
   b6ffc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7000:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7004:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7008:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b700c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7010:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7014:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7018:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b701c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7020:	429d      	cmp	r5, r3
   b7022:	bf08      	it	eq
   b7024:	4296      	cmpeq	r6, r2
   b7026:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b702a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b702e:	d202      	bcs.n	b7036 <__aeabi_ddiv+0x6e>
   b7030:	085b      	lsrs	r3, r3, #1
   b7032:	ea4f 0232 	mov.w	r2, r2, rrx
   b7036:	1ab6      	subs	r6, r6, r2
   b7038:	eb65 0503 	sbc.w	r5, r5, r3
   b703c:	085b      	lsrs	r3, r3, #1
   b703e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7042:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7046:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b704a:	ebb6 0e02 	subs.w	lr, r6, r2
   b704e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7052:	bf22      	ittt	cs
   b7054:	1ab6      	subcs	r6, r6, r2
   b7056:	4675      	movcs	r5, lr
   b7058:	ea40 000c 	orrcs.w	r0, r0, ip
   b705c:	085b      	lsrs	r3, r3, #1
   b705e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7062:	ebb6 0e02 	subs.w	lr, r6, r2
   b7066:	eb75 0e03 	sbcs.w	lr, r5, r3
   b706a:	bf22      	ittt	cs
   b706c:	1ab6      	subcs	r6, r6, r2
   b706e:	4675      	movcs	r5, lr
   b7070:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7074:	085b      	lsrs	r3, r3, #1
   b7076:	ea4f 0232 	mov.w	r2, r2, rrx
   b707a:	ebb6 0e02 	subs.w	lr, r6, r2
   b707e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7082:	bf22      	ittt	cs
   b7084:	1ab6      	subcs	r6, r6, r2
   b7086:	4675      	movcs	r5, lr
   b7088:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b708c:	085b      	lsrs	r3, r3, #1
   b708e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7092:	ebb6 0e02 	subs.w	lr, r6, r2
   b7096:	eb75 0e03 	sbcs.w	lr, r5, r3
   b709a:	bf22      	ittt	cs
   b709c:	1ab6      	subcs	r6, r6, r2
   b709e:	4675      	movcs	r5, lr
   b70a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b70a4:	ea55 0e06 	orrs.w	lr, r5, r6
   b70a8:	d018      	beq.n	b70dc <__aeabi_ddiv+0x114>
   b70aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b70ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b70b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b70b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b70ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b70be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b70c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b70c6:	d1c0      	bne.n	b704a <__aeabi_ddiv+0x82>
   b70c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b70cc:	d10b      	bne.n	b70e6 <__aeabi_ddiv+0x11e>
   b70ce:	ea41 0100 	orr.w	r1, r1, r0
   b70d2:	f04f 0000 	mov.w	r0, #0
   b70d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b70da:	e7b6      	b.n	b704a <__aeabi_ddiv+0x82>
   b70dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b70e0:	bf04      	itt	eq
   b70e2:	4301      	orreq	r1, r0
   b70e4:	2000      	moveq	r0, #0
   b70e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b70ea:	bf88      	it	hi
   b70ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b70f0:	f63f aeaf 	bhi.w	b6e52 <__aeabi_dmul+0xde>
   b70f4:	ebb5 0c03 	subs.w	ip, r5, r3
   b70f8:	bf04      	itt	eq
   b70fa:	ebb6 0c02 	subseq.w	ip, r6, r2
   b70fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7102:	f150 0000 	adcs.w	r0, r0, #0
   b7106:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b710a:	bd70      	pop	{r4, r5, r6, pc}
   b710c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7110:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7114:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7118:	bfc2      	ittt	gt
   b711a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b711e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7122:	bd70      	popgt	{r4, r5, r6, pc}
   b7124:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7128:	f04f 0e00 	mov.w	lr, #0
   b712c:	3c01      	subs	r4, #1
   b712e:	e690      	b.n	b6e52 <__aeabi_dmul+0xde>
   b7130:	ea45 0e06 	orr.w	lr, r5, r6
   b7134:	e68d      	b.n	b6e52 <__aeabi_dmul+0xde>
   b7136:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b713a:	ea94 0f0c 	teq	r4, ip
   b713e:	bf08      	it	eq
   b7140:	ea95 0f0c 	teqeq	r5, ip
   b7144:	f43f af3b 	beq.w	b6fbe <__aeabi_dmul+0x24a>
   b7148:	ea94 0f0c 	teq	r4, ip
   b714c:	d10a      	bne.n	b7164 <__aeabi_ddiv+0x19c>
   b714e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7152:	f47f af34 	bne.w	b6fbe <__aeabi_dmul+0x24a>
   b7156:	ea95 0f0c 	teq	r5, ip
   b715a:	f47f af25 	bne.w	b6fa8 <__aeabi_dmul+0x234>
   b715e:	4610      	mov	r0, r2
   b7160:	4619      	mov	r1, r3
   b7162:	e72c      	b.n	b6fbe <__aeabi_dmul+0x24a>
   b7164:	ea95 0f0c 	teq	r5, ip
   b7168:	d106      	bne.n	b7178 <__aeabi_ddiv+0x1b0>
   b716a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b716e:	f43f aefd 	beq.w	b6f6c <__aeabi_dmul+0x1f8>
   b7172:	4610      	mov	r0, r2
   b7174:	4619      	mov	r1, r3
   b7176:	e722      	b.n	b6fbe <__aeabi_dmul+0x24a>
   b7178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b717c:	bf18      	it	ne
   b717e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7182:	f47f aec5 	bne.w	b6f10 <__aeabi_dmul+0x19c>
   b7186:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b718a:	f47f af0d 	bne.w	b6fa8 <__aeabi_dmul+0x234>
   b718e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7192:	f47f aeeb 	bne.w	b6f6c <__aeabi_dmul+0x1f8>
   b7196:	e712      	b.n	b6fbe <__aeabi_dmul+0x24a>

000b7198 <__aeabi_d2iz>:
   b7198:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b719c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b71a0:	d215      	bcs.n	b71ce <__aeabi_d2iz+0x36>
   b71a2:	d511      	bpl.n	b71c8 <__aeabi_d2iz+0x30>
   b71a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b71a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b71ac:	d912      	bls.n	b71d4 <__aeabi_d2iz+0x3c>
   b71ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b71b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b71b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b71ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b71be:	fa23 f002 	lsr.w	r0, r3, r2
   b71c2:	bf18      	it	ne
   b71c4:	4240      	negne	r0, r0
   b71c6:	4770      	bx	lr
   b71c8:	f04f 0000 	mov.w	r0, #0
   b71cc:	4770      	bx	lr
   b71ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b71d2:	d105      	bne.n	b71e0 <__aeabi_d2iz+0x48>
   b71d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b71d8:	bf08      	it	eq
   b71da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b71de:	4770      	bx	lr
   b71e0:	f04f 0000 	mov.w	r0, #0
   b71e4:	4770      	bx	lr
   b71e6:	bf00      	nop

000b71e8 <__aeabi_d2f>:
   b71e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b71ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b71f0:	bf24      	itt	cs
   b71f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b71f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b71fa:	d90d      	bls.n	b7218 <__aeabi_d2f+0x30>
   b71fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7200:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7204:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7208:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b720c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7210:	bf08      	it	eq
   b7212:	f020 0001 	biceq.w	r0, r0, #1
   b7216:	4770      	bx	lr
   b7218:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b721c:	d121      	bne.n	b7262 <__aeabi_d2f+0x7a>
   b721e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7222:	bfbc      	itt	lt
   b7224:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7228:	4770      	bxlt	lr
   b722a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b722e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7232:	f1c2 0218 	rsb	r2, r2, #24
   b7236:	f1c2 0c20 	rsb	ip, r2, #32
   b723a:	fa10 f30c 	lsls.w	r3, r0, ip
   b723e:	fa20 f002 	lsr.w	r0, r0, r2
   b7242:	bf18      	it	ne
   b7244:	f040 0001 	orrne.w	r0, r0, #1
   b7248:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b724c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7250:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7254:	ea40 000c 	orr.w	r0, r0, ip
   b7258:	fa23 f302 	lsr.w	r3, r3, r2
   b725c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7260:	e7cc      	b.n	b71fc <__aeabi_d2f+0x14>
   b7262:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7266:	d107      	bne.n	b7278 <__aeabi_d2f+0x90>
   b7268:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b726c:	bf1e      	ittt	ne
   b726e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7272:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7276:	4770      	bxne	lr
   b7278:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b727c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7280:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7284:	4770      	bx	lr
   b7286:	bf00      	nop

000b7288 <__aeabi_frsub>:
   b7288:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b728c:	e002      	b.n	b7294 <__addsf3>
   b728e:	bf00      	nop

000b7290 <__aeabi_fsub>:
   b7290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7294 <__addsf3>:
   b7294:	0042      	lsls	r2, r0, #1
   b7296:	bf1f      	itttt	ne
   b7298:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b729c:	ea92 0f03 	teqne	r2, r3
   b72a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b72a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b72a8:	d06a      	beq.n	b7380 <__addsf3+0xec>
   b72aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b72ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b72b2:	bfc1      	itttt	gt
   b72b4:	18d2      	addgt	r2, r2, r3
   b72b6:	4041      	eorgt	r1, r0
   b72b8:	4048      	eorgt	r0, r1
   b72ba:	4041      	eorgt	r1, r0
   b72bc:	bfb8      	it	lt
   b72be:	425b      	neglt	r3, r3
   b72c0:	2b19      	cmp	r3, #25
   b72c2:	bf88      	it	hi
   b72c4:	4770      	bxhi	lr
   b72c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b72ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b72ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b72d2:	bf18      	it	ne
   b72d4:	4240      	negne	r0, r0
   b72d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b72da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b72de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b72e2:	bf18      	it	ne
   b72e4:	4249      	negne	r1, r1
   b72e6:	ea92 0f03 	teq	r2, r3
   b72ea:	d03f      	beq.n	b736c <__addsf3+0xd8>
   b72ec:	f1a2 0201 	sub.w	r2, r2, #1
   b72f0:	fa41 fc03 	asr.w	ip, r1, r3
   b72f4:	eb10 000c 	adds.w	r0, r0, ip
   b72f8:	f1c3 0320 	rsb	r3, r3, #32
   b72fc:	fa01 f103 	lsl.w	r1, r1, r3
   b7300:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7304:	d502      	bpl.n	b730c <__addsf3+0x78>
   b7306:	4249      	negs	r1, r1
   b7308:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b730c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b7310:	d313      	bcc.n	b733a <__addsf3+0xa6>
   b7312:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b7316:	d306      	bcc.n	b7326 <__addsf3+0x92>
   b7318:	0840      	lsrs	r0, r0, #1
   b731a:	ea4f 0131 	mov.w	r1, r1, rrx
   b731e:	f102 0201 	add.w	r2, r2, #1
   b7322:	2afe      	cmp	r2, #254	; 0xfe
   b7324:	d251      	bcs.n	b73ca <__addsf3+0x136>
   b7326:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b732a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b732e:	bf08      	it	eq
   b7330:	f020 0001 	biceq.w	r0, r0, #1
   b7334:	ea40 0003 	orr.w	r0, r0, r3
   b7338:	4770      	bx	lr
   b733a:	0049      	lsls	r1, r1, #1
   b733c:	eb40 0000 	adc.w	r0, r0, r0
   b7340:	3a01      	subs	r2, #1
   b7342:	bf28      	it	cs
   b7344:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b7348:	d2ed      	bcs.n	b7326 <__addsf3+0x92>
   b734a:	fab0 fc80 	clz	ip, r0
   b734e:	f1ac 0c08 	sub.w	ip, ip, #8
   b7352:	ebb2 020c 	subs.w	r2, r2, ip
   b7356:	fa00 f00c 	lsl.w	r0, r0, ip
   b735a:	bfaa      	itet	ge
   b735c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7360:	4252      	neglt	r2, r2
   b7362:	4318      	orrge	r0, r3
   b7364:	bfbc      	itt	lt
   b7366:	40d0      	lsrlt	r0, r2
   b7368:	4318      	orrlt	r0, r3
   b736a:	4770      	bx	lr
   b736c:	f092 0f00 	teq	r2, #0
   b7370:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7374:	bf06      	itte	eq
   b7376:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b737a:	3201      	addeq	r2, #1
   b737c:	3b01      	subne	r3, #1
   b737e:	e7b5      	b.n	b72ec <__addsf3+0x58>
   b7380:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7384:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b7388:	bf18      	it	ne
   b738a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b738e:	d021      	beq.n	b73d4 <__addsf3+0x140>
   b7390:	ea92 0f03 	teq	r2, r3
   b7394:	d004      	beq.n	b73a0 <__addsf3+0x10c>
   b7396:	f092 0f00 	teq	r2, #0
   b739a:	bf08      	it	eq
   b739c:	4608      	moveq	r0, r1
   b739e:	4770      	bx	lr
   b73a0:	ea90 0f01 	teq	r0, r1
   b73a4:	bf1c      	itt	ne
   b73a6:	2000      	movne	r0, #0
   b73a8:	4770      	bxne	lr
   b73aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b73ae:	d104      	bne.n	b73ba <__addsf3+0x126>
   b73b0:	0040      	lsls	r0, r0, #1
   b73b2:	bf28      	it	cs
   b73b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b73b8:	4770      	bx	lr
   b73ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b73be:	bf3c      	itt	cc
   b73c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b73c4:	4770      	bxcc	lr
   b73c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b73ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b73ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b73d2:	4770      	bx	lr
   b73d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b73d8:	bf16      	itet	ne
   b73da:	4608      	movne	r0, r1
   b73dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b73e0:	4601      	movne	r1, r0
   b73e2:	0242      	lsls	r2, r0, #9
   b73e4:	bf06      	itte	eq
   b73e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b73ea:	ea90 0f01 	teqeq	r0, r1
   b73ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b73f2:	4770      	bx	lr

000b73f4 <__aeabi_ui2f>:
   b73f4:	f04f 0300 	mov.w	r3, #0
   b73f8:	e004      	b.n	b7404 <__aeabi_i2f+0x8>
   b73fa:	bf00      	nop

000b73fc <__aeabi_i2f>:
   b73fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b7400:	bf48      	it	mi
   b7402:	4240      	negmi	r0, r0
   b7404:	ea5f 0c00 	movs.w	ip, r0
   b7408:	bf08      	it	eq
   b740a:	4770      	bxeq	lr
   b740c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7410:	4601      	mov	r1, r0
   b7412:	f04f 0000 	mov.w	r0, #0
   b7416:	e01c      	b.n	b7452 <__aeabi_l2f+0x2a>

000b7418 <__aeabi_ul2f>:
   b7418:	ea50 0201 	orrs.w	r2, r0, r1
   b741c:	bf08      	it	eq
   b741e:	4770      	bxeq	lr
   b7420:	f04f 0300 	mov.w	r3, #0
   b7424:	e00a      	b.n	b743c <__aeabi_l2f+0x14>
   b7426:	bf00      	nop

000b7428 <__aeabi_l2f>:
   b7428:	ea50 0201 	orrs.w	r2, r0, r1
   b742c:	bf08      	it	eq
   b742e:	4770      	bxeq	lr
   b7430:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7434:	d502      	bpl.n	b743c <__aeabi_l2f+0x14>
   b7436:	4240      	negs	r0, r0
   b7438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b743c:	ea5f 0c01 	movs.w	ip, r1
   b7440:	bf02      	ittt	eq
   b7442:	4684      	moveq	ip, r0
   b7444:	4601      	moveq	r1, r0
   b7446:	2000      	moveq	r0, #0
   b7448:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b744c:	bf08      	it	eq
   b744e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7452:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b7456:	fabc f28c 	clz	r2, ip
   b745a:	3a08      	subs	r2, #8
   b745c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7460:	db10      	blt.n	b7484 <__aeabi_l2f+0x5c>
   b7462:	fa01 fc02 	lsl.w	ip, r1, r2
   b7466:	4463      	add	r3, ip
   b7468:	fa00 fc02 	lsl.w	ip, r0, r2
   b746c:	f1c2 0220 	rsb	r2, r2, #32
   b7470:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7474:	fa20 f202 	lsr.w	r2, r0, r2
   b7478:	eb43 0002 	adc.w	r0, r3, r2
   b747c:	bf08      	it	eq
   b747e:	f020 0001 	biceq.w	r0, r0, #1
   b7482:	4770      	bx	lr
   b7484:	f102 0220 	add.w	r2, r2, #32
   b7488:	fa01 fc02 	lsl.w	ip, r1, r2
   b748c:	f1c2 0220 	rsb	r2, r2, #32
   b7490:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7494:	fa21 f202 	lsr.w	r2, r1, r2
   b7498:	eb43 0002 	adc.w	r0, r3, r2
   b749c:	bf08      	it	eq
   b749e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b74a2:	4770      	bx	lr

000b74a4 <__aeabi_ldivmod>:
   b74a4:	b97b      	cbnz	r3, b74c6 <__aeabi_ldivmod+0x22>
   b74a6:	b972      	cbnz	r2, b74c6 <__aeabi_ldivmod+0x22>
   b74a8:	2900      	cmp	r1, #0
   b74aa:	bfbe      	ittt	lt
   b74ac:	2000      	movlt	r0, #0
   b74ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b74b2:	e006      	blt.n	b74c2 <__aeabi_ldivmod+0x1e>
   b74b4:	bf08      	it	eq
   b74b6:	2800      	cmpeq	r0, #0
   b74b8:	bf1c      	itt	ne
   b74ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b74be:	f04f 30ff 	movne.w	r0, #4294967295
   b74c2:	f000 b9a7 	b.w	b7814 <__aeabi_idiv0>
   b74c6:	f1ad 0c08 	sub.w	ip, sp, #8
   b74ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b74ce:	2900      	cmp	r1, #0
   b74d0:	db09      	blt.n	b74e6 <__aeabi_ldivmod+0x42>
   b74d2:	2b00      	cmp	r3, #0
   b74d4:	db1a      	blt.n	b750c <__aeabi_ldivmod+0x68>
   b74d6:	f000 f835 	bl	b7544 <__udivmoddi4>
   b74da:	f8dd e004 	ldr.w	lr, [sp, #4]
   b74de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b74e2:	b004      	add	sp, #16
   b74e4:	4770      	bx	lr
   b74e6:	4240      	negs	r0, r0
   b74e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b74ec:	2b00      	cmp	r3, #0
   b74ee:	db1b      	blt.n	b7528 <__aeabi_ldivmod+0x84>
   b74f0:	f000 f828 	bl	b7544 <__udivmoddi4>
   b74f4:	f8dd e004 	ldr.w	lr, [sp, #4]
   b74f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b74fc:	b004      	add	sp, #16
   b74fe:	4240      	negs	r0, r0
   b7500:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7504:	4252      	negs	r2, r2
   b7506:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b750a:	4770      	bx	lr
   b750c:	4252      	negs	r2, r2
   b750e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7512:	f000 f817 	bl	b7544 <__udivmoddi4>
   b7516:	f8dd e004 	ldr.w	lr, [sp, #4]
   b751a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b751e:	b004      	add	sp, #16
   b7520:	4240      	negs	r0, r0
   b7522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7526:	4770      	bx	lr
   b7528:	4252      	negs	r2, r2
   b752a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b752e:	f000 f809 	bl	b7544 <__udivmoddi4>
   b7532:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b753a:	b004      	add	sp, #16
   b753c:	4252      	negs	r2, r2
   b753e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7542:	4770      	bx	lr

000b7544 <__udivmoddi4>:
   b7544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7548:	9d08      	ldr	r5, [sp, #32]
   b754a:	4604      	mov	r4, r0
   b754c:	468e      	mov	lr, r1
   b754e:	2b00      	cmp	r3, #0
   b7550:	d14d      	bne.n	b75ee <__udivmoddi4+0xaa>
   b7552:	428a      	cmp	r2, r1
   b7554:	4694      	mov	ip, r2
   b7556:	d969      	bls.n	b762c <__udivmoddi4+0xe8>
   b7558:	fab2 f282 	clz	r2, r2
   b755c:	b152      	cbz	r2, b7574 <__udivmoddi4+0x30>
   b755e:	fa01 f302 	lsl.w	r3, r1, r2
   b7562:	f1c2 0120 	rsb	r1, r2, #32
   b7566:	fa20 f101 	lsr.w	r1, r0, r1
   b756a:	fa0c fc02 	lsl.w	ip, ip, r2
   b756e:	ea41 0e03 	orr.w	lr, r1, r3
   b7572:	4094      	lsls	r4, r2
   b7574:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7578:	0c21      	lsrs	r1, r4, #16
   b757a:	fbbe f6f8 	udiv	r6, lr, r8
   b757e:	fa1f f78c 	uxth.w	r7, ip
   b7582:	fb08 e316 	mls	r3, r8, r6, lr
   b7586:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b758a:	fb06 f107 	mul.w	r1, r6, r7
   b758e:	4299      	cmp	r1, r3
   b7590:	d90a      	bls.n	b75a8 <__udivmoddi4+0x64>
   b7592:	eb1c 0303 	adds.w	r3, ip, r3
   b7596:	f106 30ff 	add.w	r0, r6, #4294967295
   b759a:	f080 811f 	bcs.w	b77dc <__udivmoddi4+0x298>
   b759e:	4299      	cmp	r1, r3
   b75a0:	f240 811c 	bls.w	b77dc <__udivmoddi4+0x298>
   b75a4:	3e02      	subs	r6, #2
   b75a6:	4463      	add	r3, ip
   b75a8:	1a5b      	subs	r3, r3, r1
   b75aa:	b2a4      	uxth	r4, r4
   b75ac:	fbb3 f0f8 	udiv	r0, r3, r8
   b75b0:	fb08 3310 	mls	r3, r8, r0, r3
   b75b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b75b8:	fb00 f707 	mul.w	r7, r0, r7
   b75bc:	42a7      	cmp	r7, r4
   b75be:	d90a      	bls.n	b75d6 <__udivmoddi4+0x92>
   b75c0:	eb1c 0404 	adds.w	r4, ip, r4
   b75c4:	f100 33ff 	add.w	r3, r0, #4294967295
   b75c8:	f080 810a 	bcs.w	b77e0 <__udivmoddi4+0x29c>
   b75cc:	42a7      	cmp	r7, r4
   b75ce:	f240 8107 	bls.w	b77e0 <__udivmoddi4+0x29c>
   b75d2:	4464      	add	r4, ip
   b75d4:	3802      	subs	r0, #2
   b75d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b75da:	1be4      	subs	r4, r4, r7
   b75dc:	2600      	movs	r6, #0
   b75de:	b11d      	cbz	r5, b75e8 <__udivmoddi4+0xa4>
   b75e0:	40d4      	lsrs	r4, r2
   b75e2:	2300      	movs	r3, #0
   b75e4:	e9c5 4300 	strd	r4, r3, [r5]
   b75e8:	4631      	mov	r1, r6
   b75ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b75ee:	428b      	cmp	r3, r1
   b75f0:	d909      	bls.n	b7606 <__udivmoddi4+0xc2>
   b75f2:	2d00      	cmp	r5, #0
   b75f4:	f000 80ef 	beq.w	b77d6 <__udivmoddi4+0x292>
   b75f8:	2600      	movs	r6, #0
   b75fa:	e9c5 0100 	strd	r0, r1, [r5]
   b75fe:	4630      	mov	r0, r6
   b7600:	4631      	mov	r1, r6
   b7602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7606:	fab3 f683 	clz	r6, r3
   b760a:	2e00      	cmp	r6, #0
   b760c:	d14a      	bne.n	b76a4 <__udivmoddi4+0x160>
   b760e:	428b      	cmp	r3, r1
   b7610:	d302      	bcc.n	b7618 <__udivmoddi4+0xd4>
   b7612:	4282      	cmp	r2, r0
   b7614:	f200 80f9 	bhi.w	b780a <__udivmoddi4+0x2c6>
   b7618:	1a84      	subs	r4, r0, r2
   b761a:	eb61 0303 	sbc.w	r3, r1, r3
   b761e:	2001      	movs	r0, #1
   b7620:	469e      	mov	lr, r3
   b7622:	2d00      	cmp	r5, #0
   b7624:	d0e0      	beq.n	b75e8 <__udivmoddi4+0xa4>
   b7626:	e9c5 4e00 	strd	r4, lr, [r5]
   b762a:	e7dd      	b.n	b75e8 <__udivmoddi4+0xa4>
   b762c:	b902      	cbnz	r2, b7630 <__udivmoddi4+0xec>
   b762e:	deff      	udf	#255	; 0xff
   b7630:	fab2 f282 	clz	r2, r2
   b7634:	2a00      	cmp	r2, #0
   b7636:	f040 8092 	bne.w	b775e <__udivmoddi4+0x21a>
   b763a:	eba1 010c 	sub.w	r1, r1, ip
   b763e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7642:	fa1f fe8c 	uxth.w	lr, ip
   b7646:	2601      	movs	r6, #1
   b7648:	0c20      	lsrs	r0, r4, #16
   b764a:	fbb1 f3f7 	udiv	r3, r1, r7
   b764e:	fb07 1113 	mls	r1, r7, r3, r1
   b7652:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7656:	fb0e f003 	mul.w	r0, lr, r3
   b765a:	4288      	cmp	r0, r1
   b765c:	d908      	bls.n	b7670 <__udivmoddi4+0x12c>
   b765e:	eb1c 0101 	adds.w	r1, ip, r1
   b7662:	f103 38ff 	add.w	r8, r3, #4294967295
   b7666:	d202      	bcs.n	b766e <__udivmoddi4+0x12a>
   b7668:	4288      	cmp	r0, r1
   b766a:	f200 80cb 	bhi.w	b7804 <__udivmoddi4+0x2c0>
   b766e:	4643      	mov	r3, r8
   b7670:	1a09      	subs	r1, r1, r0
   b7672:	b2a4      	uxth	r4, r4
   b7674:	fbb1 f0f7 	udiv	r0, r1, r7
   b7678:	fb07 1110 	mls	r1, r7, r0, r1
   b767c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7680:	fb0e fe00 	mul.w	lr, lr, r0
   b7684:	45a6      	cmp	lr, r4
   b7686:	d908      	bls.n	b769a <__udivmoddi4+0x156>
   b7688:	eb1c 0404 	adds.w	r4, ip, r4
   b768c:	f100 31ff 	add.w	r1, r0, #4294967295
   b7690:	d202      	bcs.n	b7698 <__udivmoddi4+0x154>
   b7692:	45a6      	cmp	lr, r4
   b7694:	f200 80bb 	bhi.w	b780e <__udivmoddi4+0x2ca>
   b7698:	4608      	mov	r0, r1
   b769a:	eba4 040e 	sub.w	r4, r4, lr
   b769e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b76a2:	e79c      	b.n	b75de <__udivmoddi4+0x9a>
   b76a4:	f1c6 0720 	rsb	r7, r6, #32
   b76a8:	40b3      	lsls	r3, r6
   b76aa:	fa22 fc07 	lsr.w	ip, r2, r7
   b76ae:	ea4c 0c03 	orr.w	ip, ip, r3
   b76b2:	fa20 f407 	lsr.w	r4, r0, r7
   b76b6:	fa01 f306 	lsl.w	r3, r1, r6
   b76ba:	431c      	orrs	r4, r3
   b76bc:	40f9      	lsrs	r1, r7
   b76be:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b76c2:	fa00 f306 	lsl.w	r3, r0, r6
   b76c6:	fbb1 f8f9 	udiv	r8, r1, r9
   b76ca:	0c20      	lsrs	r0, r4, #16
   b76cc:	fa1f fe8c 	uxth.w	lr, ip
   b76d0:	fb09 1118 	mls	r1, r9, r8, r1
   b76d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b76d8:	fb08 f00e 	mul.w	r0, r8, lr
   b76dc:	4288      	cmp	r0, r1
   b76de:	fa02 f206 	lsl.w	r2, r2, r6
   b76e2:	d90b      	bls.n	b76fc <__udivmoddi4+0x1b8>
   b76e4:	eb1c 0101 	adds.w	r1, ip, r1
   b76e8:	f108 3aff 	add.w	sl, r8, #4294967295
   b76ec:	f080 8088 	bcs.w	b7800 <__udivmoddi4+0x2bc>
   b76f0:	4288      	cmp	r0, r1
   b76f2:	f240 8085 	bls.w	b7800 <__udivmoddi4+0x2bc>
   b76f6:	f1a8 0802 	sub.w	r8, r8, #2
   b76fa:	4461      	add	r1, ip
   b76fc:	1a09      	subs	r1, r1, r0
   b76fe:	b2a4      	uxth	r4, r4
   b7700:	fbb1 f0f9 	udiv	r0, r1, r9
   b7704:	fb09 1110 	mls	r1, r9, r0, r1
   b7708:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b770c:	fb00 fe0e 	mul.w	lr, r0, lr
   b7710:	458e      	cmp	lr, r1
   b7712:	d908      	bls.n	b7726 <__udivmoddi4+0x1e2>
   b7714:	eb1c 0101 	adds.w	r1, ip, r1
   b7718:	f100 34ff 	add.w	r4, r0, #4294967295
   b771c:	d26c      	bcs.n	b77f8 <__udivmoddi4+0x2b4>
   b771e:	458e      	cmp	lr, r1
   b7720:	d96a      	bls.n	b77f8 <__udivmoddi4+0x2b4>
   b7722:	3802      	subs	r0, #2
   b7724:	4461      	add	r1, ip
   b7726:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b772a:	fba0 9402 	umull	r9, r4, r0, r2
   b772e:	eba1 010e 	sub.w	r1, r1, lr
   b7732:	42a1      	cmp	r1, r4
   b7734:	46c8      	mov	r8, r9
   b7736:	46a6      	mov	lr, r4
   b7738:	d356      	bcc.n	b77e8 <__udivmoddi4+0x2a4>
   b773a:	d053      	beq.n	b77e4 <__udivmoddi4+0x2a0>
   b773c:	b15d      	cbz	r5, b7756 <__udivmoddi4+0x212>
   b773e:	ebb3 0208 	subs.w	r2, r3, r8
   b7742:	eb61 010e 	sbc.w	r1, r1, lr
   b7746:	fa01 f707 	lsl.w	r7, r1, r7
   b774a:	fa22 f306 	lsr.w	r3, r2, r6
   b774e:	40f1      	lsrs	r1, r6
   b7750:	431f      	orrs	r7, r3
   b7752:	e9c5 7100 	strd	r7, r1, [r5]
   b7756:	2600      	movs	r6, #0
   b7758:	4631      	mov	r1, r6
   b775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b775e:	f1c2 0320 	rsb	r3, r2, #32
   b7762:	40d8      	lsrs	r0, r3
   b7764:	fa0c fc02 	lsl.w	ip, ip, r2
   b7768:	fa21 f303 	lsr.w	r3, r1, r3
   b776c:	4091      	lsls	r1, r2
   b776e:	4301      	orrs	r1, r0
   b7770:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7774:	fa1f fe8c 	uxth.w	lr, ip
   b7778:	fbb3 f0f7 	udiv	r0, r3, r7
   b777c:	fb07 3610 	mls	r6, r7, r0, r3
   b7780:	0c0b      	lsrs	r3, r1, #16
   b7782:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b7786:	fb00 f60e 	mul.w	r6, r0, lr
   b778a:	429e      	cmp	r6, r3
   b778c:	fa04 f402 	lsl.w	r4, r4, r2
   b7790:	d908      	bls.n	b77a4 <__udivmoddi4+0x260>
   b7792:	eb1c 0303 	adds.w	r3, ip, r3
   b7796:	f100 38ff 	add.w	r8, r0, #4294967295
   b779a:	d22f      	bcs.n	b77fc <__udivmoddi4+0x2b8>
   b779c:	429e      	cmp	r6, r3
   b779e:	d92d      	bls.n	b77fc <__udivmoddi4+0x2b8>
   b77a0:	3802      	subs	r0, #2
   b77a2:	4463      	add	r3, ip
   b77a4:	1b9b      	subs	r3, r3, r6
   b77a6:	b289      	uxth	r1, r1
   b77a8:	fbb3 f6f7 	udiv	r6, r3, r7
   b77ac:	fb07 3316 	mls	r3, r7, r6, r3
   b77b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b77b4:	fb06 f30e 	mul.w	r3, r6, lr
   b77b8:	428b      	cmp	r3, r1
   b77ba:	d908      	bls.n	b77ce <__udivmoddi4+0x28a>
   b77bc:	eb1c 0101 	adds.w	r1, ip, r1
   b77c0:	f106 38ff 	add.w	r8, r6, #4294967295
   b77c4:	d216      	bcs.n	b77f4 <__udivmoddi4+0x2b0>
   b77c6:	428b      	cmp	r3, r1
   b77c8:	d914      	bls.n	b77f4 <__udivmoddi4+0x2b0>
   b77ca:	3e02      	subs	r6, #2
   b77cc:	4461      	add	r1, ip
   b77ce:	1ac9      	subs	r1, r1, r3
   b77d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b77d4:	e738      	b.n	b7648 <__udivmoddi4+0x104>
   b77d6:	462e      	mov	r6, r5
   b77d8:	4628      	mov	r0, r5
   b77da:	e705      	b.n	b75e8 <__udivmoddi4+0xa4>
   b77dc:	4606      	mov	r6, r0
   b77de:	e6e3      	b.n	b75a8 <__udivmoddi4+0x64>
   b77e0:	4618      	mov	r0, r3
   b77e2:	e6f8      	b.n	b75d6 <__udivmoddi4+0x92>
   b77e4:	454b      	cmp	r3, r9
   b77e6:	d2a9      	bcs.n	b773c <__udivmoddi4+0x1f8>
   b77e8:	ebb9 0802 	subs.w	r8, r9, r2
   b77ec:	eb64 0e0c 	sbc.w	lr, r4, ip
   b77f0:	3801      	subs	r0, #1
   b77f2:	e7a3      	b.n	b773c <__udivmoddi4+0x1f8>
   b77f4:	4646      	mov	r6, r8
   b77f6:	e7ea      	b.n	b77ce <__udivmoddi4+0x28a>
   b77f8:	4620      	mov	r0, r4
   b77fa:	e794      	b.n	b7726 <__udivmoddi4+0x1e2>
   b77fc:	4640      	mov	r0, r8
   b77fe:	e7d1      	b.n	b77a4 <__udivmoddi4+0x260>
   b7800:	46d0      	mov	r8, sl
   b7802:	e77b      	b.n	b76fc <__udivmoddi4+0x1b8>
   b7804:	3b02      	subs	r3, #2
   b7806:	4461      	add	r1, ip
   b7808:	e732      	b.n	b7670 <__udivmoddi4+0x12c>
   b780a:	4630      	mov	r0, r6
   b780c:	e709      	b.n	b7622 <__udivmoddi4+0xde>
   b780e:	4464      	add	r4, ip
   b7810:	3802      	subs	r0, #2
   b7812:	e742      	b.n	b769a <__udivmoddi4+0x156>

000b7814 <__aeabi_idiv0>:
   b7814:	4770      	bx	lr
   b7816:	bf00      	nop

000b7818 <asctime_r>:
   b7818:	b510      	push	{r4, lr}
   b781a:	460c      	mov	r4, r1
   b781c:	6941      	ldr	r1, [r0, #20]
   b781e:	6903      	ldr	r3, [r0, #16]
   b7820:	6982      	ldr	r2, [r0, #24]
   b7822:	b086      	sub	sp, #24
   b7824:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b7828:	9104      	str	r1, [sp, #16]
   b782a:	6801      	ldr	r1, [r0, #0]
   b782c:	9103      	str	r1, [sp, #12]
   b782e:	6841      	ldr	r1, [r0, #4]
   b7830:	9102      	str	r1, [sp, #8]
   b7832:	6881      	ldr	r1, [r0, #8]
   b7834:	9101      	str	r1, [sp, #4]
   b7836:	68c1      	ldr	r1, [r0, #12]
   b7838:	9100      	str	r1, [sp, #0]
   b783a:	4907      	ldr	r1, [pc, #28]	; (b7858 <asctime_r+0x40>)
   b783c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7840:	440b      	add	r3, r1
   b7842:	4906      	ldr	r1, [pc, #24]	; (b785c <asctime_r+0x44>)
   b7844:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7848:	440a      	add	r2, r1
   b784a:	4620      	mov	r0, r4
   b784c:	4904      	ldr	r1, [pc, #16]	; (b7860 <asctime_r+0x48>)
   b784e:	f7fe f801 	bl	b5854 <siprintf>
   b7852:	4620      	mov	r0, r4
   b7854:	b006      	add	sp, #24
   b7856:	bd10      	pop	{r4, pc}
   b7858:	000b7e2e 	.word	0x000b7e2e
   b785c:	000b7e19 	.word	0x000b7e19
   b7860:	000b7df9 	.word	0x000b7df9

000b7864 <atexit>:
   b7864:	2300      	movs	r3, #0
   b7866:	4601      	mov	r1, r0
   b7868:	461a      	mov	r2, r3
   b786a:	4618      	mov	r0, r3
   b786c:	f000 b87a 	b.w	b7964 <__register_exitproc>

000b7870 <isprint>:
   b7870:	4b02      	ldr	r3, [pc, #8]	; (b787c <isprint+0xc>)
   b7872:	4418      	add	r0, r3
   b7874:	7840      	ldrb	r0, [r0, #1]
   b7876:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b787a:	4770      	bx	lr
   b787c:	000b7ee6 	.word	0x000b7ee6

000b7880 <memcpy>:
   b7880:	440a      	add	r2, r1
   b7882:	4291      	cmp	r1, r2
   b7884:	f100 33ff 	add.w	r3, r0, #4294967295
   b7888:	d100      	bne.n	b788c <memcpy+0xc>
   b788a:	4770      	bx	lr
   b788c:	b510      	push	{r4, lr}
   b788e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7892:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7896:	4291      	cmp	r1, r2
   b7898:	d1f9      	bne.n	b788e <memcpy+0xe>
   b789a:	bd10      	pop	{r4, pc}

000b789c <memset>:
   b789c:	4402      	add	r2, r0
   b789e:	4603      	mov	r3, r0
   b78a0:	4293      	cmp	r3, r2
   b78a2:	d100      	bne.n	b78a6 <memset+0xa>
   b78a4:	4770      	bx	lr
   b78a6:	f803 1b01 	strb.w	r1, [r3], #1
   b78aa:	e7f9      	b.n	b78a0 <memset+0x4>

000b78ac <srand>:
   b78ac:	b538      	push	{r3, r4, r5, lr}
   b78ae:	4b10      	ldr	r3, [pc, #64]	; (b78f0 <srand+0x44>)
   b78b0:	681d      	ldr	r5, [r3, #0]
   b78b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b78b4:	4604      	mov	r4, r0
   b78b6:	b9b3      	cbnz	r3, b78e6 <srand+0x3a>
   b78b8:	2018      	movs	r0, #24
   b78ba:	f7fd ffb3 	bl	b5824 <malloc>
   b78be:	4602      	mov	r2, r0
   b78c0:	63a8      	str	r0, [r5, #56]	; 0x38
   b78c2:	b920      	cbnz	r0, b78ce <srand+0x22>
   b78c4:	4b0b      	ldr	r3, [pc, #44]	; (b78f4 <srand+0x48>)
   b78c6:	480c      	ldr	r0, [pc, #48]	; (b78f8 <srand+0x4c>)
   b78c8:	2142      	movs	r1, #66	; 0x42
   b78ca:	f7fd ffdb 	bl	b5884 <__assert_func>
   b78ce:	490b      	ldr	r1, [pc, #44]	; (b78fc <srand+0x50>)
   b78d0:	4b0b      	ldr	r3, [pc, #44]	; (b7900 <srand+0x54>)
   b78d2:	e9c0 1300 	strd	r1, r3, [r0]
   b78d6:	4b0b      	ldr	r3, [pc, #44]	; (b7904 <srand+0x58>)
   b78d8:	6083      	str	r3, [r0, #8]
   b78da:	230b      	movs	r3, #11
   b78dc:	8183      	strh	r3, [r0, #12]
   b78de:	2100      	movs	r1, #0
   b78e0:	2001      	movs	r0, #1
   b78e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b78e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b78e8:	2200      	movs	r2, #0
   b78ea:	611c      	str	r4, [r3, #16]
   b78ec:	615a      	str	r2, [r3, #20]
   b78ee:	bd38      	pop	{r3, r4, r5, pc}
   b78f0:	2003e5a8 	.word	0x2003e5a8
   b78f4:	000b7e52 	.word	0x000b7e52
   b78f8:	000b7e69 	.word	0x000b7e69
   b78fc:	abcd330e 	.word	0xabcd330e
   b7900:	e66d1234 	.word	0xe66d1234
   b7904:	0005deec 	.word	0x0005deec

000b7908 <strcmp>:
   b7908:	f810 2b01 	ldrb.w	r2, [r0], #1
   b790c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7910:	2a01      	cmp	r2, #1
   b7912:	bf28      	it	cs
   b7914:	429a      	cmpcs	r2, r3
   b7916:	d0f7      	beq.n	b7908 <strcmp>
   b7918:	1ad0      	subs	r0, r2, r3
   b791a:	4770      	bx	lr

000b791c <strcpy>:
   b791c:	4603      	mov	r3, r0
   b791e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7922:	f803 2b01 	strb.w	r2, [r3], #1
   b7926:	2a00      	cmp	r2, #0
   b7928:	d1f9      	bne.n	b791e <strcpy+0x2>
   b792a:	4770      	bx	lr

000b792c <strlen>:
   b792c:	4603      	mov	r3, r0
   b792e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7932:	2a00      	cmp	r2, #0
   b7934:	d1fb      	bne.n	b792e <strlen+0x2>
   b7936:	1a18      	subs	r0, r3, r0
   b7938:	3801      	subs	r0, #1
   b793a:	4770      	bx	lr

000b793c <strncpy>:
   b793c:	b510      	push	{r4, lr}
   b793e:	3901      	subs	r1, #1
   b7940:	4603      	mov	r3, r0
   b7942:	b132      	cbz	r2, b7952 <strncpy+0x16>
   b7944:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7948:	f803 4b01 	strb.w	r4, [r3], #1
   b794c:	3a01      	subs	r2, #1
   b794e:	2c00      	cmp	r4, #0
   b7950:	d1f7      	bne.n	b7942 <strncpy+0x6>
   b7952:	441a      	add	r2, r3
   b7954:	2100      	movs	r1, #0
   b7956:	4293      	cmp	r3, r2
   b7958:	d100      	bne.n	b795c <strncpy+0x20>
   b795a:	bd10      	pop	{r4, pc}
   b795c:	f803 1b01 	strb.w	r1, [r3], #1
   b7960:	e7f9      	b.n	b7956 <strncpy+0x1a>
	...

000b7964 <__register_exitproc>:
   b7964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7968:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7a24 <__register_exitproc+0xc0>
   b796c:	4606      	mov	r6, r0
   b796e:	f8d8 0000 	ldr.w	r0, [r8]
   b7972:	461f      	mov	r7, r3
   b7974:	460d      	mov	r5, r1
   b7976:	4691      	mov	r9, r2
   b7978:	f000 f856 	bl	b7a28 <__retarget_lock_acquire_recursive>
   b797c:	4b25      	ldr	r3, [pc, #148]	; (b7a14 <__register_exitproc+0xb0>)
   b797e:	681c      	ldr	r4, [r3, #0]
   b7980:	b934      	cbnz	r4, b7990 <__register_exitproc+0x2c>
   b7982:	4c25      	ldr	r4, [pc, #148]	; (b7a18 <__register_exitproc+0xb4>)
   b7984:	601c      	str	r4, [r3, #0]
   b7986:	4b25      	ldr	r3, [pc, #148]	; (b7a1c <__register_exitproc+0xb8>)
   b7988:	b113      	cbz	r3, b7990 <__register_exitproc+0x2c>
   b798a:	681b      	ldr	r3, [r3, #0]
   b798c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7990:	6863      	ldr	r3, [r4, #4]
   b7992:	2b1f      	cmp	r3, #31
   b7994:	dd07      	ble.n	b79a6 <__register_exitproc+0x42>
   b7996:	f8d8 0000 	ldr.w	r0, [r8]
   b799a:	f000 f847 	bl	b7a2c <__retarget_lock_release_recursive>
   b799e:	f04f 30ff 	mov.w	r0, #4294967295
   b79a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b79a6:	b34e      	cbz	r6, b79fc <__register_exitproc+0x98>
   b79a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b79ac:	b988      	cbnz	r0, b79d2 <__register_exitproc+0x6e>
   b79ae:	4b1c      	ldr	r3, [pc, #112]	; (b7a20 <__register_exitproc+0xbc>)
   b79b0:	b923      	cbnz	r3, b79bc <__register_exitproc+0x58>
   b79b2:	f8d8 0000 	ldr.w	r0, [r8]
   b79b6:	f000 f838 	bl	b7a2a <__retarget_lock_release>
   b79ba:	e7f0      	b.n	b799e <__register_exitproc+0x3a>
   b79bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b79c0:	f7fd ff30 	bl	b5824 <malloc>
   b79c4:	2800      	cmp	r0, #0
   b79c6:	d0f4      	beq.n	b79b2 <__register_exitproc+0x4e>
   b79c8:	2300      	movs	r3, #0
   b79ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b79ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b79d2:	6863      	ldr	r3, [r4, #4]
   b79d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b79d8:	2201      	movs	r2, #1
   b79da:	409a      	lsls	r2, r3
   b79dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b79e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b79e4:	4313      	orrs	r3, r2
   b79e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b79ea:	2e02      	cmp	r6, #2
   b79ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b79f0:	bf02      	ittt	eq
   b79f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b79f6:	4313      	orreq	r3, r2
   b79f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b79fc:	6863      	ldr	r3, [r4, #4]
   b79fe:	f8d8 0000 	ldr.w	r0, [r8]
   b7a02:	1c5a      	adds	r2, r3, #1
   b7a04:	3302      	adds	r3, #2
   b7a06:	6062      	str	r2, [r4, #4]
   b7a08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7a0c:	f000 f80e 	bl	b7a2c <__retarget_lock_release_recursive>
   b7a10:	2000      	movs	r0, #0
   b7a12:	e7c6      	b.n	b79a2 <__register_exitproc+0x3e>
   b7a14:	2003e7e8 	.word	0x2003e7e8
   b7a18:	2003e75c 	.word	0x2003e75c
   b7a1c:	00000000 	.word	0x00000000
   b7a20:	000b5825 	.word	0x000b5825
   b7a24:	2003e60c 	.word	0x2003e60c

000b7a28 <__retarget_lock_acquire_recursive>:
   b7a28:	4770      	bx	lr

000b7a2a <__retarget_lock_release>:
   b7a2a:	4770      	bx	lr

000b7a2c <__retarget_lock_release_recursive>:
   b7a2c:	4770      	bx	lr

000b7a2e <link_code_end>:
	...

000b7a30 <dynalib_user>:
   b7a30:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7a40:	0000 0000 6544 6976 6563 4449 4400 7461     ....DeviceID.Dat
   b7a50:	5465 6d69 0065 4842 3731 3035 4c00 6769     eTime.BH1750.Lig
   b7a60:	7468 6c5f 7665 6c65 6c28 7875 0029 4353     ht_level(lux).SC
   b7a70:	3344 0030 4f43 2832 7070 296d 5400 6d65     D30.CO2(ppm).Tem
   b7a80:	6570 6172 7574 6572 4328 0029 7548 696d     perature(C).Humi
   b7a90:	6964 7974 2528 0029 4d50 4153 3030 4933     dity(%).PMSA003I
   b7aa0:	5300 6174 646e 7261 5f64 4d50 2e31 0030     .Standard_PM1.0.
   b7ab0:	7453 6e61 6164 6472 505f 324d 352e 5300     Standard_PM2.5.S
   b7ac0:	6174 646e 7261 5f64 4d50 3031 4500 766e     tandard_PM10.Env
   b7ad0:	7269 6e6f 656d 746e 6c61 505f 314d 302e     ironmental_PM1.0
   b7ae0:	4500 766e 7269 6e6f 656d 746e 6c61 505f     .Environmental_P
   b7af0:	324d 352e 4500 766e 7269 6e6f 656d 746e     M2.5.Environment
   b7b00:	6c61 505f 314d 0030 4441 5f43 6156 756c     al_PM10.ADC_Valu
   b7b10:	0065 4264 5600 4d45 364c 3730 0030 5655     e.dB.VEML6070.UV
   b7b20:	6c5f 6769 7468 6c5f 7665 6c65 5000 6572     _light_level.Pre
   b7b30:	7373 7275 2865 626d 7261 0029 6843 6365     ssure(mbar).Chec
   b7b40:	206b 6f63 6e6e 6365 6974 6e6f 2e73 4e20     k connections. N
   b7b50:	206f 6c73 7661 2065 7461 6174 6863 6465     o slave attached
   b7b60:	002e 7254 6979 676e 7420 206f 6f63 6e6e     ..Trying to conn
   b7b70:	6365 2074 4842 3731 3035 4c20 7875 5320     ect BH1750 Lux S
   b7b80:	6e65 6f73 0072 7254 6979 676e 7420 206f     ensor.Trying to 
   b7b90:	6f63 6e6e 6365 2074 4d42 3245 3038 5020     connect BME280 P
   b7ba0:	4854 5320 6e65 6f73 0072 7254 6979 676e     TH Sensor.Trying
   b7bb0:	7420 206f 6f63 6e6e 6365 2074 4353 3344      to connect SCD3
   b7bc0:	2030 4f43 2032 6553 736e 726f 5a00 6f69     0 CO2 Sensor.Zio
   b7bd0:	5120 6977 6369 4c20 756f 6e64 7365 2073      Qwiic Loudness 
   b7be0:	6553 736e 726f 4d20 7361 6574 2072 7741     Sensor Master Aw
   b7bf0:	6b61 0065                                   ake.

000b7bf4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7bfc:	40bb 000b 40bd 000b 40b3 000b 65f9 000b     .@...@...@...e..
   b7c0c:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   b7c1c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   b7c2c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   b7c3c:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   b7c4c:	7525 003e                                   %u>.

000b7c50 <_ZTVN8particle11SPISettingsE>:
	...
   b7c58:	46ed 000b 46bf 000b 46c1 000b               .F...F...F..

000b7c64 <_ZTVN5spark13EthernetClassE>:
	...
   b7c6c:	5923 000b 5919 000b 590f 000b 5905 000b     #Y...Y...Y...Y..
   b7c7c:	58f9 000b 58ed 000b 64d5 000b 64dd 000b     .X...X...d...d..
   b7c8c:	58e1 000b 58d9 000b 58cf 000b 58c5 000b     .X...X...X...X..
   b7c9c:	650d 000b                                   .e..

000b7ca0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7ca0:	0800 1810 2820 3830 7061 0070 005a 2b25     .... (08app.Z.%+
   b7cb0:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   b7cc0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   b7cd0:	6974 656d 0000 0000                         time....

000b7cd8 <_ZTV9IPAddress>:
	...
   b7ce0:	6089 000b 6079 000b 607b 000b               .`..y`..{`..

000b7cec <_ZTV9USBSerial>:
	...
   b7cf4:	616f 000b 61d7 000b 61ad 000b 5b99 000b     oa...a...a...[..
   b7d04:	619f 000b 6171 000b 6181 000b 61d1 000b     .a..qa...a...a..
   b7d14:	6191 000b 6169 000b                         .a..ia..

000b7d1c <_ZTV11USARTSerial>:
	...
   b7d24:	6271 000b 62dd 000b 62b5 000b 5b99 000b     qb...b...b...[..
   b7d34:	6285 000b 62a1 000b 6293 000b 62af 000b     .b...b...b...b..
   b7d44:	6273 000b 6277 000b                         sb..wb..

000b7d4c <_ZTV7TwoWire>:
	...
   b7d54:	6315 000b 635f 000b 6337 000b 6317 000b     .c.._c..7c...c..
   b7d64:	633f 000b 6347 000b 634f 000b 6357 000b     ?c..Gc..Oc..Wc..

000b7d74 <_ZTVN5spark9WiFiClassE>:
	...
   b7d7c:	6477 000b 646d 000b 6463 000b 6419 000b     wd..md..cd...d..
   b7d8c:	6457 000b 644b 000b 64d5 000b 64dd 000b     Wd..Kd...d...d..
   b7d9c:	643f 000b 6437 000b 642d 000b 6423 000b     ?d..7d..-d..#d..
   b7dac:	650d 000b                                   .e..

000b7db0 <_ZTVN5spark12NetworkClassE>:
	...
   b7db8:	6495 000b 649f 000b 64a9 000b 64b3 000b     .d...d...d...d..
   b7dc8:	64bd 000b 64c9 000b 64d5 000b 64dd 000b     .d...d...d...d..
   b7dd8:	64e5 000b 64f1 000b 64f9 000b 6503 000b     .d...d...d...e..
   b7de8:	650d 000b 6425 2500 0067 2575 3430 0078     .e..%d.%g.u%04x.

000b7df8 <_ZSt7nothrow>:
   b7df8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b7e08:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b7e19 <day_name.1>:
   b7e19:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b7e29:	6972 6153                                    riSat

000b7e2e <mon_name.0>:
   b7e2e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b7e3e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b7e4e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b7e5e:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b7e6e:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b7e7e:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b7e8e:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b7e9e:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b7eae:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b7ebe:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b7ece:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b7ede:	722f 6e61 2e64 0063                         /rand.c.

000b7ee6 <_ctype_>:
   b7ee6:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7ef6:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7f06:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7f16:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7f26:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7f36:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7f46:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7f56:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7f66:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7fe7 <link_const_variable_data_end>:
	...

000b7fe8 <link_constructors_location>:
   b7fe8:	000b45fd 	.word	0x000b45fd
   b7fec:	000b592d 	.word	0x000b592d
   b7ff0:	000b5aa5 	.word	0x000b5aa5
   b7ff4:	000b5b89 	.word	0x000b5b89
   b7ff8:	000b5cc1 	.word	0x000b5cc1
   b7ffc:	000b5f19 	.word	0x000b5f19
   b8000:	000b5f35 	.word	0x000b5f35
   b8004:	000b6481 	.word	0x000b6481
   b8008:	000b65e5 	.word	0x000b65e5

000b800c <link_constructors_end>:
   b800c:	00000000 	.word	0x00000000
