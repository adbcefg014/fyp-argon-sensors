
d:/JSN/Desktop/repos/c177-iot/sensors/target/3.3.0/argon/sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  2 .text         000046b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b86d0  000b86d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b86f4  000b86f4  000086f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b86fc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  2003e584  000b8700  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  2003e5f8  2003e5f8  0002e5f8  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b8774  000b8774  00028774  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b879c  000b879c  0002879c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00149232  00000000  00000000  000287a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000178bf  00000000  00000000  001719d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003e957  00000000  00000000  00189291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ec0  00000000  00000000  001c7be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ac40  00000000  00000000  001caaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041d99  00000000  00000000  001d56e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004d9fb  00000000  00000000  00217481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013a86b  00000000  00000000  00264e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008694  00000000  00000000  0039f6e8  2**2
=======
  2 .text         00004910  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8930  000b8930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b8954  000b8954  00008954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b895c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  2003e584  000b8960  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  2003e5f8  2003e5f8  0002e5f8  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b89d4  000b89d4  000289d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b89fc  000b89fc  000289fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00150f52  00000000  00000000  00028a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00017b52  00000000  00000000  00179952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003eed0  00000000  00000000  001914a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ee0  00000000  00000000  001d0374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000af58  00000000  00000000  001d3254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041d9c  00000000  00000000  001de1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004e034  00000000  00000000  0021ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013acc4  00000000  00000000  0026df7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000086e8  00000000  00000000  003a8c40  2**2
>>>>>>> collate-readings
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
<<<<<<< HEAD
   b4032:	f003 ff7d 	bl	b7f30 <memcpy>
=======
   b4032:	f004 f89d 	bl	b8170 <memcpy>
>>>>>>> collate-readings
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
<<<<<<< HEAD
   b403e:	f003 ff85 	bl	b7f4c <memset>
=======
   b403e:	f004 f8a5 	bl	b818c <memset>
>>>>>>> collate-readings
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e584 	.word	0x2003e584
<<<<<<< HEAD
   b404c:	000b8700 	.word	0x000b8700
=======
   b404c:	000b8960 	.word	0x000b8960
>>>>>>> collate-readings
   b4050:	2003e5f8 	.word	0x2003e5f8
   b4054:	2003e5f8 	.word	0x2003e5f8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
<<<<<<< HEAD
   b4062:	f002 f8b9 	bl	b61d8 <module_user_init_hook>
=======
   b4062:	f002 f999 	bl	b6398 <module_user_init_hook>
>>>>>>> collate-readings
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
<<<<<<< HEAD
   b407c:	000b86a0 	.word	0x000b86a0
   b4080:	000b86c4 	.word	0x000b86c4
=======
   b407c:	000b8908 	.word	0x000b8908
   b4080:	000b892c 	.word	0x000b892c
>>>>>>> collate-readings

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
<<<<<<< HEAD
   b4084:	f000 bae6 	b.w	b4654 <setup>
=======
   b4084:	f000 ba84 	b.w	b4590 <setup>
>>>>>>> collate-readings

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
<<<<<<< HEAD
   b408a:	f000 fa05 	bl	b4498 <loop>
=======
   b408a:	f000 fac5 	bl	b4618 <loop>
>>>>>>> collate-readings
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
<<<<<<< HEAD
   b4092:	f002 b859 	b.w	b6148 <_post_loop>
=======
   b4092:	f002 b939 	b.w	b6308 <_post_loop>
>>>>>>> collate-readings

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
<<<<<<< HEAD
   b4096:	f001 bc27 	b.w	b58e8 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bc25 	b.w	b58e8 <malloc>
=======
   b4096:	f001 bd41 	b.w	b5b1c <malloc>

000b409a <_Znaj>:
   b409a:	f001 bd3f 	b.w	b5b1c <malloc>
>>>>>>> collate-readings

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
<<<<<<< HEAD
   b409e:	f001 bc2b 	b.w	b58f8 <free>
=======
   b409e:	f001 bd45 	b.w	b5b2c <free>
>>>>>>> collate-readings

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b40b2:	2300      	movs	r3, #0
   b40b4:	6840      	ldr	r0, [r0, #4]
   b40b6:	461a      	mov	r2, r3
   b40b8:	4619      	mov	r1, r3
   b40ba:	f001 bc9f 	b.w	b59fc <network_off>

000b40be <_ZN10CloudClass12disconnectedEv>:
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
   b40be:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b40c0:	f001 fce4 	bl	b5a8c <spark_cloud_flag_connected>
    static bool disconnected(void) { return !connected(); }
   b40c4:	f080 0001 	eor.w	r0, r0, #1
   b40c8:	b2c0      	uxtb	r0, r0
   b40ca:	bd08      	pop	{r3, pc}

000b40cc <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b40cc:	b513      	push	{r0, r1, r4, lr}
   b40ce:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
<<<<<<< HEAD
   b40b6:	4608      	mov	r0, r1
   b40b8:	9101      	str	r1, [sp, #4]
   b40ba:	f003 ffac 	bl	b8016 <strlen>
   b40be:	9901      	ldr	r1, [sp, #4]
   b40c0:	4602      	mov	r2, r0
   b40c2:	4620      	mov	r0, r4
=======
   b40d0:	4608      	mov	r0, r1
   b40d2:	9101      	str	r1, [sp, #4]
   b40d4:	f004 f8bf 	bl	b8256 <strlen>
   b40d8:	9901      	ldr	r1, [sp, #4]
   b40da:	4602      	mov	r2, r0
   b40dc:	4620      	mov	r0, r4
>>>>>>> collate-readings
}
   b40de:	b002      	add	sp, #8
   b40e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
<<<<<<< HEAD
   b40ca:	f002 bf0b 	b.w	b6ee4 <_ZN5spark10JSONWriter4nameEPKcj>
	...
=======
   b40e4:	f003 b80e 	b.w	b7104 <_ZN5spark10JSONWriter4nameEPKcj>
>>>>>>> collate-readings

000b40e8 <_Z13qwiicGetValuev>:
	return writerJson;
}


void qwiicGetValue()
{
   b40e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Wire.beginTransmission(qwiicAddress);
<<<<<<< HEAD
   b40d4:	f002 ffe8 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b40d8:	2130      	movs	r1, #48	; 0x30
   b40da:	f002 fd19 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(COMMAND_GET_VALUE); // command for status
   b40de:	f002 ffe3 	bl	b70a8 <_Z19__fetch_global_Wirev>
=======
   b40ec:	f003 f8fc 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b40f0:	2130      	movs	r1, #48	; 0x30
   b40f2:	f002 fe23 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(COMMAND_GET_VALUE); // command for status
   b40f6:	f003 f8f7 	bl	b72e8 <_Z19__fetch_global_Wirev>
>>>>>>> collate-readings
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40fa:	6803      	ldr	r3, [r0, #0]
	{ // slave may send less than requested
		uint8_t ADC_VALUE_L = Wire.read();
		uint8_t ADC_VALUE_H = Wire.read();
		ADC_VALUE=ADC_VALUE_H;
		ADC_VALUE<<=8;
		ADC_VALUE|=ADC_VALUE_L;
   b40fc:	f8df 908c 	ldr.w	r9, [pc, #140]	; b418c <_Z13qwiicGetValuev+0xa4>
   b4100:	689b      	ldr	r3, [r3, #8]
   b4102:	2105      	movs	r1, #5
   b4104:	4798      	blx	r3
	Wire.endTransmission(); // stop transmitting //this looks like it was essential.
<<<<<<< HEAD
   b40ee:	f002 ffdb 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b40f2:	f002 fd18 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(qwiicAddress, 2); // request 1 bytes from slave device qwiicAddress
   b40f6:	f002 ffd7 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b40fa:	2202      	movs	r2, #2
   b40fc:	2130      	movs	r1, #48	; 0x30
   b40fe:	f002 fd04 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
=======
   b4106:	f003 f8ef 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b410a:	f002 fe22 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(qwiicAddress, 2); // request 1 bytes from slave device qwiicAddress
   b410e:	f003 f8eb 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b4112:	2202      	movs	r2, #2
   b4114:	2130      	movs	r1, #48	; 0x30
   b4116:	f002 fe0e 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
>>>>>>> collate-readings
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b411a:	a718      	add	r7, pc, #96	; (adr r7, b417c <_Z13qwiicGetValuev+0x94>)
   b411c:	e9d7 6700 	ldrd	r6, r7, [r7]
   b4120:	a518      	add	r5, pc, #96	; (adr r5, b4184 <_Z13qwiicGetValuev+0x9c>)
   b4122:	e9d5 4500 	ldrd	r4, r5, [r5]
	while (Wire.available())
<<<<<<< HEAD
   b410e:	f002 ffcb 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b4112:	6803      	ldr	r3, [r0, #0]
   b4114:	691b      	ldr	r3, [r3, #16]
   b4116:	4798      	blx	r3
   b4118:	b300      	cbz	r0, b415c <_Z13qwiicGetValuev+0x8c>
		uint8_t ADC_VALUE_L = Wire.read();
   b411a:	f002 ffc5 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b411e:	6803      	ldr	r3, [r0, #0]
   b4120:	695b      	ldr	r3, [r3, #20]
   b4122:	4798      	blx	r3
   b4124:	4680      	mov	r8, r0
		uint8_t ADC_VALUE_H = Wire.read();
   b4126:	f002 ffbf 	bl	b70a8 <_Z19__fetch_global_Wirev>
=======
   b4126:	f003 f8df 	bl	b72e8 <_Z19__fetch_global_Wirev>
>>>>>>> collate-readings
   b412a:	6803      	ldr	r3, [r0, #0]
   b412c:	691b      	ldr	r3, [r3, #16]
   b412e:	4798      	blx	r3
   b4130:	b300      	cbz	r0, b4174 <_Z13qwiicGetValuev+0x8c>
		uint8_t ADC_VALUE_L = Wire.read();
   b4132:	f003 f8d9 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b4136:	6803      	ldr	r3, [r0, #0]
   b4138:	695b      	ldr	r3, [r3, #20]
   b413a:	4798      	blx	r3
   b413c:	4680      	mov	r8, r0
		uint8_t ADC_VALUE_H = Wire.read();
   b413e:	f003 f8d3 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b4142:	6803      	ldr	r3, [r0, #0]
   b4144:	695b      	ldr	r3, [r3, #20]
   b4146:	4798      	blx	r3
		ADC_VALUE=ADC_VALUE_H;
   b4148:	b2c3      	uxtb	r3, r0
		ADC_VALUE|=ADC_VALUE_L;
   b414a:	fa5f f088 	uxtb.w	r0, r8
   b414e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   b4152:	f8a9 0000 	strh.w	r0, [r9]
		dBnumber = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
<<<<<<< HEAD
   b413e:	f003 f92f 	bl	b73a0 <__aeabi_i2d>
   b4142:	4632      	mov	r2, r6
   b4144:	463b      	mov	r3, r7
   b4146:	f002 ffdf 	bl	b7108 <__adddf3>
   b414a:	462b      	mov	r3, r5
   b414c:	4622      	mov	r2, r4
   b414e:	f003 fabb 	bl	b76c8 <__aeabi_ddiv>
   b4152:	f003 fba1 	bl	b7898 <__aeabi_d2f>
   b4156:	4b02      	ldr	r3, [pc, #8]	; (b4160 <_Z13qwiicGetValuev+0x90>)
   b4158:	6018      	str	r0, [r3, #0]
=======
   b4156:	f003 fa43 	bl	b75e0 <__aeabi_i2d>
   b415a:	4632      	mov	r2, r6
   b415c:	463b      	mov	r3, r7
   b415e:	f003 f8f3 	bl	b7348 <__adddf3>
   b4162:	462b      	mov	r3, r5
   b4164:	4622      	mov	r2, r4
   b4166:	f003 fbcf 	bl	b7908 <__aeabi_ddiv>
   b416a:	f003 fcb5 	bl	b7ad8 <__aeabi_d2f>
   b416e:	4b02      	ldr	r3, [pc, #8]	; (b4178 <_Z13qwiicGetValuev+0x90>)
   b4170:	6018      	str	r0, [r3, #0]
>>>>>>> collate-readings
	while (Wire.available())
   b4172:	e7d8      	b.n	b4126 <_Z13qwiicGetValuev+0x3e>
	}
	return;
}
<<<<<<< HEAD
   b415c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4160:	2003e688 	.word	0x2003e688
   b4164:	67381d7e 	.word	0x67381d7e
   b4168:	4054cd44 	.word	0x4054cd44
   b416c:	374bc6a8 	.word	0x374bc6a8
   b4170:	40260189 	.word	0x40260189
   b4174:	2003e5f8 	.word	0x2003e5f8
=======
   b4174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4178:	2003e694 	.word	0x2003e694
   b417c:	67381d7e 	.word	0x67381d7e
   b4180:	4054cd44 	.word	0x4054cd44
   b4184:	374bc6a8 	.word	0x374bc6a8
   b4188:	40260189 	.word	0x40260189
   b418c:	2003e5f8 	.word	0x2003e5f8
>>>>>>> collate-readings

000b4190 <_Z17getSensorReadingsN5spark16JSONBufferWriterE>:
{
<<<<<<< HEAD
   b4178:	b530      	push	{r4, r5, lr}
   b417a:	b091      	sub	sp, #68	; 0x44

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   b417c:	4aa6      	ldr	r2, [pc, #664]	; (b4418 <_Z17getSensorReadingsPc+0x2a0>)
	if (counter == 1) 
   b417e:	4da7      	ldr	r5, [pc, #668]	; (b441c <_Z17getSensorReadingsPc+0x2a4>)
   b4180:	9203      	str	r2, [sp, #12]
        state_(BEGIN) {
   b4182:	2300      	movs	r3, #0
        n_(0) {
   b4184:	f240 12f3 	movw	r2, #499	; 0x1f3
   b4188:	e9cd 2306 	strd	r2, r3, [sp, #24]
        state_(BEGIN) {
   b418c:	f88d 3010 	strb.w	r3, [sp, #16]
   b4190:	682b      	ldr	r3, [r5, #0]
        n_(0) {
   b4192:	9005      	str	r0, [sp, #20]
   b4194:	2b01      	cmp	r3, #1
   b4196:	d102      	bne.n	b419e <_Z17getSensorReadingsPc+0x26>
		writer.beginObject();
   b4198:	a803      	add	r0, sp, #12
   b419a:	f002 fe13 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
	writer.name(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL)).beginObject();
   b419e:	f001 ff8c 	bl	b60ba <_ZN9TimeClass3nowEv>
   b41a2:	4b9f      	ldr	r3, [pc, #636]	; (b4420 <_Z17getSensorReadingsPc+0x2a8>)
   b41a4:	499f      	ldr	r1, [pc, #636]	; (b4424 <_Z17getSensorReadingsPc+0x2ac>)
   b41a6:	681b      	ldr	r3, [r3, #0]
   b41a8:	9300      	str	r3, [sp, #0]
   b41aa:	4602      	mov	r2, r0
   b41ac:	17c3      	asrs	r3, r0, #31
   b41ae:	a808      	add	r0, sp, #32
   b41b0:	f001 ff24 	bl	b5ffc <_ZN9TimeClass6formatExPKc>
    return this->name(name.c_str(), name.length());
   b41b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b41b6:	9908      	ldr	r1, [sp, #32]
   b41b8:	a803      	add	r0, sp, #12
   b41ba:	f002 fe93 	bl	b6ee4 <_ZN5spark10JSONWriter4nameEPKcj>
   b41be:	f002 fe01 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
   b41c2:	a808      	add	r0, sp, #32
   b41c4:	f001 fcf2 	bl	b5bac <_ZN6StringD1Ev>
	bh.make_forced_measurement();
   b41c8:	4897      	ldr	r0, [pc, #604]	; (b4428 <_Z17getSensorReadingsPc+0x2b0>)
   b41ca:	f001 f92d 	bl	b5428 <_ZN6BH175023make_forced_measurementEv>
	writer.name("BH1750").beginObject();
   b41ce:	4997      	ldr	r1, [pc, #604]	; (b442c <_Z17getSensorReadingsPc+0x2b4>)
   b41d0:	a803      	add	r0, sp, #12
   b41d2:	f7ff ff6e 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b41d6:	f002 fdf5 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("Light-lux").value(bh.get_light_level());
   b41da:	4995      	ldr	r1, [pc, #596]	; (b4430 <_Z17getSensorReadingsPc+0x2b8>)
   b41dc:	a803      	add	r0, sp, #12
   b41de:	f7ff ff68 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b41e2:	4604      	mov	r4, r0
   b41e4:	4890      	ldr	r0, [pc, #576]	; (b4428 <_Z17getSensorReadingsPc+0x2b0>)
   b41e6:	f001 f8d9 	bl	b539c <_ZN6BH175015get_light_levelEv>
   b41ea:	ee10 0a10 	vmov	r0, s0
   b41ee:	f003 f8e9 	bl	b73c4 <__aeabi_f2d>
   b41f2:	ec41 0b10 	vmov	d0, r0, r1
   b41f6:	4620      	mov	r0, r4
   b41f8:	f002 fe02 	bl	b6e00 <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b41fc:	a803      	add	r0, sp, #12
   b41fe:	f002 fdcb 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	if (airSensor.dataAvailable())
   b4202:	488c      	ldr	r0, [pc, #560]	; (b4434 <_Z17getSensorReadingsPc+0x2bc>)
   b4204:	f000 ffc1 	bl	b518a <_ZN5SCD3013dataAvailableEv>
   b4208:	2800      	cmp	r0, #0
   b420a:	d036      	beq.n	b427a <_Z17getSensorReadingsPc+0x102>
		writer.name("SCD30").beginObject();
   b420c:	498a      	ldr	r1, [pc, #552]	; (b4438 <_Z17getSensorReadingsPc+0x2c0>)
   b420e:	a803      	add	r0, sp, #12
   b4210:	f7ff ff4f 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4214:	f002 fdd6 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
			writer.name("CO2-ppm").value(airSensor.getCO2());
   b4218:	4988      	ldr	r1, [pc, #544]	; (b443c <_Z17getSensorReadingsPc+0x2c4>)
   b421a:	a803      	add	r0, sp, #12
   b421c:	f7ff ff49 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4220:	4604      	mov	r4, r0
   b4222:	4884      	ldr	r0, [pc, #528]	; (b4434 <_Z17getSensorReadingsPc+0x2bc>)
   b4224:	f001 f811 	bl	b524a <_ZN5SCD306getCO2Ev>
   b4228:	4601      	mov	r1, r0
   b422a:	4620      	mov	r0, r4
   b422c:	f002 fdd6 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
			writer.name("Temp-C").value(airSensor.getTemperature());
   b4230:	4983      	ldr	r1, [pc, #524]	; (b4440 <_Z17getSensorReadingsPc+0x2c8>)
   b4232:	a803      	add	r0, sp, #12
   b4234:	f7ff ff3d 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4238:	4604      	mov	r4, r0
   b423a:	487e      	ldr	r0, [pc, #504]	; (b4434 <_Z17getSensorReadingsPc+0x2bc>)
   b423c:	f001 f820 	bl	b5280 <_ZN5SCD3014getTemperatureEv>
   b4240:	ee10 0a10 	vmov	r0, s0
   b4244:	f003 f8be 	bl	b73c4 <__aeabi_f2d>
   b4248:	ec41 0b10 	vmov	d0, r0, r1
   b424c:	4620      	mov	r0, r4
   b424e:	f002 fdd7 	bl	b6e00 <_ZN5spark10JSONWriter5valueEd>
			writer.name("RH-%").value(airSensor.getHumidity());
   b4252:	497c      	ldr	r1, [pc, #496]	; (b4444 <_Z17getSensorReadingsPc+0x2cc>)
   b4254:	a803      	add	r0, sp, #12
   b4256:	f7ff ff2c 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b425a:	4604      	mov	r4, r0
   b425c:	4875      	ldr	r0, [pc, #468]	; (b4434 <_Z17getSensorReadingsPc+0x2bc>)
   b425e:	f001 f804 	bl	b526a <_ZN5SCD3011getHumidityEv>
   b4262:	ee10 0a10 	vmov	r0, s0
   b4266:	f003 f8ad 	bl	b73c4 <__aeabi_f2d>
   b426a:	ec41 0b10 	vmov	d0, r0, r1
   b426e:	4620      	mov	r0, r4
   b4270:	f002 fdc6 	bl	b6e00 <_ZN5spark10JSONWriter5valueEd>
		writer.endObject();
   b4274:	a803      	add	r0, sp, #12
   b4276:	f002 fd8f 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("PMSA003I").beginObject();
   b427a:	4973      	ldr	r1, [pc, #460]	; (b4448 <_Z17getSensorReadingsPc+0x2d0>)
   b427c:	a803      	add	r0, sp, #12
   b427e:	f7ff ff18 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4282:	f002 fd9f 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("Std_PM1.0").value(data.pm10_standard);
   b4286:	4971      	ldr	r1, [pc, #452]	; (b444c <_Z17getSensorReadingsPc+0x2d4>)
   b4288:	a803      	add	r0, sp, #12
   b428a:	f7ff ff12 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b428e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   b4292:	f002 fda3 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
		writer.name("Std_PM2.5").value(data.pm25_standard);
   b4296:	496e      	ldr	r1, [pc, #440]	; (b4450 <_Z17getSensorReadingsPc+0x2d8>)
   b4298:	a803      	add	r0, sp, #12
   b429a:	f7ff ff0a 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b429e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   b42a2:	f002 fd9b 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
		writer.name("Std_PM10").value(data.pm100_standard);
   b42a6:	496b      	ldr	r1, [pc, #428]	; (b4454 <_Z17getSensorReadingsPc+0x2dc>)
   b42a8:	a803      	add	r0, sp, #12
   b42aa:	f7ff ff02 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42ae:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   b42b2:	f002 fd93 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM1.0").value(data.pm10_env);
   b42b6:	4968      	ldr	r1, [pc, #416]	; (b4458 <_Z17getSensorReadingsPc+0x2e0>)
   b42b8:	a803      	add	r0, sp, #12
   b42ba:	f7ff fefa 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42be:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   b42c2:	f002 fd8b 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM2.5").value(data.pm25_env);
   b42c6:	4965      	ldr	r1, [pc, #404]	; (b445c <_Z17getSensorReadingsPc+0x2e4>)
   b42c8:	a803      	add	r0, sp, #12
   b42ca:	f7ff fef2 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42ce:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   b42d2:	f002 fd83 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
		writer.name("Env_PM10").value(data.pm100_env);
   b42d6:	4962      	ldr	r1, [pc, #392]	; (b4460 <_Z17getSensorReadingsPc+0x2e8>)
   b42d8:	a803      	add	r0, sp, #12
   b42da:	f7ff feea 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42de:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   b42e2:	f002 fd7b 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
	writer.endObject();
   b42e6:	a803      	add	r0, sp, #12
   b42e8:	f002 fd56 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	qwiicGetValue();
   b42ec:	f7ff fef0 	bl	b40d0 <_Z13qwiicGetValuev>
	writer.name("qwiic").beginObject();
   b42f0:	495c      	ldr	r1, [pc, #368]	; (b4464 <_Z17getSensorReadingsPc+0x2ec>)
   b42f2:	a803      	add	r0, sp, #12
   b42f4:	f7ff fedd 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b42f8:	f002 fd64 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("ADC-val").value(ADC_VALUE);
   b42fc:	495a      	ldr	r1, [pc, #360]	; (b4468 <_Z17getSensorReadingsPc+0x2f0>)
   b42fe:	a803      	add	r0, sp, #12
   b4300:	f7ff fed7 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4304:	4b59      	ldr	r3, [pc, #356]	; (b446c <_Z17getSensorReadingsPc+0x2f4>)
   b4306:	8819      	ldrh	r1, [r3, #0]
   b4308:	f002 fd68 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
		writer.name("dB").value(dBnumber);
   b430c:	4958      	ldr	r1, [pc, #352]	; (b4470 <_Z17getSensorReadingsPc+0x2f8>)
   b430e:	a803      	add	r0, sp, #12
   b4310:	f7ff fecf 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4314:	4b57      	ldr	r3, [pc, #348]	; (b4474 <_Z17getSensorReadingsPc+0x2fc>)
   b4316:	4604      	mov	r4, r0
   b4318:	6818      	ldr	r0, [r3, #0]
   b431a:	f003 f853 	bl	b73c4 <__aeabi_f2d>
   b431e:	ec41 0b10 	vmov	d0, r0, r1
   b4322:	4620      	mov	r0, r4
   b4324:	f002 fd6c 	bl	b6e00 <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b4328:	a803      	add	r0, sp, #12
   b432a:	f002 fd35 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("VEML6070").beginObject();
   b432e:	4952      	ldr	r1, [pc, #328]	; (b4478 <_Z17getSensorReadingsPc+0x300>)
   b4330:	a803      	add	r0, sp, #12
   b4332:	f7ff febe 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4336:	f002 fd45 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("UV-lvl").value(uv.readUV());
   b433a:	4950      	ldr	r1, [pc, #320]	; (b447c <_Z17getSensorReadingsPc+0x304>)
   b433c:	a803      	add	r0, sp, #12
   b433e:	f7ff feb8 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4342:	4604      	mov	r4, r0
   b4344:	484e      	ldr	r0, [pc, #312]	; (b4480 <_Z17getSensorReadingsPc+0x308>)
   b4346:	f000 fec0 	bl	b50ca <_ZN17Adafruit_VEML60706readUVEv>
   b434a:	4601      	mov	r1, r0
   b434c:	4620      	mov	r0, r4
   b434e:	f002 fd45 	bl	b6ddc <_ZN5spark10JSONWriter5valueEi>
	writer.endObject();
   b4352:	a803      	add	r0, sp, #12
   b4354:	f002 fd20 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	writer.name("BME280").beginObject();
   b4358:	494a      	ldr	r1, [pc, #296]	; (b4484 <_Z17getSensorReadingsPc+0x30c>)
   b435a:	a803      	add	r0, sp, #12
   b435c:	f7ff fea9 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4360:	f002 fd30 	bl	b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>
		writer.name("P-mbar").value(bme.readPressure()/100.0F);
   b4364:	4948      	ldr	r1, [pc, #288]	; (b4488 <_Z17getSensorReadingsPc+0x310>)
   b4366:	a803      	add	r0, sp, #12
   b4368:	f7ff fea3 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b436c:	4604      	mov	r4, r0
   b436e:	4847      	ldr	r0, [pc, #284]	; (b448c <_Z17getSensorReadingsPc+0x314>)
   b4370:	f000 fd50 	bl	b4e14 <_ZN15Adafruit_BME28012readPressureEv>
   b4374:	eddf 7a46 	vldr	s15, [pc, #280]	; b4490 <_Z17getSensorReadingsPc+0x318>
   b4378:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b437c:	ee17 0a90 	vmov	r0, s15
   b4380:	f003 f820 	bl	b73c4 <__aeabi_f2d>
   b4384:	ec41 0b10 	vmov	d0, r0, r1
   b4388:	4620      	mov	r0, r4
   b438a:	f002 fd39 	bl	b6e00 <_ZN5spark10JSONWriter5valueEd>
		writer.name("RH-%").value(bme.readHumidity());
   b438e:	492d      	ldr	r1, [pc, #180]	; (b4444 <_Z17getSensorReadingsPc+0x2cc>)
   b4390:	a803      	add	r0, sp, #12
   b4392:	f7ff fe8e 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b4396:	4604      	mov	r4, r0
   b4398:	483c      	ldr	r0, [pc, #240]	; (b448c <_Z17getSensorReadingsPc+0x314>)
   b439a:	f000 fcf1 	bl	b4d80 <_ZN15Adafruit_BME28012readHumidityEv>
   b439e:	ee10 0a10 	vmov	r0, s0
   b43a2:	f003 f80f 	bl	b73c4 <__aeabi_f2d>
   b43a6:	ec41 0b10 	vmov	d0, r0, r1
   b43aa:	4620      	mov	r0, r4
   b43ac:	f002 fd28 	bl	b6e00 <_ZN5spark10JSONWriter5valueEd>
		writer.name("Temp-C").value(bme.readTemperature());
   b43b0:	4923      	ldr	r1, [pc, #140]	; (b4440 <_Z17getSensorReadingsPc+0x2c8>)
   b43b2:	a803      	add	r0, sp, #12
   b43b4:	f7ff fe7d 	bl	b40b2 <_ZN5spark10JSONWriter4nameEPKc>
   b43b8:	4604      	mov	r4, r0
   b43ba:	4834      	ldr	r0, [pc, #208]	; (b448c <_Z17getSensorReadingsPc+0x314>)
   b43bc:	f000 fcb0 	bl	b4d20 <_ZN15Adafruit_BME28015readTemperatureEv>
   b43c0:	ee10 0a10 	vmov	r0, s0
   b43c4:	f002 fffe 	bl	b73c4 <__aeabi_f2d>
   b43c8:	ec41 0b10 	vmov	d0, r0, r1
   b43cc:	4620      	mov	r0, r4
   b43ce:	f002 fd17 	bl	b6e00 <_ZN5spark10JSONWriter5valueEd>
	writer.endObject();
   b43d2:	a803      	add	r0, sp, #12
   b43d4:	f002 fce0 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	writer.endObject();
   b43d8:	a803      	add	r0, sp, #12
   b43da:	f002 fcdd 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	if (counter == READINGSNO)
   b43de:	4b2d      	ldr	r3, [pc, #180]	; (b4494 <_Z17getSensorReadingsPc+0x31c>)
   b43e0:	682a      	ldr	r2, [r5, #0]
   b43e2:	681b      	ldr	r3, [r3, #0]
   b43e4:	429a      	cmp	r2, r3
   b43e6:	d102      	bne.n	b43ee <_Z17getSensorReadingsPc+0x276>
		writer.endObject();
   b43e8:	a803      	add	r0, sp, #12
   b43ea:	f002 fcd5 	bl	b6d98 <_ZN5spark10JSONWriter9endObjectEv>
	writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
   b43ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b43f2:	4293      	cmp	r3, r2
   b43f4:	bf28      	it	cs
   b43f6:	4613      	movcs	r3, r2
   b43f8:	9a05      	ldr	r2, [sp, #20]
   b43fa:	2100      	movs	r1, #0
   b43fc:	54d1      	strb	r1, [r2, r3]
	Serial.println(writer.dataSize());
   b43fe:	f002 fa8b 	bl	b6918 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4402:	9907      	ldr	r1, [sp, #28]
   b4404:	4604      	mov	r4, r0
   b4406:	220a      	movs	r2, #10
   b4408:	f001 fced 	bl	b5de6 <_ZN5Print11printNumberEmh>
        n += println();
   b440c:	4620      	mov	r0, r4
   b440e:	f001 fcd4 	bl	b5dba <_ZN5Print7printlnEv>
}
   b4412:	b011      	add	sp, #68	; 0x44
   b4414:	bd30      	pop	{r4, r5, pc}
   b4416:	bf00      	nop
   b4418:	000b84a0 	.word	0x000b84a0
   b441c:	2003e684 	.word	0x2003e684
   b4420:	2003e58c 	.word	0x2003e58c
   b4424:	2003e6cc 	.word	0x2003e6cc
   b4428:	2003e638 	.word	0x2003e638
   b442c:	000b812c 	.word	0x000b812c
   b4430:	000b8133 	.word	0x000b8133
   b4434:	2003e5fc 	.word	0x2003e5fc
   b4438:	000b813d 	.word	0x000b813d
   b443c:	000b8143 	.word	0x000b8143
   b4440:	000b814b 	.word	0x000b814b
   b4444:	000b8152 	.word	0x000b8152
   b4448:	000b8157 	.word	0x000b8157
   b444c:	000b8160 	.word	0x000b8160
   b4450:	000b816a 	.word	0x000b816a
   b4454:	000b8174 	.word	0x000b8174
   b4458:	000b817d 	.word	0x000b817d
   b445c:	000b8187 	.word	0x000b8187
   b4460:	000b8191 	.word	0x000b8191
   b4464:	000b819a 	.word	0x000b819a
   b4468:	000b81a0 	.word	0x000b81a0
   b446c:	2003e5f8 	.word	0x2003e5f8
   b4470:	000b81a8 	.word	0x000b81a8
   b4474:	2003e688 	.word	0x2003e688
   b4478:	000b81ab 	.word	0x000b81ab
   b447c:	000b81b4 	.word	0x000b81b4
   b4480:	2003e69c 	.word	0x2003e69c
   b4484:	000b81bb 	.word	0x000b81bb
   b4488:	000b81c2 	.word	0x000b81c2
   b448c:	2003e640 	.word	0x2003e640
   b4490:	42c80000 	.word	0x42c80000
   b4494:	2003e584 	.word	0x2003e584

000b4498 <loop>:
void loop() {
   b4498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }
=======
   b4190:	b570      	push	{r4, r5, r6, lr}
   b4192:	460c      	mov	r4, r1
   b4194:	b088      	sub	sp, #32
   b4196:	4605      	mov	r5, r0
	bh.make_forced_measurement();
   b4198:	488d      	ldr	r0, [pc, #564]	; (b43d0 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x240>)
   b419a:	f001 fa2f 	bl	b55fc <_ZN6BH175023make_forced_measurementEv>
	writerJson.name("BH1750").beginObject();
   b419e:	498d      	ldr	r1, [pc, #564]	; (b43d4 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x244>)
   b41a0:	4620      	mov	r0, r4
   b41a2:	f7ff ff93 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b41a6:	f002 ff1d 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
	writerJson.name("lux").value(bh.get_light_level());
   b41aa:	498b      	ldr	r1, [pc, #556]	; (b43d8 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x248>)
   b41ac:	4620      	mov	r0, r4
   b41ae:	f7ff ff8d 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b41b2:	4606      	mov	r6, r0
   b41b4:	4886      	ldr	r0, [pc, #536]	; (b43d0 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x240>)
   b41b6:	f001 f9db 	bl	b5570 <_ZN6BH175015get_light_levelEv>
   b41ba:	ee10 0a10 	vmov	r0, s0
   b41be:	f003 fa21 	bl	b7604 <__aeabi_f2d>
   b41c2:	ec41 0b10 	vmov	d0, r0, r1
   b41c6:	4630      	mov	r0, r6
   b41c8:	f002 ff2a 	bl	b7020 <_ZN5spark10JSONWriter5valueEd>
	writerJson.endObject();
   b41cc:	4620      	mov	r0, r4
   b41ce:	f002 fef3 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
	if (airSensor.dataAvailable()) delay(500);
   b41d2:	4882      	ldr	r0, [pc, #520]	; (b43dc <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x24c>)
   b41d4:	f001 f8c3 	bl	b535e <_ZN5SCD3013dataAvailableEv>
   b41d8:	b118      	cbz	r0, b41e2 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x52>
   b41da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b41de:	f002 f867 	bl	b62b0 <delay>
	if (airSensor.dataAvailable()) {
   b41e2:	487e      	ldr	r0, [pc, #504]	; (b43dc <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x24c>)
   b41e4:	f001 f8bb 	bl	b535e <_ZN5SCD3013dataAvailableEv>
   b41e8:	b3b0      	cbz	r0, b4258 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0xc8>
		writerJson.name("SCD30").beginObject();
   b41ea:	497d      	ldr	r1, [pc, #500]	; (b43e0 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x250>)
   b41ec:	4620      	mov	r0, r4
   b41ee:	f7ff ff6d 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b41f2:	f002 fef7 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
		writerJson.name("CO2-ppm").value(airSensor.getCO2());
   b41f6:	497b      	ldr	r1, [pc, #492]	; (b43e4 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x254>)
   b41f8:	4620      	mov	r0, r4
   b41fa:	f7ff ff67 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b41fe:	4606      	mov	r6, r0
   b4200:	4876      	ldr	r0, [pc, #472]	; (b43dc <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x24c>)
   b4202:	f001 f90c 	bl	b541e <_ZN5SCD306getCO2Ev>
   b4206:	4601      	mov	r1, r0
   b4208:	4630      	mov	r0, r6
   b420a:	f002 fef7 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
		writerJson.name("TempC").value(airSensor.getTemperature());
   b420e:	4976      	ldr	r1, [pc, #472]	; (b43e8 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x258>)
   b4210:	4620      	mov	r0, r4
   b4212:	f7ff ff5b 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4216:	4606      	mov	r6, r0
   b4218:	4870      	ldr	r0, [pc, #448]	; (b43dc <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x24c>)
   b421a:	f001 f91b 	bl	b5454 <_ZN5SCD3014getTemperatureEv>
   b421e:	ee10 0a10 	vmov	r0, s0
   b4222:	f003 f9ef 	bl	b7604 <__aeabi_f2d>
   b4226:	ec41 0b10 	vmov	d0, r0, r1
   b422a:	4630      	mov	r0, r6
   b422c:	f002 fef8 	bl	b7020 <_ZN5spark10JSONWriter5valueEd>
		writerJson.name("RH%").value(airSensor.getHumidity());
   b4230:	496e      	ldr	r1, [pc, #440]	; (b43ec <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x25c>)
   b4232:	4620      	mov	r0, r4
   b4234:	f7ff ff4a 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4238:	4606      	mov	r6, r0
   b423a:	4868      	ldr	r0, [pc, #416]	; (b43dc <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x24c>)
   b423c:	f001 f8ff 	bl	b543e <_ZN5SCD3011getHumidityEv>
   b4240:	ee10 0a10 	vmov	r0, s0
   b4244:	f003 f9de 	bl	b7604 <__aeabi_f2d>
   b4248:	ec41 0b10 	vmov	d0, r0, r1
   b424c:	4630      	mov	r0, r6
   b424e:	f002 fee7 	bl	b7020 <_ZN5spark10JSONWriter5valueEd>
		writerJson.endObject();
   b4252:	4620      	mov	r0, r4
   b4254:	f002 feb0 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
	writerJson.name("PMSA003I").beginObject();
   b4258:	4965      	ldr	r1, [pc, #404]	; (b43f0 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x260>)
   b425a:	4620      	mov	r0, r4
   b425c:	f7ff ff36 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4260:	f002 fec0 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
	writerJson.name("StdPM1.0").value(data.pm10_standard);
   b4264:	4963      	ldr	r1, [pc, #396]	; (b43f4 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x264>)
   b4266:	4620      	mov	r0, r4
   b4268:	f7ff ff30 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b426c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   b4270:	f002 fec4 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.name("StdPM2.5").value(data.pm25_standard);
   b4274:	4960      	ldr	r1, [pc, #384]	; (b43f8 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x268>)
   b4276:	4620      	mov	r0, r4
   b4278:	f7ff ff28 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b427c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   b4280:	f002 febc 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.name("StdPM10").value(data.pm100_standard);
   b4284:	495d      	ldr	r1, [pc, #372]	; (b43fc <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x26c>)
   b4286:	4620      	mov	r0, r4
   b4288:	f7ff ff20 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b428c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b4290:	f002 feb4 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.name("EnvPM1.0").value(data.pm10_env);
   b4294:	495a      	ldr	r1, [pc, #360]	; (b4400 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x270>)
   b4296:	4620      	mov	r0, r4
   b4298:	f7ff ff18 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b429c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   b42a0:	f002 feac 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.name("EnvPM2.5").value(data.pm25_env);
   b42a4:	4957      	ldr	r1, [pc, #348]	; (b4404 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x274>)
   b42a6:	4620      	mov	r0, r4
   b42a8:	f7ff ff10 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b42ac:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   b42b0:	f002 fea4 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.name("EnvPM10").value(data.pm100_env);
   b42b4:	4954      	ldr	r1, [pc, #336]	; (b4408 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x278>)
   b42b6:	4620      	mov	r0, r4
   b42b8:	f7ff ff08 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b42bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b42c0:	f002 fe9c 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.endObject();
   b42c4:	4620      	mov	r0, r4
   b42c6:	f002 fe77 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
	qwiicGetValue();
   b42ca:	f7ff ff0d 	bl	b40e8 <_Z13qwiicGetValuev>
	writerJson.name("qwiic").beginObject();
   b42ce:	494f      	ldr	r1, [pc, #316]	; (b440c <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x27c>)
   b42d0:	4620      	mov	r0, r4
   b42d2:	f7ff fefb 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b42d6:	f002 fe85 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
	writerJson.name("ADC").value(ADC_VALUE);
   b42da:	494d      	ldr	r1, [pc, #308]	; (b4410 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x280>)
   b42dc:	4620      	mov	r0, r4
   b42de:	f7ff fef5 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b42e2:	4b4c      	ldr	r3, [pc, #304]	; (b4414 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x284>)
   b42e4:	8819      	ldrh	r1, [r3, #0]
   b42e6:	f002 fe89 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.name("dB").value(dBnumber);
   b42ea:	494b      	ldr	r1, [pc, #300]	; (b4418 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x288>)
   b42ec:	4620      	mov	r0, r4
   b42ee:	f7ff feed 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b42f2:	4b4a      	ldr	r3, [pc, #296]	; (b441c <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x28c>)
   b42f4:	4606      	mov	r6, r0
   b42f6:	6818      	ldr	r0, [r3, #0]
   b42f8:	f003 f984 	bl	b7604 <__aeabi_f2d>
   b42fc:	ec41 0b10 	vmov	d0, r0, r1
   b4300:	4630      	mov	r0, r6
   b4302:	f002 fe8d 	bl	b7020 <_ZN5spark10JSONWriter5valueEd>
	writerJson.endObject();
   b4306:	4620      	mov	r0, r4
   b4308:	f002 fe56 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
	writerJson.name("VEML6070").beginObject();
   b430c:	4944      	ldr	r1, [pc, #272]	; (b4420 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x290>)
   b430e:	4620      	mov	r0, r4
   b4310:	f7ff fedc 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4314:	f002 fe66 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
	writerJson.name("UV").value(uv.readUV());
   b4318:	4942      	ldr	r1, [pc, #264]	; (b4424 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x294>)
   b431a:	4620      	mov	r0, r4
   b431c:	f7ff fed6 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4320:	4606      	mov	r6, r0
   b4322:	4841      	ldr	r0, [pc, #260]	; (b4428 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x298>)
   b4324:	f000 ffbb 	bl	b529e <_ZN17Adafruit_VEML60706readUVEv>
   b4328:	4601      	mov	r1, r0
   b432a:	4630      	mov	r0, r6
   b432c:	f002 fe66 	bl	b6ffc <_ZN5spark10JSONWriter5valueEi>
	writerJson.endObject();
   b4330:	4620      	mov	r0, r4
   b4332:	f002 fe41 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
	writerJson.name("BME280").beginObject();
   b4336:	493d      	ldr	r1, [pc, #244]	; (b442c <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x29c>)
   b4338:	4620      	mov	r0, r4
   b433a:	f7ff fec7 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b433e:	f002 fe51 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
	writerJson.name("P-mbar").value(bme.readPressure()/100.0F);
   b4342:	493b      	ldr	r1, [pc, #236]	; (b4430 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x2a0>)
   b4344:	4620      	mov	r0, r4
   b4346:	f7ff fec1 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b434a:	4606      	mov	r6, r0
   b434c:	4839      	ldr	r0, [pc, #228]	; (b4434 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x2a4>)
   b434e:	f000 fe4b 	bl	b4fe8 <_ZN15Adafruit_BME28012readPressureEv>
   b4352:	eddf 7a39 	vldr	s15, [pc, #228]	; b4438 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x2a8>
   b4356:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b435a:	ee17 0a90 	vmov	r0, s15
   b435e:	f003 f951 	bl	b7604 <__aeabi_f2d>
   b4362:	ec41 0b10 	vmov	d0, r0, r1
   b4366:	4630      	mov	r0, r6
   b4368:	f002 fe5a 	bl	b7020 <_ZN5spark10JSONWriter5valueEd>
	writerJson.name("RH%").value(bme.readHumidity());
   b436c:	491f      	ldr	r1, [pc, #124]	; (b43ec <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x25c>)
   b436e:	4620      	mov	r0, r4
   b4370:	f7ff feac 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4374:	4606      	mov	r6, r0
   b4376:	482f      	ldr	r0, [pc, #188]	; (b4434 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x2a4>)
   b4378:	f000 fdec 	bl	b4f54 <_ZN15Adafruit_BME28012readHumidityEv>
   b437c:	ee10 0a10 	vmov	r0, s0
   b4380:	f003 f940 	bl	b7604 <__aeabi_f2d>
   b4384:	ec41 0b10 	vmov	d0, r0, r1
   b4388:	4630      	mov	r0, r6
   b438a:	f002 fe49 	bl	b7020 <_ZN5spark10JSONWriter5valueEd>
	writerJson.name("TempC").value(bme.readTemperature());
   b438e:	4916      	ldr	r1, [pc, #88]	; (b43e8 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x258>)
   b4390:	4620      	mov	r0, r4
   b4392:	f7ff fe9b 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4396:	4606      	mov	r6, r0
   b4398:	4826      	ldr	r0, [pc, #152]	; (b4434 <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x2a4>)
   b439a:	f000 fdab 	bl	b4ef4 <_ZN15Adafruit_BME28015readTemperatureEv>
   b439e:	ee10 0a10 	vmov	r0, s0
   b43a2:	f003 f92f 	bl	b7604 <__aeabi_f2d>
   b43a6:	ec41 0b10 	vmov	d0, r0, r1
   b43aa:	4630      	mov	r0, r6
   b43ac:	f002 fe38 	bl	b7020 <_ZN5spark10JSONWriter5valueEd>
	writerJson.endObject();
   b43b0:	4620      	mov	r0, r4
   b43b2:	f002 fe01 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
class JSONWriter {
   b43b6:	7923      	ldrb	r3, [r4, #4]
   b43b8:	712b      	strb	r3, [r5, #4]
class JSONBufferWriter: public JSONWriter {
   b43ba:	4b20      	ldr	r3, [pc, #128]	; (b443c <_Z17getSensorReadingsN5spark16JSONBufferWriterE+0x2ac>)
   b43bc:	602b      	str	r3, [r5, #0]
   b43be:	68a3      	ldr	r3, [r4, #8]
   b43c0:	60ab      	str	r3, [r5, #8]
   b43c2:	68e3      	ldr	r3, [r4, #12]
   b43c4:	60eb      	str	r3, [r5, #12]
   b43c6:	6923      	ldr	r3, [r4, #16]
   b43c8:	612b      	str	r3, [r5, #16]
}
   b43ca:	4628      	mov	r0, r5
   b43cc:	b008      	add	sp, #32
   b43ce:	bd70      	pop	{r4, r5, r6, pc}
   b43d0:	2003e648 	.word	0x2003e648
   b43d4:	000b836c 	.word	0x000b836c
   b43d8:	000b8373 	.word	0x000b8373
   b43dc:	2003e60c 	.word	0x2003e60c
   b43e0:	000b8377 	.word	0x000b8377
   b43e4:	000b837d 	.word	0x000b837d
   b43e8:	000b8385 	.word	0x000b8385
   b43ec:	000b838b 	.word	0x000b838b
   b43f0:	000b838f 	.word	0x000b838f
   b43f4:	000b8398 	.word	0x000b8398
   b43f8:	000b83a1 	.word	0x000b83a1
   b43fc:	000b83aa 	.word	0x000b83aa
   b4400:	000b83b2 	.word	0x000b83b2
   b4404:	000b83bb 	.word	0x000b83bb
   b4408:	000b83c4 	.word	0x000b83c4
   b440c:	000b83cc 	.word	0x000b83cc
   b4410:	000b83d2 	.word	0x000b83d2
   b4414:	2003e5f8 	.word	0x2003e5f8
   b4418:	000b83d6 	.word	0x000b83d6
   b441c:	2003e694 	.word	0x2003e694
   b4420:	000b83d9 	.word	0x000b83d9
   b4424:	000b83e2 	.word	0x000b83e2
   b4428:	2003e6a0 	.word	0x2003e6a0
   b442c:	000b83e5 	.word	0x000b83e5
   b4430:	000b83ec 	.word	0x000b83ec
   b4434:	2003e650 	.word	0x2003e650
   b4438:	42c80000 	.word	0x42c80000
   b443c:	000b8708 	.word	0x000b8708

000b4440 <_Z24qwiicTestForConnectivityv>:
>>>>>>> collate-readings

// qwiicTestForConnectivity() checks for an ACK from an Sensor. If no ACK
// program freezes and notifies user.
void qwiicTestForConnectivity()
{
   b4440:	b508      	push	{r3, lr}
	Wire.beginTransmission(qwiicAddress);
   b4442:	f002 ff51 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b4446:	2130      	movs	r1, #48	; 0x30
   b4448:	f002 fc78 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
	//check here for an ACK from the slave, if no ACK don't allow change?
	if (Wire.endTransmission() != 0)
   b444c:	f002 ff4c 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b4450:	f002 fc7f 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
   b4454:	b128      	cbz	r0, b4462 <_Z24qwiicTestForConnectivityv+0x22>
	{
		Serial.println("Check connections. No slave attached.");
   b4456:	f002 fb75 	bl	b6b44 <_Z16_fetch_usbserialv>
   b445a:	4902      	ldr	r1, [pc, #8]	; (b4464 <_Z24qwiicTestForConnectivityv+0x24>)
   b445c:	f001 fd99 	bl	b5f92 <_ZN5Print7printlnEPKc>
		while (1);
   b4460:	e7fe      	b.n	b4460 <_Z24qwiicTestForConnectivityv+0x20>
	}
	return;
}
   b4462:	bd08      	pop	{r3, pc}
   b4464:	000b83f3 	.word	0x000b83f3

000b4468 <_Z17initializeSensorsv>:
{
   b4468:	b538      	push	{r3, r4, r5, lr}
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b446a:	4c28      	ldr	r4, [pc, #160]	; (b450c <_Z17initializeSensorsv+0xa4>)
	while (!bh.begin())
   b446c:	4828      	ldr	r0, [pc, #160]	; (b4510 <_Z17initializeSensorsv+0xa8>)
   b446e:	f001 f874 	bl	b555a <_ZN6BH17505beginEv>
   b4472:	b948      	cbnz	r0, b4488 <_Z17initializeSensorsv+0x20>
		delay(500);
   b4474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4478:	f001 ff1a 	bl	b62b0 <delay>
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b447c:	f002 fb62 	bl	b6b44 <_Z16_fetch_usbserialv>
   b4480:	4621      	mov	r1, r4
   b4482:	f001 fd86 	bl	b5f92 <_ZN5Print7printlnEPKc>
	while (!bh.begin())
   b4486:	e7f1      	b.n	b446c <_Z17initializeSensorsv+0x4>
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b4488:	4821      	ldr	r0, [pc, #132]	; (b4510 <_Z17initializeSensorsv+0xa8>)
	while (!bme.begin())
   b448a:	4d22      	ldr	r5, [pc, #136]	; (b4514 <_Z17initializeSensorsv+0xac>)
		Serial.println("Trying to connect BME280 PTH Sensor");
   b448c:	4c22      	ldr	r4, [pc, #136]	; (b4518 <_Z17initializeSensorsv+0xb0>)
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b448e:	2123      	movs	r1, #35	; 0x23
   b4490:	f001 f89f 	bl	b55d2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
	while (!bme.begin())
   b4494:	4628      	mov	r0, r5
   b4496:	f000 fed0 	bl	b523a <_ZN15Adafruit_BME2805beginEv>
   b449a:	b188      	cbz	r0, b44c0 <_Z17initializeSensorsv+0x58>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b449c:	4c1f      	ldr	r4, [pc, #124]	; (b451c <_Z17initializeSensorsv+0xb4>)
	while (!airSensor.begin())
   b449e:	f002 ff23 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b44a2:	4601      	mov	r1, r0
   b44a4:	481e      	ldr	r0, [pc, #120]	; (b4520 <_Z17initializeSensorsv+0xb8>)
   b44a6:	f001 f83c 	bl	b5522 <_ZN5SCD305beginER7TwoWire>
   b44aa:	b998      	cbnz	r0, b44d4 <_Z17initializeSensorsv+0x6c>
		delay(500);
   b44ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b44b0:	f001 fefe 	bl	b62b0 <delay>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b44b4:	f002 fb46 	bl	b6b44 <_Z16_fetch_usbserialv>
   b44b8:	4621      	mov	r1, r4
   b44ba:	f001 fd6a 	bl	b5f92 <_ZN5Print7printlnEPKc>
	while (!airSensor.begin())
   b44be:	e7ee      	b.n	b449e <_Z17initializeSensorsv+0x36>
		delay(500);
   b44c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b44c4:	f001 fef4 	bl	b62b0 <delay>
		Serial.println("Trying to connect BME280 PTH Sensor");
   b44c8:	f002 fb3c 	bl	b6b44 <_Z16_fetch_usbserialv>
   b44cc:	4621      	mov	r1, r4
   b44ce:	f001 fd60 	bl	b5f92 <_ZN5Print7printlnEPKc>
	while (!bme.begin())
   b44d2:	e7df      	b.n	b4494 <_Z17initializeSensorsv+0x2c>
	airSensor.setMeasurementInterval(25);
   b44d4:	4812      	ldr	r0, [pc, #72]	; (b4520 <_Z17initializeSensorsv+0xb8>)
   b44d6:	2119      	movs	r1, #25
   b44d8:	f001 f81e 	bl	b5518 <_ZN5SCD3022setMeasurementIntervalEt>
  	airSensor.setAutoSelfCalibration(true);
   b44dc:	2101      	movs	r1, #1
   b44de:	4810      	ldr	r0, [pc, #64]	; (b4520 <_Z17initializeSensorsv+0xb8>)
   b44e0:	f001 f80c 	bl	b54fc <_ZN5SCD3022setAutoSelfCalibrationEb>
	aqi.begin_I2C();	// Particulate sensor PM2.5
   b44e4:	f002 ff00 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b44e8:	4601      	mov	r1, r0
   b44ea:	480e      	ldr	r0, [pc, #56]	; (b4524 <_Z17initializeSensorsv+0xbc>)
   b44ec:	f000 f9dc 	bl	b48a8 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
	qwiicTestForConnectivity();
   b44f0:	f7ff ffa6 	bl	b4440 <_Z24qwiicTestForConnectivityv>
	Serial.println("Zio Qwiic Loudness Sensor Master Awake");
   b44f4:	f002 fb26 	bl	b6b44 <_Z16_fetch_usbserialv>
   b44f8:	490b      	ldr	r1, [pc, #44]	; (b4528 <_Z17initializeSensorsv+0xc0>)
   b44fa:	f001 fd4a 	bl	b5f92 <_ZN5Print7printlnEPKc>
}
   b44fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uv.begin(VEML6070_1_T);
   b4502:	480a      	ldr	r0, [pc, #40]	; (b452c <_Z17initializeSensorsv+0xc4>)
   b4504:	2101      	movs	r1, #1
   b4506:	f000 beab 	b.w	b5260 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>
   b450a:	bf00      	nop
   b450c:	000b8419 	.word	0x000b8419
   b4510:	2003e648 	.word	0x2003e648
   b4514:	2003e650 	.word	0x2003e650
   b4518:	000b843d 	.word	0x000b843d
   b451c:	000b8461 	.word	0x000b8461
   b4520:	2003e60c 	.word	0x2003e60c
   b4524:	2003e620 	.word	0x2003e620
   b4528:	000b8484 	.word	0x000b8484
   b452c:	2003e6a0 	.word	0x2003e6a0

000b4530 <_Z7goSleepv>:
void goSleep()
{
	// SystemSleepConfiguration sleepConfig;
	// sleepConfig.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1min);
	// System.sleep(sleepConfig);
	delay(sensorInterval);
   b4530:	4b01      	ldr	r3, [pc, #4]	; (b4538 <_Z7goSleepv+0x8>)
   b4532:	6818      	ldr	r0, [r3, #0]
   b4534:	f001 bebc 	b.w	b62b0 <delay>
   b4538:	2003e584 	.word	0x2003e584

000b453c <_Z9syncClockv>:
	return;
}

void syncClock()
{
   b453c:	b513      	push	{r0, r1, r4, lr}
        tm = 0;
   b453e:	2300      	movs	r3, #0
   b4540:	2200      	movs	r2, #0
        return spark_sync_time_last(nullptr, &tm);
   b4542:	4669      	mov	r1, sp
   b4544:	2000      	movs	r0, #0
        tm = 0;
   b4546:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   b454a:	f001 fac7 	bl	b5adc <spark_sync_time_last>
   b454e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4550:	f001 f8a8 	bl	b56a4 <HAL_Timer_Get_Milli_Seconds>
	unsigned long lastSync = Particle.timeSyncedLast();
	if (millis() - lastSync > ONE_DAY_MILLIS){
   b4554:	4b0d      	ldr	r3, [pc, #52]	; (b458c <_Z9syncClockv+0x50>)
   b4556:	1b00      	subs	r0, r0, r4
   b4558:	4298      	cmp	r0, r3
   b455a:	d915      	bls.n	b4588 <_Z9syncClockv+0x4c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
<<<<<<< HEAD
   b449a:	f001 fa05 	bl	b58a8 <spark_cloud_flag_connected>
	if (Particle.connected() == false) {
   b449e:	b908      	cbnz	r0, b44a4 <loop+0xc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b44a0:	f001 f9fa 	bl	b5898 <spark_cloud_flag_connect>
	digitalWrite(D7,HIGH);
   b44a4:	2101      	movs	r1, #1
   b44a6:	2007      	movs	r0, #7
   b44a8:	f002 fd7b 	bl	b6fa2 <digitalWrite>
	counter++;
   b44ac:	4e27      	ldr	r6, [pc, #156]	; (b454c <loop+0xb4>)
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b44ae:	4c28      	ldr	r4, [pc, #160]	; (b4550 <loop+0xb8>)
	dataJson = (char *) malloc(500);
   b44b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b44b4:	f001 fa18 	bl	b58e8 <malloc>
	counter++;
   b44b8:	6833      	ldr	r3, [r6, #0]
	dataJson = (char *) malloc(500);
   b44ba:	4605      	mov	r5, r0
	counter++;
   b44bc:	3301      	adds	r3, #1
   b44be:	6033      	str	r3, [r6, #0]
	getSensorReadings(dataJson);
   b44c0:	f7ff fe5a 	bl	b4178 <_Z17getSensorReadingsPc>
   b44c4:	4629      	mov	r1, r5
   b44c6:	4620      	mov	r0, r4
   b44c8:	f001 fbf8 	bl	b5cbc <_ZN6String6concatEPKc>
	Serial.println(dataBuffer);
   b44cc:	f002 fa24 	bl	b6918 <_Z16_fetch_usbserialv>
   b44d0:	6821      	ldr	r1, [r4, #0]
   b44d2:	f001 fc7e 	bl	b5dd2 <_ZN5Print7printlnEPKc>
	Serial.println("");
   b44d6:	f002 fa1f 	bl	b6918 <_Z16_fetch_usbserialv>
   b44da:	491e      	ldr	r1, [pc, #120]	; (b4554 <loop+0xbc>)
   b44dc:	f001 fc79 	bl	b5dd2 <_ZN5Print7printlnEPKc>
	if (counter == READINGSNO)
   b44e0:	4b1d      	ldr	r3, [pc, #116]	; (b4558 <loop+0xc0>)
   b44e2:	6832      	ldr	r2, [r6, #0]
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	429a      	cmp	r2, r3
   b44e8:	d121      	bne.n	b452e <loop+0x96>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b44ea:	4b1c      	ldr	r3, [pc, #112]	; (b455c <loop+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b44ec:	491c      	ldr	r1, [pc, #112]	; (b4560 <loop+0xc8>)
   b44ee:	781b      	ldrb	r3, [r3, #0]
   b44f0:	f88d 3000 	strb.w	r3, [sp]
   b44f4:	6822      	ldr	r2, [r4, #0]
   b44f6:	233c      	movs	r3, #60	; 0x3c
   b44f8:	a802      	add	r0, sp, #8
   b44fa:	f001 ffcb 	bl	b6494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b44fe:	9c03      	ldr	r4, [sp, #12]
   b4500:	b17c      	cbz	r4, b4522 <loop+0x8a>
      if (--_M_use_count == 0)
   b4502:	6863      	ldr	r3, [r4, #4]
   b4504:	3b01      	subs	r3, #1
   b4506:	6063      	str	r3, [r4, #4]
   b4508:	b95b      	cbnz	r3, b4522 <loop+0x8a>
          _M_dispose();
   b450a:	6823      	ldr	r3, [r4, #0]
   b450c:	4620      	mov	r0, r4
   b450e:	689b      	ldr	r3, [r3, #8]
   b4510:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4512:	68a3      	ldr	r3, [r4, #8]
   b4514:	3b01      	subs	r3, #1
   b4516:	60a3      	str	r3, [r4, #8]
   b4518:	b91b      	cbnz	r3, b4522 <loop+0x8a>
            _M_destroy();
   b451a:	6823      	ldr	r3, [r4, #0]
   b451c:	4620      	mov	r0, r4
   b451e:	68db      	ldr	r3, [r3, #12]
   b4520:	4798      	blx	r3
		counter = 0;
   b4522:	2300      	movs	r3, #0
		dataBuffer = "";
   b4524:	490b      	ldr	r1, [pc, #44]	; (b4554 <loop+0xbc>)
   b4526:	480a      	ldr	r0, [pc, #40]	; (b4550 <loop+0xb8>)
		counter = 0;
   b4528:	6033      	str	r3, [r6, #0]
		dataBuffer = "";
   b452a:	f001 fb9e 	bl	b5c6a <_ZN6StringaSEPKc>
	free(dataJson);
   b452e:	4628      	mov	r0, r5
   b4530:	f001 f9e2 	bl	b58f8 <free>
	digitalWrite(D7,LOW);
   b4534:	2100      	movs	r1, #0
   b4536:	2007      	movs	r0, #7
   b4538:	f002 fd33 	bl	b6fa2 <digitalWrite>
=======
   b455c:	f001 fa96 	bl	b5a8c <spark_cloud_flag_connected>
        if (!connected()) {
   b4560:	b110      	cbz	r0, b4568 <_Z9syncClockv+0x2c>
        return spark_sync_time(NULL);
   b4562:	2000      	movs	r0, #0
   b4564:	f001 faaa 	bl	b5abc <spark_sync_time>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4568:	2000      	movs	r0, #0
   b456a:	f001 faaf 	bl	b5acc <spark_sync_time_pending>
   b456e:	b128      	cbz	r0, b457c <_Z9syncClockv+0x40>
   b4570:	f7ff fda5 	bl	b40be <_ZN10CloudClass12disconnectedEv>
   b4574:	b910      	cbnz	r0, b457c <_Z9syncClockv+0x40>
    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   b4576:	f001 fa79 	bl	b5a6c <spark_process>
        while (_while() && !_condition()) {
   b457a:	e7f5      	b.n	b4568 <_Z9syncClockv+0x2c>
   b457c:	2000      	movs	r0, #0
   b457e:	f001 faa5 	bl	b5acc <spark_sync_time_pending>
   b4582:	b108      	cbz	r0, b4588 <_Z9syncClockv+0x4c>
   b4584:	f7ff fd9b 	bl	b40be <_ZN10CloudClass12disconnectedEv>
		Particle.syncTime();
		waitUntil(Particle.syncTimeDone);
	}
	return;
   b4588:	b002      	add	sp, #8
   b458a:	bd10      	pop	{r4, pc}
   b458c:	05265c00 	.word	0x05265c00

000b4590 <setup>:
void setup() {
   b4590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static void connect(void) {
        spark_cloud_flag_connect();
   b4592:	f001 fa73 	bl	b5a7c <spark_cloud_flag_connect>
	pinMode(D7,OUTPUT);
   b4596:	2101      	movs	r1, #1
   b4598:	2007      	movs	r0, #7
   b459a:	f002 fe11 	bl	b71c0 <pinMode>
	Wire.begin();
   b459e:	f002 fea3 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b45a2:	f002 fb99 	bl	b6cd8 <_ZN7TwoWire5beginEv>
	Serial.begin();
   b45a6:	f002 facd 	bl	b6b44 <_Z16_fetch_usbserialv>
   b45aa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45ae:	f002 fabd 	bl	b6b2c <_ZN9USBSerial5beginEl>
	initializeSensors();
   b45b2:	f7ff ff59 	bl	b4468 <_Z17initializeSensorsv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b45b6:	f001 fa69 	bl	b5a8c <spark_cloud_flag_connected>
   b45ba:	b910      	cbnz	r0, b45c2 <setup+0x32>
            spark_process();
   b45bc:	f001 fa56 	bl	b5a6c <spark_process>
        while (_while() && !_condition()) {
   b45c0:	e7f9      	b.n	b45b6 <setup+0x26>
   b45c2:	f001 fa63 	bl	b5a8c <spark_cloud_flag_connected>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b45c6:	2203      	movs	r2, #3
   b45c8:	f241 3388 	movw	r3, #5000	; 0x1388
   b45cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
	Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
   b45d0:	a801      	add	r0, sp, #4
        bool clearSession) :
   b45d2:	2301      	movs	r3, #1
   b45d4:	f8ad 300c 	strh.w	r3, [sp, #12]
   b45d8:	f001 ff6f 	bl	b64ba <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
	syncClock();
   b45dc:	f7ff ffae 	bl	b453c <_Z9syncClockv>
        clearSession_(clearSession) {
   b45e0:	2300      	movs	r3, #0
	Particle.disconnect();
   b45e2:	a801      	add	r0, sp, #4
   b45e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b45e8:	f8ad 300c 	strh.w	r3, [sp, #12]
   b45ec:	f001 ff4b 	bl	b6486 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
	waitUntil(Particle.disconnected);
   b45f0:	f7ff fd65 	bl	b40be <_ZN10CloudClass12disconnectedEv>
   b45f4:	b910      	cbnz	r0, b45fc <setup+0x6c>
            spark_process();
   b45f6:	f001 fa39 	bl	b5a6c <spark_process>
        while (_while() && !_condition()) {
   b45fa:	e7f9      	b.n	b45f0 <setup+0x60>
   b45fc:	f7ff fd5f 	bl	b40be <_ZN10CloudClass12disconnectedEv>
	WiFi.off();
   b4600:	4804      	ldr	r0, [pc, #16]	; (b4614 <setup+0x84>)
   b4602:	f7ff fd56 	bl	b40b2 <_ZN5spark9WiFiClass3offEv>
>>>>>>> collate-readings

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
<<<<<<< HEAD
   b453c:	f64f 50e8 	movw	r0, #65000	; 0xfde8
}
   b4540:	b004      	add	sp, #16
   b4542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4546:	f001 bdd3 	b.w	b60f0 <delay>
   b454a:	bf00      	nop
   b454c:	2003e684 	.word	0x2003e684
   b4550:	2003e68c 	.word	0x2003e68c
   b4554:	000b84d0 	.word	0x000b84d0
   b4558:	2003e584 	.word	0x2003e584
   b455c:	2003e5fa 	.word	0x2003e5fa
   b4560:	000b81c9 	.word	0x000b81c9

000b4564 <_Z24qwiicTestForConnectivityv>:

// qwiicTestForConnectivity() checks for an ACK from an Sensor. If no ACK
// program freezes and notifies user.
void qwiicTestForConnectivity()
{
   b4564:	b508      	push	{r3, lr}
	Wire.beginTransmission(qwiicAddress);
   b4566:	f002 fd9f 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b456a:	2130      	movs	r1, #48	; 0x30
   b456c:	f002 fad0 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
	//check here for an ACK from the slave, if no ACK don't allow change?
	if (Wire.endTransmission() != 0)
   b4570:	f002 fd9a 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b4574:	f002 fad7 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
   b4578:	b128      	cbz	r0, b4586 <_Z24qwiicTestForConnectivityv+0x22>
	{
		Serial.println("Check connections. No slave attached.");
   b457a:	f002 f9cd 	bl	b6918 <_Z16_fetch_usbserialv>
   b457e:	4902      	ldr	r1, [pc, #8]	; (b4588 <_Z24qwiicTestForConnectivityv+0x24>)
   b4580:	f001 fc27 	bl	b5dd2 <_ZN5Print7printlnEPKc>
		while (1);
   b4584:	e7fe      	b.n	b4584 <_Z24qwiicTestForConnectivityv+0x20>
	}
	return;
   b4586:	bd08      	pop	{r3, pc}
   b4588:	000b81d5 	.word	0x000b81d5

000b458c <_Z17initializeSensorsv>:
{
   b458c:	b538      	push	{r3, r4, r5, lr}
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b458e:	4c28      	ldr	r4, [pc, #160]	; (b4630 <_Z17initializeSensorsv+0xa4>)
	while (!bh.begin())
   b4590:	4828      	ldr	r0, [pc, #160]	; (b4634 <_Z17initializeSensorsv+0xa8>)
   b4592:	f000 fef8 	bl	b5386 <_ZN6BH17505beginEv>
   b4596:	b948      	cbnz	r0, b45ac <_Z17initializeSensorsv+0x20>
		delay(500);
   b4598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b459c:	f001 fda8 	bl	b60f0 <delay>
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b45a0:	f002 f9ba 	bl	b6918 <_Z16_fetch_usbserialv>
   b45a4:	4621      	mov	r1, r4
   b45a6:	f001 fc14 	bl	b5dd2 <_ZN5Print7printlnEPKc>
	while (!bh.begin())
   b45aa:	e7f1      	b.n	b4590 <_Z17initializeSensorsv+0x4>
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b45ac:	4821      	ldr	r0, [pc, #132]	; (b4634 <_Z17initializeSensorsv+0xa8>)
	while (!bme.begin())
   b45ae:	4d22      	ldr	r5, [pc, #136]	; (b4638 <_Z17initializeSensorsv+0xac>)
		Serial.println("Trying to connect BME280 PTH Sensor");
   b45b0:	4c22      	ldr	r4, [pc, #136]	; (b463c <_Z17initializeSensorsv+0xb0>)
	bh.set_sensor_mode(BH1750::forced_mode_low_res);
   b45b2:	2123      	movs	r1, #35	; 0x23
   b45b4:	f000 ff23 	bl	b53fe <_ZN6BH175015set_sensor_modeENS_8SensModeE>
	while (!bme.begin())
   b45b8:	4628      	mov	r0, r5
   b45ba:	f000 fd54 	bl	b5066 <_ZN15Adafruit_BME2805beginEv>
   b45be:	b188      	cbz	r0, b45e4 <_Z17initializeSensorsv+0x58>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b45c0:	4c1f      	ldr	r4, [pc, #124]	; (b4640 <_Z17initializeSensorsv+0xb4>)
	while (!airSensor.begin())
   b45c2:	f002 fd71 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b45c6:	4601      	mov	r1, r0
   b45c8:	481e      	ldr	r0, [pc, #120]	; (b4644 <_Z17initializeSensorsv+0xb8>)
   b45ca:	f000 fec0 	bl	b534e <_ZN5SCD305beginER7TwoWire>
   b45ce:	b998      	cbnz	r0, b45f8 <_Z17initializeSensorsv+0x6c>
		delay(500);
   b45d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b45d4:	f001 fd8c 	bl	b60f0 <delay>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b45d8:	f002 f99e 	bl	b6918 <_Z16_fetch_usbserialv>
   b45dc:	4621      	mov	r1, r4
   b45de:	f001 fbf8 	bl	b5dd2 <_ZN5Print7printlnEPKc>
	while (!airSensor.begin())
   b45e2:	e7ee      	b.n	b45c2 <_Z17initializeSensorsv+0x36>
		delay(500);
   b45e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b45e8:	f001 fd82 	bl	b60f0 <delay>
		Serial.println("Trying to connect BME280 PTH Sensor");
   b45ec:	f002 f994 	bl	b6918 <_Z16_fetch_usbserialv>
   b45f0:	4621      	mov	r1, r4
   b45f2:	f001 fbee 	bl	b5dd2 <_ZN5Print7printlnEPKc>
	while (!bme.begin())
   b45f6:	e7df      	b.n	b45b8 <_Z17initializeSensorsv+0x2c>
	airSensor.setMeasurementInterval(60);
   b45f8:	4812      	ldr	r0, [pc, #72]	; (b4644 <_Z17initializeSensorsv+0xb8>)
   b45fa:	213c      	movs	r1, #60	; 0x3c
   b45fc:	f000 fea2 	bl	b5344 <_ZN5SCD3022setMeasurementIntervalEt>
  	airSensor.setAutoSelfCalibration(true);
   b4600:	2101      	movs	r1, #1
   b4602:	4810      	ldr	r0, [pc, #64]	; (b4644 <_Z17initializeSensorsv+0xb8>)
   b4604:	f000 fe90 	bl	b5328 <_ZN5SCD3022setAutoSelfCalibrationEb>
	aqi.begin_I2C();	// Particulate sensor PM2.5
   b4608:	f002 fd4e 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b460c:	4601      	mov	r1, r0
   b460e:	480e      	ldr	r0, [pc, #56]	; (b4648 <_Z17initializeSensorsv+0xbc>)
   b4610:	f000 f860 	bl	b46d4 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
	qwiicTestForConnectivity();
   b4614:	f7ff ffa6 	bl	b4564 <_Z24qwiicTestForConnectivityv>
	Serial.println("Zio Qwiic Loudness Sensor Master Awake");
   b4618:	f002 f97e 	bl	b6918 <_Z16_fetch_usbserialv>
   b461c:	490b      	ldr	r1, [pc, #44]	; (b464c <_Z17initializeSensorsv+0xc0>)
   b461e:	f001 fbd8 	bl	b5dd2 <_ZN5Print7printlnEPKc>
}
   b4622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uv.begin(VEML6070_1_T);
   b4626:	480a      	ldr	r0, [pc, #40]	; (b4650 <_Z17initializeSensorsv+0xc4>)
   b4628:	2101      	movs	r1, #1
   b462a:	f000 bd2f 	b.w	b508c <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>
   b462e:	bf00      	nop
   b4630:	000b81fb 	.word	0x000b81fb
   b4634:	2003e638 	.word	0x2003e638
   b4638:	2003e640 	.word	0x2003e640
   b463c:	000b821f 	.word	0x000b821f
   b4640:	000b8243 	.word	0x000b8243
   b4644:	2003e5fc 	.word	0x2003e5fc
   b4648:	2003e610 	.word	0x2003e610
   b464c:	000b8266 	.word	0x000b8266
   b4650:	2003e69c 	.word	0x2003e69c

000b4654 <setup>:
void setup() {
   b4654:	b508      	push	{r3, lr}
	Wire.begin();
   b4656:	f002 fd27 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b465a:	f002 fa27 	bl	b6aac <_ZN7TwoWire5beginEv>
	pinMode(D7,OUTPUT);
   b465e:	2101      	movs	r1, #1
   b4660:	2007      	movs	r0, #7
   b4662:	f002 fc8d 	bl	b6f80 <pinMode>
	Serial.begin(9600);
   b4666:	f002 f957 	bl	b6918 <_Z16_fetch_usbserialv>
   b466a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b466e:	f002 f947 	bl	b6900 <_ZN9USBSerial5beginEl>
}
   b4672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	initializeSensors();
   b4676:	f7ff bf89 	b.w	b458c <_Z17initializeSensorsv>
	...

000b467c <_GLOBAL__sub_I_bh>:
   b467c:	b508      	push	{r3, lr}
        val_(val) {
   b467e:	4b0c      	ldr	r3, [pc, #48]	; (b46b0 <_GLOBAL__sub_I_bh+0x34>)
   b4680:	2200      	movs	r2, #0
   b4682:	701a      	strb	r2, [r3, #0]
BH1750 bh;
   b4684:	f002 fd10 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b4688:	2123      	movs	r1, #35	; 0x23
   b468a:	4602      	mov	r2, r0
   b468c:	4809      	ldr	r0, [pc, #36]	; (b46b4 <_GLOBAL__sub_I_bh+0x38>)
   b468e:	f000 fe75 	bl	b537c <_ZN6BH1750C1EhR7TwoWire>
Adafruit_BME280 bme;
   b4692:	4809      	ldr	r0, [pc, #36]	; (b46b8 <_GLOBAL__sub_I_bh+0x3c>)
   b4694:	f000 f8a0 	bl	b47d8 <_ZN15Adafruit_BME280C1Ev>
SCD30 airSensor;
   b4698:	4808      	ldr	r0, [pc, #32]	; (b46bc <_GLOBAL__sub_I_bh+0x40>)
   b469a:	f000 fd3e 	bl	b511a <_ZN5SCD30C1Ev>
Adafruit_PM25AQI aqi = Adafruit_PM25AQI();
   b469e:	4808      	ldr	r0, [pc, #32]	; (b46c0 <_GLOBAL__sub_I_bh+0x44>)
   b46a0:	f000 f814 	bl	b46cc <_ZN16Adafruit_PM25AQIC1Ev>
   b46a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String dataBuffer = "";
   b46a8:	4906      	ldr	r1, [pc, #24]	; (b46c4 <_GLOBAL__sub_I_bh+0x48>)
   b46aa:	4807      	ldr	r0, [pc, #28]	; (b46c8 <_GLOBAL__sub_I_bh+0x4c>)
   b46ac:	f001 bac9 	b.w	b5c42 <_ZN6StringC1EPK19__FlashStringHelper>
   b46b0:	2003e5fa 	.word	0x2003e5fa
   b46b4:	2003e638 	.word	0x2003e638
   b46b8:	2003e640 	.word	0x2003e640
   b46bc:	2003e5fc 	.word	0x2003e5fc
   b46c0:	2003e610 	.word	0x2003e610
   b46c4:	000b84d0 	.word	0x000b84d0
   b46c8:	2003e68c 	.word	0x2003e68c

000b46cc <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
   b46cc:	2200      	movs	r2, #0
   b46ce:	e9c0 2200 	strd	r2, r2, [r0]
   b46d2:	4770      	bx	lr

000b46d4 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b46d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b46d6:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b46d8:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b46da:	b953      	cbnz	r3, b46f2 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
   b46dc:	2010      	movs	r0, #16
   b46de:	9101      	str	r1, [sp, #4]
   b46e0:	f7ff fcd9 	bl	b4096 <_Znwj>
   b46e4:	4605      	mov	r5, r0
   b46e6:	b118      	cbz	r0, b46f0 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
   b46e8:	9a01      	ldr	r2, [sp, #4]
   b46ea:	2112      	movs	r1, #18
   b46ec:	f000 f808 	bl	b4700 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b46f0:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
   b46f2:	6820      	ldr	r0, [r4, #0]
   b46f4:	2101      	movs	r1, #1
    return false;
  }

  return true;
}
   b46f6:	b003      	add	sp, #12
   b46f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
   b46fc:	f000 b81c 	b.w	b4738 <_ZN18Adafruit_I2CDevice5beginEb>

000b4700 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b4700:	6042      	str	r2, [r0, #4]
  _begun = false;
   b4702:	2200      	movs	r2, #0
   b4704:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b4706:	2220      	movs	r2, #32
  _addr = addr;
   b4708:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b470a:	60c2      	str	r2, [r0, #12]
#endif
}
   b470c:	4770      	bx	lr

000b470e <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b470e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b4710:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b4712:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b4714:	b153      	cbz	r3, b472c <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b4716:	7821      	ldrb	r1, [r4, #0]
   b4718:	6860      	ldr	r0, [r4, #4]
   b471a:	f002 f9f9 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b471e:	6860      	ldr	r0, [r4, #4]
   b4720:	f002 fa01 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
   b4724:	fab0 f080 	clz	r0, r0
   b4728:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b472a:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b472c:	2101      	movs	r1, #1
   b472e:	f000 f803 	bl	b4738 <_ZN18Adafruit_I2CDevice5beginEb>
   b4732:	2800      	cmp	r0, #0
   b4734:	d1ef      	bne.n	b4716 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b4736:	e7f8      	b.n	b472a <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b4738 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4738:	b538      	push	{r3, r4, r5, lr}
   b473a:	4604      	mov	r4, r0
  _wire->begin();
   b473c:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b473e:	460d      	mov	r5, r1
  _wire->begin();
   b4740:	f002 f9b4 	bl	b6aac <_ZN7TwoWire5beginEv>
  _begun = true;
   b4744:	2001      	movs	r0, #1
   b4746:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b4748:	b125      	cbz	r5, b4754 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b474a:	4620      	mov	r0, r4
}
   b474c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b4750:	f7ff bfdd 	b.w	b470e <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b4754:	bd38      	pop	{r3, r4, r5, pc}

000b4756 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4756:	4770      	bx	lr

000b4758 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4758:	b510      	push	{r4, lr}
  }
   b475a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b475c:	4604      	mov	r4, r0
  }
   b475e:	f7ff fc9e 	bl	b409e <_ZdlPvj>
   b4762:	4620      	mov	r0, r4
   b4764:	bd10      	pop	{r4, pc}

000b4766 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4766:	b40e      	push	{r1, r2, r3}
   b4768:	b503      	push	{r0, r1, lr}
   b476a:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b476c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b476e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4772:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4774:	f001 fb55 	bl	b5e22 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4778:	b002      	add	sp, #8
   b477a:	f85d eb04 	ldr.w	lr, [sp], #4
   b477e:	b003      	add	sp, #12
   b4780:	4770      	bx	lr
	...

000b4784 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4784:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4786:	4604      	mov	r4, r0
   b4788:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b478a:	7922      	ldrb	r2, [r4, #4]
   b478c:	68a3      	ldr	r3, [r4, #8]
   b478e:	b132      	cbz	r2, b479e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4790:	b9a3      	cbnz	r3, b47bc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4792:	490b      	ldr	r1, [pc, #44]	; (b47c0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4794:	b002      	add	sp, #8
   b4796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b479a:	f001 bb07 	b.w	b5dac <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b479e:	4a09      	ldr	r2, [pc, #36]	; (b47c4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b47a0:	7b26      	ldrb	r6, [r4, #12]
   b47a2:	4d09      	ldr	r5, [pc, #36]	; (b47c8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b47a4:	4909      	ldr	r1, [pc, #36]	; (b47cc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b47a6:	7b64      	ldrb	r4, [r4, #13]
   b47a8:	2e01      	cmp	r6, #1
   b47aa:	bf18      	it	ne
   b47ac:	4629      	movne	r1, r5
   b47ae:	e9cd 1400 	strd	r1, r4, [sp]
   b47b2:	4907      	ldr	r1, [pc, #28]	; (b47d0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b47b4:	f7ff ffd7 	bl	b4766 <_ZN5Print6printfEPKcz>
  }
   b47b8:	b002      	add	sp, #8
   b47ba:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b47bc:	4a05      	ldr	r2, [pc, #20]	; (b47d4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b47be:	e7ef      	b.n	b47a0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b47c0:	000b829e 	.word	0x000b829e
   b47c4:	000b84d0 	.word	0x000b84d0
   b47c8:	000b829a 	.word	0x000b829a
   b47cc:	000b8296 	.word	0x000b8296
   b47d0:	000b82b4 	.word	0x000b82b4
   b47d4:	000b828d 	.word	0x000b828d

000b47d8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b47d8:	f04f 33ff 	mov.w	r3, #4294967295
   b47dc:	6103      	str	r3, [r0, #16]
{ }
   b47de:	4770      	bx	lr

000b47e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b47e0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b47e2:	4c0b      	ldr	r4, [pc, #44]	; (b4810 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b47e4:	7821      	ldrb	r1, [r4, #0]
   b47e6:	f3bf 8f5b 	dmb	ish
   b47ea:	f011 0101 	ands.w	r1, r1, #1
   b47ee:	d10b      	bne.n	b4808 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47f0:	4620      	mov	r0, r4
   b47f2:	9101      	str	r1, [sp, #4]
   b47f4:	f7ff fc55 	bl	b40a2 <__cxa_guard_acquire>
   b47f8:	9901      	ldr	r1, [sp, #4]
   b47fa:	b128      	cbz	r0, b4808 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47fc:	4805      	ldr	r0, [pc, #20]	; (b4814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47fe:	f001 f917 	bl	b5a30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4802:	4620      	mov	r0, r4
   b4804:	f7ff fc52 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b4808:	4802      	ldr	r0, [pc, #8]	; (b4814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b480a:	b002      	add	sp, #8
   b480c:	bd10      	pop	{r4, pc}
   b480e:	bf00      	nop
   b4810:	2003e6a0 	.word	0x2003e6a0
   b4814:	2003e6a4 	.word	0x2003e6a4

000b4818 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4818:	b508      	push	{r3, lr}
        instance().endTransaction();
   b481a:	f7ff ffe1 	bl	b47e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b481e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b4822:	f001 b923 	b.w	b5a6c <_ZN8SPIClass14endTransactionEv>

000b4826 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b4826:	b507      	push	{r0, r1, r2, lr}
   b4828:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b482a:	f7ff ffd9 	bl	b47e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b482e:	9901      	ldr	r1, [sp, #4]
    }
   b4830:	b003      	add	sp, #12
   b4832:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b4836:	f001 b933 	b.w	b5aa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b483a <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b483a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b483e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4842:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4844:	4605      	mov	r5, r0
   b4846:	460f      	mov	r7, r1
    if (_sck == -1)
   b4848:	d106      	bne.n	b4858 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b484a:	f7ff ffc9 	bl	b47e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b484e:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4854:	f001 b992 	b.w	b5b7c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4858:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b485a:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b485c:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4860:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4864:	2100      	movs	r1, #0
   b4866:	b280      	uxth	r0, r0
   b4868:	f002 fb9b 	bl	b6fa2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b486c:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4870:	fa08 f106 	lsl.w	r1, r8, r6
   b4874:	4039      	ands	r1, r7
   b4876:	b280      	uxth	r0, r0
   b4878:	f002 fb93 	bl	b6fa2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b487c:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4880:	2101      	movs	r1, #1
   b4882:	b280      	uxth	r0, r0
   b4884:	f002 fb8d 	bl	b6fa2 <digitalWrite>
        if (digitalRead(_miso))
   b4888:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b488c:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b488e:	b280      	uxth	r0, r0
        reply <<= 1;
   b4890:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4892:	f002 fb9f 	bl	b6fd4 <digitalRead>
   b4896:	b108      	cbz	r0, b489c <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4898:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b489c:	3e01      	subs	r6, #1
   b489e:	d2df      	bcs.n	b4860 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b48a0:	4620      	mov	r0, r4
   b48a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b48a8 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b48a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b48aa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b48ae:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b48b0:	4604      	mov	r4, r0
   b48b2:	460e      	mov	r6, r1
   b48b4:	4615      	mov	r5, r2
    if (_cs == -1) {
   b48b6:	d113      	bne.n	b48e0 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b48b8:	7901      	ldrb	r1, [r0, #4]
   b48ba:	6800      	ldr	r0, [r0, #0]
   b48bc:	f002 f928 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b48c0:	6820      	ldr	r0, [r4, #0]
   b48c2:	6803      	ldr	r3, [r0, #0]
   b48c4:	4631      	mov	r1, r6
   b48c6:	689b      	ldr	r3, [r3, #8]
   b48c8:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b48ca:	6820      	ldr	r0, [r4, #0]
   b48cc:	6803      	ldr	r3, [r0, #0]
   b48ce:	4629      	mov	r1, r5
   b48d0:	689b      	ldr	r3, [r3, #8]
   b48d2:	4798      	blx	r3
        _wire -> endTransmission();
   b48d4:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b48d6:	b004      	add	sp, #16
   b48d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b48dc:	f002 b923 	b.w	b6b26 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b48e0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b48e4:	3301      	adds	r3, #1
   b48e6:	d10c      	bne.n	b4902 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b48e8:	4b16      	ldr	r3, [pc, #88]	; (b4944 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b48ea:	9300      	str	r3, [sp, #0]
   b48ec:	2300      	movs	r3, #0
   b48ee:	f88d 3004 	strb.w	r3, [sp, #4]
   b48f2:	4b15      	ldr	r3, [pc, #84]	; (b4948 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b48f4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b48f6:	4668      	mov	r0, sp
   b48f8:	2301      	movs	r3, #1
   b48fa:	f8ad 300c 	strh.w	r3, [sp, #12]
   b48fe:	f7ff ff92 	bl	b4826 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4902:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4906:	2100      	movs	r1, #0
   b4908:	b280      	uxth	r0, r0
   b490a:	f002 fb4a 	bl	b6fa2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b490e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4912:	4620      	mov	r0, r4
   b4914:	f7ff ff91 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4918:	4629      	mov	r1, r5
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff ff8d 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4920:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4924:	2101      	movs	r1, #1
   b4926:	b280      	uxth	r0, r0
   b4928:	f002 fb3b 	bl	b6fa2 <digitalWrite>
    if (_sck == -1)
   b492c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4930:	3301      	adds	r3, #1
   b4932:	d104      	bne.n	b493e <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4934:	b004      	add	sp, #16
   b4936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b493a:	f7ff bf6d 	b.w	b4818 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b493e:	b004      	add	sp, #16
   b4940:	bd70      	pop	{r4, r5, r6, pc}
   b4942:	bf00      	nop
   b4944:	000b82dc 	.word	0x000b82dc
   b4948:	0007a120 	.word	0x0007a120

000b494c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b494e:	00db      	lsls	r3, r3, #3
   b4950:	f002 0207 	and.w	r2, r2, #7
   b4954:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4958:	4313      	orrs	r3, r2
   b495a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b495e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4962:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4966:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b496a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b496e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4972:	f366 1347 	bfi	r3, r6, #5, #3
   b4976:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b497a:	00ed      	lsls	r5, r5, #3
   b497c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4980:	f007 0707 	and.w	r7, r7, #7
   b4984:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4988:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b498c:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b498e:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4990:	431d      	orrs	r5, r3
   b4992:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4996:	f006 0207 	and.w	r2, r6, #7
   b499a:	21f2      	movs	r1, #242	; 0xf2
   b499c:	f7ff ff84 	bl	b48a8 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b49a0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b49a4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b49a8:	f002 0107 	and.w	r1, r2, #7
   b49ac:	009b      	lsls	r3, r3, #2
   b49ae:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b49b2:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b49b6:	4620      	mov	r0, r4
   b49b8:	21f5      	movs	r1, #245	; 0xf5
   b49ba:	f7ff ff75 	bl	b48a8 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b49be:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b49c2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b49c6:	f002 0107 	and.w	r1, r2, #7
   b49ca:	009b      	lsls	r3, r3, #2
   b49cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b49d0:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b49d4:	4620      	mov	r0, r4
   b49d6:	21f4      	movs	r1, #244	; 0xf4
}
   b49d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b49dc:	f7ff bf64 	b.w	b48a8 <_ZN15Adafruit_BME2806write8Ehh>

000b49e0 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b49e0:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b49e2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b49e6:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b49e8:	b085      	sub	sp, #20
   b49ea:	4604      	mov	r4, r0
   b49ec:	460d      	mov	r5, r1
    if (_cs == -1) {
   b49ee:	d118      	bne.n	b4a22 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49f0:	7901      	ldrb	r1, [r0, #4]
   b49f2:	6800      	ldr	r0, [r0, #0]
   b49f4:	f002 f88c 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b49f8:	6820      	ldr	r0, [r4, #0]
   b49fa:	6803      	ldr	r3, [r0, #0]
   b49fc:	4629      	mov	r1, r5
   b49fe:	689b      	ldr	r3, [r3, #8]
   b4a00:	4798      	blx	r3
        _wire -> endTransmission();
   b4a02:	6820      	ldr	r0, [r4, #0]
   b4a04:	f002 f88f 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4a08:	7921      	ldrb	r1, [r4, #4]
   b4a0a:	6820      	ldr	r0, [r4, #0]
   b4a0c:	2201      	movs	r2, #1
   b4a0e:	f002 f87c 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4a12:	6820      	ldr	r0, [r4, #0]
   b4a14:	6803      	ldr	r3, [r0, #0]
   b4a16:	695b      	ldr	r3, [r3, #20]
   b4a18:	4798      	blx	r3
   b4a1a:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4a1c:	4628      	mov	r0, r5
   b4a1e:	b005      	add	sp, #20
   b4a20:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4a22:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a26:	3301      	adds	r3, #1
   b4a28:	d10c      	bne.n	b4a44 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4a2a:	4b15      	ldr	r3, [pc, #84]	; (b4a80 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4a2c:	9300      	str	r3, [sp, #0]
   b4a2e:	2300      	movs	r3, #0
   b4a30:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a34:	4b13      	ldr	r3, [pc, #76]	; (b4a84 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4a36:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a38:	4668      	mov	r0, sp
   b4a3a:	2301      	movs	r3, #1
   b4a3c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a40:	f7ff fef1 	bl	b4826 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a44:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a48:	2100      	movs	r1, #0
   b4a4a:	b280      	uxth	r0, r0
   b4a4c:	f002 faa9 	bl	b6fa2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a50:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a54:	4620      	mov	r0, r4
   b4a56:	f7ff fef0 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4a5a:	2100      	movs	r1, #0
   b4a5c:	4620      	mov	r0, r4
   b4a5e:	f7ff feec 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
   b4a62:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4a64:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a68:	2101      	movs	r1, #1
   b4a6a:	b280      	uxth	r0, r0
   b4a6c:	f002 fa99 	bl	b6fa2 <digitalWrite>
        if (_sck == -1)
   b4a70:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a74:	3301      	adds	r3, #1
   b4a76:	d1d1      	bne.n	b4a1c <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4a78:	f7ff fece 	bl	b4818 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4a7c:	e7ce      	b.n	b4a1c <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4a7e:	bf00      	nop
   b4a80:	000b82dc 	.word	0x000b82dc
   b4a84:	0007a120 	.word	0x0007a120

000b4a88 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4a88:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4a8a:	21f3      	movs	r1, #243	; 0xf3
   b4a8c:	f7ff ffa8 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4a90:	f000 0001 	and.w	r0, r0, #1
   b4a94:	bd08      	pop	{r3, pc}
	...

000b4a98 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4a98:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4a9a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a9e:	3301      	adds	r3, #1
{
   b4aa0:	b085      	sub	sp, #20
   b4aa2:	4604      	mov	r4, r0
   b4aa4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4aa6:	d11f      	bne.n	b4ae8 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4aa8:	7901      	ldrb	r1, [r0, #4]
   b4aaa:	6800      	ldr	r0, [r0, #0]
   b4aac:	f002 f830 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4ab0:	6820      	ldr	r0, [r4, #0]
   b4ab2:	6803      	ldr	r3, [r0, #0]
   b4ab4:	4629      	mov	r1, r5
   b4ab6:	689b      	ldr	r3, [r3, #8]
   b4ab8:	4798      	blx	r3
        _wire -> endTransmission();
   b4aba:	6820      	ldr	r0, [r4, #0]
   b4abc:	f002 f833 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4ac0:	7921      	ldrb	r1, [r4, #4]
   b4ac2:	6820      	ldr	r0, [r4, #0]
   b4ac4:	2202      	movs	r2, #2
   b4ac6:	f002 f820 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4aca:	6820      	ldr	r0, [r4, #0]
   b4acc:	6803      	ldr	r3, [r0, #0]
   b4ace:	695b      	ldr	r3, [r3, #20]
   b4ad0:	4798      	blx	r3
   b4ad2:	4605      	mov	r5, r0
   b4ad4:	6820      	ldr	r0, [r4, #0]
   b4ad6:	6803      	ldr	r3, [r0, #0]
   b4ad8:	695b      	ldr	r3, [r3, #20]
   b4ada:	4798      	blx	r3
   b4adc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4ae0:	b285      	uxth	r5, r0
}
   b4ae2:	4628      	mov	r0, r5
   b4ae4:	b005      	add	sp, #20
   b4ae6:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4ae8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4aec:	3301      	adds	r3, #1
   b4aee:	d10c      	bne.n	b4b0a <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4af0:	4b18      	ldr	r3, [pc, #96]	; (b4b54 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4af2:	9300      	str	r3, [sp, #0]
   b4af4:	2300      	movs	r3, #0
   b4af6:	f88d 3004 	strb.w	r3, [sp, #4]
   b4afa:	4b17      	ldr	r3, [pc, #92]	; (b4b58 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4afc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4afe:	4668      	mov	r0, sp
   b4b00:	2301      	movs	r3, #1
   b4b02:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4b06:	f7ff fe8e 	bl	b4826 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4b0a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b0e:	2100      	movs	r1, #0
   b4b10:	b280      	uxth	r0, r0
   b4b12:	f002 fa46 	bl	b6fa2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4b16:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4b1a:	4620      	mov	r0, r4
   b4b1c:	f7ff fe8d 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4b20:	2100      	movs	r1, #0
   b4b22:	4620      	mov	r0, r4
   b4b24:	f7ff fe89 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
   b4b28:	2100      	movs	r1, #0
   b4b2a:	4605      	mov	r5, r0
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	f7ff fe84 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
   b4b32:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4b36:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4b38:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b3c:	2101      	movs	r1, #1
   b4b3e:	b280      	uxth	r0, r0
   b4b40:	f002 fa2f 	bl	b6fa2 <digitalWrite>
        if (_sck == -1)
   b4b44:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4b48:	3301      	adds	r3, #1
   b4b4a:	d1ca      	bne.n	b4ae2 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4b4c:	f7ff fe64 	bl	b4818 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4b50:	e7c7      	b.n	b4ae2 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4b52:	bf00      	nop
   b4b54:	000b82dc 	.word	0x000b82dc
   b4b58:	0007a120 	.word	0x0007a120

000b4b5c <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4b5c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4b5e:	f7ff ff9b 	bl	b4a98 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4b62:	ba40      	rev16	r0, r0
}
   b4b64:	b280      	uxth	r0, r0
   b4b66:	bd08      	pop	{r3, pc}

000b4b68 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4b68:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b6a:	2188      	movs	r1, #136	; 0x88
{
   b4b6c:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b6e:	f7ff fff5 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b72:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b74:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4b76:	4620      	mov	r0, r4
   b4b78:	f7ff fff0 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b7c:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4b7e:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4b80:	4620      	mov	r0, r4
   b4b82:	f7ff ffeb 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b86:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4b88:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff ffe6 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b90:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b92:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4b94:	4620      	mov	r0, r4
   b4b96:	f7ff ffe1 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b9a:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4b9c:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4b9e:	4620      	mov	r0, r4
   b4ba0:	f7ff ffdc 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4ba4:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4ba6:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff ffd7 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4bae:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4bb0:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4bb2:	4620      	mov	r0, r4
   b4bb4:	f7ff ffd2 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4bb8:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4bba:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4bbc:	4620      	mov	r0, r4
   b4bbe:	f7ff ffcd 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4bc2:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4bc4:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4bc6:	4620      	mov	r0, r4
   b4bc8:	f7ff ffc8 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4bcc:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4bce:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4bd0:	4620      	mov	r0, r4
   b4bd2:	f7ff ffc3 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
   b4bd6:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4bd8:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4bda:	4620      	mov	r0, r4
   b4bdc:	f7ff ffbe 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4be0:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4be2:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4be4:	4620      	mov	r0, r4
   b4be6:	f7ff fefb 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4bea:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4bec:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4bf0:	4620      	mov	r0, r4
   b4bf2:	f7ff ffb3 	bl	b4b5c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bf6:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4bf8:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bfa:	4620      	mov	r0, r4
   b4bfc:	f7ff fef0 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4c00:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4c02:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4c06:	4620      	mov	r0, r4
   b4c08:	f7ff feea 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
   b4c0c:	21e5      	movs	r1, #229	; 0xe5
   b4c0e:	4605      	mov	r5, r0
   b4c10:	4620      	mov	r0, r4
   b4c12:	f7ff fee5 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
   b4c16:	f000 030f 	and.w	r3, r0, #15
   b4c1a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4c1e:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4c20:	21e6      	movs	r1, #230	; 0xe6
   b4c22:	4620      	mov	r0, r4
   b4c24:	f7ff fedc 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
   b4c28:	21e5      	movs	r1, #229	; 0xe5
   b4c2a:	4605      	mov	r5, r0
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	f7ff fed7 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
   b4c32:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4c36:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4c3a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4c3c:	21e7      	movs	r1, #231	; 0xe7
   b4c3e:	4620      	mov	r0, r4
   b4c40:	f7ff fece 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
   b4c44:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4c48:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4c4c <_ZN15Adafruit_BME2806read24Eh>:
{
   b4c4c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4c4e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4c52:	3301      	adds	r3, #1
{
   b4c54:	b085      	sub	sp, #20
   b4c56:	4604      	mov	r4, r0
   b4c58:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4c5a:	d123      	bne.n	b4ca4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4c5c:	7901      	ldrb	r1, [r0, #4]
   b4c5e:	6800      	ldr	r0, [r0, #0]
   b4c60:	f001 ff56 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4c64:	6820      	ldr	r0, [r4, #0]
   b4c66:	6803      	ldr	r3, [r0, #0]
   b4c68:	4629      	mov	r1, r5
   b4c6a:	689b      	ldr	r3, [r3, #8]
   b4c6c:	4798      	blx	r3
        _wire -> endTransmission();
   b4c6e:	6820      	ldr	r0, [r4, #0]
   b4c70:	f001 ff59 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4c74:	7921      	ldrb	r1, [r4, #4]
   b4c76:	6820      	ldr	r0, [r4, #0]
   b4c78:	2203      	movs	r2, #3
   b4c7a:	f001 ff46 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4c7e:	6820      	ldr	r0, [r4, #0]
   b4c80:	6803      	ldr	r3, [r0, #0]
   b4c82:	695b      	ldr	r3, [r3, #20]
   b4c84:	4798      	blx	r3
        value <<= 8;
   b4c86:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c88:	6820      	ldr	r0, [r4, #0]
   b4c8a:	6803      	ldr	r3, [r0, #0]
   b4c8c:	695b      	ldr	r3, [r3, #20]
   b4c8e:	4798      	blx	r3
   b4c90:	4328      	orrs	r0, r5
        value <<= 8;
   b4c92:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c94:	6820      	ldr	r0, [r4, #0]
   b4c96:	6803      	ldr	r3, [r0, #0]
   b4c98:	695b      	ldr	r3, [r3, #20]
   b4c9a:	4798      	blx	r3
   b4c9c:	4305      	orrs	r5, r0
}
   b4c9e:	4628      	mov	r0, r5
   b4ca0:	b005      	add	sp, #20
   b4ca2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4ca4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4ca8:	3301      	adds	r3, #1
   b4caa:	d10c      	bne.n	b4cc6 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4cac:	4b1a      	ldr	r3, [pc, #104]	; (b4d18 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4cae:	9300      	str	r3, [sp, #0]
   b4cb0:	2300      	movs	r3, #0
   b4cb2:	f88d 3004 	strb.w	r3, [sp, #4]
   b4cb6:	4b19      	ldr	r3, [pc, #100]	; (b4d1c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4cb8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4cba:	4668      	mov	r0, sp
   b4cbc:	2301      	movs	r3, #1
   b4cbe:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4cc2:	f7ff fdb0 	bl	b4826 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4cc6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4cca:	2100      	movs	r1, #0
   b4ccc:	b280      	uxth	r0, r0
   b4cce:	f002 f968 	bl	b6fa2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4cd2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4cd6:	4620      	mov	r0, r4
   b4cd8:	f7ff fdaf 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4cdc:	2100      	movs	r1, #0
   b4cde:	4620      	mov	r0, r4
   b4ce0:	f7ff fdab 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4ce4:	2100      	movs	r1, #0
        value <<= 8;
   b4ce6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4ce8:	4620      	mov	r0, r4
   b4cea:	f7ff fda6 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
   b4cee:	4328      	orrs	r0, r5
        value <<= 8;
   b4cf0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4cf2:	2100      	movs	r1, #0
   b4cf4:	4620      	mov	r0, r4
   b4cf6:	f7ff fda0 	bl	b483a <_ZN15Adafruit_BME2807spixferEh>
   b4cfa:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4cfc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4d00:	2101      	movs	r1, #1
   b4d02:	b280      	uxth	r0, r0
   b4d04:	f002 f94d 	bl	b6fa2 <digitalWrite>
        if (_sck == -1)
   b4d08:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4d0c:	3301      	adds	r3, #1
   b4d0e:	d1c6      	bne.n	b4c9e <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4d10:	f7ff fd82 	bl	b4818 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4d14:	e7c3      	b.n	b4c9e <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4d16:	bf00      	nop
   b4d18:	000b82dc 	.word	0x000b82dc
   b4d1c:	0007a120 	.word	0x0007a120

000b4d20 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4d20:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4d22:	21fa      	movs	r1, #250	; 0xfa
{
   b4d24:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4d26:	f7ff ff91 	bl	b4c4c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4d2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4d2e:	d01f      	beq.n	b4d70 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d30:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4d32:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4d78 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d36:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d38:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d3c:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4d40:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d44:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d46:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4d4a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4d4e:	131b      	asrs	r3, r3, #12
   b4d50:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d52:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4d54:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4d58:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4d5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4d5e:	3380      	adds	r3, #128	; 0x80
   b4d60:	121b      	asrs	r3, r3, #8
   b4d62:	ee07 3a90 	vmov	s15, r3
   b4d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4d6a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4d6e:	bd10      	pop	{r4, pc}
        return NAN;
   b4d70:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4d7c <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4d74:	e7fb      	b.n	b4d6e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4d76:	bf00      	nop
   b4d78:	42c80000 	.word	0x42c80000
   b4d7c:	7fc00000 	.word	0x7fc00000

000b4d80 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4d80:	b538      	push	{r3, r4, r5, lr}
   b4d82:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4d84:	f7ff ffcc 	bl	b4d20 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4d88:	21fd      	movs	r1, #253	; 0xfd
   b4d8a:	4620      	mov	r0, r4
   b4d8c:	f7ff fe84 	bl	b4a98 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4d90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4d94:	d038      	beq.n	b4e08 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d96:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d98:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d9c:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4da0:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4da4:	0509      	lsls	r1, r1, #20
   b4da6:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4daa:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4dae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4db2:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4db4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4db8:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4dbc:	436b      	muls	r3, r5
   b4dbe:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4dc0:	4369      	muls	r1, r5
   b4dc2:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4dc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4dc8:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4dca:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4dcc:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4dd0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4dd4:	434b      	muls	r3, r1
   b4dd6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4dda:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4ddc:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4dde:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4de0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4de4:	4352      	muls	r2, r2
   b4de6:	11d2      	asrs	r2, r2, #7
   b4de8:	434a      	muls	r2, r1
   b4dea:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4dee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4df2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4df6:	bfa8      	it	ge
   b4df8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4dfc:	131b      	asrs	r3, r3, #12
   b4dfe:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4e02:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4e06:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4e08:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4e10 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4e0c:	e7fb      	b.n	b4e06 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4e0e:	bf00      	nop
   b4e10:	7fc00000 	.word	0x7fc00000

000b4e14 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4e18:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4e1a:	f7ff ff81 	bl	b4d20 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4e1e:	21f7      	movs	r1, #247	; 0xf7
   b4e20:	4628      	mov	r0, r5
   b4e22:	f7ff ff13 	bl	b4c4c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4e26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4e2a:	f000 80b6 	beq.w	b4f9a <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4e2e:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e30:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4e34:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4e38:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4e3c:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e40:	17dc      	asrs	r4, r3, #31
   b4e42:	fb03 f20e 	mul.w	r2, r3, lr
   b4e46:	fb01 2204 	mla	r2, r1, r4, r2
   b4e4a:	fba3 3401 	umull	r3, r4, r3, r1
   b4e4e:	4422      	add	r2, r4
   b4e50:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e52:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e56:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e58:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e5c:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e60:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e64:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e68:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4e6c:	fb03 f608 	mul.w	r6, r3, r8
   b4e70:	fb07 660c 	mla	r6, r7, ip, r6
   b4e74:	fba3 3c07 	umull	r3, ip, r3, r7
   b4e78:	4466      	add	r6, ip
   b4e7a:	0a1b      	lsrs	r3, r3, #8
   b4e7c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4e80:	191b      	adds	r3, r3, r4
   b4e82:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e86:	8b6e      	ldrh	r6, [r5, #26]
   b4e88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4e8c:	fba3 3406 	umull	r3, r4, r3, r6
   b4e90:	fb06 4402 	mla	r4, r6, r2, r4
   b4e94:	17e3      	asrs	r3, r4, #31
   b4e96:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4e98:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e9c:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4ea0:	d07e      	beq.n	b4fa0 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4ea2:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4ea6:	fb04 f608 	mul.w	r6, r4, r8
   b4eaa:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4eae:	fb07 6609 	mla	r6, r7, r9, r6
   b4eb2:	fba4 4707 	umull	r4, r7, r4, r7
   b4eb6:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4eb8:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4ebc:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4ec0:	fb07 fe0e 	mul.w	lr, r7, lr
   b4ec4:	fb01 ee08 	mla	lr, r1, r8, lr
   b4ec8:	fba7 7101 	umull	r7, r1, r7, r1
   b4ecc:	4471      	add	r1, lr
   b4ece:	0449      	lsls	r1, r1, #17
   b4ed0:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4ed4:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4ed6:	047f      	lsls	r7, r7, #17
   b4ed8:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4eda:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4ede:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4ee2:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4ee6:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4eea:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4eee:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4ef2:	07e4      	lsls	r4, r4, #31
   b4ef4:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4ef6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4efa:	f640 4135 	movw	r1, #3125	; 0xc35
   b4efe:	eb60 0606 	sbc.w	r6, r0, r6
   b4f02:	fba4 0401 	umull	r0, r4, r4, r1
   b4f06:	fb01 4106 	mla	r1, r1, r6, r4
   b4f0a:	f002 fe23 	bl	b7b54 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4f0e:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f12:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4f16:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4f1a:	0b43      	lsrs	r3, r0, #13
   b4f1c:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4f20:	fb02 f70c 	mul.w	r7, r2, ip
   b4f24:	17d4      	asrs	r4, r2, #31
   b4f26:	fb03 7704 	mla	r7, r3, r4, r7
   b4f2a:	fba2 2403 	umull	r2, r4, r2, r3
   b4f2e:	443c      	add	r4, r7
   b4f30:	fb02 f70c 	mul.w	r7, r2, ip
   b4f34:	fb03 7704 	mla	r7, r3, r4, r7
   b4f38:	fba2 2303 	umull	r2, r3, r2, r3
   b4f3c:	441f      	add	r7, r3
   b4f3e:	0e53      	lsrs	r3, r2, #25
   b4f40:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f44:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f46:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4f4a:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4f4e:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f50:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f54:	fb02 4100 	mla	r1, r2, r0, r4
   b4f58:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f5c:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f60:	4431      	add	r1, r6
   b4f62:	0cc0      	lsrs	r0, r0, #19
   b4f64:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f68:	1818      	adds	r0, r3, r0
   b4f6a:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4f6e:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4f72:	0a00      	lsrs	r0, r0, #8
   b4f74:	012d      	lsls	r5, r5, #4
   b4f76:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4f7a:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4f7e:	0124      	lsls	r4, r4, #4
   b4f80:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4f82:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4f86:	f002 fda7 	bl	b7ad8 <__aeabi_l2f>
   b4f8a:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4fa8 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4f8e:	ee07 0a90 	vmov	s15, r0
   b4f92:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4f9a:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4fac <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4f9e:	e7fa      	b.n	b4f96 <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4fa0:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4fb0 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4fa4:	e7f7      	b.n	b4f96 <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4fa6:	bf00      	nop
   b4fa8:	3b800000 	.word	0x3b800000
   b4fac:	7fc00000 	.word	0x7fc00000
   b4fb0:	00000000 	.word	0x00000000

000b4fb4 <_ZN15Adafruit_BME2804initEv>:
{
   b4fb4:	b530      	push	{r4, r5, lr}
   b4fb6:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4fb8:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4fbc:	1c42      	adds	r2, r0, #1
{
   b4fbe:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4fc0:	d119      	bne.n	b4ff6 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4fc2:	6820      	ldr	r0, [r4, #0]
   b4fc4:	f001 fd72 	bl	b6aac <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4fc8:	21d0      	movs	r1, #208	; 0xd0
   b4fca:	4620      	mov	r0, r4
   b4fcc:	f7ff fd08 	bl	b49e0 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4fd0:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4fd2:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4fd4:	d145      	bne.n	b5062 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4fd6:	4620      	mov	r0, r4
   b4fd8:	22b6      	movs	r2, #182	; 0xb6
   b4fda:	21e0      	movs	r1, #224	; 0xe0
   b4fdc:	f7ff fc64 	bl	b48a8 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4fe0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4fe4:	f001 f884 	bl	b60f0 <delay>
    while (isReadingCalibration())
   b4fe8:	4620      	mov	r0, r4
   b4fea:	f7ff fd4d 	bl	b4a88 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4fee:	4605      	mov	r5, r0
   b4ff0:	b328      	cbz	r0, b503e <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4ff2:	2064      	movs	r0, #100	; 0x64
   b4ff4:	e7f6      	b.n	b4fe4 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4ff6:	2101      	movs	r1, #1
   b4ff8:	b280      	uxth	r0, r0
   b4ffa:	f001 ffd2 	bl	b6fa2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4ffe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5002:	2101      	movs	r1, #1
   b5004:	b280      	uxth	r0, r0
   b5006:	f001 ffbb 	bl	b6f80 <pinMode>
        if (_sck == -1) {
   b500a:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b500e:	1c43      	adds	r3, r0, #1
   b5010:	d104      	bne.n	b501c <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b5012:	f7ff fbe5 	bl	b47e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5016:	f000 fd15 	bl	b5a44 <_ZN8SPIClass5beginEv>
    }
   b501a:	e7d5      	b.n	b4fc8 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b501c:	2101      	movs	r1, #1
   b501e:	b280      	uxth	r0, r0
   b5020:	f001 ffae 	bl	b6f80 <pinMode>
            pinMode(_mosi, OUTPUT);
   b5024:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b5028:	2101      	movs	r1, #1
   b502a:	b280      	uxth	r0, r0
   b502c:	f001 ffa8 	bl	b6f80 <pinMode>
            pinMode(_miso, INPUT);
   b5030:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b5034:	2100      	movs	r1, #0
   b5036:	b280      	uxth	r0, r0
   b5038:	f001 ffa2 	bl	b6f80 <pinMode>
   b503c:	e7c4      	b.n	b4fc8 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b503e:	4620      	mov	r0, r4
   b5040:	f7ff fd92 	bl	b4b68 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b5044:	2305      	movs	r3, #5
   b5046:	9300      	str	r3, [sp, #0]
   b5048:	461a      	mov	r2, r3
   b504a:	2103      	movs	r1, #3
   b504c:	4620      	mov	r0, r4
   b504e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5052:	f7ff fc7b 	bl	b494c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b5056:	2064      	movs	r0, #100	; 0x64
   b5058:	f001 f84a 	bl	b60f0 <delay>
    return true;
   b505c:	2001      	movs	r0, #1
}
   b505e:	b005      	add	sp, #20
   b5060:	bd30      	pop	{r4, r5, pc}
        return false;
   b5062:	2000      	movs	r0, #0
   b5064:	e7fb      	b.n	b505e <_ZN15Adafruit_BME2804initEv+0xaa>

000b5066 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b5066:	2377      	movs	r3, #119	; 0x77
{
   b5068:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b506a:	7103      	strb	r3, [r0, #4]
{
   b506c:	4604      	mov	r4, r0
	_wire = &Wire;
   b506e:	f002 f81b 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b5072:	6020      	str	r0, [r4, #0]
	status = init();
   b5074:	4620      	mov	r0, r4
   b5076:	f7ff ff9d 	bl	b4fb4 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b507a:	b930      	cbnz	r0, b508a <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b507c:	2376      	movs	r3, #118	; 0x76
   b507e:	7123      	strb	r3, [r4, #4]
 		status = init();
   b5080:	4620      	mov	r0, r4
}
   b5082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b5086:	f7ff bf95 	b.w	b4fb4 <_ZN15Adafruit_BME2804initEv>
}
   b508a:	bd10      	pop	{r4, pc}

000b508c <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
  BSD license, all text above must be included in any redistribution
 ****************************************************/
#include "application.h"
#include "Adafruit_VEML6070.h"

void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
   b508c:	b510      	push	{r4, lr}
   b508e:	460c      	mov	r4, r1
  Wire.begin();
   b5090:	f002 f80a 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b5094:	f001 fd0a 	bl	b6aac <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(VEML6070_ADDR_L);
   b5098:	f002 f806 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b509c:	2138      	movs	r1, #56	; 0x38
   b509e:	f001 fd3b 	bl	b6b18 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((itime << 2) | 0x02);
   b50a2:	f002 f801 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b50a6:	00a1      	lsls	r1, r4, #2
   b50a8:	6803      	ldr	r3, [r0, #0]
   b50aa:	f041 0102 	orr.w	r1, r1, #2
   b50ae:	689b      	ldr	r3, [r3, #8]
   b50b0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   b50b4:	4798      	blx	r3
  Wire.endTransmission();
   b50b6:	f001 fff7 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b50ba:	f001 fd34 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
  delay(500);
}
   b50be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
   b50c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b50c6:	f001 b813 	b.w	b60f0 <delay>

000b50ca <_ZN17Adafruit_VEML60706readUVEv>:

uint16_t Adafruit_VEML6070::readUV() {
   b50ca:	b538      	push	{r3, r4, r5, lr}
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
   b50cc:	f001 ffec 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b50d0:	2201      	movs	r2, #1
   b50d2:	2139      	movs	r1, #57	; 0x39
   b50d4:	f001 fd19 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
   b50d8:	2801      	cmp	r0, #1
   b50da:	4604      	mov	r4, r0
   b50dc:	d002      	beq.n	b50e4 <_ZN17Adafruit_VEML60706readUVEv+0x1a>
   b50de:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
  uvi |= Wire.read();

  return uvi;  
}
   b50e2:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t uvi = Wire.read();
   b50e4:	f001 ffe0 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b50e8:	6803      	ldr	r3, [r0, #0]
   b50ea:	695b      	ldr	r3, [r3, #20]
   b50ec:	4798      	blx	r3
   b50ee:	4605      	mov	r5, r0
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
   b50f0:	f001 ffda 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b50f4:	4622      	mov	r2, r4
   b50f6:	2138      	movs	r1, #56	; 0x38
   b50f8:	f001 fd07 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
   b50fc:	2801      	cmp	r0, #1
   b50fe:	d1ee      	bne.n	b50de <_ZN17Adafruit_VEML60706readUVEv+0x14>
  uvi |= Wire.read();
   b5100:	f001 ffd2 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b5104:	6803      	ldr	r3, [r0, #0]
   b5106:	695b      	ldr	r3, [r3, #20]
   b5108:	4798      	blx	r3
   b510a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b510e:	b280      	uxth	r0, r0
  return uvi;  
   b5110:	e7e7      	b.n	b50e2 <_ZN17Adafruit_VEML60706readUVEv+0x18>

000b5112 <_ZN7TwoWire5writeEi.isra.0>:
   b5112:	6803      	ldr	r3, [r0, #0]
   b5114:	b2c9      	uxtb	r1, r1
   b5116:	689b      	ldr	r3, [r3, #8]
   b5118:	4718      	bx	r3

000b511a <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
   b511a:	2200      	movs	r2, #0
   b511c:	6042      	str	r2, [r0, #4]
   b511e:	6082      	str	r2, [r0, #8]
   b5120:	60c2      	str	r2, [r0, #12]
   b5122:	f240 1201 	movw	r2, #257	; 0x101
   b5126:	8202      	strh	r2, [r0, #16]
   b5128:	2201      	movs	r2, #1
   b512a:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
   b512c:	4770      	bx	lr

000b512e <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
   b512e:	b538      	push	{r3, r4, r5, lr}
   b5130:	4604      	mov	r4, r0
   b5132:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5134:	6800      	ldr	r0, [r0, #0]
   b5136:	2161      	movs	r1, #97	; 0x61
   b5138:	f001 fcee 	bl	b6b18 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
   b513c:	6820      	ldr	r0, [r4, #0]
   b513e:	0a29      	lsrs	r1, r5, #8
   b5140:	f7ff ffe7 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   b5144:	6820      	ldr	r0, [r4, #0]
   b5146:	b2e9      	uxtb	r1, r5
   b5148:	f7ff ffe3 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b514c:	6820      	ldr	r0, [r4, #0]
   b514e:	f001 fcea 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
   b5152:	b108      	cbz	r0, b5158 <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   b5154:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
   b5156:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
   b5158:	6820      	ldr	r0, [r4, #0]
   b515a:	2202      	movs	r2, #2
   b515c:	2161      	movs	r1, #97	; 0x61
   b515e:	f001 fcd4 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5162:	6820      	ldr	r0, [r4, #0]
   b5164:	6803      	ldr	r3, [r0, #0]
   b5166:	691b      	ldr	r3, [r3, #16]
   b5168:	4798      	blx	r3
   b516a:	2800      	cmp	r0, #0
   b516c:	d0f2      	beq.n	b5154 <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
   b516e:	6820      	ldr	r0, [r4, #0]
   b5170:	6803      	ldr	r3, [r0, #0]
   b5172:	695b      	ldr	r3, [r3, #20]
   b5174:	4798      	blx	r3
   b5176:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
   b5178:	6820      	ldr	r0, [r4, #0]
   b517a:	6803      	ldr	r3, [r0, #0]
   b517c:	695b      	ldr	r3, [r3, #20]
   b517e:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b5180:	b2c3      	uxtb	r3, r0
   b5182:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
   b5186:	b280      	uxth	r0, r0
   b5188:	e7e5      	b.n	b5156 <_ZN5SCD3012readRegisterEt+0x28>

000b518a <_ZN5SCD3013dataAvailableEv>:
{
   b518a:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   b518c:	f240 2102 	movw	r1, #514	; 0x202
   b5190:	f7ff ffcd 	bl	b512e <_ZN5SCD3012readRegisterEt>
}
   b5194:	1e43      	subs	r3, r0, #1
   b5196:	4258      	negs	r0, r3
   b5198:	4158      	adcs	r0, r3
   b519a:	bd08      	pop	{r3, pc}

000b519c <_ZN5SCD3015readMeasurementEv>:
{
   b519c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b51a0:	4604      	mov	r4, r0
  if (dataAvailable() == false)
   b51a2:	f7ff fff2 	bl	b518a <_ZN5SCD3013dataAvailableEv>
   b51a6:	4607      	mov	r7, r0
   b51a8:	b918      	cbnz	r0, b51b2 <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
   b51aa:	2700      	movs	r7, #0
}
   b51ac:	4638      	mov	r0, r7
   b51ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b51b2:	6820      	ldr	r0, [r4, #0]
   b51b4:	2161      	movs	r1, #97	; 0x61
   b51b6:	f001 fcaf 	bl	b6b18 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
   b51ba:	6820      	ldr	r0, [r4, #0]
   b51bc:	2103      	movs	r1, #3
   b51be:	f7ff ffa8 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   b51c2:	6820      	ldr	r0, [r4, #0]
   b51c4:	2100      	movs	r1, #0
   b51c6:	f7ff ffa4 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b51ca:	6820      	ldr	r0, [r4, #0]
   b51cc:	f001 fcab 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
   b51d0:	4605      	mov	r5, r0
   b51d2:	2800      	cmp	r0, #0
   b51d4:	d1e9      	bne.n	b51aa <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
   b51d6:	2212      	movs	r2, #18
   b51d8:	2161      	movs	r1, #97	; 0x61
   b51da:	6820      	ldr	r0, [r4, #0]
   b51dc:	f001 fc95 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b51e0:	6820      	ldr	r0, [r4, #0]
   b51e2:	6803      	ldr	r3, [r0, #0]
   b51e4:	691b      	ldr	r3, [r3, #16]
   b51e6:	4798      	blx	r3
   b51e8:	4606      	mov	r6, r0
   b51ea:	b358      	cbz	r0, b5244 <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
   b51ec:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
   b51ee:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
   b51f0:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
   b51f2:	6820      	ldr	r0, [r4, #0]
   b51f4:	6803      	ldr	r3, [r0, #0]
   b51f6:	695b      	ldr	r3, [r3, #20]
   b51f8:	4798      	blx	r3
      switch (x)
   b51fa:	b2eb      	uxtb	r3, r5
   b51fc:	2b10      	cmp	r3, #16
   b51fe:	d80d      	bhi.n	b521c <_ZN5SCD3015readMeasurementEv+0x80>
   b5200:	e8df f003 	tbb	[pc, r3]
   b5204:	090c0909 	.word	0x090c0909
   b5208:	18180c09 	.word	0x18180c09
   b520c:	0c18180c 	.word	0x0c18180c
   b5210:	1c0c1c1c 	.word	0x1c0c1c1c
   b5214:	1c          	.byte	0x1c
   b5215:	00          	.byte	0x00
          tempCO2 |= incoming;
   b5216:	b2c3      	uxtb	r3, r0
   b5218:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
   b521c:	3501      	adds	r5, #1
   b521e:	2d12      	cmp	r5, #18
   b5220:	d1e7      	bne.n	b51f2 <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
   b5222:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
   b5224:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
   b5228:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
   b522a:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
   b522e:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
   b5230:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
   b5232:	e7bb      	b.n	b51ac <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
   b5234:	b2c3      	uxtb	r3, r0
   b5236:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
   b523a:	e7ef      	b.n	b521c <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
   b523c:	b2c3      	uxtb	r3, r0
   b523e:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
   b5242:	e7eb      	b.n	b521c <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
   b5244:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
   b5246:	4681      	mov	r9, r0
   b5248:	e7eb      	b.n	b5222 <_ZN5SCD3015readMeasurementEv+0x86>

000b524a <_ZN5SCD306getCO2Ev>:
{
   b524a:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
   b524c:	7c03      	ldrb	r3, [r0, #16]
{
   b524e:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
   b5250:	b10b      	cbz	r3, b5256 <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5252:	f7ff ffa3 	bl	b519c <_ZN5SCD3015readMeasurementEv>
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
   b5256:	edd4 7a01 	vldr	s15, [r4, #4]
   b525a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  co2HasBeenReported = true;
   b525e:	2301      	movs	r3, #1
   b5260:	7423      	strb	r3, [r4, #16]
}
   b5262:	ee17 3a90 	vmov	r3, s15
   b5266:	b298      	uxth	r0, r3
   b5268:	bd10      	pop	{r4, pc}

000b526a <_ZN5SCD3011getHumidityEv>:
{
   b526a:	b510      	push	{r4, lr}
  if (humidityHasBeenReported == true) //Trigger a new read
   b526c:	7c43      	ldrb	r3, [r0, #17]
{
   b526e:	4604      	mov	r4, r0
  if (humidityHasBeenReported == true) //Trigger a new read
   b5270:	b10b      	cbz	r3, b5276 <_ZN5SCD3011getHumidityEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5272:	f7ff ff93 	bl	b519c <_ZN5SCD3015readMeasurementEv>
  humidityHasBeenReported = true;
   b5276:	2301      	movs	r3, #1
}
   b5278:	ed94 0a03 	vldr	s0, [r4, #12]
  humidityHasBeenReported = true;
   b527c:	7463      	strb	r3, [r4, #17]
}
   b527e:	bd10      	pop	{r4, pc}

000b5280 <_ZN5SCD3014getTemperatureEv>:
{
   b5280:	b510      	push	{r4, lr}
  if (temperatureHasBeenReported == true) //Trigger a new read
   b5282:	7c83      	ldrb	r3, [r0, #18]
{
   b5284:	4604      	mov	r4, r0
  if (temperatureHasBeenReported == true) //Trigger a new read
   b5286:	b10b      	cbz	r3, b528c <_ZN5SCD3014getTemperatureEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5288:	f7ff ff88 	bl	b519c <_ZN5SCD3015readMeasurementEv>
  temperatureHasBeenReported = true;
   b528c:	2301      	movs	r3, #1
}
   b528e:	ed94 0a02 	vldr	s0, [r4, #8]
  temperatureHasBeenReported = true;
   b5292:	74a3      	strb	r3, [r4, #18]
}
   b5294:	bd10      	pop	{r4, pc}

000b5296 <_ZN5SCD3011computeCRC8EPhh>:
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0 ; x < len ; x++)
   b5296:	440a      	add	r2, r1
  uint8_t crc = 0xFF; //Init with 0xFF
   b5298:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t x = 0 ; x < len ; x++)
   b529a:	428a      	cmp	r2, r1
   b529c:	d011      	beq.n	b52c2 <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
   b529e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b52a2:	4058      	eors	r0, r3
   b52a4:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
   b52a6:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t i = 0 ; i < 8 ; i++)
   b52aa:	f103 33ff 	add.w	r3, r3, #4294967295
   b52ae:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   b52b2:	bf18      	it	ne
   b52b4:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
   b52b8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   b52bc:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
   b52be:	d1f2      	bne.n	b52a6 <_ZN5SCD3011computeCRC8EPhh+0x10>
   b52c0:	e7eb      	b.n	b529a <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
   b52c2:	4770      	bx	lr

000b52c4 <_ZN5SCD3011sendCommandEtt>:
{
   b52c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b52c8:	460e      	mov	r6, r1
  data[0] = arguments >> 8;
   b52ca:	ea4f 2812 	mov.w	r8, r2, lsr #8
{
   b52ce:	4615      	mov	r5, r2
  data[1] = arguments & 0xFF;
   b52d0:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b52d4:	a901      	add	r1, sp, #4
   b52d6:	2202      	movs	r2, #2
{
   b52d8:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
   b52da:	f88d 8004 	strb.w	r8, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b52de:	f7ff ffda 	bl	b5296 <_ZN5SCD3011computeCRC8EPhh>
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b52e2:	2161      	movs	r1, #97	; 0x61
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b52e4:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b52e6:	6820      	ldr	r0, [r4, #0]
   b52e8:	f001 fc16 	bl	b6b18 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
   b52ec:	6820      	ldr	r0, [r4, #0]
   b52ee:	0a31      	lsrs	r1, r6, #8
   b52f0:	f7ff ff0f 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(command & 0xFF); //LSB
   b52f4:	6820      	ldr	r0, [r4, #0]
   b52f6:	b2f1      	uxtb	r1, r6
   b52f8:	f7ff ff0b 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments >> 8); //MSB
   b52fc:	6820      	ldr	r0, [r4, #0]
   b52fe:	4641      	mov	r1, r8
   b5300:	f7ff ff07 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments & 0xFF); //LSB
   b5304:	6820      	ldr	r0, [r4, #0]
   b5306:	b2e9      	uxtb	r1, r5
   b5308:	f7ff ff03 	bl	b5112 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(crc);
   b530c:	6820      	ldr	r0, [r4, #0]
   b530e:	6803      	ldr	r3, [r0, #0]
   b5310:	4639      	mov	r1, r7
   b5312:	689b      	ldr	r3, [r3, #8]
   b5314:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b5316:	6820      	ldr	r0, [r4, #0]
   b5318:	f001 fc05 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
}
   b531c:	fab0 f080 	clz	r0, r0
   b5320:	0940      	lsrs	r0, r0, #5
   b5322:	b002      	add	sp, #8
   b5324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5328 <_ZN5SCD3022setAutoSelfCalibrationEb>:
  if (enable)
   b5328:	460a      	mov	r2, r1
   b532a:	b101      	cbz	r1, b532e <_ZN5SCD3022setAutoSelfCalibrationEb+0x6>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b532c:	2201      	movs	r2, #1
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 0); //Deactivate continuous ASC
   b532e:	f245 3106 	movw	r1, #21254	; 0x5306
   b5332:	f7ff bfc7 	b.w	b52c4 <_ZN5SCD3011sendCommandEtt>

000b5336 <_ZN5SCD3014beginMeasuringEt>:
{
   b5336:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
   b5338:	2110      	movs	r1, #16
   b533a:	f7ff bfc3 	b.w	b52c4 <_ZN5SCD3011sendCommandEtt>

000b533e <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
   b533e:	2100      	movs	r1, #0
   b5340:	f7ff bff9 	b.w	b5336 <_ZN5SCD3014beginMeasuringEt>

000b5344 <_ZN5SCD3022setMeasurementIntervalEt>:
{
   b5344:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
   b5346:	f44f 418c 	mov.w	r1, #17920	; 0x4600
   b534a:	f7ff bfbb 	b.w	b52c4 <_ZN5SCD3011sendCommandEtt>

000b534e <_ZN5SCD305beginER7TwoWire>:
{
   b534e:	b538      	push	{r3, r4, r5, lr}
   b5350:	4604      	mov	r4, r0
   b5352:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b5354:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b5356:	f001 fba9 	bl	b6aac <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
   b535a:	4620      	mov	r0, r4
   b535c:	f7ff ffef 	bl	b533e <_ZN5SCD3014beginMeasuringEv>
   b5360:	4605      	mov	r5, r0
   b5362:	b148      	cbz	r0, b5378 <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
   b5364:	2102      	movs	r1, #2
   b5366:	4620      	mov	r0, r4
   b5368:	f7ff ffec 	bl	b5344 <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b536c:	2201      	movs	r2, #1
   b536e:	f245 3106 	movw	r1, #21254	; 0x5306
   b5372:	4620      	mov	r0, r4
   b5374:	f7ff ffa6 	bl	b52c4 <_ZN5SCD3011sendCommandEtt>
}
   b5378:	4628      	mov	r0, r5
   b537a:	bd38      	pop	{r3, r4, r5, pc}

000b537c <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   b537c:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   b537e:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   b5380:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   b5382:	7002      	strb	r2, [r0, #0]
}
   b5384:	4770      	bx	lr

000b5386 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   b5386:	b510      	push	{r4, lr}
   b5388:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   b538a:	6840      	ldr	r0, [r0, #4]
   b538c:	f001 fbce 	bl	b6b2c <_ZN7TwoWire9isEnabledEv>
   b5390:	b910      	cbnz	r0, b5398 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   b5392:	6860      	ldr	r0, [r4, #4]
   b5394:	f001 fb8a 	bl	b6aac <_ZN7TwoWire5beginEv>
  }

  return true;
}
   b5398:	2001      	movs	r0, #1
   b539a:	bd10      	pop	{r4, pc}

000b539c <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   b539c:	b570      	push	{r4, r5, r6, lr}
   b539e:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   b53a0:	7841      	ldrb	r1, [r0, #1]
   b53a2:	6840      	ldr	r0, [r0, #4]
   b53a4:	f001 fbb4 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   b53a8:	7869      	ldrb	r1, [r5, #1]
   b53aa:	6868      	ldr	r0, [r5, #4]
   b53ac:	2202      	movs	r2, #2
   b53ae:	f001 fbac 	bl	b6b0a <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   b53b2:	6868      	ldr	r0, [r5, #4]
   b53b4:	6803      	ldr	r3, [r0, #0]
   b53b6:	695b      	ldr	r3, [r3, #20]
   b53b8:	4798      	blx	r3
   b53ba:	4606      	mov	r6, r0
   b53bc:	6868      	ldr	r0, [r5, #4]
   b53be:	6803      	ldr	r3, [r0, #0]
   b53c0:	695b      	ldr	r3, [r3, #20]
   b53c2:	4798      	blx	r3
   b53c4:	4604      	mov	r4, r0
   b53c6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  m_i2c.endTransmission();
   b53ca:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   b53cc:	b2a4      	uxth	r4, r4
  m_i2c.endTransmission();
   b53ce:	f001 fbaa 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
  return (float)level / 1.2f; // convert to lux
   b53d2:	ee07 4a90 	vmov	s15, r4
}
   b53d6:	ed9f 0a03 	vldr	s0, [pc, #12]	; b53e4 <_ZN6BH175015get_light_levelEv+0x48>
  return (float)level / 1.2f; // convert to lux
   b53da:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b53de:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b53e2:	bd70      	pop	{r4, r5, r6, pc}
   b53e4:	3f99999a 	.word	0x3f99999a

000b53e8 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   b53e8:	7803      	ldrb	r3, [r0, #0]
   b53ea:	2b23      	cmp	r3, #35	; 0x23
   b53ec:	d005      	beq.n	b53fa <_ZN6BH175020wait_for_measurementEv+0x12>
   b53ee:	2b13      	cmp	r3, #19
   b53f0:	bf0c      	ite	eq
   b53f2:	2018      	moveq	r0, #24
   b53f4:	20b4      	movne	r0, #180	; 0xb4
   b53f6:	f000 be7b 	b.w	b60f0 <delay>
   b53fa:	2018      	movs	r0, #24
   b53fc:	e7fb      	b.n	b53f6 <_ZN6BH175020wait_for_measurementEv+0xe>

000b53fe <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   b53fe:	b538      	push	{r3, r4, r5, lr}
   b5400:	4604      	mov	r4, r0
   b5402:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   b5404:	7841      	ldrb	r1, [r0, #1]
   b5406:	6840      	ldr	r0, [r0, #4]
   b5408:	f001 fb82 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   b540c:	6860      	ldr	r0, [r4, #4]
   b540e:	6803      	ldr	r3, [r0, #0]
   b5410:	4629      	mov	r1, r5
   b5412:	689b      	ldr	r3, [r3, #8]
   b5414:	4798      	blx	r3
  m_i2c.endTransmission();
   b5416:	6860      	ldr	r0, [r4, #4]
   b5418:	f001 fb85 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   b541c:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   b541e:	4620      	mov	r0, r4
}
   b5420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   b5424:	f7ff bfe0 	b.w	b53e8 <_ZN6BH175020wait_for_measurementEv>

000b5428 <_ZN6BH175023make_forced_measurementEv>:
{
   b5428:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   b542a:	7803      	ldrb	r3, [r0, #0]
   b542c:	f1a3 0220 	sub.w	r2, r3, #32
   b5430:	2a01      	cmp	r2, #1
{
   b5432:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   b5434:	d901      	bls.n	b543a <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   b5436:	2b23      	cmp	r3, #35	; 0x23
   b5438:	d110      	bne.n	b545c <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   b543a:	7861      	ldrb	r1, [r4, #1]
   b543c:	6860      	ldr	r0, [r4, #4]
   b543e:	f001 fb67 	bl	b6b10 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   b5442:	6860      	ldr	r0, [r4, #4]
   b5444:	7821      	ldrb	r1, [r4, #0]
   b5446:	6803      	ldr	r3, [r0, #0]
   b5448:	689b      	ldr	r3, [r3, #8]
   b544a:	4798      	blx	r3
    m_i2c.endTransmission();
   b544c:	6860      	ldr	r0, [r4, #4]
   b544e:	f001 fb6a 	bl	b6b26 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   b5452:	4620      	mov	r0, r4
}
   b5454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   b5458:	f7ff bfc6 	b.w	b53e8 <_ZN6BH175020wait_for_measurementEv>
}
   b545c:	bd10      	pop	{r4, pc}
	...

000b5460 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <netdb_freeaddrinfo+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	689b      	ldr	r3, [r3, #8]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030268 	.word	0x00030268

000b5470 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <netdb_getaddrinfo+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	68db      	ldr	r3, [r3, #12]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030268 	.word	0x00030268

000b5480 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <HAL_Pin_Mode+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	689b      	ldr	r3, [r3, #8]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	0003022c 	.word	0x0003022c

000b5490 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <HAL_Get_Pin_Mode+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	68db      	ldr	r3, [r3, #12]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003022c 	.word	0x0003022c

000b54a0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <HAL_GPIO_Write+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	691b      	ldr	r3, [r3, #16]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003022c 	.word	0x0003022c

000b54b0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <HAL_GPIO_Read+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	695b      	ldr	r3, [r3, #20]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	0003022c 	.word	0x0003022c

000b54c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <HAL_RNG_GetRandomNumber+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	685b      	ldr	r3, [r3, #4]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	00030218 	.word	0x00030218

000b54d0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	695b      	ldr	r3, [r3, #20]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	00030218 	.word	0x00030218

000b54e0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <hal_rtc_time_is_valid+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	00030218 	.word	0x00030218

000b54f0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <hal_rtc_get_time+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	00030218 	.word	0x00030218

000b5500 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <os_mutex_recursive_create+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	00030248 	.word	0x00030248

000b5510 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <inet_inet_ntop+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	695b      	ldr	r3, [r3, #20]
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	00030264 	.word	0x00030264

000b5520 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <hal_usart_write+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	68db      	ldr	r3, [r3, #12]
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	0003023c 	.word	0x0003023c

000b5530 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <hal_usart_available+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	691b      	ldr	r3, [r3, #16]
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	0003023c 	.word	0x0003023c

000b5540 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <hal_usart_read+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	695b      	ldr	r3, [r3, #20]
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	0003023c 	.word	0x0003023c

000b5550 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <hal_usart_peek+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	699b      	ldr	r3, [r3, #24]
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	0003023c 	.word	0x0003023c

000b5560 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <hal_usart_flush+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	69db      	ldr	r3, [r3, #28]
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	0003023c 	.word	0x0003023c

000b5570 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <hal_usart_is_enabled+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	6a1b      	ldr	r3, [r3, #32]
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	0003023c 	.word	0x0003023c

000b5580 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <hal_usart_available_data_for_write+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	0003023c 	.word	0x0003023c

000b5590 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b02      	ldr	r3, [pc, #8]	; (b559c <hal_usart_init_ex+0xc>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5598:	9301      	str	r3, [sp, #4]
   b559a:	bd08      	pop	{r3, pc}
   b559c:	0003023c 	.word	0x0003023c

000b55a0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b55a0:	b508      	push	{r3, lr}
   b55a2:	4b02      	ldr	r3, [pc, #8]	; (b55ac <hal_i2c_begin+0xc>)
   b55a4:	681b      	ldr	r3, [r3, #0]
   b55a6:	68db      	ldr	r3, [r3, #12]
   b55a8:	9301      	str	r3, [sp, #4]
   b55aa:	bd08      	pop	{r3, pc}
   b55ac:	00030228 	.word	0x00030228

000b55b0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <hal_i2c_begin_transmission+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	699b      	ldr	r3, [r3, #24]
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	00030228 	.word	0x00030228

000b55c0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <hal_i2c_end_transmission+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	69db      	ldr	r3, [r3, #28]
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	00030228 	.word	0x00030228

000b55d0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <hal_i2c_write+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	6a1b      	ldr	r3, [r3, #32]
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	00030228 	.word	0x00030228

000b55e0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <hal_i2c_available+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	00030228 	.word	0x00030228

000b55f0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <hal_i2c_read+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	00030228 	.word	0x00030228

000b5600 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <hal_i2c_peek+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	00030228 	.word	0x00030228

000b5610 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <hal_i2c_flush+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	00030228 	.word	0x00030228

000b5620 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <hal_i2c_is_enabled+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	00030228 	.word	0x00030228

000b5630 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <hal_i2c_init+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	00030228 	.word	0x00030228

000b5640 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <hal_i2c_request_ex+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030228 	.word	0x00030228

000b5650 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <hal_spi_begin+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	681b      	ldr	r3, [r3, #0]
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030230 	.word	0x00030230

000b5660 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <hal_spi_transfer+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	695b      	ldr	r3, [r3, #20]
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030230 	.word	0x00030230

000b5670 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <hal_spi_init+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	69db      	ldr	r3, [r3, #28]
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030230 	.word	0x00030230

000b5680 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <hal_spi_is_enabled+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	6a1b      	ldr	r3, [r3, #32]
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	00030230 	.word	0x00030230

000b5690 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <hal_spi_info+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030230 	.word	0x00030230

000b56a0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <hal_spi_set_settings+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	00030230 	.word	0x00030230

000b56b0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <hal_spi_acquire+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	00030230 	.word	0x00030230

000b56c0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <hal_spi_release+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030230 	.word	0x00030230

000b56d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <HAL_USB_USART_Init+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	681b      	ldr	r3, [r3, #0]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	0003024c 	.word	0x0003024c

000b56e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <HAL_USB_USART_Begin+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	685b      	ldr	r3, [r3, #4]
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	0003024c 	.word	0x0003024c

000b56f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <HAL_USB_USART_Available_Data+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	691b      	ldr	r3, [r3, #16]
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	0003024c 	.word	0x0003024c

000b5700 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	695b      	ldr	r3, [r3, #20]
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003024c 	.word	0x0003024c

000b5710 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <HAL_USB_USART_Receive_Data+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	699b      	ldr	r3, [r3, #24]
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	0003024c 	.word	0x0003024c

000b5720 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <HAL_USB_USART_Send_Data+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	69db      	ldr	r3, [r3, #28]
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003024c 	.word	0x0003024c

000b5730 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <HAL_USB_USART_Flush_Data+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	6a1b      	ldr	r3, [r3, #32]
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	0003024c 	.word	0x0003024c

000b5740 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <system_mode+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	681b      	ldr	r3, [r3, #0]
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	00030220 	.word	0x00030220

000b5750 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <set_system_mode+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	685b      	ldr	r3, [r3, #4]
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	00030220 	.word	0x00030220

000b5760 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <system_delay_ms+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	695b      	ldr	r3, [r3, #20]
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	00030220 	.word	0x00030220

000b5770 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <application_thread_current+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	00030220 	.word	0x00030220

000b5780 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <application_thread_invoke+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	00030220 	.word	0x00030220

000b5790 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <system_thread_get_state+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	00030220 	.word	0x00030220

000b57a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b03      	ldr	r3, [pc, #12]	; (b57b0 <system_ctrl_set_app_request_handler+0x10>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b57aa:	9301      	str	r3, [sp, #4]
   b57ac:	bd08      	pop	{r3, pc}
   b57ae:	0000      	.short	0x0000
   b57b0:	00030220 	.word	0x00030220

000b57b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b03      	ldr	r3, [pc, #12]	; (b57c4 <system_ctrl_set_result+0x10>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b57be:	9301      	str	r3, [sp, #4]
   b57c0:	bd08      	pop	{r3, pc}
   b57c2:	0000      	.short	0x0000
   b57c4:	00030220 	.word	0x00030220

000b57c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <network_connect+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	685b      	ldr	r3, [r3, #4]
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	00030240 	.word	0x00030240

000b57d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <network_connecting+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	689b      	ldr	r3, [r3, #8]
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	00030240 	.word	0x00030240

000b57e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <network_disconnect+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	68db      	ldr	r3, [r3, #12]
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030240 	.word	0x00030240

000b57f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <network_ready+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	691b      	ldr	r3, [r3, #16]
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030240 	.word	0x00030240

000b5808 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <network_on+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	695b      	ldr	r3, [r3, #20]
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030240 	.word	0x00030240

000b5818 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <network_off+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	699b      	ldr	r3, [r3, #24]
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	00030240 	.word	0x00030240

000b5828 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <network_listen+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	69db      	ldr	r3, [r3, #28]
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030240 	.word	0x00030240

000b5838 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <network_listening+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	6a1b      	ldr	r3, [r3, #32]
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	00030240 	.word	0x00030240

000b5848 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <network_set_listen_timeout+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	00030240 	.word	0x00030240

000b5858 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <network_get_listen_timeout+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	00030240 	.word	0x00030240

000b5868 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <network_is_on+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	00030240 	.word	0x00030240

000b5878 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <network_is_off+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030240 	.word	0x00030240

000b5888 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <spark_process+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	689b      	ldr	r3, [r3, #8]
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030244 	.word	0x00030244

000b5898 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <spark_cloud_flag_connect+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	68db      	ldr	r3, [r3, #12]
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	00030244 	.word	0x00030244

000b58a8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <spark_cloud_flag_connected+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	695b      	ldr	r3, [r3, #20]
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	00030244 	.word	0x00030244

000b58b8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <spark_send_event+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	6a1b      	ldr	r3, [r3, #32]
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	00030244 	.word	0x00030244

000b58c8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <spark_sync_time_pending+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	00030244 	.word	0x00030244

000b58d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	00030244 	.word	0x00030244

000b58e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <malloc+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	681b      	ldr	r3, [r3, #0]
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	0003021c 	.word	0x0003021c

000b58f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <free+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	685b      	ldr	r3, [r3, #4]
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	0003021c 	.word	0x0003021c

000b5908 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <realloc+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	689b      	ldr	r3, [r3, #8]
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	0003021c 	.word	0x0003021c

000b5918 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <siprintf+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	691b      	ldr	r3, [r3, #16]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	0003021c 	.word	0x0003021c

000b5928 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <snprintf+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	69db      	ldr	r3, [r3, #28]
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	0003021c 	.word	0x0003021c

000b5938 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <vsnprintf+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	0003021c 	.word	0x0003021c

000b5948 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <abort+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	0003021c 	.word	0x0003021c

000b5958 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <_malloc_r+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	0003021c 	.word	0x0003021c

000b5968 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b02      	ldr	r3, [pc, #8]	; (b5974 <__assert_func+0xc>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	bd08      	pop	{r3, pc}
   b5974:	0003021c 	.word	0x0003021c

000b5978 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5978:	b508      	push	{r3, lr}
   b597a:	4b02      	ldr	r3, [pc, #8]	; (b5984 <newlib_impure_ptr_callback+0xc>)
   b597c:	681b      	ldr	r3, [r3, #0]
   b597e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5980:	9301      	str	r3, [sp, #4]
   b5982:	bd08      	pop	{r3, pc}
   b5984:	0003021c 	.word	0x0003021c

000b5988 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b5988:	b508      	push	{r3, lr}
   b598a:	4b02      	ldr	r3, [pc, #8]	; (b5994 <strftime+0xc>)
   b598c:	681b      	ldr	r3, [r3, #0]
   b598e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5990:	9301      	str	r3, [sp, #4]
   b5992:	bd08      	pop	{r3, pc}
   b5994:	0003021c 	.word	0x0003021c

000b5998 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <localtime_r+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	0003021c 	.word	0x0003021c

000b59a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b59a8:	2200      	movs	r2, #0
   b59aa:	6840      	ldr	r0, [r0, #4]
   b59ac:	4611      	mov	r1, r2
   b59ae:	f7ff bf43 	b.w	b5838 <network_listening>

000b59b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b59b2:	2200      	movs	r2, #0
   b59b4:	6840      	ldr	r0, [r0, #4]
   b59b6:	4611      	mov	r1, r2
   b59b8:	f7ff bf4e 	b.w	b5858 <network_get_listen_timeout>

000b59bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b59bc:	6840      	ldr	r0, [r0, #4]
   b59be:	2200      	movs	r2, #0
   b59c0:	f7ff bf42 	b.w	b5848 <network_set_listen_timeout>

000b59c4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b59c4:	6840      	ldr	r0, [r0, #4]
   b59c6:	2200      	movs	r2, #0
   b59c8:	f081 0101 	eor.w	r1, r1, #1
   b59cc:	f7ff bf2c 	b.w	b5828 <network_listen>

000b59d0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b59d0:	2300      	movs	r3, #0
   b59d2:	6840      	ldr	r0, [r0, #4]
   b59d4:	461a      	mov	r2, r3
   b59d6:	4619      	mov	r1, r3
   b59d8:	f7ff bf1e 	b.w	b5818 <network_off>

000b59dc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b59dc:	2300      	movs	r3, #0
   b59de:	6840      	ldr	r0, [r0, #4]
   b59e0:	461a      	mov	r2, r3
   b59e2:	4619      	mov	r1, r3
   b59e4:	f7ff bf10 	b.w	b5808 <network_on>

000b59e8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b59e8:	2200      	movs	r2, #0
   b59ea:	6840      	ldr	r0, [r0, #4]
   b59ec:	4611      	mov	r1, r2
   b59ee:	f7ff bf03 	b.w	b57f8 <network_ready>

000b59f2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b59f2:	2200      	movs	r2, #0
   b59f4:	6840      	ldr	r0, [r0, #4]
   b59f6:	4611      	mov	r1, r2
   b59f8:	f7ff beee 	b.w	b57d8 <network_connecting>

000b59fc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b59fc:	6840      	ldr	r0, [r0, #4]
   b59fe:	2200      	movs	r2, #0
   b5a00:	2102      	movs	r1, #2
   b5a02:	f7ff bef1 	b.w	b57e8 <network_disconnect>

000b5a06 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a06:	2300      	movs	r3, #0
   b5a08:	6840      	ldr	r0, [r0, #4]
   b5a0a:	461a      	mov	r2, r3
   b5a0c:	f7ff bedc 	b.w	b57c8 <network_connect>

000b5a10 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5a10:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5a12:	2203      	movs	r2, #3
   b5a14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5a16:	4a02      	ldr	r2, [pc, #8]	; (b5a20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5a18:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5a1a:	4770      	bx	lr
   b5a1c:	2003e6ac 	.word	0x2003e6ac
   b5a20:	000b82f0 	.word	0x000b82f0

000b5a24 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5a24:	2100      	movs	r1, #0
   b5a26:	f7ff be4b 	b.w	b56c0 <hal_spi_release>

000b5a2a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5a2a:	2100      	movs	r1, #0
   b5a2c:	f7ff be40 	b.w	b56b0 <hal_spi_acquire>

000b5a30 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5a30:	b510      	push	{r4, lr}
   b5a32:	4604      	mov	r4, r0
   b5a34:	4608      	mov	r0, r1
{
    _spi = spi;
   b5a36:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5a38:	f7ff fe1a 	bl	b5670 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5a3c:	2300      	movs	r3, #0
   b5a3e:	6063      	str	r3, [r4, #4]
}
   b5a40:	4620      	mov	r0, r4
   b5a42:	bd10      	pop	{r4, pc}

000b5a44 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5a44:	b513      	push	{r0, r1, r4, lr}
   b5a46:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5a48:	7800      	ldrb	r0, [r0, #0]
   b5a4a:	f7ff ffee 	bl	b5a2a <_ZN8SPIClass4lockEv.isra.0>
   b5a4e:	b958      	cbnz	r0, b5a68 <_ZN8SPIClass5beginEv+0x24>
   b5a50:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5a52:	9001      	str	r0, [sp, #4]
   b5a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5a58:	f7ff fdfa 	bl	b5650 <hal_spi_begin>
        unlock();
   b5a5c:	9801      	ldr	r0, [sp, #4]
    }
}
   b5a5e:	b002      	add	sp, #8
   b5a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5a64:	f7ff bfde 	b.w	b5a24 <_ZN8SPIClass6unlockEv.isra.0>
   b5a68:	b002      	add	sp, #8
   b5a6a:	bd10      	pop	{r4, pc}

000b5a6c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5a6c:	7800      	ldrb	r0, [r0, #0]
   b5a6e:	f7ff bfd9 	b.w	b5a24 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5a74 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5a74:	0840      	lsrs	r0, r0, #1
{
   b5a76:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5a78:	6018      	str	r0, [r3, #0]
   b5a7a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5a7c:	6818      	ldr	r0, [r3, #0]
   b5a7e:	4288      	cmp	r0, r1
   b5a80:	b2e5      	uxtb	r5, r4
   b5a82:	d906      	bls.n	b5a92 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5a84:	3401      	adds	r4, #1
   b5a86:	2c08      	cmp	r4, #8
   b5a88:	d002      	beq.n	b5a90 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5a8a:	0840      	lsrs	r0, r0, #1
   b5a8c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5a8e:	e7f5      	b.n	b5a7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5a90:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5a94:	5d5b      	ldrb	r3, [r3, r5]
   b5a96:	7013      	strb	r3, [r2, #0]
}
   b5a98:	bd30      	pop	{r4, r5, pc}
   b5a9a:	bf00      	nop
   b5a9c:	000b8324 	.word	0x000b8324

000b5aa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5aa4:	4606      	mov	r6, r0
   b5aa6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5aa8:	7800      	ldrb	r0, [r0, #0]
{
   b5aaa:	460c      	mov	r4, r1
    CHECK(lock());
   b5aac:	f7ff ffbd 	bl	b5a2a <_ZN8SPIClass4lockEv.isra.0>
   b5ab0:	2800      	cmp	r0, #0
   b5ab2:	db1b      	blt.n	b5aec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5ab4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5ab6:	2214      	movs	r2, #20
   b5ab8:	2100      	movs	r1, #0
   b5aba:	a809      	add	r0, sp, #36	; 0x24
   b5abc:	f002 fa46 	bl	b7f4c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5ac0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5ac2:	2200      	movs	r2, #0
   b5ac4:	a909      	add	r1, sp, #36	; 0x24
   b5ac6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5ac8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5acc:	f7ff fde0 	bl	b5690 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5ad0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5ad4:	b113      	cbz	r3, b5adc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5ad6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5ada:	b155      	cbz	r5, b5af2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5adc:	2700      	movs	r7, #0
   b5ade:	46b9      	mov	r9, r7
   b5ae0:	46b8      	mov	r8, r7
   b5ae2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5ae4:	7923      	ldrb	r3, [r4, #4]
   b5ae6:	b15d      	cbz	r5, b5b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5ae8:	b1c3      	cbz	r3, b5b1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5aea:	2000      	movs	r0, #0
}
   b5aec:	b00f      	add	sp, #60	; 0x3c
   b5aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5af2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5af6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5afa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5afe:	e7f1      	b.n	b5ae4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5b00:	2b00      	cmp	r3, #0
   b5b02:	d135      	bne.n	b5b70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5b04:	68a3      	ldr	r3, [r4, #8]
   b5b06:	4543      	cmp	r3, r8
   b5b08:	d108      	bne.n	b5b1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5b0a:	f88d 9020 	strb.w	r9, [sp, #32]
   b5b0e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5b12:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5b16:	89a3      	ldrh	r3, [r4, #12]
   b5b18:	429a      	cmp	r2, r3
   b5b1a:	d0e6      	beq.n	b5aea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5b1c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5b1e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5b20:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5b24:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5b26:	ab04      	add	r3, sp, #16
   b5b28:	f10d 020f 	add.w	r2, sp, #15
   b5b2c:	f7ff ffa2 	bl	b5a74 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5b30:	7921      	ldrb	r1, [r4, #4]
   b5b32:	b985      	cbnz	r5, b5b56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5b34:	b989      	cbnz	r1, b5b5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5b36:	68a3      	ldr	r3, [r4, #8]
   b5b38:	4543      	cmp	r3, r8
   b5b3a:	d30e      	bcc.n	b5b5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5b3c:	f88d 9020 	strb.w	r9, [sp, #32]
   b5b40:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5b44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5b48:	89a3      	ldrh	r3, [r4, #12]
   b5b4a:	429a      	cmp	r2, r3
   b5b4c:	d105      	bne.n	b5b5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5b4e:	9b04      	ldr	r3, [sp, #16]
   b5b50:	4543      	cmp	r3, r8
   b5b52:	d102      	bne.n	b5b5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5b54:	e7c9      	b.n	b5aea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5b56:	2900      	cmp	r1, #0
   b5b58:	d1f9      	bne.n	b5b4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5b5a:	2300      	movs	r3, #0
   b5b5c:	9301      	str	r3, [sp, #4]
   b5b5e:	7b63      	ldrb	r3, [r4, #13]
   b5b60:	9300      	str	r3, [sp, #0]
   b5b62:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5b66:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5b68:	7830      	ldrb	r0, [r6, #0]
   b5b6a:	f7ff fd99 	bl	b56a0 <hal_spi_set_settings>
   b5b6e:	e7bc      	b.n	b5aea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5b70:	e9cd 5500 	strd	r5, r5, [sp]
   b5b74:	462b      	mov	r3, r5
   b5b76:	462a      	mov	r2, r5
   b5b78:	2101      	movs	r1, #1
   b5b7a:	e7f5      	b.n	b5b68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5b7c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5b7c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5b7e:	7800      	ldrb	r0, [r0, #0]
   b5b80:	f7ff fd6e 	bl	b5660 <hal_spi_transfer>
}
   b5b84:	b2c0      	uxtb	r0, r0
   b5b86:	bd08      	pop	{r3, pc}

000b5b88 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5b88:	4b05      	ldr	r3, [pc, #20]	; (b5ba0 <_GLOBAL__sub_I_System+0x18>)
   b5b8a:	2202      	movs	r2, #2
   b5b8c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5b8e:	4b05      	ldr	r3, [pc, #20]	; (b5ba4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5b90:	4a05      	ldr	r2, [pc, #20]	; (b5ba8 <_GLOBAL__sub_I_System+0x20>)
   b5b92:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5b94:	2000      	movs	r0, #0
   b5b96:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5b9a:	f7ff bdd9 	b.w	b5750 <set_system_mode>
   b5b9e:	bf00      	nop
   b5ba0:	2003e6c0 	.word	0x2003e6c0
   b5ba4:	2003e6b4 	.word	0x2003e6b4
   b5ba8:	ffff0000 	.word	0xffff0000

000b5bac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5bac:	b510      	push	{r4, lr}
   b5bae:	4604      	mov	r4, r0
{
	free(buffer);
   b5bb0:	6800      	ldr	r0, [r0, #0]
   b5bb2:	f7ff fea1 	bl	b58f8 <free>
}
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	bd10      	pop	{r4, pc}

000b5bba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5bba:	b510      	push	{r4, lr}
   b5bbc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5bbe:	6800      	ldr	r0, [r0, #0]
   b5bc0:	b108      	cbz	r0, b5bc6 <_ZN6String10invalidateEv+0xc>
   b5bc2:	f7ff fe99 	bl	b58f8 <free>
	buffer = NULL;
   b5bc6:	2300      	movs	r3, #0
	capacity = len = 0;
   b5bc8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5bcc:	6023      	str	r3, [r4, #0]
}
   b5bce:	bd10      	pop	{r4, pc}

000b5bd0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5bd0:	b538      	push	{r3, r4, r5, lr}
   b5bd2:	4604      	mov	r4, r0
   b5bd4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5bd6:	6800      	ldr	r0, [r0, #0]
   b5bd8:	3101      	adds	r1, #1
   b5bda:	f7ff fe95 	bl	b5908 <realloc>
	if (newbuffer) {
   b5bde:	b110      	cbz	r0, b5be6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5be0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5be4:	2001      	movs	r0, #1
	}
	return 0;
}
   b5be6:	bd38      	pop	{r3, r4, r5, pc}

000b5be8 <_ZN6String7reserveEj>:
{
   b5be8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5bea:	6803      	ldr	r3, [r0, #0]
{
   b5bec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5bee:	b123      	cbz	r3, b5bfa <_ZN6String7reserveEj+0x12>
   b5bf0:	6843      	ldr	r3, [r0, #4]
   b5bf2:	428b      	cmp	r3, r1
   b5bf4:	d301      	bcc.n	b5bfa <_ZN6String7reserveEj+0x12>
   b5bf6:	2001      	movs	r0, #1
}
   b5bf8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5bfa:	4620      	mov	r0, r4
   b5bfc:	f7ff ffe8 	bl	b5bd0 <_ZN6String12changeBufferEj>
   b5c00:	2800      	cmp	r0, #0
   b5c02:	d0f9      	beq.n	b5bf8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5c04:	68a3      	ldr	r3, [r4, #8]
   b5c06:	2b00      	cmp	r3, #0
   b5c08:	d1f5      	bne.n	b5bf6 <_ZN6String7reserveEj+0xe>
   b5c0a:	6822      	ldr	r2, [r4, #0]
   b5c0c:	7013      	strb	r3, [r2, #0]
   b5c0e:	e7f2      	b.n	b5bf6 <_ZN6String7reserveEj+0xe>

000b5c10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5c12:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5c14:	4611      	mov	r1, r2
   b5c16:	9201      	str	r2, [sp, #4]
{
   b5c18:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5c1a:	f7ff ffe5 	bl	b5be8 <_ZN6String7reserveEj>
   b5c1e:	9a01      	ldr	r2, [sp, #4]
   b5c20:	b928      	cbnz	r0, b5c2e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5c22:	4620      	mov	r0, r4
   b5c24:	f7ff ffc9 	bl	b5bba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5c28:	4620      	mov	r0, r4
   b5c2a:	b003      	add	sp, #12
   b5c2c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5c2e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5c30:	4629      	mov	r1, r5
   b5c32:	6820      	ldr	r0, [r4, #0]
   b5c34:	f002 f97c 	bl	b7f30 <memcpy>
	buffer[len] = 0;
   b5c38:	6822      	ldr	r2, [r4, #0]
   b5c3a:	68a3      	ldr	r3, [r4, #8]
   b5c3c:	2100      	movs	r1, #0
   b5c3e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5c40:	e7f2      	b.n	b5c28 <_ZN6String4copyEPKcj+0x18>

000b5c42 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5c42:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5c44:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5c46:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5c4a:	4604      	mov	r4, r0
	len = 0;
   b5c4c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5c4e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5c50:	b141      	cbz	r1, b5c64 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5c52:	4608      	mov	r0, r1
   b5c54:	9101      	str	r1, [sp, #4]
   b5c56:	f002 f9de 	bl	b8016 <strlen>
   b5c5a:	9901      	ldr	r1, [sp, #4]
   b5c5c:	4602      	mov	r2, r0
   b5c5e:	4620      	mov	r0, r4
   b5c60:	f7ff ffd6 	bl	b5c10 <_ZN6String4copyEPKcj>
}
   b5c64:	4620      	mov	r0, r4
   b5c66:	b002      	add	sp, #8
   b5c68:	bd10      	pop	{r4, pc}

000b5c6a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5c6a:	b513      	push	{r0, r1, r4, lr}
   b5c6c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5c6e:	b159      	cbz	r1, b5c88 <_ZN6StringaSEPKc+0x1e>
   b5c70:	4608      	mov	r0, r1
   b5c72:	9101      	str	r1, [sp, #4]
   b5c74:	f002 f9cf 	bl	b8016 <strlen>
   b5c78:	9901      	ldr	r1, [sp, #4]
   b5c7a:	4602      	mov	r2, r0
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	f7ff ffc7 	bl	b5c10 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5c82:	4620      	mov	r0, r4
   b5c84:	b002      	add	sp, #8
   b5c86:	bd10      	pop	{r4, pc}
	else invalidate();
   b5c88:	f7ff ff97 	bl	b5bba <_ZN6String10invalidateEv>
   b5c8c:	e7f9      	b.n	b5c82 <_ZN6StringaSEPKc+0x18>

000b5c8e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5c8e:	b570      	push	{r4, r5, r6, lr}
   b5c90:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5c92:	460e      	mov	r6, r1
   b5c94:	b909      	cbnz	r1, b5c9a <_ZN6String6concatEPKcj+0xc>
   b5c96:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5c98:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5c9a:	b16a      	cbz	r2, b5cb8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5c9c:	6884      	ldr	r4, [r0, #8]
   b5c9e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5ca0:	4621      	mov	r1, r4
   b5ca2:	f7ff ffa1 	bl	b5be8 <_ZN6String7reserveEj>
   b5ca6:	2800      	cmp	r0, #0
   b5ca8:	d0f5      	beq.n	b5c96 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5caa:	6828      	ldr	r0, [r5, #0]
   b5cac:	68ab      	ldr	r3, [r5, #8]
   b5cae:	4631      	mov	r1, r6
   b5cb0:	4418      	add	r0, r3
   b5cb2:	f002 f98b 	bl	b7fcc <strcpy>
	len = newlen;
   b5cb6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5cb8:	2001      	movs	r0, #1
   b5cba:	e7ed      	b.n	b5c98 <_ZN6String6concatEPKcj+0xa>

000b5cbc <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b5cbc:	b513      	push	{r0, r1, r4, lr}
   b5cbe:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b5cc0:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b5cc2:	b151      	cbz	r1, b5cda <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b5cc4:	9101      	str	r1, [sp, #4]
   b5cc6:	f002 f9a6 	bl	b8016 <strlen>
   b5cca:	9901      	ldr	r1, [sp, #4]
   b5ccc:	4602      	mov	r2, r0
   b5cce:	4620      	mov	r0, r4
}
   b5cd0:	b002      	add	sp, #8
   b5cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b5cd6:	f7ff bfda 	b.w	b5c8e <_ZN6String6concatEPKcj>
}
   b5cda:	b002      	add	sp, #8
   b5cdc:	bd10      	pop	{r4, pc}

000b5cde <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5cde:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5ce0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5ce2:	4604      	mov	r4, r0
      if (_M_manager)
   b5ce4:	b113      	cbz	r3, b5cec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5ce6:	2203      	movs	r2, #3
   b5ce8:	4601      	mov	r1, r0
   b5cea:	4798      	blx	r3
    }
   b5cec:	4620      	mov	r0, r4
   b5cee:	bd10      	pop	{r4, pc}

000b5cf0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5cf0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5cf2:	6843      	ldr	r3, [r0, #4]
   b5cf4:	3b01      	subs	r3, #1
    {
   b5cf6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5cf8:	6043      	str	r3, [r0, #4]
   b5cfa:	b963      	cbnz	r3, b5d16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5cfc:	6803      	ldr	r3, [r0, #0]
   b5cfe:	689b      	ldr	r3, [r3, #8]
   b5d00:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d02:	68a3      	ldr	r3, [r4, #8]
   b5d04:	3b01      	subs	r3, #1
   b5d06:	60a3      	str	r3, [r4, #8]
   b5d08:	b92b      	cbnz	r3, b5d16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5d0a:	6823      	ldr	r3, [r4, #0]
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	68db      	ldr	r3, [r3, #12]
    }
   b5d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5d14:	4718      	bx	r3
    }
   b5d16:	bd10      	pop	{r4, pc}

000b5d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5d18:	b510      	push	{r4, lr}
   b5d1a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5d1c:	6800      	ldr	r0, [r0, #0]
   b5d1e:	b108      	cbz	r0, b5d24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5d20:	f7ff ffe6 	bl	b5cf0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5d24:	4620      	mov	r0, r4
   b5d26:	bd10      	pop	{r4, pc}

000b5d28 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5d28:	b513      	push	{r0, r1, r4, lr}
   b5d2a:	460b      	mov	r3, r1
   b5d2c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d2e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5d32:	466c      	mov	r4, sp
   b5d34:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5d38:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5d3c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5d40:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5d44:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5d48:	b002      	add	sp, #8
   b5d4a:	bd10      	pop	{r4, pc}

000b5d4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5d4c:	4802      	ldr	r0, [pc, #8]	; (b5d58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5d4e:	2300      	movs	r3, #0
   b5d50:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5d52:	f7ff bbd5 	b.w	b5500 <os_mutex_recursive_create>
   b5d56:	bf00      	nop
   b5d58:	2003e6c4 	.word	0x2003e6c4

000b5d5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d5e:	4606      	mov	r6, r0
   b5d60:	460d      	mov	r5, r1
  size_t n = 0;
   b5d62:	188f      	adds	r7, r1, r2
   b5d64:	2400      	movs	r4, #0
  while (size--) {
   b5d66:	42bd      	cmp	r5, r7
   b5d68:	d00c      	beq.n	b5d84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5d6a:	6833      	ldr	r3, [r6, #0]
   b5d6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5d70:	689b      	ldr	r3, [r3, #8]
   b5d72:	4630      	mov	r0, r6
   b5d74:	4798      	blx	r3
     if (chunk>=0)
   b5d76:	1e03      	subs	r3, r0, #0
   b5d78:	db01      	blt.n	b5d7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5d7a:	441c      	add	r4, r3
  while (size--) {
   b5d7c:	e7f3      	b.n	b5d66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5d7e:	2c00      	cmp	r4, #0
   b5d80:	bf08      	it	eq
   b5d82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5d84:	4620      	mov	r0, r4
   b5d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d88 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5d88:	b513      	push	{r0, r1, r4, lr}
   b5d8a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5d8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5d8e:	b159      	cbz	r1, b5da8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5d90:	9101      	str	r1, [sp, #4]
   b5d92:	f002 f940 	bl	b8016 <strlen>
   b5d96:	6823      	ldr	r3, [r4, #0]
   b5d98:	9901      	ldr	r1, [sp, #4]
   b5d9a:	68db      	ldr	r3, [r3, #12]
   b5d9c:	4602      	mov	r2, r0
   b5d9e:	4620      	mov	r0, r4
    }
   b5da0:	b002      	add	sp, #8
   b5da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5da6:	4718      	bx	r3
    }
   b5da8:	b002      	add	sp, #8
   b5daa:	bd10      	pop	{r4, pc}

000b5dac <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5dac:	b508      	push	{r3, lr}
  return write(str);
   b5dae:	f7ff ffeb 	bl	b5d88 <_ZN5Print5writeEPKc>
}
   b5db2:	bd08      	pop	{r3, pc}

000b5db4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5db4:	6803      	ldr	r3, [r0, #0]
   b5db6:	689b      	ldr	r3, [r3, #8]
   b5db8:	4718      	bx	r3

000b5dba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5dba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5dbc:	210d      	movs	r1, #13
{
   b5dbe:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5dc0:	f7ff fff8 	bl	b5db4 <_ZN5Print5printEc>
  n += print('\n');
   b5dc4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5dc6:	4604      	mov	r4, r0
  n += print('\n');
   b5dc8:	4628      	mov	r0, r5
   b5dca:	f7ff fff3 	bl	b5db4 <_ZN5Print5printEc>
  return n;
}
   b5dce:	4420      	add	r0, r4
   b5dd0:	bd38      	pop	{r3, r4, r5, pc}

000b5dd2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5dd2:	b538      	push	{r3, r4, r5, lr}
   b5dd4:	4605      	mov	r5, r0
  return write(str);
   b5dd6:	f7ff ffd7 	bl	b5d88 <_ZN5Print5writeEPKc>
   b5dda:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5ddc:	4628      	mov	r0, r5
   b5dde:	f7ff ffec 	bl	b5dba <_ZN5Print7printlnEv>
  return n;
}
   b5de2:	4420      	add	r0, r4
   b5de4:	bd38      	pop	{r3, r4, r5, pc}

000b5de6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5de6:	b530      	push	{r4, r5, lr}
   b5de8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5dea:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5dec:	2a01      	cmp	r2, #1
  *str = '\0';
   b5dee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5df2:	bf98      	it	ls
   b5df4:	220a      	movls	r2, #10
   b5df6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5df8:	460d      	mov	r5, r1
   b5dfa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5dfe:	fb01 5312 	mls	r3, r1, r2, r5
   b5e02:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e06:	2b09      	cmp	r3, #9
   b5e08:	bf94      	ite	ls
   b5e0a:	3330      	addls	r3, #48	; 0x30
   b5e0c:	3337      	addhi	r3, #55	; 0x37
   b5e0e:	b2db      	uxtb	r3, r3
  } while(n);
   b5e10:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e12:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5e16:	d9ef      	bls.n	b5df8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5e18:	4621      	mov	r1, r4
   b5e1a:	f7ff ffb5 	bl	b5d88 <_ZN5Print5writeEPKc>
}
   b5e1e:	b00b      	add	sp, #44	; 0x2c
   b5e20:	bd30      	pop	{r4, r5, pc}

000b5e22 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e26:	b086      	sub	sp, #24
   b5e28:	af00      	add	r7, sp, #0
   b5e2a:	4605      	mov	r5, r0
   b5e2c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5e2e:	1d38      	adds	r0, r7, #4
   b5e30:	2114      	movs	r1, #20
{
   b5e32:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5e34:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5e36:	f7ff fd7f 	bl	b5938 <vsnprintf>

    if (n<bufsize)
   b5e3a:	2813      	cmp	r0, #19
   b5e3c:	d80e      	bhi.n	b5e5c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5e3e:	1d39      	adds	r1, r7, #4
   b5e40:	4628      	mov	r0, r5
   b5e42:	f7ff ffa1 	bl	b5d88 <_ZN5Print5writeEPKc>
   b5e46:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5e48:	b11e      	cbz	r6, b5e52 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5e4a:	4628      	mov	r0, r5
   b5e4c:	f7ff ffb5 	bl	b5dba <_ZN5Print7printlnEv>
   b5e50:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5e52:	4620      	mov	r0, r4
   b5e54:	3718      	adds	r7, #24
   b5e56:	46bd      	mov	sp, r7
   b5e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5e5c:	f100 0308 	add.w	r3, r0, #8
   b5e60:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5e64:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5e66:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5e6a:	4622      	mov	r2, r4
   b5e6c:	1c41      	adds	r1, r0, #1
   b5e6e:	683b      	ldr	r3, [r7, #0]
   b5e70:	4668      	mov	r0, sp
   b5e72:	f7ff fd61 	bl	b5938 <vsnprintf>
  return write(str);
   b5e76:	4669      	mov	r1, sp
   b5e78:	4628      	mov	r0, r5
   b5e7a:	f7ff ff85 	bl	b5d88 <_ZN5Print5writeEPKc>
   b5e7e:	4604      	mov	r4, r0
   b5e80:	46c5      	mov	sp, r8
   b5e82:	e7e1      	b.n	b5e48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5e84 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5e84:	4b01      	ldr	r3, [pc, #4]	; (b5e8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5e86:	4a02      	ldr	r2, [pc, #8]	; (b5e90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5e88:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5e8a:	4770      	bx	lr
   b5e8c:	2003e6c8 	.word	0x2003e6c8
   b5e90:	000b832c 	.word	0x000b832c

000b5e94 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5e94:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5e96:	2000      	movs	r0, #0
   b5e98:	f7ff fd16 	bl	b58c8 <spark_sync_time_pending>
   b5e9c:	b128      	cbz	r0, b5eaa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e9e:	f7ff fd03 	bl	b58a8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5ea2:	f080 0001 	eor.w	r0, r0, #1
   b5ea6:	b2c0      	uxtb	r0, r0
    }
   b5ea8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5eaa:	2001      	movs	r0, #1
   b5eac:	e7fc      	b.n	b5ea8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5eb0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5eb0:	b530      	push	{r4, r5, lr}
   b5eb2:	b093      	sub	sp, #76	; 0x4c
   b5eb4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5eb8:	4b19      	ldr	r3, [pc, #100]	; (b5f20 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5eba:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5ebc:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5ec0:	9b01      	ldr	r3, [sp, #4]
   b5ec2:	1852      	adds	r2, r2, r1
   b5ec4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5ec8:	4816      	ldr	r0, [pc, #88]	; (b5f24 <_ZN9TimeClass7timeStrEx+0x74>)
   b5eca:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5ece:	1852      	adds	r2, r2, r1
   b5ed0:	eb43 0300 	adc.w	r3, r3, r0
   b5ed4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5ed8:	2224      	movs	r2, #36	; 0x24
   b5eda:	eb0d 0002 	add.w	r0, sp, r2
   b5ede:	2100      	movs	r1, #0
   b5ee0:	f002 f834 	bl	b7f4c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5ee4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5ee6:	a909      	add	r1, sp, #36	; 0x24
   b5ee8:	4668      	mov	r0, sp
   b5eea:	f7ff fd55 	bl	b5998 <localtime_r>
    char ascstr[26] = {};
   b5eee:	2216      	movs	r2, #22
   b5ef0:	4629      	mov	r1, r5
   b5ef2:	a803      	add	r0, sp, #12
   b5ef4:	9502      	str	r5, [sp, #8]
   b5ef6:	f002 f829 	bl	b7f4c <memset>
    asctime_r(&calendar_time, ascstr);
   b5efa:	a902      	add	r1, sp, #8
   b5efc:	a809      	add	r0, sp, #36	; 0x24
   b5efe:	f001 ffe3 	bl	b7ec8 <asctime_r>
    int len = strlen(ascstr);
   b5f02:	a802      	add	r0, sp, #8
   b5f04:	f002 f887 	bl	b8016 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5f08:	ab12      	add	r3, sp, #72	; 0x48
   b5f0a:	4418      	add	r0, r3
    return String(ascstr);
   b5f0c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5f0e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5f12:	4620      	mov	r0, r4
   b5f14:	f7ff fe95 	bl	b5c42 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5f18:	4620      	mov	r0, r4
   b5f1a:	b013      	add	sp, #76	; 0x4c
   b5f1c:	bd30      	pop	{r4, r5, pc}
   b5f1e:	bf00      	nop
   b5f20:	2003e6e0 	.word	0x2003e6e0
   b5f24:	2003e6d8 	.word	0x2003e6d8

000b5f28 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b5f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f2c:	b0a4      	sub	sp, #144	; 0x90
   b5f2e:	4607      	mov	r7, r0
   b5f30:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f32:	a814      	add	r0, sp, #80	; 0x50
{
   b5f34:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f36:	223f      	movs	r2, #63	; 0x3f
{
   b5f38:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f3a:	f002 f874 	bl	b8026 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5f3e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5f40:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5f42:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5f46:	f002 f866 	bl	b8016 <strlen>
   b5f4a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b5f4c:	bb4c      	cbnz	r4, b5fa2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b5f4e:	4929      	ldr	r1, [pc, #164]	; (b5ff4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b5f50:	a803      	add	r0, sp, #12
   b5f52:	f002 f83b 	bl	b7fcc <strcpy>
   b5f56:	ac14      	add	r4, sp, #80	; 0x50
{
   b5f58:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b5f5a:	f105 39ff 	add.w	r9, r5, #4294967295
   b5f5e:	45b1      	cmp	r9, r6
   b5f60:	d934      	bls.n	b5fcc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b5f62:	7823      	ldrb	r3, [r4, #0]
   b5f64:	2b25      	cmp	r3, #37	; 0x25
   b5f66:	f106 0a01 	add.w	sl, r6, #1
   b5f6a:	d117      	bne.n	b5f9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b5f6c:	7863      	ldrb	r3, [r4, #1]
   b5f6e:	2b7a      	cmp	r3, #122	; 0x7a
   b5f70:	d114      	bne.n	b5f9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b5f72:	a803      	add	r0, sp, #12
   b5f74:	f002 f84f 	bl	b8016 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5f78:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b5f7a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5f7c:	1830      	adds	r0, r6, r0
   b5f7e:	4418      	add	r0, r3
   b5f80:	eba9 0206 	sub.w	r2, r9, r6
   b5f84:	1ca1      	adds	r1, r4, #2
   b5f86:	f001 ffd3 	bl	b7f30 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b5f8a:	462a      	mov	r2, r5
   b5f8c:	a903      	add	r1, sp, #12
   b5f8e:	4620      	mov	r0, r4
   b5f90:	f001 ffce 	bl	b7f30 <memcpy>
            len = strlen(format_str);
   b5f94:	a814      	add	r0, sp, #80	; 0x50
   b5f96:	f002 f83e 	bl	b8016 <strlen>
   b5f9a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b5f9c:	3401      	adds	r4, #1
   b5f9e:	4656      	mov	r6, sl
   b5fa0:	e7db      	b.n	b5f5a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b5fa2:	233c      	movs	r3, #60	; 0x3c
   b5fa4:	fb94 f2f3 	sdiv	r2, r4, r3
   b5fa8:	2a00      	cmp	r2, #0
   b5faa:	bfb8      	it	lt
   b5fac:	4252      	neglt	r2, r2
   b5fae:	fbb2 f1f3 	udiv	r1, r2, r3
   b5fb2:	fb03 2211 	mls	r2, r3, r1, r2
   b5fb6:	9200      	str	r2, [sp, #0]
   b5fb8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b5fbc:	4a0e      	ldr	r2, [pc, #56]	; (b5ff8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b5fbe:	fb94 f3f3 	sdiv	r3, r4, r3
   b5fc2:	2110      	movs	r1, #16
   b5fc4:	a803      	add	r0, sp, #12
   b5fc6:	f7ff fcaf 	bl	b5928 <snprintf>
   b5fca:	e7c4      	b.n	b5f56 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b5fcc:	2100      	movs	r1, #0
   b5fce:	222e      	movs	r2, #46	; 0x2e
   b5fd0:	a808      	add	r0, sp, #32
   b5fd2:	9107      	str	r1, [sp, #28]
   b5fd4:	f001 ffba 	bl	b7f4c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b5fd8:	4643      	mov	r3, r8
   b5fda:	aa14      	add	r2, sp, #80	; 0x50
   b5fdc:	2132      	movs	r1, #50	; 0x32
   b5fde:	a807      	add	r0, sp, #28
   b5fe0:	f7ff fcd2 	bl	b5988 <strftime>
    return String(buf);
   b5fe4:	a907      	add	r1, sp, #28
   b5fe6:	4638      	mov	r0, r7
   b5fe8:	f7ff fe2b 	bl	b5c42 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5fec:	4638      	mov	r0, r7
   b5fee:	b024      	add	sp, #144	; 0x90
   b5ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5ff4:	000b8330 	.word	0x000b8330
   b5ff8:	000b8332 	.word	0x000b8332

000b5ffc <_ZN9TimeClass6formatExPKc>:
{
   b5ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ffe:	b08d      	sub	sp, #52	; 0x34
   b6000:	e9cd 2300 	strd	r2, r3, [sp]
   b6004:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b6006:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b6008:	b915      	cbnz	r5, b6010 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b600a:	4b19      	ldr	r3, [pc, #100]	; (b6070 <_ZN9TimeClass6formatExPKc+0x74>)
   b600c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b600e:	b12d      	cbz	r5, b601c <_ZN9TimeClass6formatExPKc+0x20>
   b6010:	4b18      	ldr	r3, [pc, #96]	; (b6074 <_ZN9TimeClass6formatExPKc+0x78>)
   b6012:	4628      	mov	r0, r5
   b6014:	6819      	ldr	r1, [r3, #0]
   b6016:	f001 ffcf 	bl	b7fb8 <strcmp>
   b601a:	b938      	cbnz	r0, b602c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b601c:	e9dd 2300 	ldrd	r2, r3, [sp]
   b6020:	4620      	mov	r0, r4
   b6022:	f7ff ff45 	bl	b5eb0 <_ZN9TimeClass7timeStrEx>
}
   b6026:	4620      	mov	r0, r4
   b6028:	b00d      	add	sp, #52	; 0x34
   b602a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b602c:	4e12      	ldr	r6, [pc, #72]	; (b6078 <_ZN9TimeClass6formatExPKc+0x7c>)
   b602e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b6030:	4f12      	ldr	r7, [pc, #72]	; (b607c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b6032:	e9d6 3200 	ldrd	r3, r2, [r6]
   b6036:	185b      	adds	r3, r3, r1
   b6038:	9901      	ldr	r1, [sp, #4]
   b603a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b603e:	e9d7 0100 	ldrd	r0, r1, [r7]
   b6042:	181b      	adds	r3, r3, r0
   b6044:	eb42 0201 	adc.w	r2, r2, r1
   b6048:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b604c:	2100      	movs	r1, #0
   b604e:	2224      	movs	r2, #36	; 0x24
   b6050:	a803      	add	r0, sp, #12
   b6052:	f001 ff7b 	bl	b7f4c <memset>
    localtime_r(&t, &calendar_time);
   b6056:	a903      	add	r1, sp, #12
   b6058:	4668      	mov	r0, sp
   b605a:	f7ff fc9d 	bl	b5998 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b605e:	6832      	ldr	r2, [r6, #0]
   b6060:	683b      	ldr	r3, [r7, #0]
   b6062:	a903      	add	r1, sp, #12
   b6064:	4413      	add	r3, r2
   b6066:	4620      	mov	r0, r4
   b6068:	462a      	mov	r2, r5
   b606a:	f7ff ff5d 	bl	b5f28 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b606e:	e7da      	b.n	b6026 <_ZN9TimeClass6formatExPKc+0x2a>
   b6070:	2003e6d0 	.word	0x2003e6d0
   b6074:	2003e588 	.word	0x2003e588
   b6078:	2003e6e0 	.word	0x2003e6e0
   b607c:	2003e6d8 	.word	0x2003e6d8

000b6080 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b6080:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6082:	2000      	movs	r0, #0
   b6084:	f7ff fa2c 	bl	b54e0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6088:	4604      	mov	r4, r0
   b608a:	b9a0      	cbnz	r0, b60b6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b608c:	f7ff fb58 	bl	b5740 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6090:	2801      	cmp	r0, #1
   b6092:	d110      	bne.n	b60b6 <_ZN9TimeClass7isValidEv+0x36>
   b6094:	4620      	mov	r0, r4
   b6096:	f7ff fb7b 	bl	b5790 <system_thread_get_state>
   b609a:	b960      	cbnz	r0, b60b6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b609c:	f7ff fefa 	bl	b5e94 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b60a0:	b910      	cbnz	r0, b60a8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b60a2:	f7ff fbf1 	bl	b5888 <spark_process>
        while (_while() && !_condition()) {
   b60a6:	e7f9      	b.n	b609c <_ZN9TimeClass7isValidEv+0x1c>
   b60a8:	f7ff fef4 	bl	b5e94 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b60ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b60b0:	2000      	movs	r0, #0
   b60b2:	f7ff ba15 	b.w	b54e0 <hal_rtc_time_is_valid>
}
   b60b6:	4620      	mov	r0, r4
   b60b8:	bd10      	pop	{r4, pc}

000b60ba <_ZN9TimeClass3nowEv>:
{
   b60ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b60bc:	f7ff ffe0 	bl	b6080 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b60c0:	2210      	movs	r2, #16
   b60c2:	2100      	movs	r1, #0
   b60c4:	4668      	mov	r0, sp
   b60c6:	f001 ff41 	bl	b7f4c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b60ca:	2100      	movs	r1, #0
   b60cc:	4668      	mov	r0, sp
   b60ce:	f7ff fa0f 	bl	b54f0 <hal_rtc_get_time>
}
   b60d2:	9800      	ldr	r0, [sp, #0]
   b60d4:	b005      	add	sp, #20
   b60d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b60dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b60dc:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b60de:	681a      	ldr	r2, [r3, #0]
   b60e0:	4b02      	ldr	r3, [pc, #8]	; (b60ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b60e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b60e4:	4770      	bx	lr
   b60e6:	bf00      	nop
   b60e8:	2003e588 	.word	0x2003e588
   b60ec:	2003e6d0 	.word	0x2003e6d0

000b60f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b60f0:	2100      	movs	r1, #0
   b60f2:	f7ff bb35 	b.w	b5760 <system_delay_ms>
	...

000b60f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b60f8:	4b01      	ldr	r3, [pc, #4]	; (b6100 <_GLOBAL__sub_I_RGB+0x8>)
   b60fa:	2200      	movs	r2, #0
   b60fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b60fe:	4770      	bx	lr
   b6100:	2003e6e8 	.word	0x2003e6e8

000b6104 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6104:	4b01      	ldr	r3, [pc, #4]	; (b610c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6106:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6108:	4770      	bx	lr
   b610a:	bf00      	nop
   b610c:	2003e590 	.word	0x2003e590

000b6110 <serialEventRun>:
{
   b6110:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6112:	4b0b      	ldr	r3, [pc, #44]	; (b6140 <serialEventRun+0x30>)
   b6114:	b143      	cbz	r3, b6128 <serialEventRun+0x18>
   b6116:	f000 fbff 	bl	b6918 <_Z16_fetch_usbserialv>
   b611a:	6803      	ldr	r3, [r0, #0]
   b611c:	691b      	ldr	r3, [r3, #16]
   b611e:	4798      	blx	r3
   b6120:	2800      	cmp	r0, #0
   b6122:	dd01      	ble.n	b6128 <serialEventRun+0x18>
        serialEvent();
   b6124:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6128:	4b06      	ldr	r3, [pc, #24]	; (b6144 <serialEventRun+0x34>)
   b612a:	b143      	cbz	r3, b613e <serialEventRun+0x2e>
   b612c:	f000 ff80 	bl	b7030 <_Z22__fetch_global_Serial1v>
   b6130:	6803      	ldr	r3, [r0, #0]
   b6132:	691b      	ldr	r3, [r3, #16]
   b6134:	4798      	blx	r3
   b6136:	2800      	cmp	r0, #0
   b6138:	dd01      	ble.n	b613e <serialEventRun+0x2e>
        serialEvent1();
   b613a:	f3af 8000 	nop.w
}
   b613e:	bd08      	pop	{r3, pc}
	...

000b6148 <_post_loop>:
{
   b6148:	b508      	push	{r3, lr}
	serialEventRun();
   b614a:	f7ff ffe1 	bl	b6110 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b614e:	f7ff f9bf 	bl	b54d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6152:	4b01      	ldr	r3, [pc, #4]	; (b6158 <_post_loop+0x10>)
   b6154:	6018      	str	r0, [r3, #0]
}
   b6156:	bd08      	pop	{r3, pc}
   b6158:	2003e740 	.word	0x2003e740

000b615c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b615c:	4805      	ldr	r0, [pc, #20]	; (b6174 <_Z33system_initialize_user_backup_ramv+0x18>)
   b615e:	4a06      	ldr	r2, [pc, #24]	; (b6178 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6160:	4906      	ldr	r1, [pc, #24]	; (b617c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6162:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6164:	1a12      	subs	r2, r2, r0
   b6166:	f001 fee3 	bl	b7f30 <memcpy>
    __backup_sram_signature = signature;
   b616a:	4b05      	ldr	r3, [pc, #20]	; (b6180 <_Z33system_initialize_user_backup_ramv+0x24>)
   b616c:	4a05      	ldr	r2, [pc, #20]	; (b6184 <_Z33system_initialize_user_backup_ramv+0x28>)
   b616e:	601a      	str	r2, [r3, #0]
}
   b6170:	bd08      	pop	{r3, pc}
   b6172:	bf00      	nop
   b6174:	2003f400 	.word	0x2003f400
   b6178:	2003f404 	.word	0x2003f404
   b617c:	000b86fc 	.word	0x000b86fc
   b6180:	2003f400 	.word	0x2003f400
   b6184:	9a271c1e 	.word	0x9a271c1e

000b6188 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6188:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b618a:	2300      	movs	r3, #0
   b618c:	9300      	str	r3, [sp, #0]
   b618e:	461a      	mov	r2, r3
   b6190:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6194:	f7ff fb0e 	bl	b57b4 <system_ctrl_set_result>
}
   b6198:	b003      	add	sp, #12
   b619a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b61a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b61a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b61a2:	8843      	ldrh	r3, [r0, #2]
   b61a4:	2b0a      	cmp	r3, #10
   b61a6:	d008      	beq.n	b61ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b61a8:	2b50      	cmp	r3, #80	; 0x50
   b61aa:	d10b      	bne.n	b61c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b61ac:	4b09      	ldr	r3, [pc, #36]	; (b61d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b61ae:	681b      	ldr	r3, [r3, #0]
   b61b0:	b14b      	cbz	r3, b61c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b61b2:	b003      	add	sp, #12
   b61b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b61b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b61ba:	f7ff ffe5 	bl	b6188 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b61be:	b003      	add	sp, #12
   b61c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b61c4:	2300      	movs	r3, #0
   b61c6:	9300      	str	r3, [sp, #0]
   b61c8:	461a      	mov	r2, r3
   b61ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b61ce:	f7ff faf1 	bl	b57b4 <system_ctrl_set_result>
}
   b61d2:	e7f4      	b.n	b61be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b61d4:	2003e6fc 	.word	0x2003e6fc

000b61d8 <module_user_init_hook>:
{
   b61d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b61da:	4812      	ldr	r0, [pc, #72]	; (b6224 <module_user_init_hook+0x4c>)
   b61dc:	2100      	movs	r1, #0
   b61de:	f7ff fbcb 	bl	b5978 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b61e2:	4b11      	ldr	r3, [pc, #68]	; (b6228 <module_user_init_hook+0x50>)
   b61e4:	681a      	ldr	r2, [r3, #0]
   b61e6:	4b11      	ldr	r3, [pc, #68]	; (b622c <module_user_init_hook+0x54>)
   b61e8:	429a      	cmp	r2, r3
   b61ea:	4b11      	ldr	r3, [pc, #68]	; (b6230 <module_user_init_hook+0x58>)
   b61ec:	bf0c      	ite	eq
   b61ee:	2201      	moveq	r2, #1
   b61f0:	2200      	movne	r2, #0
   b61f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b61f4:	d001      	beq.n	b61fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b61f6:	f7ff ffb1 	bl	b615c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b61fa:	f7ff f961 	bl	b54c0 <HAL_RNG_GetRandomNumber>
   b61fe:	4604      	mov	r4, r0
    srand(seed);
   b6200:	f001 feac 	bl	b7f5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6204:	4b0b      	ldr	r3, [pc, #44]	; (b6234 <module_user_init_hook+0x5c>)
   b6206:	b113      	cbz	r3, b620e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6208:	4620      	mov	r0, r4
   b620a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b620e:	2100      	movs	r1, #0
   b6210:	4808      	ldr	r0, [pc, #32]	; (b6234 <module_user_init_hook+0x5c>)
   b6212:	f7ff fb61 	bl	b58d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b621a:	4807      	ldr	r0, [pc, #28]	; (b6238 <module_user_init_hook+0x60>)
   b621c:	2100      	movs	r1, #0
   b621e:	f7ff babf 	b.w	b57a0 <system_ctrl_set_app_request_handler>
   b6222:	bf00      	nop
   b6224:	000b6105 	.word	0x000b6105
   b6228:	2003f400 	.word	0x2003f400
   b622c:	9a271c1e 	.word	0x9a271c1e
   b6230:	2003e6f8 	.word	0x2003e6f8
   b6234:	00000000 	.word	0x00000000
   b6238:	000b61a1 	.word	0x000b61a1

000b623c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b623c:	4770      	bx	lr

000b623e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b623e:	2000      	movs	r0, #0
   b6240:	4770      	bx	lr

000b6242 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6242:	b510      	push	{r4, lr}
   b6244:	2110      	movs	r1, #16
   b6246:	4604      	mov	r4, r0
   b6248:	f7fd ff29 	bl	b409e <_ZdlPvj>
   b624c:	4620      	mov	r0, r4
   b624e:	bd10      	pop	{r4, pc}

000b6250 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6250:	b508      	push	{r3, lr}
      { delete this; }
   b6252:	f7ff fff6 	bl	b6242 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6256:	bd08      	pop	{r3, pc}

000b6258 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6258:	b530      	push	{r4, r5, lr}
        type_(type) {
   b625a:	2200      	movs	r2, #0
   b625c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6260:	6002      	str	r2, [r0, #0]
   b6262:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6264:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6266:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6268:	680c      	ldr	r4, [r1, #0]
   b626a:	8085      	strh	r5, [r0, #4]
   b626c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b626e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6270:	bd30      	pop	{r4, r5, pc}

000b6272 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6272:	b510      	push	{r4, lr}
   b6274:	4604      	mov	r4, r0
    free((void*)msg_);
   b6276:	6800      	ldr	r0, [r0, #0]
   b6278:	f7ff fb3e 	bl	b58f8 <free>
}
   b627c:	4620      	mov	r0, r4
   b627e:	bd10      	pop	{r4, pc}

000b6280 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6280:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6282:	68c4      	ldr	r4, [r0, #12]
   b6284:	b1f4      	cbz	r4, b62c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6286:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6288:	2b02      	cmp	r3, #2
   b628a:	d103      	bne.n	b6294 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b628c:	f104 000c 	add.w	r0, r4, #12
   b6290:	f7ff ffef 	bl	b6272 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6294:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6296:	b135      	cbz	r5, b62a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6298:	4628      	mov	r0, r5
   b629a:	f7ff fd20 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b629e:	2110      	movs	r1, #16
   b62a0:	4628      	mov	r0, r5
   b62a2:	f7fd fefc 	bl	b409e <_ZdlPvj>
   b62a6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b62a8:	b135      	cbz	r5, b62b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b62aa:	4628      	mov	r0, r5
   b62ac:	f7ff fd17 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b62b0:	2110      	movs	r1, #16
   b62b2:	4628      	mov	r0, r5
   b62b4:	f7fd fef3 	bl	b409e <_ZdlPvj>
   b62b8:	4620      	mov	r0, r4
   b62ba:	2114      	movs	r1, #20
   b62bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b62c0:	f7fd beed 	b.w	b409e <_ZdlPvj>
   b62c4:	bd38      	pop	{r3, r4, r5, pc}

000b62c6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b62c6:	680b      	ldr	r3, [r1, #0]
   b62c8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b62ca:	684b      	ldr	r3, [r1, #4]
   b62cc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b62ce:	b113      	cbz	r3, b62d6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b62d0:	685a      	ldr	r2, [r3, #4]
   b62d2:	3201      	adds	r2, #1
   b62d4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b62d6:	4770      	bx	lr

000b62d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b62d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b62da:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b62dc:	4668      	mov	r0, sp
   b62de:	460d      	mov	r5, r1
   b62e0:	f7ff fff1 	bl	b62c6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b62e4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b62e6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b62e8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b62ea:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b62ec:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b62ee:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b62f0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b62f2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b62f4:	f7ff fd10 	bl	b5d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b62f8:	b135      	cbz	r5, b6308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b62fa:	1d28      	adds	r0, r5, #4
   b62fc:	f7ff fd0c 	bl	b5d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6300:	2108      	movs	r1, #8
   b6302:	4628      	mov	r0, r5
   b6304:	f7fd fecb 	bl	b409e <_ZdlPvj>
        return p;
    }
   b6308:	4620      	mov	r0, r4
   b630a:	b003      	add	sp, #12
   b630c:	bd30      	pop	{r4, r5, pc}

000b630e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b630e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6310:	b510      	push	{r4, lr}
      if (_M_empty())
   b6312:	b90a      	cbnz	r2, b6318 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6314:	f000 feee 	bl	b70f4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b6318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b631c:	68c3      	ldr	r3, [r0, #12]
   b631e:	4718      	bx	r3

000b6320 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6320:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6322:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6324:	f100 0110 	add.w	r1, r0, #16
   b6328:	f7ff fff1 	bl	b630e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b632c:	bd08      	pop	{r3, pc}

000b632e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b632e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6330:	b510      	push	{r4, lr}
      if (_M_empty())
   b6332:	b90a      	cbnz	r2, b6338 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6334:	f000 fede 	bl	b70f4 <_ZSt25__throw_bad_function_callv>
    }
   b6338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b633c:	68c3      	ldr	r3, [r0, #12]
   b633e:	4718      	bx	r3

000b6340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6340:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6342:	6800      	ldr	r0, [r0, #0]
   b6344:	f100 0110 	add.w	r1, r0, #16
   b6348:	f7ff fff1 	bl	b632e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b634c:	bd08      	pop	{r3, pc}
	...

000b6350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6350:	b538      	push	{r3, r4, r5, lr}
   b6352:	2300      	movs	r3, #0
   b6354:	4604      	mov	r4, r0
   b6356:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6358:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b635a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b635c:	f7fd fe9b 	bl	b4096 <_Znwj>
   b6360:	b128      	cbz	r0, b636e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6362:	2301      	movs	r3, #1
   b6364:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6368:	4b02      	ldr	r3, [pc, #8]	; (b6374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b636a:	6003      	str	r3, [r0, #0]
   b636c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b636e:	6020      	str	r0, [r4, #0]
	}
   b6370:	4620      	mov	r0, r4
   b6372:	bd38      	pop	{r3, r4, r5, pc}
   b6374:	000b8364 	.word	0x000b8364

000b6378 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6378:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b637a:	2300      	movs	r3, #0
   b637c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b637e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6380:	4604      	mov	r4, r0
   b6382:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6384:	b12b      	cbz	r3, b6392 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6386:	2202      	movs	r2, #2
   b6388:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b638a:	68eb      	ldr	r3, [r5, #12]
   b638c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b638e:	68ab      	ldr	r3, [r5, #8]
   b6390:	60a3      	str	r3, [r4, #8]
    }
   b6392:	4620      	mov	r0, r4
   b6394:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6398:	b5f0      	push	{r4, r5, r6, r7, lr}
   b639a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b639c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b639e:	4668      	mov	r0, sp
   b63a0:	f7ff ff5a 	bl	b6258 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b63a4:	f04f 0302 	mov.w	r3, #2
   b63a8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b63ac:	2a00      	cmp	r2, #0
   b63ae:	d103      	bne.n	b63b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b63b0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b63b4:	2900      	cmp	r1, #0
   b63b6:	d1f7      	bne.n	b63a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b63b8:	d125      	bne.n	b6406 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b63ba:	f104 050c 	add.w	r5, r4, #12
   b63be:	4669      	mov	r1, sp
   b63c0:	4628      	mov	r0, r5
   b63c2:	f7ff ff49 	bl	b6258 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b63c6:	f3bf 8f5b 	dmb	ish
   b63ca:	2301      	movs	r3, #1
   b63cc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b63ce:	2000      	movs	r0, #0
   b63d0:	f104 0308 	add.w	r3, r4, #8
   b63d4:	f3bf 8f5b 	dmb	ish
   b63d8:	e853 6f00 	ldrex	r6, [r3]
   b63dc:	e843 0200 	strex	r2, r0, [r3]
   b63e0:	2a00      	cmp	r2, #0
   b63e2:	d1f9      	bne.n	b63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b63e4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b63e8:	b16e      	cbz	r6, b6406 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b63ea:	f7ff f9c1 	bl	b5770 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b63ee:	b178      	cbz	r0, b6410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b63f0:	4629      	mov	r1, r5
   b63f2:	4630      	mov	r0, r6
   b63f4:	f7ff ff8b 	bl	b630e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b63f8:	4630      	mov	r0, r6
   b63fa:	f7ff fc70 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b63fe:	2110      	movs	r1, #16
   b6400:	4630      	mov	r0, r6
   b6402:	f7fd fe4c 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b6406:	4668      	mov	r0, sp
   b6408:	f7ff ff33 	bl	b6272 <_ZN8particle5ErrorD1Ev>
    }
   b640c:	b009      	add	sp, #36	; 0x24
   b640e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6410:	4631      	mov	r1, r6
   b6412:	a802      	add	r0, sp, #8
   b6414:	f7ff ffb0 	bl	b6378 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6418:	68e0      	ldr	r0, [r4, #12]
   b641a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b641e:	b108      	cbz	r0, b6424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6420:	f001 fddc 	bl	b7fdc <strdup>
        type_(type) {
   b6424:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6426:	2010      	movs	r0, #16
   b6428:	f8ad 501c 	strh.w	r5, [sp, #28]
   b642c:	f7fd fe33 	bl	b4096 <_Znwj>
   b6430:	4605      	mov	r5, r0
   b6432:	b1e8      	cbz	r0, b6470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6434:	2700      	movs	r7, #0
   b6436:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6438:	2018      	movs	r0, #24
   b643a:	f7fd fe2c 	bl	b4096 <_Znwj>
   b643e:	4604      	mov	r4, r0
   b6440:	b188      	cbz	r0, b6466 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6442:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6444:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6446:	a802      	add	r0, sp, #8
   b6448:	f7ff fc6e 	bl	b5d28 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b644c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b644e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6450:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6452:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6454:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6456:	a906      	add	r1, sp, #24
   b6458:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b645a:	60e3      	str	r3, [r4, #12]
   b645c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6460:	9205      	str	r2, [sp, #20]
   b6462:	f7ff fef9 	bl	b6258 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6466:	4b08      	ldr	r3, [pc, #32]	; (b6488 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6468:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b646a:	4b08      	ldr	r3, [pc, #32]	; (b648c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b646c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b646e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6470:	a806      	add	r0, sp, #24
   b6472:	f7ff fefe 	bl	b6272 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6476:	a802      	add	r0, sp, #8
   b6478:	f7ff fc31 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b647c:	2200      	movs	r2, #0
   b647e:	4629      	mov	r1, r5
   b6480:	4803      	ldr	r0, [pc, #12]	; (b6490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6482:	f7ff f97d 	bl	b5780 <application_thread_invoke>
   b6486:	e7b7      	b.n	b63f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6488:	000b6321 	.word	0x000b6321
   b648c:	000b65a5 	.word	0x000b65a5
   b6490:	000b6a09 	.word	0x000b6a09

000b6494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6498:	b08b      	sub	sp, #44	; 0x2c
   b649a:	4605      	mov	r5, r0
   b649c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b64a0:	460f      	mov	r7, r1
   b64a2:	4690      	mov	r8, r2
   b64a4:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b64a6:	f7ff f9ff 	bl	b58a8 <spark_cloud_flag_connected>
   b64aa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b64ac:	4683      	mov	fp, r0
   b64ae:	bb38      	cbnz	r0, b6500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b64b0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b64b4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b64b6:	a905      	add	r1, sp, #20
   b64b8:	4630      	mov	r0, r6
   b64ba:	f8ad 3018 	strh.w	r3, [sp, #24]
   b64be:	f7ff fecb 	bl	b6258 <_ZN8particle5ErrorC1EOS0_>
   b64c2:	2014      	movs	r0, #20
   b64c4:	f7fd fde7 	bl	b4096 <_Znwj>
   b64c8:	4604      	mov	r4, r0
   b64ca:	b148      	cbz	r0, b64e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b64cc:	2302      	movs	r3, #2
   b64ce:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b64d0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b64d2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b64d6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b64d8:	4631      	mov	r1, r6
   b64da:	300c      	adds	r0, #12
   b64dc:	f7ff febc 	bl	b6258 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b64e0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b64e2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b64e4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b64e8:	f7ff ff32 	bl	b6350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b64ec:	4630      	mov	r0, r6
   b64ee:	f7ff fec0 	bl	b6272 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b64f2:	a805      	add	r0, sp, #20
   b64f4:	f7ff febd 	bl	b6272 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b64f8:	4628      	mov	r0, r5
   b64fa:	b00b      	add	sp, #44	; 0x2c
   b64fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6500:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6502:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6504:	2014      	movs	r0, #20
   b6506:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b650a:	9307      	str	r3, [sp, #28]
   b650c:	f7fd fdc3 	bl	b4096 <_Znwj>
   b6510:	4601      	mov	r1, r0
   b6512:	b118      	cbz	r0, b651c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6514:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6518:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b651a:	7044      	strb	r4, [r0, #1]
   b651c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b651e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6520:	f7ff ff16 	bl	b6350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6524:	4b1e      	ldr	r3, [pc, #120]	; (b65a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6526:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6528:	2008      	movs	r0, #8
   b652a:	f7fd fdb4 	bl	b4096 <_Znwj>
   b652e:	4604      	mov	r4, r0
   b6530:	b110      	cbz	r0, b6538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6532:	a903      	add	r1, sp, #12
   b6534:	f7ff fec7 	bl	b62c6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6538:	9600      	str	r6, [sp, #0]
   b653a:	fa5f f38a 	uxtb.w	r3, sl
   b653e:	464a      	mov	r2, r9
   b6540:	4641      	mov	r1, r8
   b6542:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6544:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6546:	f7ff f9b7 	bl	b58b8 <spark_send_event>
   b654a:	b9b8      	cbnz	r0, b657c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b654c:	9b03      	ldr	r3, [sp, #12]
   b654e:	785b      	ldrb	r3, [r3, #1]
   b6550:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6554:	b993      	cbnz	r3, b657c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6556:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b655a:	a905      	add	r1, sp, #20
   b655c:	a803      	add	r0, sp, #12
   b655e:	9205      	str	r2, [sp, #20]
   b6560:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6564:	f7ff ff18 	bl	b6398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6568:	a805      	add	r0, sp, #20
   b656a:	f7ff fe82 	bl	b6272 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b656e:	a805      	add	r0, sp, #20
   b6570:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6572:	f7ff feb1 	bl	b62d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6576:	a806      	add	r0, sp, #24
   b6578:	f7ff fbce 	bl	b5d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b657c:	a903      	add	r1, sp, #12
   b657e:	a805      	add	r0, sp, #20
   b6580:	f7ff fea1 	bl	b62c6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6584:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6586:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6588:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b658a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b658c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b658e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6590:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6592:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6594:	f7ff fbc0 	bl	b5d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6598:	a804      	add	r0, sp, #16
   b659a:	f7ff fbbd 	bl	b5d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b659e:	e7ab      	b.n	b64f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b65a0:	000b6621 	.word	0x000b6621

000b65a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b65a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b65a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65a8:	4605      	mov	r5, r0
	switch (__op)
   b65aa:	d103      	bne.n	b65b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b65ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b65ae:	6003      	str	r3, [r0, #0]
      }
   b65b0:	2000      	movs	r0, #0
   b65b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b65b4:	2a02      	cmp	r2, #2
   b65b6:	d010      	beq.n	b65da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b65b8:	2a03      	cmp	r2, #3
   b65ba:	d1f9      	bne.n	b65b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b65bc:	6804      	ldr	r4, [r0, #0]
   b65be:	2c00      	cmp	r4, #0
   b65c0:	d0f6      	beq.n	b65b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b65c2:	f104 0010 	add.w	r0, r4, #16
   b65c6:	f7ff fe54 	bl	b6272 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b65ca:	4620      	mov	r0, r4
   b65cc:	f7ff fb87 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b65d0:	2118      	movs	r1, #24
   b65d2:	4620      	mov	r0, r4
   b65d4:	f7fd fd63 	bl	b409e <_ZdlPvj>
   b65d8:	e7ea      	b.n	b65b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b65da:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b65dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b65de:	f7fd fd5a 	bl	b4096 <_Znwj>
   b65e2:	4604      	mov	r4, r0
   b65e4:	b150      	cbz	r0, b65fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b65e6:	4631      	mov	r1, r6
   b65e8:	f7ff fec6 	bl	b6378 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b65ec:	6930      	ldr	r0, [r6, #16]
   b65ee:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b65f2:	b108      	cbz	r0, b65f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b65f4:	f001 fcf2 	bl	b7fdc <strdup>
        type_(type) {
   b65f8:	6120      	str	r0, [r4, #16]
   b65fa:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b65fc:	602c      	str	r4, [r5, #0]
	}
   b65fe:	e7d7      	b.n	b65b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6600 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6600:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6602:	2300      	movs	r3, #0
   b6604:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6606:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6608:	4604      	mov	r4, r0
   b660a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b660c:	b12b      	cbz	r3, b661a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b660e:	2202      	movs	r2, #2
   b6610:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6612:	68eb      	ldr	r3, [r5, #12]
   b6614:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6616:	68ab      	ldr	r3, [r5, #8]
   b6618:	60a3      	str	r3, [r4, #8]
    }
   b661a:	4620      	mov	r0, r4
   b661c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6620:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6622:	b089      	sub	sp, #36	; 0x24
   b6624:	4604      	mov	r4, r0
   b6626:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6628:	a801      	add	r0, sp, #4
   b662a:	4611      	mov	r1, r2
   b662c:	f7ff fe54 	bl	b62d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6630:	b1a4      	cbz	r4, b665c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6632:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6634:	b11d      	cbz	r5, b663e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6636:	4628      	mov	r0, r5
   b6638:	f001 fcd0 	bl	b7fdc <strdup>
   b663c:	4605      	mov	r5, r0
   b663e:	a801      	add	r0, sp, #4
   b6640:	a903      	add	r1, sp, #12
        type_(type) {
   b6642:	9503      	str	r5, [sp, #12]
   b6644:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6648:	f7ff fea6 	bl	b6398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b664c:	a803      	add	r0, sp, #12
   b664e:	f7ff fe10 	bl	b6272 <_ZN8particle5ErrorD1Ev>
   b6652:	a802      	add	r0, sp, #8
   b6654:	f7ff fb60 	bl	b5d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6658:	b009      	add	sp, #36	; 0x24
   b665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b665c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b665e:	2301      	movs	r3, #1
   b6660:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6664:	2a00      	cmp	r2, #0
   b6666:	d103      	bne.n	b6670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6668:	e8c5 3f41 	strexb	r1, r3, [r5]
   b666c:	2900      	cmp	r1, #0
   b666e:	d1f7      	bne.n	b6660 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6670:	d1ef      	bne.n	b6652 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6672:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6674:	f3bf 8f5b 	dmb	ish
   b6678:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b667a:	1d2b      	adds	r3, r5, #4
   b667c:	f3bf 8f5b 	dmb	ish
   b6680:	e853 6f00 	ldrex	r6, [r3]
   b6684:	e843 4200 	strex	r2, r4, [r3]
   b6688:	2a00      	cmp	r2, #0
   b668a:	d1f9      	bne.n	b6680 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b668c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6690:	2e00      	cmp	r6, #0
   b6692:	d0de      	beq.n	b6652 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6694:	4620      	mov	r0, r4
   b6696:	f7ff f86b 	bl	b5770 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b669a:	4607      	mov	r7, r0
   b669c:	b160      	cbz	r0, b66b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b669e:	f105 010c 	add.w	r1, r5, #12
   b66a2:	4630      	mov	r0, r6
   b66a4:	f7ff fe43 	bl	b632e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b66a8:	4630      	mov	r0, r6
   b66aa:	f7ff fb18 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b66ae:	2110      	movs	r1, #16
   b66b0:	4630      	mov	r0, r6
   b66b2:	f7fd fcf4 	bl	b409e <_ZdlPvj>
   b66b6:	e7cc      	b.n	b6652 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b66b8:	4631      	mov	r1, r6
   b66ba:	a803      	add	r0, sp, #12
   b66bc:	f7ff ffa0 	bl	b6600 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b66c0:	7b2b      	ldrb	r3, [r5, #12]
   b66c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b66c6:	2010      	movs	r0, #16
   b66c8:	f7fd fce5 	bl	b4096 <_Znwj>
   b66cc:	4605      	mov	r5, r0
   b66ce:	b1d0      	cbz	r0, b6706 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b66d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66d2:	2014      	movs	r0, #20
   b66d4:	f7fd fcdf 	bl	b4096 <_Znwj>
   b66d8:	4604      	mov	r4, r0
   b66da:	b178      	cbz	r0, b66fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b66dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b66de:	4601      	mov	r1, r0
   b66e0:	a803      	add	r0, sp, #12
   b66e2:	f7ff fb21 	bl	b5d28 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b66e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b66ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b66ee:	9205      	str	r2, [sp, #20]
   b66f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b66f2:	60e3      	str	r3, [r4, #12]
   b66f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b66f8:	9206      	str	r2, [sp, #24]
   b66fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b66fc:	4b06      	ldr	r3, [pc, #24]	; (b6718 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b66fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6700:	4b06      	ldr	r3, [pc, #24]	; (b671c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6702:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6704:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6706:	a803      	add	r0, sp, #12
   b6708:	f7ff fae9 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b670c:	2200      	movs	r2, #0
   b670e:	4629      	mov	r1, r5
   b6710:	4803      	ldr	r0, [pc, #12]	; (b6720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6712:	f7ff f835 	bl	b5780 <application_thread_invoke>
   b6716:	e7c7      	b.n	b66a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6718:	000b6341 	.word	0x000b6341
   b671c:	000b6725 	.word	0x000b6725
   b6720:	000b6a09 	.word	0x000b6a09

000b6724 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6724:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6726:	b570      	push	{r4, r5, r6, lr}
   b6728:	4604      	mov	r4, r0
	switch (__op)
   b672a:	d103      	bne.n	b6734 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b672c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b672e:	6003      	str	r3, [r0, #0]
      }
   b6730:	2000      	movs	r0, #0
   b6732:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6734:	2a02      	cmp	r2, #2
   b6736:	d00c      	beq.n	b6752 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6738:	2a03      	cmp	r2, #3
   b673a:	d1f9      	bne.n	b6730 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b673c:	6804      	ldr	r4, [r0, #0]
   b673e:	2c00      	cmp	r4, #0
   b6740:	d0f6      	beq.n	b6730 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6742:	4620      	mov	r0, r4
   b6744:	f7ff facb 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6748:	2114      	movs	r1, #20
   b674a:	4620      	mov	r0, r4
   b674c:	f7fd fca7 	bl	b409e <_ZdlPvj>
   b6750:	e7ee      	b.n	b6730 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6752:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6754:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6756:	f7fd fc9e 	bl	b4096 <_Znwj>
   b675a:	4605      	mov	r5, r0
   b675c:	b120      	cbz	r0, b6768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b675e:	4631      	mov	r1, r6
   b6760:	f7ff ff4e 	bl	b6600 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6764:	7c33      	ldrb	r3, [r6, #16]
   b6766:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6768:	6025      	str	r5, [r4, #0]
	}
   b676a:	e7e1      	b.n	b6730 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b676c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b676c:	4770      	bx	lr

000b676e <_ZN9IPAddressD0Ev>:
   b676e:	b510      	push	{r4, lr}
   b6770:	2118      	movs	r1, #24
   b6772:	4604      	mov	r4, r0
   b6774:	f7fd fc93 	bl	b409e <_ZdlPvj>
   b6778:	4620      	mov	r0, r4
   b677a:	bd10      	pop	{r4, pc}

000b677c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b677c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b677e:	7d03      	ldrb	r3, [r0, #20]
   b6780:	2b06      	cmp	r3, #6
{
   b6782:	b08d      	sub	sp, #52	; 0x34
   b6784:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6786:	f100 0704 	add.w	r7, r0, #4
   b678a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b678e:	d012      	beq.n	b67b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6790:	f100 0508 	add.w	r5, r0, #8
=======
   b4606:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b460a:	b005      	add	sp, #20
   b460c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4610:	f001 be4e 	b.w	b62b0 <delay>
   b4614:	2003e718 	.word	0x2003e718

000b4618 <loop>:
void loop() {
   b4618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char *dataJson = (char *) malloc(1100);
   b461c:	f240 404c 	movw	r0, #1100	; 0x44c
void loop() {
   b4620:	b092      	sub	sp, #72	; 0x48
	char *dataJson = (char *) malloc(1100);
   b4622:	f001 fa7b 	bl	b5b1c <malloc>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   b4626:	4e79      	ldr	r6, [pc, #484]	; (b480c <loop+0x1f4>)
   b4628:	9005      	str	r0, [sp, #20]
        state_(BEGIN) {
   b462a:	2300      	movs	r3, #0
        n_(0) {
   b462c:	f240 424b 	movw	r2, #1099	; 0x44b
   b4630:	4605      	mov	r5, r0
	writerJson.beginObject();
   b4632:	a803      	add	r0, sp, #12
   b4634:	e9cd 2306 	strd	r2, r3, [sp, #24]
        state_(BEGIN) {
   b4638:	f88d 3010 	strb.w	r3, [sp, #16]
        n_(0) {
   b463c:	9603      	str	r6, [sp, #12]
   b463e:	f002 fcd1 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
	writerJson.name("deviceID").value(System.deviceID());
   b4642:	4973      	ldr	r1, [pc, #460]	; (b4810 <loop+0x1f8>)
		timeNow = Time.now();
   b4644:	4f73      	ldr	r7, [pc, #460]	; (b4814 <loop+0x1fc>)
		writerJson.name(Time.format(timeNow, TIME_FORMAT_ISO8601_FULL)).beginObject();
   b4646:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b483c <loop+0x224>
	writerJson.name("deviceID").value(System.deviceID());
   b464a:	a803      	add	r0, sp, #12
   b464c:	f7ff fd3e 	bl	b40cc <_ZN5spark10JSONWriter4nameEPKc>
   b4650:	4604      	mov	r4, r0
        return spark_deviceID();
   b4652:	a80d      	add	r0, sp, #52	; 0x34
   b4654:	f001 fa22 	bl	b5a9c <spark_deviceID>
    return value(val.c_str(), val.length());
   b4658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b465a:	990d      	ldr	r1, [sp, #52]	; 0x34
   b465c:	4620      	mov	r0, r4
   b465e:	f002 fd61 	bl	b7124 <_ZN5spark10JSONWriter5valueEPKcj>
   b4662:	a80d      	add	r0, sp, #52	; 0x34
   b4664:	f001 fbbc 	bl	b5de0 <_ZN6StringD1Ev>
   b4668:	2403      	movs	r4, #3
		digitalWrite(D7,HIGH);
   b466a:	2101      	movs	r1, #1
   b466c:	2007      	movs	r0, #7
   b466e:	f002 fdb8 	bl	b71e2 <digitalWrite>
		timeNow = Time.now();
   b4672:	f001 fe02 	bl	b627a <_ZN9TimeClass3nowEv>
		writerJson.name(Time.format(timeNow, TIME_FORMAT_ISO8601_FULL)).beginObject();
   b4676:	f8d8 1000 	ldr.w	r1, [r8]
   b467a:	9100      	str	r1, [sp, #0]
		timeNow = Time.now();
   b467c:	17c3      	asrs	r3, r0, #31
   b467e:	e9c7 0300 	strd	r0, r3, [r7]
   b4682:	4602      	mov	r2, r0
		writerJson.name(Time.format(timeNow, TIME_FORMAT_ISO8601_FULL)).beginObject();
   b4684:	4964      	ldr	r1, [pc, #400]	; (b4818 <loop+0x200>)
   b4686:	a80d      	add	r0, sp, #52	; 0x34
   b4688:	f001 fd98 	bl	b61bc <_ZN9TimeClass6formatExPKc>
    return this->name(name.c_str(), name.length());
   b468c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   b468e:	990d      	ldr	r1, [sp, #52]	; 0x34
   b4690:	a803      	add	r0, sp, #12
   b4692:	f002 fd37 	bl	b7104 <_ZN5spark10JSONWriter4nameEPKcj>
   b4696:	f002 fca5 	bl	b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>
   b469a:	a80d      	add	r0, sp, #52	; 0x34
   b469c:	f001 fba0 	bl	b5de0 <_ZN6StringD1Ev>
class JSONWriter {
   b46a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   b46a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
class JSONBufferWriter: public JSONWriter {
   b46a8:	9b05      	ldr	r3, [sp, #20]
   b46aa:	930a      	str	r3, [sp, #40]	; 0x28
   b46ac:	9b06      	ldr	r3, [sp, #24]
   b46ae:	930b      	str	r3, [sp, #44]	; 0x2c
		writerJson = getSensorReadings(writerJson);
   b46b0:	a908      	add	r1, sp, #32
   b46b2:	9b07      	ldr	r3, [sp, #28]
   b46b4:	930c      	str	r3, [sp, #48]	; 0x30
   b46b6:	a80d      	add	r0, sp, #52	; 0x34
   b46b8:	9608      	str	r6, [sp, #32]
   b46ba:	f7ff fd69 	bl	b4190 <_Z17getSensorReadingsN5spark16JSONBufferWriterE>
class JSONWriter {
   b46be:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   b46c2:	f88d 3010 	strb.w	r3, [sp, #16]
class JSONBufferWriter: public JSONWriter {
   b46c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b46c8:	9305      	str	r3, [sp, #20]
   b46ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b46cc:	9306      	str	r3, [sp, #24]
		writerJson.endObject();
   b46ce:	a803      	add	r0, sp, #12
   b46d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b46d2:	9307      	str	r3, [sp, #28]
   b46d4:	f002 fc70 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
		digitalWrite(D7,LOW);
   b46d8:	2100      	movs	r1, #0
   b46da:	2007      	movs	r0, #7
   b46dc:	f002 fd81 	bl	b71e2 <digitalWrite>
		Serial.println("Take Reading");
   b46e0:	f002 fa30 	bl	b6b44 <_Z16_fetch_usbserialv>
   b46e4:	494d      	ldr	r1, [pc, #308]	; (b481c <loop+0x204>)
   b46e6:	f001 fc54 	bl	b5f92 <_ZN5Print7printlnEPKc>
	for (int collateCount = 0; collateCount < 3; collateCount++){
   b46ea:	3c01      	subs	r4, #1
   b46ec:	d121      	bne.n	b4732 <loop+0x11a>
	writerJson.endObject();
   b46ee:	a803      	add	r0, sp, #12
   b46f0:	f002 fc62 	bl	b6fb8 <_ZN5spark10JSONWriter9endObjectEv>
	writerJson.buffer()[std::min(writerJson.bufferSize(), writerJson.dataSize())] = 0;
   b46f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b46f8:	4293      	cmp	r3, r2
   b46fa:	bf28      	it	cs
   b46fc:	4613      	movcs	r3, r2
   b46fe:	9a05      	ldr	r2, [sp, #20]
	digitalWrite(D7,HIGH);
   b4700:	2101      	movs	r1, #1
	writerJson.buffer()[std::min(writerJson.bufferSize(), writerJson.dataSize())] = 0;
   b4702:	54d4      	strb	r4, [r2, r3]
	digitalWrite(D7,HIGH);
   b4704:	2007      	movs	r0, #7
   b4706:	f002 fd6c 	bl	b71e2 <digitalWrite>
        network_on(*this, 0, 0, NULL);
   b470a:	4845      	ldr	r0, [pc, #276]	; (b4820 <loop+0x208>)
   b470c:	4623      	mov	r3, r4
   b470e:	4622      	mov	r2, r4
   b4710:	4621      	mov	r1, r4
   b4712:	6840      	ldr	r0, [r0, #4]
   b4714:	f001 f96a 	bl	b59ec <network_on>
	Serial.println("wifi on");
   b4718:	f002 fa14 	bl	b6b44 <_Z16_fetch_usbserialv>
   b471c:	4941      	ldr	r1, [pc, #260]	; (b4824 <loop+0x20c>)
   b471e:	f001 fc38 	bl	b5f92 <_ZN5Print7printlnEPKc>
        spark_cloud_flag_connect();
   b4722:	f001 f9ab 	bl	b5a7c <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4726:	f001 f9b1 	bl	b5a8c <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   b472a:	b928      	cbnz	r0, b4738 <loop+0x120>
            spark_process();
   b472c:	f001 f99e 	bl	b5a6c <spark_process>
        while (_while() && !_condition()) {
   b4730:	e7f9      	b.n	b4726 <loop+0x10e>
		if (collateCount != 0) goSleep();
   b4732:	f7ff fefd 	bl	b4530 <_Z7goSleepv>
   b4736:	e798      	b.n	b466a <loop+0x52>
   b4738:	f001 f9a8 	bl	b5a8c <spark_cloud_flag_connected>
	Serial.println("particle connected");
   b473c:	f002 fa02 	bl	b6b44 <_Z16_fetch_usbserialv>
   b4740:	4939      	ldr	r1, [pc, #228]	; (b4828 <loop+0x210>)
   b4742:	f001 fc26 	bl	b5f92 <_ZN5Print7printlnEPKc>
	Serial.println("Collated:");
   b4746:	f002 f9fd 	bl	b6b44 <_Z16_fetch_usbserialv>
   b474a:	4938      	ldr	r1, [pc, #224]	; (b482c <loop+0x214>)
   b474c:	f001 fc21 	bl	b5f92 <_ZN5Print7printlnEPKc>
	Serial.println(writerJson.dataSize());
   b4750:	f002 f9f8 	bl	b6b44 <_Z16_fetch_usbserialv>
>>>>>>> collate-readings
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
<<<<<<< HEAD
   b6794:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6798:	220a      	movs	r2, #10
   b679a:	4630      	mov	r0, r6
   b679c:	f7ff fb23 	bl	b5de6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b67a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b67a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b67a4:	d019      	beq.n	b67da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b67a6:	2c00      	cmp	r4, #0
   b67a8:	d0f4      	beq.n	b6794 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b67aa:	212e      	movs	r1, #46	; 0x2e
   b67ac:	4630      	mov	r0, r6
   b67ae:	f7ff fb01 	bl	b5db4 <_ZN5Print5printEc>
   b67b2:	4404      	add	r4, r0
   b67b4:	e7ee      	b.n	b6794 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67b6:	232f      	movs	r3, #47	; 0x2f
   b67b8:	466a      	mov	r2, sp
   b67ba:	4639      	mov	r1, r7
   b67bc:	200a      	movs	r0, #10
		buf[0] = 0;
   b67be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67c2:	f7fe fea5 	bl	b5510 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b67c6:	4668      	mov	r0, sp
   b67c8:	f001 fc25 	bl	b8016 <strlen>
   b67cc:	6833      	ldr	r3, [r6, #0]
   b67ce:	4602      	mov	r2, r0
   b67d0:	68db      	ldr	r3, [r3, #12]
   b67d2:	4669      	mov	r1, sp
   b67d4:	4630      	mov	r0, r6
   b67d6:	4798      	blx	r3
   b67d8:	4604      	mov	r4, r0
    }
    return n;
}
   b67da:	4620      	mov	r0, r4
   b67dc:	b00d      	add	sp, #52	; 0x34
   b67de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b67e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b67e0:	b510      	push	{r4, lr}
   b67e2:	4b05      	ldr	r3, [pc, #20]	; (b67f8 <_ZN9IPAddressC1Ev+0x18>)
   b67e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b67e6:	2211      	movs	r2, #17
   b67e8:	f840 3b04 	str.w	r3, [r0], #4
   b67ec:	2100      	movs	r1, #0
   b67ee:	f001 fbad 	bl	b7f4c <memset>
}
   b67f2:	4620      	mov	r0, r4
   b67f4:	bd10      	pop	{r4, pc}
   b67f6:	bf00      	nop
   b67f8:	000b8380 	.word	0x000b8380

000b67fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b67fc:	4603      	mov	r3, r0
   b67fe:	4a07      	ldr	r2, [pc, #28]	; (b681c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6800:	b510      	push	{r4, lr}
   b6802:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6806:	f101 0210 	add.w	r2, r1, #16
   b680a:	f851 4b04 	ldr.w	r4, [r1], #4
   b680e:	f843 4b04 	str.w	r4, [r3], #4
   b6812:	4291      	cmp	r1, r2
   b6814:	d1f9      	bne.n	b680a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6816:	780a      	ldrb	r2, [r1, #0]
   b6818:	701a      	strb	r2, [r3, #0]
}
   b681a:	bd10      	pop	{r4, pc}
   b681c:	000b8380 	.word	0x000b8380

000b6820 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6820:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6822:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6826:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b682a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b682e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6832:	2304      	movs	r3, #4
   b6834:	6041      	str	r1, [r0, #4]
   b6836:	7503      	strb	r3, [r0, #20]
}
   b6838:	bd10      	pop	{r4, pc}
	...

000b683c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b683c:	b507      	push	{r0, r1, r2, lr}
   b683e:	4b06      	ldr	r3, [pc, #24]	; (b6858 <_ZN9IPAddressC1EPKh+0x1c>)
   b6840:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6842:	78cb      	ldrb	r3, [r1, #3]
   b6844:	9300      	str	r3, [sp, #0]
   b6846:	788b      	ldrb	r3, [r1, #2]
   b6848:	784a      	ldrb	r2, [r1, #1]
   b684a:	7809      	ldrb	r1, [r1, #0]
   b684c:	f7ff ffe8 	bl	b6820 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6850:	b003      	add	sp, #12
   b6852:	f85d fb04 	ldr.w	pc, [sp], #4
   b6856:	bf00      	nop
   b6858:	000b8380 	.word	0x000b8380

000b685c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b685c:	7441      	strb	r1, [r0, #17]
}
   b685e:	4770      	bx	lr

000b6860 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6860:	4770      	bx	lr

000b6862 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6862:	4770      	bx	lr

000b6864 <_ZN9USBSerial4readEv>:
{
   b6864:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6866:	2100      	movs	r1, #0
   b6868:	7c00      	ldrb	r0, [r0, #16]
   b686a:	f7fe ff51 	bl	b5710 <HAL_USB_USART_Receive_Data>
}
   b686e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6872:	bd08      	pop	{r3, pc}

000b6874 <_ZN9USBSerial4peekEv>:
{
   b6874:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6876:	2101      	movs	r1, #1
   b6878:	7c00      	ldrb	r0, [r0, #16]
   b687a:	f7fe ff49 	bl	b5710 <HAL_USB_USART_Receive_Data>
}
   b687e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6882:	bd08      	pop	{r3, pc}

000b6884 <_ZN9USBSerial17availableForWriteEv>:
{
   b6884:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6886:	7c00      	ldrb	r0, [r0, #16]
   b6888:	f7fe ff3a 	bl	b5700 <HAL_USB_USART_Available_Data_For_Write>
}
   b688c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6890:	bd08      	pop	{r3, pc}

000b6892 <_ZN9USBSerial9availableEv>:
{
   b6892:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6894:	7c00      	ldrb	r0, [r0, #16]
   b6896:	f7fe ff2b 	bl	b56f0 <HAL_USB_USART_Available_Data>
}
   b689a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b689e:	bd08      	pop	{r3, pc}

000b68a0 <_ZN9USBSerial5writeEh>:
{
   b68a0:	b513      	push	{r0, r1, r4, lr}
   b68a2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68a4:	7c00      	ldrb	r0, [r0, #16]
{
   b68a6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68a8:	f7fe ff2a 	bl	b5700 <HAL_USB_USART_Available_Data_For_Write>
   b68ac:	2800      	cmp	r0, #0
   b68ae:	9901      	ldr	r1, [sp, #4]
   b68b0:	dc01      	bgt.n	b68b6 <_ZN9USBSerial5writeEh+0x16>
   b68b2:	7c60      	ldrb	r0, [r4, #17]
   b68b4:	b120      	cbz	r0, b68c0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b68b6:	7c20      	ldrb	r0, [r4, #16]
   b68b8:	f7fe ff32 	bl	b5720 <HAL_USB_USART_Send_Data>
   b68bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b68c0:	b002      	add	sp, #8
   b68c2:	bd10      	pop	{r4, pc}

000b68c4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b68c4:	7c00      	ldrb	r0, [r0, #16]
   b68c6:	f7fe bf33 	b.w	b5730 <HAL_USB_USART_Flush_Data>

000b68ca <_ZN9USBSerialD0Ev>:
   b68ca:	b510      	push	{r4, lr}
   b68cc:	2114      	movs	r1, #20
   b68ce:	4604      	mov	r4, r0
   b68d0:	f7fd fbe5 	bl	b409e <_ZdlPvj>
   b68d4:	4620      	mov	r0, r4
   b68d6:	bd10      	pop	{r4, pc}

000b68d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b68d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b68da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68de:	4604      	mov	r4, r0
   b68e0:	4608      	mov	r0, r1
   b68e2:	2100      	movs	r1, #0
   b68e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b68e8:	4b04      	ldr	r3, [pc, #16]	; (b68fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b68ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b68ec:	2301      	movs	r3, #1
  _serial = serial;
   b68ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b68f0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b68f2:	4611      	mov	r1, r2
   b68f4:	f7fe feec 	bl	b56d0 <HAL_USB_USART_Init>
}
   b68f8:	4620      	mov	r0, r4
   b68fa:	bd10      	pop	{r4, pc}
   b68fc:	000b8394 	.word	0x000b8394

000b6900 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6900:	7c00      	ldrb	r0, [r0, #16]
   b6902:	2200      	movs	r2, #0
   b6904:	f7fe beec 	b.w	b56e0 <HAL_USB_USART_Begin>

000b6908 <_Z19acquireSerialBufferv>:
{
   b6908:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b690a:	2214      	movs	r2, #20
{
   b690c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b690e:	2100      	movs	r1, #0
   b6910:	f001 fb1c 	bl	b7f4c <memset>
}
   b6914:	4620      	mov	r0, r4
   b6916:	bd10      	pop	{r4, pc}

000b6918 <_Z16_fetch_usbserialv>:
{
   b6918:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b691a:	4c0f      	ldr	r4, [pc, #60]	; (b6958 <_Z16_fetch_usbserialv+0x40>)
{
   b691c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b691e:	a803      	add	r0, sp, #12
   b6920:	f7ff fff2 	bl	b6908 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6924:	7821      	ldrb	r1, [r4, #0]
   b6926:	f3bf 8f5b 	dmb	ish
   b692a:	f011 0101 	ands.w	r1, r1, #1
   b692e:	d10f      	bne.n	b6950 <_Z16_fetch_usbserialv+0x38>
   b6930:	4620      	mov	r0, r4
   b6932:	9101      	str	r1, [sp, #4]
   b6934:	f7fd fbb5 	bl	b40a2 <__cxa_guard_acquire>
   b6938:	9901      	ldr	r1, [sp, #4]
   b693a:	b148      	cbz	r0, b6950 <_Z16_fetch_usbserialv+0x38>
   b693c:	aa03      	add	r2, sp, #12
   b693e:	4807      	ldr	r0, [pc, #28]	; (b695c <_Z16_fetch_usbserialv+0x44>)
   b6940:	f7ff ffca 	bl	b68d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6944:	4620      	mov	r0, r4
   b6946:	f7fd fbb1 	bl	b40ac <__cxa_guard_release>
   b694a:	4805      	ldr	r0, [pc, #20]	; (b6960 <_Z16_fetch_usbserialv+0x48>)
   b694c:	f001 fae2 	bl	b7f14 <atexit>
	return _usbserial;
}
   b6950:	4802      	ldr	r0, [pc, #8]	; (b695c <_Z16_fetch_usbserialv+0x44>)
   b6952:	b008      	add	sp, #32
   b6954:	bd10      	pop	{r4, pc}
   b6956:	bf00      	nop
   b6958:	2003e700 	.word	0x2003e700
   b695c:	2003e704 	.word	0x2003e704
   b6960:	000b6861 	.word	0x000b6861

000b6964 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6964:	4770      	bx	lr

000b6966 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6966:	7441      	strb	r1, [r0, #17]
}
   b6968:	4770      	bx	lr

000b696a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b696a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b696c:	7c00      	ldrb	r0, [r0, #16]
   b696e:	f7fe fe07 	bl	b5580 <hal_usart_available_data_for_write>
}
   b6972:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6976:	bd08      	pop	{r3, pc}

000b6978 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6978:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b697a:	7c00      	ldrb	r0, [r0, #16]
   b697c:	f7fe fdd8 	bl	b5530 <hal_usart_available>
}
   b6980:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6984:	bd08      	pop	{r3, pc}

000b6986 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6986:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6988:	7c00      	ldrb	r0, [r0, #16]
   b698a:	f7fe fde1 	bl	b5550 <hal_usart_peek>
}
   b698e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6992:	bd08      	pop	{r3, pc}

000b6994 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6994:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6996:	7c00      	ldrb	r0, [r0, #16]
   b6998:	f7fe fdd2 	bl	b5540 <hal_usart_read>
}
   b699c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69a0:	bd08      	pop	{r3, pc}

000b69a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b69a2:	7c00      	ldrb	r0, [r0, #16]
   b69a4:	f7fe bddc 	b.w	b5560 <hal_usart_flush>

000b69a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b69a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69aa:	7c45      	ldrb	r5, [r0, #17]
{
   b69ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69ae:	b12d      	cbz	r5, b69bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b69b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b69b2:	b003      	add	sp, #12
   b69b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b69b8:	f7fe bdb2 	b.w	b5520 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69bc:	7c00      	ldrb	r0, [r0, #16]
   b69be:	9101      	str	r1, [sp, #4]
   b69c0:	f7fe fdde 	bl	b5580 <hal_usart_available_data_for_write>
   b69c4:	2800      	cmp	r0, #0
   b69c6:	9901      	ldr	r1, [sp, #4]
   b69c8:	dcf2      	bgt.n	b69b0 <_ZN11USARTSerial5writeEh+0x8>
}
   b69ca:	4628      	mov	r0, r5
   b69cc:	b003      	add	sp, #12
   b69ce:	bd30      	pop	{r4, r5, pc}

000b69d0 <_ZN11USARTSerialD0Ev>:
   b69d0:	b510      	push	{r4, lr}
   b69d2:	2114      	movs	r1, #20
   b69d4:	4604      	mov	r4, r0
   b69d6:	f7fd fb62 	bl	b409e <_ZdlPvj>
   b69da:	4620      	mov	r0, r4
   b69dc:	bd10      	pop	{r4, pc}
	...

000b69e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b69e0:	b510      	push	{r4, lr}
   b69e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b69e6:	4604      	mov	r4, r0
   b69e8:	4608      	mov	r0, r1
   b69ea:	4611      	mov	r1, r2
   b69ec:	2200      	movs	r2, #0
   b69ee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b69f2:	4b04      	ldr	r3, [pc, #16]	; (b6a04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b69f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b69f6:	2301      	movs	r3, #1
  _serial = serial;
   b69f8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b69fa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b69fc:	f7fe fdc8 	bl	b5590 <hal_usart_init_ex>
}
   b6a00:	4620      	mov	r0, r4
   b6a02:	bd10      	pop	{r4, pc}
   b6a04:	000b83c4 	.word	0x000b83c4

000b6a08 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
=======
   b4754:	220a      	movs	r2, #10
   b4756:	9907      	ldr	r1, [sp, #28]
   b4758:	4604      	mov	r4, r0
   b475a:	f001 fc24 	bl	b5fa6 <_ZN5Print11printNumberEmh>
        n += println();
   b475e:	4620      	mov	r0, r4
   b4760:	f001 fc0b 	bl	b5f7a <_ZN5Print7printlnEv>
	Serial.println(dataJson);
   b4764:	f002 f9ee 	bl	b6b44 <_Z16_fetch_usbserialv>
   b4768:	4629      	mov	r1, r5
   b476a:	f001 fc12 	bl	b5f92 <_ZN5Print7printlnEPKc>
	Serial.println("");
   b476e:	f002 f9e9 	bl	b6b44 <_Z16_fetch_usbserialv>
   b4772:	492f      	ldr	r1, [pc, #188]	; (b4830 <loop+0x218>)
   b4774:	f001 fc0d 	bl	b5f92 <_ZN5Print7printlnEPKc>
   b4778:	f001 f988 	bl	b5a8c <spark_cloud_flag_connected>
	if (!Particle.connected()) Particle.connect();
   b477c:	b908      	cbnz	r0, b4782 <loop+0x16a>
        spark_cloud_flag_connect();
   b477e:	f001 f97d 	bl	b5a7c <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4782:	f001 f983 	bl	b5a8c <spark_cloud_flag_connected>
   b4786:	b910      	cbnz	r0, b478e <loop+0x176>
            spark_process();
   b4788:	f001 f970 	bl	b5a6c <spark_process>
        while (_while() && !_condition()) {
   b478c:	e7f9      	b.n	b4782 <loop+0x16a>
   b478e:	f001 f97d 	bl	b5a8c <spark_cloud_flag_connected>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4792:	4b28      	ldr	r3, [pc, #160]	; (b4834 <loop+0x21c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4794:	4928      	ldr	r1, [pc, #160]	; (b4838 <loop+0x220>)
   b4796:	781b      	ldrb	r3, [r3, #0]
   b4798:	f88d 3000 	strb.w	r3, [sp]
   b479c:	462a      	mov	r2, r5
   b479e:	233c      	movs	r3, #60	; 0x3c
   b47a0:	a80d      	add	r0, sp, #52	; 0x34
   b47a2:	f001 ff8d 	bl	b66c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b47a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   b47a8:	b17c      	cbz	r4, b47ca <loop+0x1b2>
      if (--_M_use_count == 0)
   b47aa:	6863      	ldr	r3, [r4, #4]
   b47ac:	3b01      	subs	r3, #1
   b47ae:	6063      	str	r3, [r4, #4]
   b47b0:	b95b      	cbnz	r3, b47ca <loop+0x1b2>
          _M_dispose();
   b47b2:	6823      	ldr	r3, [r4, #0]
   b47b4:	4620      	mov	r0, r4
   b47b6:	689b      	ldr	r3, [r3, #8]
   b47b8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47ba:	68a3      	ldr	r3, [r4, #8]
   b47bc:	3b01      	subs	r3, #1
   b47be:	60a3      	str	r3, [r4, #8]
   b47c0:	b91b      	cbnz	r3, b47ca <loop+0x1b2>
            _M_destroy();
   b47c2:	6823      	ldr	r3, [r4, #0]
   b47c4:	4620      	mov	r0, r4
   b47c6:	68db      	ldr	r3, [r3, #12]
   b47c8:	4798      	blx	r3
  	syncClock();
   b47ca:	f7ff feb7 	bl	b453c <_Z9syncClockv>
        clearSession_(clearSession) {
   b47ce:	2300      	movs	r3, #0
	Particle.disconnect();
   b47d0:	a80d      	add	r0, sp, #52	; 0x34
   b47d2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
        bool clearSession) :
   b47d6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   b47da:	f001 fe54 	bl	b6486 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
	waitUntil(Particle.disconnected);
   b47de:	f7ff fc6e 	bl	b40be <_ZN10CloudClass12disconnectedEv>
   b47e2:	b910      	cbnz	r0, b47ea <loop+0x1d2>
            spark_process();
   b47e4:	f001 f942 	bl	b5a6c <spark_process>
        while (_while() && !_condition()) {
   b47e8:	e7f9      	b.n	b47de <loop+0x1c6>
   b47ea:	f7ff fc68 	bl	b40be <_ZN10CloudClass12disconnectedEv>
	WiFi.off();
   b47ee:	480c      	ldr	r0, [pc, #48]	; (b4820 <loop+0x208>)
   b47f0:	f7ff fc5f 	bl	b40b2 <_ZN5spark9WiFiClass3offEv>
	digitalWrite(D7,LOW);
   b47f4:	2100      	movs	r1, #0
   b47f6:	2007      	movs	r0, #7
   b47f8:	f002 fcf3 	bl	b71e2 <digitalWrite>
	free(dataJson);
   b47fc:	4628      	mov	r0, r5
   b47fe:	f001 f995 	bl	b5b2c <free>
	goSleep();
   b4802:	f7ff fe95 	bl	b4530 <_Z7goSleepv>
}
   b4806:	b012      	add	sp, #72	; 0x48
   b4808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b480c:	000b8708 	.word	0x000b8708
   b4810:	000b84ab 	.word	0x000b84ab
   b4814:	2003e698 	.word	0x2003e698
   b4818:	2003e6d0 	.word	0x2003e6d0
   b481c:	000b84b4 	.word	0x000b84b4
   b4820:	2003e718 	.word	0x2003e718
   b4824:	000b84c1 	.word	0x000b84c1
   b4828:	000b84c9 	.word	0x000b84c9
   b482c:	000b84dc 	.word	0x000b84dc
   b4830:	000b8738 	.word	0x000b8738
   b4834:	2003e608 	.word	0x2003e608
   b4838:	000b84e6 	.word	0x000b84e6
   b483c:	2003e58c 	.word	0x2003e58c

000b4840 <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
   b4840:	4b10      	ldr	r3, [pc, #64]	; (b4884 <_GLOBAL__sub_I_SystemMode+0x44>)
    SleepResult() {}
   b4842:	4a11      	ldr	r2, [pc, #68]	; (b4888 <_GLOBAL__sub_I_SystemMode+0x48>)
   b4844:	b510      	push	{r4, lr}
   b4846:	2400      	movs	r4, #0
   b4848:	701c      	strb	r4, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b484a:	4b10      	ldr	r3, [pc, #64]	; (b488c <_GLOBAL__sub_I_SystemMode+0x4c>)
        set_system_mode(mode);
   b484c:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   b484e:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4852:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4854:	f001 f866 	bl	b5924 <set_system_mode>
SYSTEM_THREAD (ENABLED);
   b4858:	4621      	mov	r1, r4
   b485a:	2001      	movs	r0, #1
   b485c:	f001 f872 	bl	b5944 <system_thread_set_state>
BH1750 bh;
   b4860:	f002 fd42 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b4864:	2123      	movs	r1, #35	; 0x23
   b4866:	4602      	mov	r2, r0
   b4868:	4809      	ldr	r0, [pc, #36]	; (b4890 <_GLOBAL__sub_I_SystemMode+0x50>)
   b486a:	f000 fe71 	bl	b5550 <_ZN6BH1750C1EhR7TwoWire>
Adafruit_BME280 bme;
   b486e:	4809      	ldr	r0, [pc, #36]	; (b4894 <_GLOBAL__sub_I_SystemMode+0x54>)
   b4870:	f000 f89c 	bl	b49ac <_ZN15Adafruit_BME280C1Ev>
SCD30 airSensor;
   b4874:	4808      	ldr	r0, [pc, #32]	; (b4898 <_GLOBAL__sub_I_SystemMode+0x58>)
   b4876:	f000 fd3a 	bl	b52ee <_ZN5SCD30C1Ev>
   b487a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_PM25AQI aqi = Adafruit_PM25AQI();
   b487e:	4807      	ldr	r0, [pc, #28]	; (b489c <_GLOBAL__sub_I_SystemMode+0x5c>)
   b4880:	f000 b80e 	b.w	b48a0 <_ZN16Adafruit_PM25AQIC1Ev>
   b4884:	2003e608 	.word	0x2003e608
   b4888:	ffff0000 	.word	0xffff0000
   b488c:	2003e5fc 	.word	0x2003e5fc
   b4890:	2003e648 	.word	0x2003e648
   b4894:	2003e650 	.word	0x2003e650
   b4898:	2003e60c 	.word	0x2003e60c
   b489c:	2003e620 	.word	0x2003e620

000b48a0 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
>>>>>>> collate-readings
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
   b48a0:	2200      	movs	r2, #0
   b48a2:	e9c0 2200 	strd	r2, r2, [r0]
   b48a6:	4770      	bx	lr

<<<<<<< HEAD
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6a08:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a0a:	6883      	ldr	r3, [r0, #8]
   b6a0c:	4604      	mov	r4, r0
   b6a0e:	b90b      	cbnz	r3, b6a14 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6a10:	f000 fb70 	bl	b70f4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a14:	68c3      	ldr	r3, [r0, #12]
   b6a16:	4798      	blx	r3
      if (_M_manager)
   b6a18:	68a3      	ldr	r3, [r4, #8]
   b6a1a:	b11b      	cbz	r3, b6a24 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a1c:	2203      	movs	r2, #3
   b6a1e:	4621      	mov	r1, r4
   b6a20:	4620      	mov	r0, r4
   b6a22:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6a24:	4620      	mov	r0, r4
   b6a26:	2110      	movs	r1, #16
}
   b6a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6a2c:	f7fd bb37 	b.w	b409e <_ZdlPvj>

000b6a30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6a30:	4770      	bx	lr

000b6a32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a34:	4606      	mov	r6, r0
   b6a36:	4615      	mov	r5, r2
   b6a38:	460c      	mov	r4, r1
   b6a3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6a3c:	42bc      	cmp	r4, r7
   b6a3e:	d006      	beq.n	b6a4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6a40:	6833      	ldr	r3, [r6, #0]
   b6a42:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6a46:	689b      	ldr	r3, [r3, #8]
   b6a48:	4630      	mov	r0, r6
   b6a4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6a4c:	e7f6      	b.n	b6a3c <_ZN7TwoWire5writeEPKhj+0xa>
=======
000b48a8 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b48a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b48aa:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b48ac:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b48ae:	b953      	cbnz	r3, b48c6 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
   b48b0:	2010      	movs	r0, #16
   b48b2:	9101      	str	r1, [sp, #4]
   b48b4:	f7ff fbef 	bl	b4096 <_Znwj>
   b48b8:	4605      	mov	r5, r0
   b48ba:	b118      	cbz	r0, b48c4 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
   b48bc:	9a01      	ldr	r2, [sp, #4]
   b48be:	2112      	movs	r1, #18
   b48c0:	f000 f808 	bl	b48d4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b48c4:	6025      	str	r5, [r4, #0]
>>>>>>> collate-readings
  }

  if (!i2c_dev->begin()) {
   b48c6:	6820      	ldr	r0, [r4, #0]
   b48c8:	2101      	movs	r1, #1
    return false;
  }

  return true;
}
<<<<<<< HEAD
   b6a4e:	4628      	mov	r0, r5
   b6a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6a52:	7c00      	ldrb	r0, [r0, #16]
   b6a54:	2200      	movs	r2, #0
   b6a56:	f7fe bdbb 	b.w	b55d0 <hal_i2c_write>

000b6a5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6a5a:	7c00      	ldrb	r0, [r0, #16]
   b6a5c:	2100      	movs	r1, #0
   b6a5e:	f7fe bdbf 	b.w	b55e0 <hal_i2c_available>

000b6a62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6a62:	7c00      	ldrb	r0, [r0, #16]
   b6a64:	2100      	movs	r1, #0
   b6a66:	f7fe bdc3 	b.w	b55f0 <hal_i2c_read>

000b6a6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6a6a:	7c00      	ldrb	r0, [r0, #16]
   b6a6c:	2100      	movs	r1, #0
   b6a6e:	f7fe bdc7 	b.w	b5600 <hal_i2c_peek>

000b6a72 <_ZN7TwoWire5flushEv>:
=======
   b48ca:	b003      	add	sp, #12
   b48cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
   b48d0:	f000 b81c 	b.w	b490c <_ZN18Adafruit_I2CDevice5beginEb>

000b48d4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b48d4:	6042      	str	r2, [r0, #4]
  _begun = false;
   b48d6:	2200      	movs	r2, #0
   b48d8:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b48da:	2220      	movs	r2, #32
  _addr = addr;
   b48dc:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b48de:	60c2      	str	r2, [r0, #12]
#endif
>>>>>>> collate-readings
}
   b48e0:	4770      	bx	lr

<<<<<<< HEAD
void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6a72:	7c00      	ldrb	r0, [r0, #16]
   b6a74:	2100      	movs	r1, #0
   b6a76:	f7fe bdcb 	b.w	b5610 <hal_i2c_flush>

000b6a7a <_ZN7TwoWireD0Ev>:
   b6a7a:	b510      	push	{r4, lr}
   b6a7c:	2114      	movs	r1, #20
   b6a7e:	4604      	mov	r4, r0
   b6a80:	f7fd fb0d 	bl	b409e <_ZdlPvj>
   b6a84:	4620      	mov	r0, r4
   b6a86:	bd10      	pop	{r4, pc}

000b6a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6a88:	b510      	push	{r4, lr}
   b6a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a8e:	4604      	mov	r4, r0
   b6a90:	4608      	mov	r0, r1
   b6a92:	2100      	movs	r1, #0
   b6a94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6a98:	4b03      	ldr	r3, [pc, #12]	; (b6aa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6a9a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6a9c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6a9e:	4611      	mov	r1, r2
   b6aa0:	f7fe fdc6 	bl	b5630 <hal_i2c_init>
}
   b6aa4:	4620      	mov	r0, r4
   b6aa6:	bd10      	pop	{r4, pc}
   b6aa8:	000b83f4 	.word	0x000b83f4

000b6aac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6aac:	2300      	movs	r3, #0
   b6aae:	7c00      	ldrb	r0, [r0, #16]
   b6ab0:	461a      	mov	r2, r3
   b6ab2:	4619      	mov	r1, r3
   b6ab4:	f7fe bd74 	b.w	b55a0 <hal_i2c_begin>

000b6ab8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6aba:	2200      	movs	r2, #0
   b6abc:	2314      	movs	r3, #20
   b6abe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6ac2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6ac6:	780b      	ldrb	r3, [r1, #0]
   b6ac8:	f88d 3008 	strb.w	r3, [sp, #8]
   b6acc:	684b      	ldr	r3, [r1, #4]
   b6ace:	9303      	str	r3, [sp, #12]
   b6ad0:	68cb      	ldr	r3, [r1, #12]
   b6ad2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6ad4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6ad6:	7a0b      	ldrb	r3, [r1, #8]
   b6ad8:	9305      	str	r3, [sp, #20]
   b6ada:	a901      	add	r1, sp, #4
   b6adc:	f7fe fdb0 	bl	b5640 <hal_i2c_request_ex>
}
   b6ae0:	b007      	add	sp, #28
   b6ae2:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ae6 <_ZN7TwoWire11requestFromEhjh>:
{
   b6ae6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6ae8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6aea:	f88d 1000 	strb.w	r1, [sp]
   b6aee:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6af2:	9103      	str	r1, [sp, #12]
   b6af4:	bf18      	it	ne
   b6af6:	2301      	movne	r3, #1
   b6af8:	4669      	mov	r1, sp
    size_ = size;
   b6afa:	9201      	str	r2, [sp, #4]
   b6afc:	f88d 3008 	strb.w	r3, [sp, #8]
   b6b00:	f7ff ffda 	bl	b6ab8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6b04:	b005      	add	sp, #20
   b6b06:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b0a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6b0a:	2301      	movs	r3, #1
   b6b0c:	f7ff bfeb 	b.w	b6ae6 <_ZN7TwoWire11requestFromEhjh>

000b6b10 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6b10:	7c00      	ldrb	r0, [r0, #16]
   b6b12:	2200      	movs	r2, #0
   b6b14:	f7fe bd4c 	b.w	b55b0 <hal_i2c_begin_transmission>

000b6b18 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6b18:	b2c9      	uxtb	r1, r1
   b6b1a:	f7ff bff9 	b.w	b6b10 <_ZN7TwoWire17beginTransmissionEh>

000b6b1e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6b1e:	7c00      	ldrb	r0, [r0, #16]
   b6b20:	2200      	movs	r2, #0
   b6b22:	f7fe bd4d 	b.w	b55c0 <hal_i2c_end_transmission>

000b6b26 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6b26:	2101      	movs	r1, #1
   b6b28:	f7ff bff9 	b.w	b6b1e <_ZN7TwoWire15endTransmissionEh>

000b6b2c <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b6b2c:	7c00      	ldrb	r0, [r0, #16]
   b6b2e:	2100      	movs	r1, #0
   b6b30:	f7fe bd76 	b.w	b5620 <hal_i2c_is_enabled>

000b6b34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
=======
000b48e2 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b48e2:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b48e4:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b48e6:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b48e8:	b153      	cbz	r3, b4900 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b48ea:	7821      	ldrb	r1, [r4, #0]
   b48ec:	6860      	ldr	r0, [r4, #4]
   b48ee:	f002 fa25 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b48f2:	6860      	ldr	r0, [r4, #4]
   b48f4:	f002 fa2d 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
   b48f8:	fab0 f080 	clz	r0, r0
   b48fc:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b48fe:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b4900:	2101      	movs	r1, #1
   b4902:	f000 f803 	bl	b490c <_ZN18Adafruit_I2CDevice5beginEb>
   b4906:	2800      	cmp	r0, #0
   b4908:	d1ef      	bne.n	b48ea <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b490a:	e7f8      	b.n	b48fe <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b490c <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b490c:	b538      	push	{r3, r4, r5, lr}
   b490e:	4604      	mov	r4, r0
  _wire->begin();
   b4910:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4912:	460d      	mov	r5, r1
  _wire->begin();
   b4914:	f002 f9e0 	bl	b6cd8 <_ZN7TwoWire5beginEv>
  _begun = true;
   b4918:	2001      	movs	r0, #1
   b491a:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b491c:	b125      	cbz	r5, b4928 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b491e:	4620      	mov	r0, r4
}
   b4920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b4924:	f7ff bfdd 	b.w	b48e2 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b4928:	bd38      	pop	{r3, r4, r5, pc}

000b492a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b492a:	4770      	bx	lr

000b492c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b492c:	b510      	push	{r4, lr}
  }
   b492e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4930:	4604      	mov	r4, r0
  }
   b4932:	f7ff fbb4 	bl	b409e <_ZdlPvj>
   b4936:	4620      	mov	r0, r4
   b4938:	bd10      	pop	{r4, pc}

000b493a <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b493a:	b40e      	push	{r1, r2, r3}
   b493c:	b503      	push	{r0, r1, lr}
   b493e:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4940:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4942:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4946:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4948:	f001 fb4b 	bl	b5fe2 <_ZN5Print7vprintfEbPKcSt9__va_list>
>>>>>>> collate-readings
    }
   b494c:	b002      	add	sp, #8
   b494e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4952:	b003      	add	sp, #12
   b4954:	4770      	bx	lr
	...

<<<<<<< HEAD
    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6b34:	2200      	movs	r2, #0
   b6b36:	6840      	ldr	r0, [r0, #4]
   b6b38:	4611      	mov	r1, r2
   b6b3a:	f7fe be5d 	b.w	b57f8 <network_ready>

000b6b3e <_ZN5spark9WiFiClass9listeningEv>:
=======
000b4958 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4958:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b495a:	4604      	mov	r4, r0
   b495c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b495e:	7922      	ldrb	r2, [r4, #4]
   b4960:	68a3      	ldr	r3, [r4, #8]
   b4962:	b132      	cbz	r2, b4972 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4964:	b9a3      	cbnz	r3, b4990 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4966:	490b      	ldr	r1, [pc, #44]	; (b4994 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4968:	b002      	add	sp, #8
   b496a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b496e:	f001 bafd 	b.w	b5f6c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4972:	4a09      	ldr	r2, [pc, #36]	; (b4998 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4974:	7b26      	ldrb	r6, [r4, #12]
   b4976:	4d09      	ldr	r5, [pc, #36]	; (b499c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4978:	4909      	ldr	r1, [pc, #36]	; (b49a0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b497a:	7b64      	ldrb	r4, [r4, #13]
   b497c:	2e01      	cmp	r6, #1
   b497e:	bf18      	it	ne
   b4980:	4629      	movne	r1, r5
   b4982:	e9cd 1400 	strd	r1, r4, [sp]
   b4986:	4907      	ldr	r1, [pc, #28]	; (b49a4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4988:	f7ff ffd7 	bl	b493a <_ZN5Print6printfEPKcz>
  }
   b498c:	b002      	add	sp, #8
   b498e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4990:	4a05      	ldr	r2, [pc, #20]	; (b49a8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4992:	e7ef      	b.n	b4974 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4994:	000b8507 	.word	0x000b8507
   b4998:	000b8738 	.word	0x000b8738
   b499c:	000b8503 	.word	0x000b8503
   b49a0:	000b84ff 	.word	0x000b84ff
   b49a4:	000b851d 	.word	0x000b851d
   b49a8:	000b84f6 	.word	0x000b84f6

000b49ac <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b49ac:	f04f 33ff 	mov.w	r3, #4294967295
   b49b0:	6103      	str	r3, [r0, #16]
{ }
   b49b2:	4770      	bx	lr

000b49b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b49b4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b49b6:	4c0b      	ldr	r4, [pc, #44]	; (b49e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b49b8:	7821      	ldrb	r1, [r4, #0]
   b49ba:	f3bf 8f5b 	dmb	ish
   b49be:	f011 0101 	ands.w	r1, r1, #1
   b49c2:	d10b      	bne.n	b49dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b49c4:	4620      	mov	r0, r4
   b49c6:	9101      	str	r1, [sp, #4]
   b49c8:	f7ff fb6b 	bl	b40a2 <__cxa_guard_acquire>
   b49cc:	9901      	ldr	r1, [sp, #4]
   b49ce:	b128      	cbz	r0, b49dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b49d0:	4805      	ldr	r0, [pc, #20]	; (b49e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b49d2:	f001 f947 	bl	b5c64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b49d6:	4620      	mov	r0, r4
   b49d8:	f7ff fb68 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b49dc:	4802      	ldr	r0, [pc, #8]	; (b49e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b49de:	b002      	add	sp, #8
   b49e0:	bd10      	pop	{r4, pc}
   b49e2:	bf00      	nop
   b49e4:	2003e6a4 	.word	0x2003e6a4
   b49e8:	2003e6a8 	.word	0x2003e6a8

000b49ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b49ec:	b508      	push	{r3, lr}
        instance().endTransaction();
   b49ee:	f7ff ffe1 	bl	b49b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b49f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b49f6:	f001 b953 	b.w	b5ca0 <_ZN8SPIClass14endTransactionEv>

000b49fa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b49fa:	b507      	push	{r0, r1, r2, lr}
   b49fc:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b49fe:	f7ff ffd9 	bl	b49b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a02:	9901      	ldr	r1, [sp, #4]
    }
   b4a04:	b003      	add	sp, #12
   b4a06:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b4a0a:	f001 b963 	b.w	b5cd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b4a0e <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b4a12:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a16:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4a18:	4605      	mov	r5, r0
   b4a1a:	460f      	mov	r7, r1
    if (_sck == -1)
   b4a1c:	d106      	bne.n	b4a2c <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4a1e:	f7ff ffc9 	bl	b49b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a22:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4a28:	f001 b9c2 	b.w	b5db0 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4a2c:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b4a2e:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4a30:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4a34:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4a38:	2100      	movs	r1, #0
   b4a3a:	b280      	uxth	r0, r0
   b4a3c:	f002 fbd1 	bl	b71e2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4a40:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4a44:	fa08 f106 	lsl.w	r1, r8, r6
   b4a48:	4039      	ands	r1, r7
   b4a4a:	b280      	uxth	r0, r0
   b4a4c:	f002 fbc9 	bl	b71e2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4a50:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4a54:	2101      	movs	r1, #1
   b4a56:	b280      	uxth	r0, r0
   b4a58:	f002 fbc3 	bl	b71e2 <digitalWrite>
        if (digitalRead(_miso))
   b4a5c:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4a60:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4a62:	b280      	uxth	r0, r0
        reply <<= 1;
   b4a64:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4a66:	f002 fbd5 	bl	b7214 <digitalRead>
   b4a6a:	b108      	cbz	r0, b4a70 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4a6c:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4a70:	3e01      	subs	r6, #1
   b4a72:	d2df      	bcs.n	b4a34 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4a74:	4620      	mov	r0, r4
   b4a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4a7c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4a7e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a82:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4a84:	4604      	mov	r4, r0
   b4a86:	460e      	mov	r6, r1
   b4a88:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4a8a:	d113      	bne.n	b4ab4 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a8c:	7901      	ldrb	r1, [r0, #4]
   b4a8e:	6800      	ldr	r0, [r0, #0]
   b4a90:	f002 f954 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a94:	6820      	ldr	r0, [r4, #0]
   b4a96:	6803      	ldr	r3, [r0, #0]
   b4a98:	4631      	mov	r1, r6
   b4a9a:	689b      	ldr	r3, [r3, #8]
   b4a9c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4a9e:	6820      	ldr	r0, [r4, #0]
   b4aa0:	6803      	ldr	r3, [r0, #0]
   b4aa2:	4629      	mov	r1, r5
   b4aa4:	689b      	ldr	r3, [r3, #8]
   b4aa6:	4798      	blx	r3
        _wire -> endTransmission();
   b4aa8:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4aaa:	b004      	add	sp, #16
   b4aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4ab0:	f002 b94f 	b.w	b6d52 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4ab4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4ab8:	3301      	adds	r3, #1
   b4aba:	d10c      	bne.n	b4ad6 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4abc:	4b16      	ldr	r3, [pc, #88]	; (b4b18 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4abe:	9300      	str	r3, [sp, #0]
   b4ac0:	2300      	movs	r3, #0
   b4ac2:	f88d 3004 	strb.w	r3, [sp, #4]
   b4ac6:	4b15      	ldr	r3, [pc, #84]	; (b4b1c <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4ac8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4aca:	4668      	mov	r0, sp
   b4acc:	2301      	movs	r3, #1
   b4ace:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4ad2:	f7ff ff92 	bl	b49fa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4ad6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ada:	2100      	movs	r1, #0
   b4adc:	b280      	uxth	r0, r0
   b4ade:	f002 fb80 	bl	b71e2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4ae2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4ae6:	4620      	mov	r0, r4
   b4ae8:	f7ff ff91 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4aec:	4629      	mov	r1, r5
   b4aee:	4620      	mov	r0, r4
   b4af0:	f7ff ff8d 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4af4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4af8:	2101      	movs	r1, #1
   b4afa:	b280      	uxth	r0, r0
   b4afc:	f002 fb71 	bl	b71e2 <digitalWrite>
    if (_sck == -1)
   b4b00:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4b04:	3301      	adds	r3, #1
   b4b06:	d104      	bne.n	b4b12 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4b08:	b004      	add	sp, #16
   b4b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b4b0e:	f7ff bf6d 	b.w	b49ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b4b12:	b004      	add	sp, #16
   b4b14:	bd70      	pop	{r4, r5, r6, pc}
   b4b16:	bf00      	nop
   b4b18:	000b8544 	.word	0x000b8544
   b4b1c:	0007a120 	.word	0x0007a120

000b4b20 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b4b22:	00db      	lsls	r3, r3, #3
   b4b24:	f002 0207 	and.w	r2, r2, #7
   b4b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4b2c:	4313      	orrs	r3, r2
   b4b2e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4b32:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4b36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4b3a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4b3e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4b42:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4b46:	f366 1347 	bfi	r3, r6, #5, #3
   b4b4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4b4e:	00ed      	lsls	r5, r5, #3
   b4b50:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4b54:	f007 0707 	and.w	r7, r7, #7
   b4b58:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4b60:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4b62:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4b64:	431d      	orrs	r5, r3
   b4b66:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4b6a:	f006 0207 	and.w	r2, r6, #7
   b4b6e:	21f2      	movs	r1, #242	; 0xf2
   b4b70:	f7ff ff84 	bl	b4a7c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4b74:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4b78:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4b7c:	f002 0107 	and.w	r1, r2, #7
   b4b80:	009b      	lsls	r3, r3, #2
   b4b82:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4b86:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	21f5      	movs	r1, #245	; 0xf5
   b4b8e:	f7ff ff75 	bl	b4a7c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4b92:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4b96:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4b9a:	f002 0107 	and.w	r1, r2, #7
   b4b9e:	009b      	lsls	r3, r3, #2
   b4ba0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4ba4:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4ba8:	4620      	mov	r0, r4
   b4baa:	21f4      	movs	r1, #244	; 0xf4
}
   b4bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4bb0:	f7ff bf64 	b.w	b4a7c <_ZN15Adafruit_BME2806write8Ehh>

000b4bb4 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4bb4:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4bb6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4bba:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4bbc:	b085      	sub	sp, #20
   b4bbe:	4604      	mov	r4, r0
   b4bc0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4bc2:	d118      	bne.n	b4bf6 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4bc4:	7901      	ldrb	r1, [r0, #4]
   b4bc6:	6800      	ldr	r0, [r0, #0]
   b4bc8:	f002 f8b8 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4bcc:	6820      	ldr	r0, [r4, #0]
   b4bce:	6803      	ldr	r3, [r0, #0]
   b4bd0:	4629      	mov	r1, r5
   b4bd2:	689b      	ldr	r3, [r3, #8]
   b4bd4:	4798      	blx	r3
        _wire -> endTransmission();
   b4bd6:	6820      	ldr	r0, [r4, #0]
   b4bd8:	f002 f8bb 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4bdc:	7921      	ldrb	r1, [r4, #4]
   b4bde:	6820      	ldr	r0, [r4, #0]
   b4be0:	2201      	movs	r2, #1
   b4be2:	f002 f8a8 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4be6:	6820      	ldr	r0, [r4, #0]
   b4be8:	6803      	ldr	r3, [r0, #0]
   b4bea:	695b      	ldr	r3, [r3, #20]
   b4bec:	4798      	blx	r3
   b4bee:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4bf0:	4628      	mov	r0, r5
   b4bf2:	b005      	add	sp, #20
   b4bf4:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4bf6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4bfa:	3301      	adds	r3, #1
   b4bfc:	d10c      	bne.n	b4c18 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4bfe:	4b15      	ldr	r3, [pc, #84]	; (b4c54 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4c00:	9300      	str	r3, [sp, #0]
   b4c02:	2300      	movs	r3, #0
   b4c04:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c08:	4b13      	ldr	r3, [pc, #76]	; (b4c58 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4c0a:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c0c:	4668      	mov	r0, sp
   b4c0e:	2301      	movs	r3, #1
   b4c10:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c14:	f7ff fef1 	bl	b49fa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c18:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c1c:	2100      	movs	r1, #0
   b4c1e:	b280      	uxth	r0, r0
   b4c20:	f002 fadf 	bl	b71e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c24:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c28:	4620      	mov	r0, r4
   b4c2a:	f7ff fef0 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4c2e:	2100      	movs	r1, #0
   b4c30:	4620      	mov	r0, r4
   b4c32:	f7ff feec 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
   b4c36:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4c38:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c3c:	2101      	movs	r1, #1
   b4c3e:	b280      	uxth	r0, r0
   b4c40:	f002 facf 	bl	b71e2 <digitalWrite>
        if (_sck == -1)
   b4c44:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4c48:	3301      	adds	r3, #1
   b4c4a:	d1d1      	bne.n	b4bf0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4c4c:	f7ff fece 	bl	b49ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4c50:	e7ce      	b.n	b4bf0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4c52:	bf00      	nop
   b4c54:	000b8544 	.word	0x000b8544
   b4c58:	0007a120 	.word	0x0007a120

000b4c5c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4c5c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4c5e:	21f3      	movs	r1, #243	; 0xf3
   b4c60:	f7ff ffa8 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4c64:	f000 0001 	and.w	r0, r0, #1
   b4c68:	bd08      	pop	{r3, pc}
	...

000b4c6c <_ZN15Adafruit_BME2806read16Eh>:
{
   b4c6c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4c6e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4c72:	3301      	adds	r3, #1
{
   b4c74:	b085      	sub	sp, #20
   b4c76:	4604      	mov	r4, r0
   b4c78:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4c7a:	d11f      	bne.n	b4cbc <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4c7c:	7901      	ldrb	r1, [r0, #4]
   b4c7e:	6800      	ldr	r0, [r0, #0]
   b4c80:	f002 f85c 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4c84:	6820      	ldr	r0, [r4, #0]
   b4c86:	6803      	ldr	r3, [r0, #0]
   b4c88:	4629      	mov	r1, r5
   b4c8a:	689b      	ldr	r3, [r3, #8]
   b4c8c:	4798      	blx	r3
        _wire -> endTransmission();
   b4c8e:	6820      	ldr	r0, [r4, #0]
   b4c90:	f002 f85f 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4c94:	7921      	ldrb	r1, [r4, #4]
   b4c96:	6820      	ldr	r0, [r4, #0]
   b4c98:	2202      	movs	r2, #2
   b4c9a:	f002 f84c 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4c9e:	6820      	ldr	r0, [r4, #0]
   b4ca0:	6803      	ldr	r3, [r0, #0]
   b4ca2:	695b      	ldr	r3, [r3, #20]
   b4ca4:	4798      	blx	r3
   b4ca6:	4605      	mov	r5, r0
   b4ca8:	6820      	ldr	r0, [r4, #0]
   b4caa:	6803      	ldr	r3, [r0, #0]
   b4cac:	695b      	ldr	r3, [r3, #20]
   b4cae:	4798      	blx	r3
   b4cb0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4cb4:	b285      	uxth	r5, r0
}
   b4cb6:	4628      	mov	r0, r5
   b4cb8:	b005      	add	sp, #20
   b4cba:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4cbc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4cc0:	3301      	adds	r3, #1
   b4cc2:	d10c      	bne.n	b4cde <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4cc4:	4b18      	ldr	r3, [pc, #96]	; (b4d28 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4cc6:	9300      	str	r3, [sp, #0]
   b4cc8:	2300      	movs	r3, #0
   b4cca:	f88d 3004 	strb.w	r3, [sp, #4]
   b4cce:	4b17      	ldr	r3, [pc, #92]	; (b4d2c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4cd0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4cd2:	4668      	mov	r0, sp
   b4cd4:	2301      	movs	r3, #1
   b4cd6:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4cda:	f7ff fe8e 	bl	b49fa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4cde:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ce2:	2100      	movs	r1, #0
   b4ce4:	b280      	uxth	r0, r0
   b4ce6:	f002 fa7c 	bl	b71e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4cea:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4cee:	4620      	mov	r0, r4
   b4cf0:	f7ff fe8d 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4cf4:	2100      	movs	r1, #0
   b4cf6:	4620      	mov	r0, r4
   b4cf8:	f7ff fe89 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
   b4cfc:	2100      	movs	r1, #0
   b4cfe:	4605      	mov	r5, r0
   b4d00:	4620      	mov	r0, r4
   b4d02:	f7ff fe84 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
   b4d06:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4d0a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4d0c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4d10:	2101      	movs	r1, #1
   b4d12:	b280      	uxth	r0, r0
   b4d14:	f002 fa65 	bl	b71e2 <digitalWrite>
        if (_sck == -1)
   b4d18:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4d1c:	3301      	adds	r3, #1
   b4d1e:	d1ca      	bne.n	b4cb6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4d20:	f7ff fe64 	bl	b49ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4d24:	e7c7      	b.n	b4cb6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4d26:	bf00      	nop
   b4d28:	000b8544 	.word	0x000b8544
   b4d2c:	0007a120 	.word	0x0007a120

000b4d30 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4d30:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4d32:	f7ff ff9b 	bl	b4c6c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4d36:	ba40      	rev16	r0, r0
}
   b4d38:	b280      	uxth	r0, r0
   b4d3a:	bd08      	pop	{r3, pc}

000b4d3c <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4d3c:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4d3e:	2188      	movs	r1, #136	; 0x88
{
   b4d40:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4d42:	f7ff fff5 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4d46:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4d48:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	f7ff fff0 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d50:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4d52:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4d54:	4620      	mov	r0, r4
   b4d56:	f7ff ffeb 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4d5a:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4d5c:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4d5e:	4620      	mov	r0, r4
   b4d60:	f7ff ffe6 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4d64:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4d66:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4d68:	4620      	mov	r0, r4
   b4d6a:	f7ff ffe1 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d6e:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4d70:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4d72:	4620      	mov	r0, r4
   b4d74:	f7ff ffdc 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d78:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4d7a:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	f7ff ffd7 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d82:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4d84:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4d86:	4620      	mov	r0, r4
   b4d88:	f7ff ffd2 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d8c:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4d8e:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4d90:	4620      	mov	r0, r4
   b4d92:	f7ff ffcd 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d96:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4d98:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4d9a:	4620      	mov	r0, r4
   b4d9c:	f7ff ffc8 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4da0:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4da2:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4da4:	4620      	mov	r0, r4
   b4da6:	f7ff ffc3 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
   b4daa:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4dac:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4dae:	4620      	mov	r0, r4
   b4db0:	f7ff ffbe 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4db4:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4db6:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4db8:	4620      	mov	r0, r4
   b4dba:	f7ff fefb 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4dbe:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4dc0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	f7ff ffb3 	bl	b4d30 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4dca:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4dcc:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4dce:	4620      	mov	r0, r4
   b4dd0:	f7ff fef0 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4dd4:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4dd6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4dda:	4620      	mov	r0, r4
   b4ddc:	f7ff feea 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
   b4de0:	21e5      	movs	r1, #229	; 0xe5
   b4de2:	4605      	mov	r5, r0
   b4de4:	4620      	mov	r0, r4
   b4de6:	f7ff fee5 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
   b4dea:	f000 030f 	and.w	r3, r0, #15
   b4dee:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4df2:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4df4:	21e6      	movs	r1, #230	; 0xe6
   b4df6:	4620      	mov	r0, r4
   b4df8:	f7ff fedc 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
   b4dfc:	21e5      	movs	r1, #229	; 0xe5
   b4dfe:	4605      	mov	r5, r0
   b4e00:	4620      	mov	r0, r4
   b4e02:	f7ff fed7 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
   b4e06:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4e0a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4e0e:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4e10:	21e7      	movs	r1, #231	; 0xe7
   b4e12:	4620      	mov	r0, r4
   b4e14:	f7ff fece 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
   b4e18:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4e1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4e20 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4e20:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4e22:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4e26:	3301      	adds	r3, #1
{
   b4e28:	b085      	sub	sp, #20
   b4e2a:	4604      	mov	r4, r0
   b4e2c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4e2e:	d123      	bne.n	b4e78 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4e30:	7901      	ldrb	r1, [r0, #4]
   b4e32:	6800      	ldr	r0, [r0, #0]
   b4e34:	f001 ff82 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4e38:	6820      	ldr	r0, [r4, #0]
   b4e3a:	6803      	ldr	r3, [r0, #0]
   b4e3c:	4629      	mov	r1, r5
   b4e3e:	689b      	ldr	r3, [r3, #8]
   b4e40:	4798      	blx	r3
        _wire -> endTransmission();
   b4e42:	6820      	ldr	r0, [r4, #0]
   b4e44:	f001 ff85 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4e48:	7921      	ldrb	r1, [r4, #4]
   b4e4a:	6820      	ldr	r0, [r4, #0]
   b4e4c:	2203      	movs	r2, #3
   b4e4e:	f001 ff72 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4e52:	6820      	ldr	r0, [r4, #0]
   b4e54:	6803      	ldr	r3, [r0, #0]
   b4e56:	695b      	ldr	r3, [r3, #20]
   b4e58:	4798      	blx	r3
        value <<= 8;
   b4e5a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4e5c:	6820      	ldr	r0, [r4, #0]
   b4e5e:	6803      	ldr	r3, [r0, #0]
   b4e60:	695b      	ldr	r3, [r3, #20]
   b4e62:	4798      	blx	r3
   b4e64:	4328      	orrs	r0, r5
        value <<= 8;
   b4e66:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4e68:	6820      	ldr	r0, [r4, #0]
   b4e6a:	6803      	ldr	r3, [r0, #0]
   b4e6c:	695b      	ldr	r3, [r3, #20]
   b4e6e:	4798      	blx	r3
   b4e70:	4305      	orrs	r5, r0
}
   b4e72:	4628      	mov	r0, r5
   b4e74:	b005      	add	sp, #20
   b4e76:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4e78:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4e7c:	3301      	adds	r3, #1
   b4e7e:	d10c      	bne.n	b4e9a <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4e80:	4b1a      	ldr	r3, [pc, #104]	; (b4eec <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4e82:	9300      	str	r3, [sp, #0]
   b4e84:	2300      	movs	r3, #0
   b4e86:	f88d 3004 	strb.w	r3, [sp, #4]
   b4e8a:	4b19      	ldr	r3, [pc, #100]	; (b4ef0 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4e8c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4e8e:	4668      	mov	r0, sp
   b4e90:	2301      	movs	r3, #1
   b4e92:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4e96:	f7ff fdb0 	bl	b49fa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4e9a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4e9e:	2100      	movs	r1, #0
   b4ea0:	b280      	uxth	r0, r0
   b4ea2:	f002 f99e 	bl	b71e2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4ea6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4eaa:	4620      	mov	r0, r4
   b4eac:	f7ff fdaf 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4eb0:	2100      	movs	r1, #0
   b4eb2:	4620      	mov	r0, r4
   b4eb4:	f7ff fdab 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4eb8:	2100      	movs	r1, #0
        value <<= 8;
   b4eba:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	f7ff fda6 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
   b4ec2:	4328      	orrs	r0, r5
        value <<= 8;
   b4ec4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4ec6:	2100      	movs	r1, #0
   b4ec8:	4620      	mov	r0, r4
   b4eca:	f7ff fda0 	bl	b4a0e <_ZN15Adafruit_BME2807spixferEh>
   b4ece:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4ed0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ed4:	2101      	movs	r1, #1
   b4ed6:	b280      	uxth	r0, r0
   b4ed8:	f002 f983 	bl	b71e2 <digitalWrite>
        if (_sck == -1)
   b4edc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4ee0:	3301      	adds	r3, #1
   b4ee2:	d1c6      	bne.n	b4e72 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4ee4:	f7ff fd82 	bl	b49ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4ee8:	e7c3      	b.n	b4e72 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4eea:	bf00      	nop
   b4eec:	000b8544 	.word	0x000b8544
   b4ef0:	0007a120 	.word	0x0007a120

000b4ef4 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4ef4:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4ef6:	21fa      	movs	r1, #250	; 0xfa
{
   b4ef8:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4efa:	f7ff ff91 	bl	b4e20 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4efe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4f02:	d01f      	beq.n	b4f44 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4f04:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4f06:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4f4c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4f0a:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4f0c:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4f10:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4f14:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4f18:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4f1a:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4f1e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4f22:	131b      	asrs	r3, r3, #12
   b4f24:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4f26:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4f28:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4f2c:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4f2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4f32:	3380      	adds	r3, #128	; 0x80
   b4f34:	121b      	asrs	r3, r3, #8
   b4f36:	ee07 3a90 	vmov	s15, r3
   b4f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4f3e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4f42:	bd10      	pop	{r4, pc}
        return NAN;
   b4f44:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4f50 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4f48:	e7fb      	b.n	b4f42 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4f4a:	bf00      	nop
   b4f4c:	42c80000 	.word	0x42c80000
   b4f50:	7fc00000 	.word	0x7fc00000

000b4f54 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4f54:	b538      	push	{r3, r4, r5, lr}
   b4f56:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4f58:	f7ff ffcc 	bl	b4ef4 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4f5c:	21fd      	movs	r1, #253	; 0xfd
   b4f5e:	4620      	mov	r0, r4
   b4f60:	f7ff fe84 	bl	b4c6c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4f64:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4f68:	d038      	beq.n	b4fdc <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4f6a:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4f6c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4f70:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4f74:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4f78:	0509      	lsls	r1, r1, #20
   b4f7a:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4f7e:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4f82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4f86:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f88:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4f8c:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f90:	436b      	muls	r3, r5
   b4f92:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4f94:	4369      	muls	r1, r5
   b4f96:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4f9c:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f9e:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4fa0:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4fa4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4fa8:	434b      	muls	r3, r1
   b4faa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4fae:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4fb0:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4fb2:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4fb4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4fb8:	4352      	muls	r2, r2
   b4fba:	11d2      	asrs	r2, r2, #7
   b4fbc:	434a      	muls	r2, r1
   b4fbe:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4fc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4fc6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4fca:	bfa8      	it	ge
   b4fcc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4fd0:	131b      	asrs	r3, r3, #12
   b4fd2:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4fd6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4fda:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4fdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4fe4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4fe0:	e7fb      	b.n	b4fda <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4fe2:	bf00      	nop
   b4fe4:	7fc00000 	.word	0x7fc00000

000b4fe8 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4fec:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4fee:	f7ff ff81 	bl	b4ef4 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4ff2:	21f7      	movs	r1, #247	; 0xf7
   b4ff4:	4628      	mov	r0, r5
   b4ff6:	f7ff ff13 	bl	b4e20 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4ffa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4ffe:	f000 80b6 	beq.w	b516e <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b5002:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5004:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b5008:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b500c:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b5010:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5014:	17dc      	asrs	r4, r3, #31
   b5016:	fb03 f20e 	mul.w	r2, r3, lr
   b501a:	fb01 2204 	mla	r2, r1, r4, r2
   b501e:	fba3 3401 	umull	r3, r4, r3, r1
   b5022:	4422      	add	r2, r4
   b5024:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5026:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b502a:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b502c:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5030:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5034:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5038:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b503c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b5040:	fb03 f608 	mul.w	r6, r3, r8
   b5044:	fb07 660c 	mla	r6, r7, ip, r6
   b5048:	fba3 3c07 	umull	r3, ip, r3, r7
   b504c:	4466      	add	r6, ip
   b504e:	0a1b      	lsrs	r3, r3, #8
   b5050:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b5054:	191b      	adds	r3, r3, r4
   b5056:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b505a:	8b6e      	ldrh	r6, [r5, #26]
   b505c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b5060:	fba3 3406 	umull	r3, r4, r3, r6
   b5064:	fb06 4402 	mla	r4, r6, r2, r4
   b5068:	17e3      	asrs	r3, r4, #31
   b506a:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b506c:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b5070:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b5074:	d07e      	beq.n	b5174 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5076:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b507a:	fb04 f608 	mul.w	r6, r4, r8
   b507e:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b5082:	fb07 6609 	mla	r6, r7, r9, r6
   b5086:	fba4 4707 	umull	r4, r7, r4, r7
   b508a:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b508c:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b5090:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b5094:	fb07 fe0e 	mul.w	lr, r7, lr
   b5098:	fb01 ee08 	mla	lr, r1, r8, lr
   b509c:	fba7 7101 	umull	r7, r1, r7, r1
   b50a0:	4471      	add	r1, lr
   b50a2:	0449      	lsls	r1, r1, #17
   b50a4:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b50a8:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b50aa:	047f      	lsls	r7, r7, #17
   b50ac:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b50ae:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b50b2:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b50b6:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b50ba:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b50be:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b50c2:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b50c6:	07e4      	lsls	r4, r4, #31
   b50c8:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b50ca:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b50ce:	f640 4135 	movw	r1, #3125	; 0xc35
   b50d2:	eb60 0606 	sbc.w	r6, r0, r6
   b50d6:	fba4 0401 	umull	r0, r4, r4, r1
   b50da:	fb01 4106 	mla	r1, r1, r6, r4
   b50de:	f002 fe59 	bl	b7d94 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b50e2:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b50e6:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b50ea:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b50ee:	0b43      	lsrs	r3, r0, #13
   b50f0:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b50f4:	fb02 f70c 	mul.w	r7, r2, ip
   b50f8:	17d4      	asrs	r4, r2, #31
   b50fa:	fb03 7704 	mla	r7, r3, r4, r7
   b50fe:	fba2 2403 	umull	r2, r4, r2, r3
   b5102:	443c      	add	r4, r7
   b5104:	fb02 f70c 	mul.w	r7, r2, ip
   b5108:	fb03 7704 	mla	r7, r3, r4, r7
   b510c:	fba2 2303 	umull	r2, r3, r2, r3
   b5110:	441f      	add	r7, r3
   b5112:	0e53      	lsrs	r3, r2, #25
   b5114:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5118:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b511a:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b511e:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b5122:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5124:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5128:	fb02 4100 	mla	r1, r2, r0, r4
   b512c:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5130:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5134:	4431      	add	r1, r6
   b5136:	0cc0      	lsrs	r0, r0, #19
   b5138:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b513c:	1818      	adds	r0, r3, r0
   b513e:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b5142:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b5146:	0a00      	lsrs	r0, r0, #8
   b5148:	012d      	lsls	r5, r5, #4
   b514a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b514e:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b5152:	0124      	lsls	r4, r4, #4
   b5154:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b5156:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b515a:	f002 fddd 	bl	b7d18 <__aeabi_l2f>
   b515e:	ed9f 0a07 	vldr	s0, [pc, #28]	; b517c <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b5162:	ee07 0a90 	vmov	s15, r0
   b5166:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b516a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b516e:	ed9f 0a04 	vldr	s0, [pc, #16]	; b5180 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b5172:	e7fa      	b.n	b516a <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b5174:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5184 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b5178:	e7f7      	b.n	b516a <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b517a:	bf00      	nop
   b517c:	3b800000 	.word	0x3b800000
   b5180:	7fc00000 	.word	0x7fc00000
   b5184:	00000000 	.word	0x00000000

000b5188 <_ZN15Adafruit_BME2804initEv>:
{
   b5188:	b530      	push	{r4, r5, lr}
   b518a:	4604      	mov	r4, r0
    if (_cs == -1) {
   b518c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b5190:	1c42      	adds	r2, r0, #1
{
   b5192:	b085      	sub	sp, #20
    if (_cs == -1) {
   b5194:	d119      	bne.n	b51ca <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b5196:	6820      	ldr	r0, [r4, #0]
   b5198:	f001 fd9e 	bl	b6cd8 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b519c:	21d0      	movs	r1, #208	; 0xd0
   b519e:	4620      	mov	r0, r4
   b51a0:	f7ff fd08 	bl	b4bb4 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b51a4:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b51a6:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b51a8:	d145      	bne.n	b5236 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b51aa:	4620      	mov	r0, r4
   b51ac:	22b6      	movs	r2, #182	; 0xb6
   b51ae:	21e0      	movs	r1, #224	; 0xe0
   b51b0:	f7ff fc64 	bl	b4a7c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b51b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b51b8:	f001 f87a 	bl	b62b0 <delay>
    while (isReadingCalibration())
   b51bc:	4620      	mov	r0, r4
   b51be:	f7ff fd4d 	bl	b4c5c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b51c2:	4605      	mov	r5, r0
   b51c4:	b328      	cbz	r0, b5212 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b51c6:	2064      	movs	r0, #100	; 0x64
   b51c8:	e7f6      	b.n	b51b8 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b51ca:	2101      	movs	r1, #1
   b51cc:	b280      	uxth	r0, r0
   b51ce:	f002 f808 	bl	b71e2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b51d2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b51d6:	2101      	movs	r1, #1
   b51d8:	b280      	uxth	r0, r0
   b51da:	f001 fff1 	bl	b71c0 <pinMode>
        if (_sck == -1) {
   b51de:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b51e2:	1c43      	adds	r3, r0, #1
   b51e4:	d104      	bne.n	b51f0 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b51e6:	f7ff fbe5 	bl	b49b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b51ea:	f000 fd45 	bl	b5c78 <_ZN8SPIClass5beginEv>
    }
   b51ee:	e7d5      	b.n	b519c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b51f0:	2101      	movs	r1, #1
   b51f2:	b280      	uxth	r0, r0
   b51f4:	f001 ffe4 	bl	b71c0 <pinMode>
            pinMode(_mosi, OUTPUT);
   b51f8:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b51fc:	2101      	movs	r1, #1
   b51fe:	b280      	uxth	r0, r0
   b5200:	f001 ffde 	bl	b71c0 <pinMode>
            pinMode(_miso, INPUT);
   b5204:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b5208:	2100      	movs	r1, #0
   b520a:	b280      	uxth	r0, r0
   b520c:	f001 ffd8 	bl	b71c0 <pinMode>
   b5210:	e7c4      	b.n	b519c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b5212:	4620      	mov	r0, r4
   b5214:	f7ff fd92 	bl	b4d3c <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b5218:	2305      	movs	r3, #5
   b521a:	9300      	str	r3, [sp, #0]
   b521c:	461a      	mov	r2, r3
   b521e:	2103      	movs	r1, #3
   b5220:	4620      	mov	r0, r4
   b5222:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5226:	f7ff fc7b 	bl	b4b20 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b522a:	2064      	movs	r0, #100	; 0x64
   b522c:	f001 f840 	bl	b62b0 <delay>
    return true;
   b5230:	2001      	movs	r0, #1
}
   b5232:	b005      	add	sp, #20
   b5234:	bd30      	pop	{r4, r5, pc}
        return false;
   b5236:	2000      	movs	r0, #0
   b5238:	e7fb      	b.n	b5232 <_ZN15Adafruit_BME2804initEv+0xaa>

000b523a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b523a:	2377      	movs	r3, #119	; 0x77
{
   b523c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b523e:	7103      	strb	r3, [r0, #4]
{
   b5240:	4604      	mov	r4, r0
	_wire = &Wire;
   b5242:	f002 f851 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b5246:	6020      	str	r0, [r4, #0]
	status = init();
   b5248:	4620      	mov	r0, r4
   b524a:	f7ff ff9d 	bl	b5188 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b524e:	b930      	cbnz	r0, b525e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b5250:	2376      	movs	r3, #118	; 0x76
   b5252:	7123      	strb	r3, [r4, #4]
 		status = init();
   b5254:	4620      	mov	r0, r4
}
   b5256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b525a:	f7ff bf95 	b.w	b5188 <_ZN15Adafruit_BME2804initEv>
}
   b525e:	bd10      	pop	{r4, pc}

000b5260 <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
  BSD license, all text above must be included in any redistribution
 ****************************************************/
#include "application.h"
#include "Adafruit_VEML6070.h"

void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
   b5260:	b510      	push	{r4, lr}
   b5262:	460c      	mov	r4, r1
  Wire.begin();
   b5264:	f002 f840 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b5268:	f001 fd36 	bl	b6cd8 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(VEML6070_ADDR_L);
   b526c:	f002 f83c 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b5270:	2138      	movs	r1, #56	; 0x38
   b5272:	f001 fd67 	bl	b6d44 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((itime << 2) | 0x02);
   b5276:	f002 f837 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b527a:	00a1      	lsls	r1, r4, #2
   b527c:	6803      	ldr	r3, [r0, #0]
   b527e:	f041 0102 	orr.w	r1, r1, #2
   b5282:	689b      	ldr	r3, [r3, #8]
   b5284:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   b5288:	4798      	blx	r3
  Wire.endTransmission();
   b528a:	f002 f82d 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b528e:	f001 fd60 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
  delay(500);
}
   b5292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
   b5296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b529a:	f001 b809 	b.w	b62b0 <delay>

000b529e <_ZN17Adafruit_VEML60706readUVEv>:

uint16_t Adafruit_VEML6070::readUV() {
   b529e:	b538      	push	{r3, r4, r5, lr}
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
   b52a0:	f002 f822 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b52a4:	2201      	movs	r2, #1
   b52a6:	2139      	movs	r1, #57	; 0x39
   b52a8:	f001 fd45 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
   b52ac:	2801      	cmp	r0, #1
   b52ae:	4604      	mov	r4, r0
   b52b0:	d002      	beq.n	b52b8 <_ZN17Adafruit_VEML60706readUVEv+0x1a>
   b52b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
  uvi |= Wire.read();

  return uvi;  
}
   b52b6:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t uvi = Wire.read();
   b52b8:	f002 f816 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b52bc:	6803      	ldr	r3, [r0, #0]
   b52be:	695b      	ldr	r3, [r3, #20]
   b52c0:	4798      	blx	r3
   b52c2:	4605      	mov	r5, r0
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
   b52c4:	f002 f810 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b52c8:	4622      	mov	r2, r4
   b52ca:	2138      	movs	r1, #56	; 0x38
   b52cc:	f001 fd33 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
   b52d0:	2801      	cmp	r0, #1
   b52d2:	d1ee      	bne.n	b52b2 <_ZN17Adafruit_VEML60706readUVEv+0x14>
  uvi |= Wire.read();
   b52d4:	f002 f808 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b52d8:	6803      	ldr	r3, [r0, #0]
   b52da:	695b      	ldr	r3, [r3, #20]
   b52dc:	4798      	blx	r3
   b52de:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b52e2:	b280      	uxth	r0, r0
  return uvi;  
   b52e4:	e7e7      	b.n	b52b6 <_ZN17Adafruit_VEML60706readUVEv+0x18>

000b52e6 <_ZN7TwoWire5writeEi.isra.0>:
   b52e6:	6803      	ldr	r3, [r0, #0]
   b52e8:	b2c9      	uxtb	r1, r1
   b52ea:	689b      	ldr	r3, [r3, #8]
   b52ec:	4718      	bx	r3

000b52ee <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
   b52ee:	2200      	movs	r2, #0
   b52f0:	6042      	str	r2, [r0, #4]
   b52f2:	6082      	str	r2, [r0, #8]
   b52f4:	60c2      	str	r2, [r0, #12]
   b52f6:	f240 1201 	movw	r2, #257	; 0x101
   b52fa:	8202      	strh	r2, [r0, #16]
   b52fc:	2201      	movs	r2, #1
   b52fe:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
   b5300:	4770      	bx	lr

000b5302 <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
   b5302:	b538      	push	{r3, r4, r5, lr}
   b5304:	4604      	mov	r4, r0
   b5306:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5308:	6800      	ldr	r0, [r0, #0]
   b530a:	2161      	movs	r1, #97	; 0x61
   b530c:	f001 fd1a 	bl	b6d44 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
   b5310:	6820      	ldr	r0, [r4, #0]
   b5312:	0a29      	lsrs	r1, r5, #8
   b5314:	f7ff ffe7 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   b5318:	6820      	ldr	r0, [r4, #0]
   b531a:	b2e9      	uxtb	r1, r5
   b531c:	f7ff ffe3 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b5320:	6820      	ldr	r0, [r4, #0]
   b5322:	f001 fd16 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
   b5326:	b108      	cbz	r0, b532c <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   b5328:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
   b532a:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
   b532c:	6820      	ldr	r0, [r4, #0]
   b532e:	2202      	movs	r2, #2
   b5330:	2161      	movs	r1, #97	; 0x61
   b5332:	f001 fd00 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5336:	6820      	ldr	r0, [r4, #0]
   b5338:	6803      	ldr	r3, [r0, #0]
   b533a:	691b      	ldr	r3, [r3, #16]
   b533c:	4798      	blx	r3
   b533e:	2800      	cmp	r0, #0
   b5340:	d0f2      	beq.n	b5328 <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
   b5342:	6820      	ldr	r0, [r4, #0]
   b5344:	6803      	ldr	r3, [r0, #0]
   b5346:	695b      	ldr	r3, [r3, #20]
   b5348:	4798      	blx	r3
   b534a:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
   b534c:	6820      	ldr	r0, [r4, #0]
   b534e:	6803      	ldr	r3, [r0, #0]
   b5350:	695b      	ldr	r3, [r3, #20]
   b5352:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b5354:	b2c3      	uxtb	r3, r0
   b5356:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
   b535a:	b280      	uxth	r0, r0
   b535c:	e7e5      	b.n	b532a <_ZN5SCD3012readRegisterEt+0x28>

000b535e <_ZN5SCD3013dataAvailableEv>:
{
   b535e:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   b5360:	f240 2102 	movw	r1, #514	; 0x202
   b5364:	f7ff ffcd 	bl	b5302 <_ZN5SCD3012readRegisterEt>
}
   b5368:	1e43      	subs	r3, r0, #1
   b536a:	4258      	negs	r0, r3
   b536c:	4158      	adcs	r0, r3
   b536e:	bd08      	pop	{r3, pc}

000b5370 <_ZN5SCD3015readMeasurementEv>:
{
   b5370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5374:	4604      	mov	r4, r0
  if (dataAvailable() == false)
   b5376:	f7ff fff2 	bl	b535e <_ZN5SCD3013dataAvailableEv>
   b537a:	4607      	mov	r7, r0
   b537c:	b918      	cbnz	r0, b5386 <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
   b537e:	2700      	movs	r7, #0
}
   b5380:	4638      	mov	r0, r7
   b5382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5386:	6820      	ldr	r0, [r4, #0]
   b5388:	2161      	movs	r1, #97	; 0x61
   b538a:	f001 fcdb 	bl	b6d44 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
   b538e:	6820      	ldr	r0, [r4, #0]
   b5390:	2103      	movs	r1, #3
   b5392:	f7ff ffa8 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   b5396:	6820      	ldr	r0, [r4, #0]
   b5398:	2100      	movs	r1, #0
   b539a:	f7ff ffa4 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b539e:	6820      	ldr	r0, [r4, #0]
   b53a0:	f001 fcd7 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
   b53a4:	4605      	mov	r5, r0
   b53a6:	2800      	cmp	r0, #0
   b53a8:	d1e9      	bne.n	b537e <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
   b53aa:	2212      	movs	r2, #18
   b53ac:	2161      	movs	r1, #97	; 0x61
   b53ae:	6820      	ldr	r0, [r4, #0]
   b53b0:	f001 fcc1 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b53b4:	6820      	ldr	r0, [r4, #0]
   b53b6:	6803      	ldr	r3, [r0, #0]
   b53b8:	691b      	ldr	r3, [r3, #16]
   b53ba:	4798      	blx	r3
   b53bc:	4606      	mov	r6, r0
   b53be:	b358      	cbz	r0, b5418 <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
   b53c0:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
   b53c2:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
   b53c4:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
   b53c6:	6820      	ldr	r0, [r4, #0]
   b53c8:	6803      	ldr	r3, [r0, #0]
   b53ca:	695b      	ldr	r3, [r3, #20]
   b53cc:	4798      	blx	r3
      switch (x)
   b53ce:	b2eb      	uxtb	r3, r5
   b53d0:	2b10      	cmp	r3, #16
   b53d2:	d80d      	bhi.n	b53f0 <_ZN5SCD3015readMeasurementEv+0x80>
   b53d4:	e8df f003 	tbb	[pc, r3]
   b53d8:	090c0909 	.word	0x090c0909
   b53dc:	18180c09 	.word	0x18180c09
   b53e0:	0c18180c 	.word	0x0c18180c
   b53e4:	1c0c1c1c 	.word	0x1c0c1c1c
   b53e8:	1c          	.byte	0x1c
   b53e9:	00          	.byte	0x00
          tempCO2 |= incoming;
   b53ea:	b2c3      	uxtb	r3, r0
   b53ec:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
   b53f0:	3501      	adds	r5, #1
   b53f2:	2d12      	cmp	r5, #18
   b53f4:	d1e7      	bne.n	b53c6 <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
   b53f6:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
   b53f8:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
   b53fc:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
   b53fe:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
   b5402:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
   b5404:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
   b5406:	e7bb      	b.n	b5380 <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
   b5408:	b2c3      	uxtb	r3, r0
   b540a:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
   b540e:	e7ef      	b.n	b53f0 <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
   b5410:	b2c3      	uxtb	r3, r0
   b5412:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
   b5416:	e7eb      	b.n	b53f0 <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
   b5418:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
   b541a:	4681      	mov	r9, r0
   b541c:	e7eb      	b.n	b53f6 <_ZN5SCD3015readMeasurementEv+0x86>

000b541e <_ZN5SCD306getCO2Ev>:
{
   b541e:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
   b5420:	7c03      	ldrb	r3, [r0, #16]
{
   b5422:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
   b5424:	b10b      	cbz	r3, b542a <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5426:	f7ff ffa3 	bl	b5370 <_ZN5SCD3015readMeasurementEv>
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
   b542a:	edd4 7a01 	vldr	s15, [r4, #4]
   b542e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  co2HasBeenReported = true;
   b5432:	2301      	movs	r3, #1
   b5434:	7423      	strb	r3, [r4, #16]
}
   b5436:	ee17 3a90 	vmov	r3, s15
   b543a:	b298      	uxth	r0, r3
   b543c:	bd10      	pop	{r4, pc}

000b543e <_ZN5SCD3011getHumidityEv>:
{
   b543e:	b510      	push	{r4, lr}
  if (humidityHasBeenReported == true) //Trigger a new read
   b5440:	7c43      	ldrb	r3, [r0, #17]
{
   b5442:	4604      	mov	r4, r0
  if (humidityHasBeenReported == true) //Trigger a new read
   b5444:	b10b      	cbz	r3, b544a <_ZN5SCD3011getHumidityEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5446:	f7ff ff93 	bl	b5370 <_ZN5SCD3015readMeasurementEv>
  humidityHasBeenReported = true;
   b544a:	2301      	movs	r3, #1
}
   b544c:	ed94 0a03 	vldr	s0, [r4, #12]
  humidityHasBeenReported = true;
   b5450:	7463      	strb	r3, [r4, #17]
}
   b5452:	bd10      	pop	{r4, pc}

000b5454 <_ZN5SCD3014getTemperatureEv>:
{
   b5454:	b510      	push	{r4, lr}
  if (temperatureHasBeenReported == true) //Trigger a new read
   b5456:	7c83      	ldrb	r3, [r0, #18]
{
   b5458:	4604      	mov	r4, r0
  if (temperatureHasBeenReported == true) //Trigger a new read
   b545a:	b10b      	cbz	r3, b5460 <_ZN5SCD3014getTemperatureEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b545c:	f7ff ff88 	bl	b5370 <_ZN5SCD3015readMeasurementEv>
  temperatureHasBeenReported = true;
   b5460:	2301      	movs	r3, #1
}
   b5462:	ed94 0a02 	vldr	s0, [r4, #8]
  temperatureHasBeenReported = true;
   b5466:	74a3      	strb	r3, [r4, #18]
}
   b5468:	bd10      	pop	{r4, pc}

000b546a <_ZN5SCD3011computeCRC8EPhh>:
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0 ; x < len ; x++)
   b546a:	440a      	add	r2, r1
  uint8_t crc = 0xFF; //Init with 0xFF
   b546c:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t x = 0 ; x < len ; x++)
   b546e:	428a      	cmp	r2, r1
   b5470:	d011      	beq.n	b5496 <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
   b5472:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5476:	4058      	eors	r0, r3
   b5478:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
   b547a:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t i = 0 ; i < 8 ; i++)
   b547e:	f103 33ff 	add.w	r3, r3, #4294967295
   b5482:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   b5486:	bf18      	it	ne
   b5488:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
   b548c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   b5490:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
   b5492:	d1f2      	bne.n	b547a <_ZN5SCD3011computeCRC8EPhh+0x10>
   b5494:	e7eb      	b.n	b546e <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
   b5496:	4770      	bx	lr

000b5498 <_ZN5SCD3011sendCommandEtt>:
{
   b5498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b549c:	460e      	mov	r6, r1
  data[0] = arguments >> 8;
   b549e:	ea4f 2812 	mov.w	r8, r2, lsr #8
{
   b54a2:	4615      	mov	r5, r2
  data[1] = arguments & 0xFF;
   b54a4:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b54a8:	a901      	add	r1, sp, #4
   b54aa:	2202      	movs	r2, #2
{
   b54ac:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
   b54ae:	f88d 8004 	strb.w	r8, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b54b2:	f7ff ffda 	bl	b546a <_ZN5SCD3011computeCRC8EPhh>
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b54b6:	2161      	movs	r1, #97	; 0x61
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b54b8:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b54ba:	6820      	ldr	r0, [r4, #0]
   b54bc:	f001 fc42 	bl	b6d44 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
   b54c0:	6820      	ldr	r0, [r4, #0]
   b54c2:	0a31      	lsrs	r1, r6, #8
   b54c4:	f7ff ff0f 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(command & 0xFF); //LSB
   b54c8:	6820      	ldr	r0, [r4, #0]
   b54ca:	b2f1      	uxtb	r1, r6
   b54cc:	f7ff ff0b 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments >> 8); //MSB
   b54d0:	6820      	ldr	r0, [r4, #0]
   b54d2:	4641      	mov	r1, r8
   b54d4:	f7ff ff07 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments & 0xFF); //LSB
   b54d8:	6820      	ldr	r0, [r4, #0]
   b54da:	b2e9      	uxtb	r1, r5
   b54dc:	f7ff ff03 	bl	b52e6 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(crc);
   b54e0:	6820      	ldr	r0, [r4, #0]
   b54e2:	6803      	ldr	r3, [r0, #0]
   b54e4:	4639      	mov	r1, r7
   b54e6:	689b      	ldr	r3, [r3, #8]
   b54e8:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b54ea:	6820      	ldr	r0, [r4, #0]
   b54ec:	f001 fc31 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
}
   b54f0:	fab0 f080 	clz	r0, r0
   b54f4:	0940      	lsrs	r0, r0, #5
   b54f6:	b002      	add	sp, #8
   b54f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b54fc <_ZN5SCD3022setAutoSelfCalibrationEb>:
  if (enable)
   b54fc:	460a      	mov	r2, r1
   b54fe:	b101      	cbz	r1, b5502 <_ZN5SCD3022setAutoSelfCalibrationEb+0x6>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b5500:	2201      	movs	r2, #1
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 0); //Deactivate continuous ASC
   b5502:	f245 3106 	movw	r1, #21254	; 0x5306
   b5506:	f7ff bfc7 	b.w	b5498 <_ZN5SCD3011sendCommandEtt>

000b550a <_ZN5SCD3014beginMeasuringEt>:
{
   b550a:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
   b550c:	2110      	movs	r1, #16
   b550e:	f7ff bfc3 	b.w	b5498 <_ZN5SCD3011sendCommandEtt>

000b5512 <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
   b5512:	2100      	movs	r1, #0
   b5514:	f7ff bff9 	b.w	b550a <_ZN5SCD3014beginMeasuringEt>

000b5518 <_ZN5SCD3022setMeasurementIntervalEt>:
{
   b5518:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
   b551a:	f44f 418c 	mov.w	r1, #17920	; 0x4600
   b551e:	f7ff bfbb 	b.w	b5498 <_ZN5SCD3011sendCommandEtt>

000b5522 <_ZN5SCD305beginER7TwoWire>:
{
   b5522:	b538      	push	{r3, r4, r5, lr}
   b5524:	4604      	mov	r4, r0
   b5526:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b5528:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b552a:	f001 fbd5 	bl	b6cd8 <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
   b552e:	4620      	mov	r0, r4
   b5530:	f7ff ffef 	bl	b5512 <_ZN5SCD3014beginMeasuringEv>
   b5534:	4605      	mov	r5, r0
   b5536:	b148      	cbz	r0, b554c <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
   b5538:	2102      	movs	r1, #2
   b553a:	4620      	mov	r0, r4
   b553c:	f7ff ffec 	bl	b5518 <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b5540:	2201      	movs	r2, #1
   b5542:	f245 3106 	movw	r1, #21254	; 0x5306
   b5546:	4620      	mov	r0, r4
   b5548:	f7ff ffa6 	bl	b5498 <_ZN5SCD3011sendCommandEtt>
}
   b554c:	4628      	mov	r0, r5
   b554e:	bd38      	pop	{r3, r4, r5, pc}

000b5550 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   b5550:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   b5552:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   b5554:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   b5556:	7002      	strb	r2, [r0, #0]
}
   b5558:	4770      	bx	lr

000b555a <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   b555a:	b510      	push	{r4, lr}
   b555c:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   b555e:	6840      	ldr	r0, [r0, #4]
   b5560:	f001 fbfa 	bl	b6d58 <_ZN7TwoWire9isEnabledEv>
   b5564:	b910      	cbnz	r0, b556c <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   b5566:	6860      	ldr	r0, [r4, #4]
   b5568:	f001 fbb6 	bl	b6cd8 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   b556c:	2001      	movs	r0, #1
   b556e:	bd10      	pop	{r4, pc}

000b5570 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   b5570:	b570      	push	{r4, r5, r6, lr}
   b5572:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   b5574:	7841      	ldrb	r1, [r0, #1]
   b5576:	6840      	ldr	r0, [r0, #4]
   b5578:	f001 fbe0 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   b557c:	7869      	ldrb	r1, [r5, #1]
   b557e:	6868      	ldr	r0, [r5, #4]
   b5580:	2202      	movs	r2, #2
   b5582:	f001 fbd8 	bl	b6d36 <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   b5586:	6868      	ldr	r0, [r5, #4]
   b5588:	6803      	ldr	r3, [r0, #0]
   b558a:	695b      	ldr	r3, [r3, #20]
   b558c:	4798      	blx	r3
   b558e:	4606      	mov	r6, r0
   b5590:	6868      	ldr	r0, [r5, #4]
   b5592:	6803      	ldr	r3, [r0, #0]
   b5594:	695b      	ldr	r3, [r3, #20]
   b5596:	4798      	blx	r3
   b5598:	4604      	mov	r4, r0
   b559a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  m_i2c.endTransmission();
   b559e:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   b55a0:	b2a4      	uxth	r4, r4
  m_i2c.endTransmission();
   b55a2:	f001 fbd6 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
  return (float)level / 1.2f; // convert to lux
   b55a6:	ee07 4a90 	vmov	s15, r4
}
   b55aa:	ed9f 0a03 	vldr	s0, [pc, #12]	; b55b8 <_ZN6BH175015get_light_levelEv+0x48>
  return (float)level / 1.2f; // convert to lux
   b55ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b55b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b55b6:	bd70      	pop	{r4, r5, r6, pc}
   b55b8:	3f99999a 	.word	0x3f99999a

000b55bc <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   b55bc:	7803      	ldrb	r3, [r0, #0]
   b55be:	2b23      	cmp	r3, #35	; 0x23
   b55c0:	d005      	beq.n	b55ce <_ZN6BH175020wait_for_measurementEv+0x12>
   b55c2:	2b13      	cmp	r3, #19
   b55c4:	bf0c      	ite	eq
   b55c6:	2018      	moveq	r0, #24
   b55c8:	20b4      	movne	r0, #180	; 0xb4
   b55ca:	f000 be71 	b.w	b62b0 <delay>
   b55ce:	2018      	movs	r0, #24
   b55d0:	e7fb      	b.n	b55ca <_ZN6BH175020wait_for_measurementEv+0xe>

000b55d2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   b55d2:	b538      	push	{r3, r4, r5, lr}
   b55d4:	4604      	mov	r4, r0
   b55d6:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   b55d8:	7841      	ldrb	r1, [r0, #1]
   b55da:	6840      	ldr	r0, [r0, #4]
   b55dc:	f001 fbae 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   b55e0:	6860      	ldr	r0, [r4, #4]
   b55e2:	6803      	ldr	r3, [r0, #0]
   b55e4:	4629      	mov	r1, r5
   b55e6:	689b      	ldr	r3, [r3, #8]
   b55e8:	4798      	blx	r3
  m_i2c.endTransmission();
   b55ea:	6860      	ldr	r0, [r4, #4]
   b55ec:	f001 fbb1 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   b55f0:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   b55f2:	4620      	mov	r0, r4
}
   b55f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   b55f8:	f7ff bfe0 	b.w	b55bc <_ZN6BH175020wait_for_measurementEv>

000b55fc <_ZN6BH175023make_forced_measurementEv>:
{
   b55fc:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   b55fe:	7803      	ldrb	r3, [r0, #0]
   b5600:	f1a3 0220 	sub.w	r2, r3, #32
   b5604:	2a01      	cmp	r2, #1
{
   b5606:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   b5608:	d901      	bls.n	b560e <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   b560a:	2b23      	cmp	r3, #35	; 0x23
   b560c:	d110      	bne.n	b5630 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   b560e:	7861      	ldrb	r1, [r4, #1]
   b5610:	6860      	ldr	r0, [r4, #4]
   b5612:	f001 fb93 	bl	b6d3c <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   b5616:	6860      	ldr	r0, [r4, #4]
   b5618:	7821      	ldrb	r1, [r4, #0]
   b561a:	6803      	ldr	r3, [r0, #0]
   b561c:	689b      	ldr	r3, [r3, #8]
   b561e:	4798      	blx	r3
    m_i2c.endTransmission();
   b5620:	6860      	ldr	r0, [r4, #4]
   b5622:	f001 fb96 	bl	b6d52 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   b5626:	4620      	mov	r0, r4
}
   b5628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   b562c:	f7ff bfc6 	b.w	b55bc <_ZN6BH175020wait_for_measurementEv>
}
   b5630:	bd10      	pop	{r4, pc}
	...

000b5634 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <netdb_freeaddrinfo+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	689b      	ldr	r3, [r3, #8]
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	00030268 	.word	0x00030268

000b5644 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <netdb_getaddrinfo+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	68db      	ldr	r3, [r3, #12]
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	00030268 	.word	0x00030268

000b5654 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <HAL_Pin_Mode+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	689b      	ldr	r3, [r3, #8]
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	0003022c 	.word	0x0003022c

000b5664 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <HAL_Get_Pin_Mode+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	68db      	ldr	r3, [r3, #12]
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	0003022c 	.word	0x0003022c

000b5674 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <HAL_GPIO_Write+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	691b      	ldr	r3, [r3, #16]
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	0003022c 	.word	0x0003022c

000b5684 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <HAL_GPIO_Read+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	695b      	ldr	r3, [r3, #20]
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	0003022c 	.word	0x0003022c

000b5694 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <HAL_RNG_GetRandomNumber+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	685b      	ldr	r3, [r3, #4]
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	00030218 	.word	0x00030218

000b56a4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	695b      	ldr	r3, [r3, #20]
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	00030218 	.word	0x00030218

000b56b4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <hal_rtc_time_is_valid+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	00030218 	.word	0x00030218

000b56c4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <hal_rtc_get_time+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	00030218 	.word	0x00030218

000b56d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <os_mutex_recursive_create+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	00030248 	.word	0x00030248

000b56e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <inet_inet_ntop+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	695b      	ldr	r3, [r3, #20]
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	00030264 	.word	0x00030264

000b56f4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <hal_usart_write+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	68db      	ldr	r3, [r3, #12]
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	0003023c 	.word	0x0003023c

000b5704 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <hal_usart_available+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	691b      	ldr	r3, [r3, #16]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	0003023c 	.word	0x0003023c

000b5714 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <hal_usart_read+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	695b      	ldr	r3, [r3, #20]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	0003023c 	.word	0x0003023c

000b5724 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <hal_usart_peek+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	699b      	ldr	r3, [r3, #24]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	0003023c 	.word	0x0003023c

000b5734 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <hal_usart_flush+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	69db      	ldr	r3, [r3, #28]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	0003023c 	.word	0x0003023c

000b5744 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <hal_usart_is_enabled+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	6a1b      	ldr	r3, [r3, #32]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	0003023c 	.word	0x0003023c

000b5754 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <hal_usart_available_data_for_write+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	0003023c 	.word	0x0003023c

000b5764 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <hal_usart_init_ex+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	0003023c 	.word	0x0003023c

000b5774 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <hal_i2c_begin+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	68db      	ldr	r3, [r3, #12]
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	00030228 	.word	0x00030228

000b5784 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <hal_i2c_begin_transmission+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	699b      	ldr	r3, [r3, #24]
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	00030228 	.word	0x00030228

000b5794 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <hal_i2c_end_transmission+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	69db      	ldr	r3, [r3, #28]
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	00030228 	.word	0x00030228

000b57a4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <hal_i2c_write+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	6a1b      	ldr	r3, [r3, #32]
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	00030228 	.word	0x00030228

000b57b4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <hal_i2c_available+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	00030228 	.word	0x00030228

000b57c4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <hal_i2c_read+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	00030228 	.word	0x00030228

000b57d4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <hal_i2c_peek+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	00030228 	.word	0x00030228

000b57e4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <hal_i2c_flush+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	00030228 	.word	0x00030228

000b57f4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <hal_i2c_is_enabled+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	00030228 	.word	0x00030228

000b5804 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5804:	b508      	push	{r3, lr}
   b5806:	4b02      	ldr	r3, [pc, #8]	; (b5810 <hal_i2c_init+0xc>)
   b5808:	681b      	ldr	r3, [r3, #0]
   b580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b580c:	9301      	str	r3, [sp, #4]
   b580e:	bd08      	pop	{r3, pc}
   b5810:	00030228 	.word	0x00030228

000b5814 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <hal_i2c_request_ex+0xc>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b581c:	9301      	str	r3, [sp, #4]
   b581e:	bd08      	pop	{r3, pc}
   b5820:	00030228 	.word	0x00030228

000b5824 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b02      	ldr	r3, [pc, #8]	; (b5830 <hal_spi_begin+0xc>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	681b      	ldr	r3, [r3, #0]
   b582c:	9301      	str	r3, [sp, #4]
   b582e:	bd08      	pop	{r3, pc}
   b5830:	00030230 	.word	0x00030230

000b5834 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5834:	b508      	push	{r3, lr}
   b5836:	4b02      	ldr	r3, [pc, #8]	; (b5840 <hal_spi_transfer+0xc>)
   b5838:	681b      	ldr	r3, [r3, #0]
   b583a:	695b      	ldr	r3, [r3, #20]
   b583c:	9301      	str	r3, [sp, #4]
   b583e:	bd08      	pop	{r3, pc}
   b5840:	00030230 	.word	0x00030230

000b5844 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5844:	b508      	push	{r3, lr}
   b5846:	4b02      	ldr	r3, [pc, #8]	; (b5850 <hal_spi_init+0xc>)
   b5848:	681b      	ldr	r3, [r3, #0]
   b584a:	69db      	ldr	r3, [r3, #28]
   b584c:	9301      	str	r3, [sp, #4]
   b584e:	bd08      	pop	{r3, pc}
   b5850:	00030230 	.word	0x00030230

000b5854 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5854:	b508      	push	{r3, lr}
   b5856:	4b02      	ldr	r3, [pc, #8]	; (b5860 <hal_spi_is_enabled+0xc>)
   b5858:	681b      	ldr	r3, [r3, #0]
   b585a:	6a1b      	ldr	r3, [r3, #32]
   b585c:	9301      	str	r3, [sp, #4]
   b585e:	bd08      	pop	{r3, pc}
   b5860:	00030230 	.word	0x00030230

000b5864 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5864:	b508      	push	{r3, lr}
   b5866:	4b02      	ldr	r3, [pc, #8]	; (b5870 <hal_spi_info+0xc>)
   b5868:	681b      	ldr	r3, [r3, #0]
   b586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b586c:	9301      	str	r3, [sp, #4]
   b586e:	bd08      	pop	{r3, pc}
   b5870:	00030230 	.word	0x00030230

000b5874 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5874:	b508      	push	{r3, lr}
   b5876:	4b02      	ldr	r3, [pc, #8]	; (b5880 <hal_spi_set_settings+0xc>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b587c:	9301      	str	r3, [sp, #4]
   b587e:	bd08      	pop	{r3, pc}
   b5880:	00030230 	.word	0x00030230

000b5884 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5884:	b508      	push	{r3, lr}
   b5886:	4b02      	ldr	r3, [pc, #8]	; (b5890 <hal_spi_acquire+0xc>)
   b5888:	681b      	ldr	r3, [r3, #0]
   b588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b588c:	9301      	str	r3, [sp, #4]
   b588e:	bd08      	pop	{r3, pc}
   b5890:	00030230 	.word	0x00030230

000b5894 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5894:	b508      	push	{r3, lr}
   b5896:	4b02      	ldr	r3, [pc, #8]	; (b58a0 <hal_spi_release+0xc>)
   b5898:	681b      	ldr	r3, [r3, #0]
   b589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b589c:	9301      	str	r3, [sp, #4]
   b589e:	bd08      	pop	{r3, pc}
   b58a0:	00030230 	.word	0x00030230

000b58a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b58a4:	b508      	push	{r3, lr}
   b58a6:	4b02      	ldr	r3, [pc, #8]	; (b58b0 <HAL_USB_USART_Init+0xc>)
   b58a8:	681b      	ldr	r3, [r3, #0]
   b58aa:	681b      	ldr	r3, [r3, #0]
   b58ac:	9301      	str	r3, [sp, #4]
   b58ae:	bd08      	pop	{r3, pc}
   b58b0:	0003024c 	.word	0x0003024c

000b58b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b58b4:	b508      	push	{r3, lr}
   b58b6:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <HAL_USB_USART_Begin+0xc>)
   b58b8:	681b      	ldr	r3, [r3, #0]
   b58ba:	685b      	ldr	r3, [r3, #4]
   b58bc:	9301      	str	r3, [sp, #4]
   b58be:	bd08      	pop	{r3, pc}
   b58c0:	0003024c 	.word	0x0003024c

000b58c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b58c4:	b508      	push	{r3, lr}
   b58c6:	4b02      	ldr	r3, [pc, #8]	; (b58d0 <HAL_USB_USART_Available_Data+0xc>)
   b58c8:	681b      	ldr	r3, [r3, #0]
   b58ca:	691b      	ldr	r3, [r3, #16]
   b58cc:	9301      	str	r3, [sp, #4]
   b58ce:	bd08      	pop	{r3, pc}
   b58d0:	0003024c 	.word	0x0003024c

000b58d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b58d4:	b508      	push	{r3, lr}
   b58d6:	4b02      	ldr	r3, [pc, #8]	; (b58e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b58d8:	681b      	ldr	r3, [r3, #0]
   b58da:	695b      	ldr	r3, [r3, #20]
   b58dc:	9301      	str	r3, [sp, #4]
   b58de:	bd08      	pop	{r3, pc}
   b58e0:	0003024c 	.word	0x0003024c

000b58e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b58e4:	b508      	push	{r3, lr}
   b58e6:	4b02      	ldr	r3, [pc, #8]	; (b58f0 <HAL_USB_USART_Receive_Data+0xc>)
   b58e8:	681b      	ldr	r3, [r3, #0]
   b58ea:	699b      	ldr	r3, [r3, #24]
   b58ec:	9301      	str	r3, [sp, #4]
   b58ee:	bd08      	pop	{r3, pc}
   b58f0:	0003024c 	.word	0x0003024c

000b58f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b58f4:	b508      	push	{r3, lr}
   b58f6:	4b02      	ldr	r3, [pc, #8]	; (b5900 <HAL_USB_USART_Send_Data+0xc>)
   b58f8:	681b      	ldr	r3, [r3, #0]
   b58fa:	69db      	ldr	r3, [r3, #28]
   b58fc:	9301      	str	r3, [sp, #4]
   b58fe:	bd08      	pop	{r3, pc}
   b5900:	0003024c 	.word	0x0003024c

000b5904 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5904:	b508      	push	{r3, lr}
   b5906:	4b02      	ldr	r3, [pc, #8]	; (b5910 <HAL_USB_USART_Flush_Data+0xc>)
   b5908:	681b      	ldr	r3, [r3, #0]
   b590a:	6a1b      	ldr	r3, [r3, #32]
   b590c:	9301      	str	r3, [sp, #4]
   b590e:	bd08      	pop	{r3, pc}
   b5910:	0003024c 	.word	0x0003024c

000b5914 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5914:	b508      	push	{r3, lr}
   b5916:	4b02      	ldr	r3, [pc, #8]	; (b5920 <system_mode+0xc>)
   b5918:	681b      	ldr	r3, [r3, #0]
   b591a:	681b      	ldr	r3, [r3, #0]
   b591c:	9301      	str	r3, [sp, #4]
   b591e:	bd08      	pop	{r3, pc}
   b5920:	00030220 	.word	0x00030220

000b5924 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5924:	b508      	push	{r3, lr}
   b5926:	4b02      	ldr	r3, [pc, #8]	; (b5930 <set_system_mode+0xc>)
   b5928:	681b      	ldr	r3, [r3, #0]
   b592a:	685b      	ldr	r3, [r3, #4]
   b592c:	9301      	str	r3, [sp, #4]
   b592e:	bd08      	pop	{r3, pc}
   b5930:	00030220 	.word	0x00030220

000b5934 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5934:	b508      	push	{r3, lr}
   b5936:	4b02      	ldr	r3, [pc, #8]	; (b5940 <system_delay_ms+0xc>)
   b5938:	681b      	ldr	r3, [r3, #0]
   b593a:	695b      	ldr	r3, [r3, #20]
   b593c:	9301      	str	r3, [sp, #4]
   b593e:	bd08      	pop	{r3, pc}
   b5940:	00030220 	.word	0x00030220

000b5944 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5944:	b508      	push	{r3, lr}
   b5946:	4b02      	ldr	r3, [pc, #8]	; (b5950 <system_thread_set_state+0xc>)
   b5948:	681b      	ldr	r3, [r3, #0]
   b594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b594c:	9301      	str	r3, [sp, #4]
   b594e:	bd08      	pop	{r3, pc}
   b5950:	00030220 	.word	0x00030220

000b5954 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5954:	b508      	push	{r3, lr}
   b5956:	4b02      	ldr	r3, [pc, #8]	; (b5960 <application_thread_current+0xc>)
   b5958:	681b      	ldr	r3, [r3, #0]
   b595a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b595c:	9301      	str	r3, [sp, #4]
   b595e:	bd08      	pop	{r3, pc}
   b5960:	00030220 	.word	0x00030220

000b5964 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5964:	b508      	push	{r3, lr}
   b5966:	4b02      	ldr	r3, [pc, #8]	; (b5970 <application_thread_invoke+0xc>)
   b5968:	681b      	ldr	r3, [r3, #0]
   b596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b596c:	9301      	str	r3, [sp, #4]
   b596e:	bd08      	pop	{r3, pc}
   b5970:	00030220 	.word	0x00030220

000b5974 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5974:	b508      	push	{r3, lr}
   b5976:	4b02      	ldr	r3, [pc, #8]	; (b5980 <system_thread_get_state+0xc>)
   b5978:	681b      	ldr	r3, [r3, #0]
   b597a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b597c:	9301      	str	r3, [sp, #4]
   b597e:	bd08      	pop	{r3, pc}
   b5980:	00030220 	.word	0x00030220

000b5984 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5984:	b508      	push	{r3, lr}
   b5986:	4b03      	ldr	r3, [pc, #12]	; (b5994 <system_ctrl_set_app_request_handler+0x10>)
   b5988:	681b      	ldr	r3, [r3, #0]
   b598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b598e:	9301      	str	r3, [sp, #4]
   b5990:	bd08      	pop	{r3, pc}
   b5992:	0000      	.short	0x0000
   b5994:	00030220 	.word	0x00030220

000b5998 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b03      	ldr	r3, [pc, #12]	; (b59a8 <system_ctrl_set_result+0x10>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b59a2:	9301      	str	r3, [sp, #4]
   b59a4:	bd08      	pop	{r3, pc}
   b59a6:	0000      	.short	0x0000
   b59a8:	00030220 	.word	0x00030220

000b59ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b59ac:	b508      	push	{r3, lr}
   b59ae:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <network_connect+0xc>)
   b59b0:	681b      	ldr	r3, [r3, #0]
   b59b2:	685b      	ldr	r3, [r3, #4]
   b59b4:	9301      	str	r3, [sp, #4]
   b59b6:	bd08      	pop	{r3, pc}
   b59b8:	00030240 	.word	0x00030240

000b59bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b59bc:	b508      	push	{r3, lr}
   b59be:	4b02      	ldr	r3, [pc, #8]	; (b59c8 <network_connecting+0xc>)
   b59c0:	681b      	ldr	r3, [r3, #0]
   b59c2:	689b      	ldr	r3, [r3, #8]
   b59c4:	9301      	str	r3, [sp, #4]
   b59c6:	bd08      	pop	{r3, pc}
   b59c8:	00030240 	.word	0x00030240

000b59cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b59cc:	b508      	push	{r3, lr}
   b59ce:	4b02      	ldr	r3, [pc, #8]	; (b59d8 <network_disconnect+0xc>)
   b59d0:	681b      	ldr	r3, [r3, #0]
   b59d2:	68db      	ldr	r3, [r3, #12]
   b59d4:	9301      	str	r3, [sp, #4]
   b59d6:	bd08      	pop	{r3, pc}
   b59d8:	00030240 	.word	0x00030240

000b59dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b59dc:	b508      	push	{r3, lr}
   b59de:	4b02      	ldr	r3, [pc, #8]	; (b59e8 <network_ready+0xc>)
   b59e0:	681b      	ldr	r3, [r3, #0]
   b59e2:	691b      	ldr	r3, [r3, #16]
   b59e4:	9301      	str	r3, [sp, #4]
   b59e6:	bd08      	pop	{r3, pc}
   b59e8:	00030240 	.word	0x00030240

000b59ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b59ec:	b508      	push	{r3, lr}
   b59ee:	4b02      	ldr	r3, [pc, #8]	; (b59f8 <network_on+0xc>)
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	695b      	ldr	r3, [r3, #20]
   b59f4:	9301      	str	r3, [sp, #4]
   b59f6:	bd08      	pop	{r3, pc}
   b59f8:	00030240 	.word	0x00030240

000b59fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b59fc:	b508      	push	{r3, lr}
   b59fe:	4b02      	ldr	r3, [pc, #8]	; (b5a08 <network_off+0xc>)
   b5a00:	681b      	ldr	r3, [r3, #0]
   b5a02:	699b      	ldr	r3, [r3, #24]
   b5a04:	9301      	str	r3, [sp, #4]
   b5a06:	bd08      	pop	{r3, pc}
   b5a08:	00030240 	.word	0x00030240

000b5a0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <network_listen+0xc>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	69db      	ldr	r3, [r3, #28]
   b5a14:	9301      	str	r3, [sp, #4]
   b5a16:	bd08      	pop	{r3, pc}
   b5a18:	00030240 	.word	0x00030240

000b5a1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <network_listening+0xc>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	6a1b      	ldr	r3, [r3, #32]
   b5a24:	9301      	str	r3, [sp, #4]
   b5a26:	bd08      	pop	{r3, pc}
   b5a28:	00030240 	.word	0x00030240

000b5a2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5a2c:	b508      	push	{r3, lr}
   b5a2e:	4b02      	ldr	r3, [pc, #8]	; (b5a38 <network_set_listen_timeout+0xc>)
   b5a30:	681b      	ldr	r3, [r3, #0]
   b5a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a34:	9301      	str	r3, [sp, #4]
   b5a36:	bd08      	pop	{r3, pc}
   b5a38:	00030240 	.word	0x00030240

000b5a3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5a3c:	b508      	push	{r3, lr}
   b5a3e:	4b02      	ldr	r3, [pc, #8]	; (b5a48 <network_get_listen_timeout+0xc>)
   b5a40:	681b      	ldr	r3, [r3, #0]
   b5a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a44:	9301      	str	r3, [sp, #4]
   b5a46:	bd08      	pop	{r3, pc}
   b5a48:	00030240 	.word	0x00030240

000b5a4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5a4c:	b508      	push	{r3, lr}
   b5a4e:	4b02      	ldr	r3, [pc, #8]	; (b5a58 <network_is_on+0xc>)
   b5a50:	681b      	ldr	r3, [r3, #0]
   b5a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a54:	9301      	str	r3, [sp, #4]
   b5a56:	bd08      	pop	{r3, pc}
   b5a58:	00030240 	.word	0x00030240

000b5a5c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5a5c:	b508      	push	{r3, lr}
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <network_is_off+0xc>)
   b5a60:	681b      	ldr	r3, [r3, #0]
   b5a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	bd08      	pop	{r3, pc}
   b5a68:	00030240 	.word	0x00030240

000b5a6c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <spark_process+0xc>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	689b      	ldr	r3, [r3, #8]
   b5a74:	9301      	str	r3, [sp, #4]
   b5a76:	bd08      	pop	{r3, pc}
   b5a78:	00030244 	.word	0x00030244

000b5a7c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b5a7c:	b508      	push	{r3, lr}
   b5a7e:	4b02      	ldr	r3, [pc, #8]	; (b5a88 <spark_cloud_flag_connect+0xc>)
   b5a80:	681b      	ldr	r3, [r3, #0]
   b5a82:	68db      	ldr	r3, [r3, #12]
   b5a84:	9301      	str	r3, [sp, #4]
   b5a86:	bd08      	pop	{r3, pc}
   b5a88:	00030244 	.word	0x00030244

000b5a8c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5a8c:	b508      	push	{r3, lr}
   b5a8e:	4b02      	ldr	r3, [pc, #8]	; (b5a98 <spark_cloud_flag_connected+0xc>)
   b5a90:	681b      	ldr	r3, [r3, #0]
   b5a92:	695b      	ldr	r3, [r3, #20]
   b5a94:	9301      	str	r3, [sp, #4]
   b5a96:	bd08      	pop	{r3, pc}
   b5a98:	00030244 	.word	0x00030244

000b5a9c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b5a9c:	b508      	push	{r3, lr}
   b5a9e:	4b02      	ldr	r3, [pc, #8]	; (b5aa8 <spark_deviceID+0xc>)
   b5aa0:	681b      	ldr	r3, [r3, #0]
   b5aa2:	69db      	ldr	r3, [r3, #28]
   b5aa4:	9301      	str	r3, [sp, #4]
   b5aa6:	bd08      	pop	{r3, pc}
   b5aa8:	00030244 	.word	0x00030244

000b5aac <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5aac:	b508      	push	{r3, lr}
   b5aae:	4b02      	ldr	r3, [pc, #8]	; (b5ab8 <spark_send_event+0xc>)
   b5ab0:	681b      	ldr	r3, [r3, #0]
   b5ab2:	6a1b      	ldr	r3, [r3, #32]
   b5ab4:	9301      	str	r3, [sp, #4]
   b5ab6:	bd08      	pop	{r3, pc}
   b5ab8:	00030244 	.word	0x00030244

000b5abc <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5abc:	b508      	push	{r3, lr}
   b5abe:	4b02      	ldr	r3, [pc, #8]	; (b5ac8 <spark_sync_time+0xc>)
   b5ac0:	681b      	ldr	r3, [r3, #0]
   b5ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ac4:	9301      	str	r3, [sp, #4]
   b5ac6:	bd08      	pop	{r3, pc}
   b5ac8:	00030244 	.word	0x00030244

000b5acc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5acc:	b508      	push	{r3, lr}
   b5ace:	4b02      	ldr	r3, [pc, #8]	; (b5ad8 <spark_sync_time_pending+0xc>)
   b5ad0:	681b      	ldr	r3, [r3, #0]
   b5ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ad4:	9301      	str	r3, [sp, #4]
   b5ad6:	bd08      	pop	{r3, pc}
   b5ad8:	00030244 	.word	0x00030244

000b5adc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b5adc:	b508      	push	{r3, lr}
   b5ade:	4b02      	ldr	r3, [pc, #8]	; (b5ae8 <spark_sync_time_last+0xc>)
   b5ae0:	681b      	ldr	r3, [r3, #0]
   b5ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ae4:	9301      	str	r3, [sp, #4]
   b5ae6:	bd08      	pop	{r3, pc}
   b5ae8:	00030244 	.word	0x00030244

000b5aec <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b5aec:	b508      	push	{r3, lr}
   b5aee:	4b02      	ldr	r3, [pc, #8]	; (b5af8 <spark_set_connection_property+0xc>)
   b5af0:	681b      	ldr	r3, [r3, #0]
   b5af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5af4:	9301      	str	r3, [sp, #4]
   b5af6:	bd08      	pop	{r3, pc}
   b5af8:	00030244 	.word	0x00030244

000b5afc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5afc:	b508      	push	{r3, lr}
   b5afe:	4b02      	ldr	r3, [pc, #8]	; (b5b08 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5b00:	681b      	ldr	r3, [r3, #0]
   b5b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5b04:	9301      	str	r3, [sp, #4]
   b5b06:	bd08      	pop	{r3, pc}
   b5b08:	00030244 	.word	0x00030244

000b5b0c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b5b0c:	b508      	push	{r3, lr}
   b5b0e:	4b02      	ldr	r3, [pc, #8]	; (b5b18 <spark_cloud_disconnect+0xc>)
   b5b10:	681b      	ldr	r3, [r3, #0]
   b5b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b14:	9301      	str	r3, [sp, #4]
   b5b16:	bd08      	pop	{r3, pc}
   b5b18:	00030244 	.word	0x00030244

000b5b1c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5b1c:	b508      	push	{r3, lr}
   b5b1e:	4b02      	ldr	r3, [pc, #8]	; (b5b28 <malloc+0xc>)
   b5b20:	681b      	ldr	r3, [r3, #0]
   b5b22:	681b      	ldr	r3, [r3, #0]
   b5b24:	9301      	str	r3, [sp, #4]
   b5b26:	bd08      	pop	{r3, pc}
   b5b28:	0003021c 	.word	0x0003021c

000b5b2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5b2c:	b508      	push	{r3, lr}
   b5b2e:	4b02      	ldr	r3, [pc, #8]	; (b5b38 <free+0xc>)
   b5b30:	681b      	ldr	r3, [r3, #0]
   b5b32:	685b      	ldr	r3, [r3, #4]
   b5b34:	9301      	str	r3, [sp, #4]
   b5b36:	bd08      	pop	{r3, pc}
   b5b38:	0003021c 	.word	0x0003021c

000b5b3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5b3c:	b508      	push	{r3, lr}
   b5b3e:	4b02      	ldr	r3, [pc, #8]	; (b5b48 <realloc+0xc>)
   b5b40:	681b      	ldr	r3, [r3, #0]
   b5b42:	689b      	ldr	r3, [r3, #8]
   b5b44:	9301      	str	r3, [sp, #4]
   b5b46:	bd08      	pop	{r3, pc}
   b5b48:	0003021c 	.word	0x0003021c

000b5b4c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b5b4c:	b508      	push	{r3, lr}
   b5b4e:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <siprintf+0xc>)
   b5b50:	681b      	ldr	r3, [r3, #0]
   b5b52:	691b      	ldr	r3, [r3, #16]
   b5b54:	9301      	str	r3, [sp, #4]
   b5b56:	bd08      	pop	{r3, pc}
   b5b58:	0003021c 	.word	0x0003021c

000b5b5c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <snprintf+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	69db      	ldr	r3, [r3, #28]
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	0003021c 	.word	0x0003021c

000b5b6c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <vsnprintf+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	0003021c 	.word	0x0003021c

000b5b7c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <abort+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	0003021c 	.word	0x0003021c

000b5b8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <_malloc_r+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	0003021c 	.word	0x0003021c

000b5b9c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <__assert_func+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	0003021c 	.word	0x0003021c

000b5bac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b02      	ldr	r3, [pc, #8]	; (b5bb8 <newlib_impure_ptr_callback+0xc>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5bb4:	9301      	str	r3, [sp, #4]
   b5bb6:	bd08      	pop	{r3, pc}
   b5bb8:	0003021c 	.word	0x0003021c

000b5bbc <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b5bbc:	b508      	push	{r3, lr}
   b5bbe:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <strftime+0xc>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5bc4:	9301      	str	r3, [sp, #4]
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	0003021c 	.word	0x0003021c

000b5bcc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5bcc:	b508      	push	{r3, lr}
   b5bce:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <localtime_r+0xc>)
   b5bd0:	681b      	ldr	r3, [r3, #0]
   b5bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5bd4:	9301      	str	r3, [sp, #4]
   b5bd6:	bd08      	pop	{r3, pc}
   b5bd8:	0003021c 	.word	0x0003021c

000b5bdc <_ZN5spark13EthernetClass9listeningEv>:
>>>>>>> collate-readings
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
<<<<<<< HEAD
   b6b3e:	2200      	movs	r2, #0
   b6b40:	6840      	ldr	r0, [r0, #4]
   b6b42:	4611      	mov	r1, r2
   b6b44:	f7fe be78 	b.w	b5838 <network_listening>

000b6b48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6b48:	2200      	movs	r2, #0
   b6b4a:	6840      	ldr	r0, [r0, #4]
   b6b4c:	4611      	mov	r1, r2
   b6b4e:	f7fe be83 	b.w	b5858 <network_get_listen_timeout>

000b6b52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6b52:	6840      	ldr	r0, [r0, #4]
   b6b54:	2200      	movs	r2, #0
   b6b56:	f7fe be77 	b.w	b5848 <network_set_listen_timeout>

000b6b5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6b5a:	6840      	ldr	r0, [r0, #4]
   b6b5c:	2200      	movs	r2, #0
   b6b5e:	f081 0101 	eor.w	r1, r1, #1
   b6b62:	f7fe be61 	b.w	b5828 <network_listen>

000b6b66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6b66:	2300      	movs	r3, #0
   b6b68:	6840      	ldr	r0, [r0, #4]
   b6b6a:	461a      	mov	r2, r3
   b6b6c:	4619      	mov	r1, r3
   b6b6e:	f7fe be53 	b.w	b5818 <network_off>

000b6b72 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6b72:	2300      	movs	r3, #0
   b6b74:	6840      	ldr	r0, [r0, #4]
   b6b76:	461a      	mov	r2, r3
   b6b78:	4619      	mov	r1, r3
   b6b7a:	f7fe be45 	b.w	b5808 <network_on>

000b6b7e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6b7e:	2200      	movs	r2, #0
   b6b80:	6840      	ldr	r0, [r0, #4]
   b6b82:	4611      	mov	r1, r2
   b6b84:	f7fe be28 	b.w	b57d8 <network_connecting>

000b6b88 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6b88:	6840      	ldr	r0, [r0, #4]
   b6b8a:	2200      	movs	r2, #0
   b6b8c:	2102      	movs	r1, #2
   b6b8e:	f7fe be2b 	b.w	b57e8 <network_disconnect>

000b6b92 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6b92:	2300      	movs	r3, #0
   b6b94:	6840      	ldr	r0, [r0, #4]
   b6b96:	461a      	mov	r2, r3
   b6b98:	f7fe be16 	b.w	b57c8 <network_connect>

000b6b9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6b9c:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6b9e:	2204      	movs	r2, #4
   b6ba0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6ba2:	4a02      	ldr	r2, [pc, #8]	; (b6bac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6ba4:	601a      	str	r2, [r3, #0]
=======
   b5bdc:	2200      	movs	r2, #0
   b5bde:	6840      	ldr	r0, [r0, #4]
   b5be0:	4611      	mov	r1, r2
   b5be2:	f7ff bf1b 	b.w	b5a1c <network_listening>

000b5be6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5be6:	2200      	movs	r2, #0
   b5be8:	6840      	ldr	r0, [r0, #4]
   b5bea:	4611      	mov	r1, r2
   b5bec:	f7ff bf26 	b.w	b5a3c <network_get_listen_timeout>

000b5bf0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5bf0:	6840      	ldr	r0, [r0, #4]
   b5bf2:	2200      	movs	r2, #0
   b5bf4:	f7ff bf1a 	b.w	b5a2c <network_set_listen_timeout>

000b5bf8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5bf8:	6840      	ldr	r0, [r0, #4]
   b5bfa:	2200      	movs	r2, #0
   b5bfc:	f081 0101 	eor.w	r1, r1, #1
   b5c00:	f7ff bf04 	b.w	b5a0c <network_listen>

000b5c04 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5c04:	2300      	movs	r3, #0
   b5c06:	6840      	ldr	r0, [r0, #4]
   b5c08:	461a      	mov	r2, r3
   b5c0a:	4619      	mov	r1, r3
   b5c0c:	f7ff bef6 	b.w	b59fc <network_off>

000b5c10 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5c10:	2300      	movs	r3, #0
   b5c12:	6840      	ldr	r0, [r0, #4]
   b5c14:	461a      	mov	r2, r3
   b5c16:	4619      	mov	r1, r3
   b5c18:	f7ff bee8 	b.w	b59ec <network_on>

000b5c1c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5c1c:	2200      	movs	r2, #0
   b5c1e:	6840      	ldr	r0, [r0, #4]
   b5c20:	4611      	mov	r1, r2
   b5c22:	f7ff bedb 	b.w	b59dc <network_ready>

000b5c26 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5c26:	2200      	movs	r2, #0
   b5c28:	6840      	ldr	r0, [r0, #4]
   b5c2a:	4611      	mov	r1, r2
   b5c2c:	f7ff bec6 	b.w	b59bc <network_connecting>

000b5c30 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5c30:	6840      	ldr	r0, [r0, #4]
   b5c32:	2200      	movs	r2, #0
   b5c34:	2102      	movs	r1, #2
   b5c36:	f7ff bec9 	b.w	b59cc <network_disconnect>

000b5c3a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5c3a:	2300      	movs	r3, #0
   b5c3c:	6840      	ldr	r0, [r0, #4]
   b5c3e:	461a      	mov	r2, r3
   b5c40:	f7ff beb4 	b.w	b59ac <network_connect>

000b5c44 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5c44:	4b02      	ldr	r3, [pc, #8]	; (b5c50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5c46:	2203      	movs	r2, #3
   b5c48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5c4a:	4a02      	ldr	r2, [pc, #8]	; (b5c54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5c4c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5c4e:	4770      	bx	lr
   b5c50:	2003e6b0 	.word	0x2003e6b0
   b5c54:	000b8558 	.word	0x000b8558

000b5c58 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5c58:	2100      	movs	r1, #0
   b5c5a:	f7ff be1b 	b.w	b5894 <hal_spi_release>

000b5c5e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5c5e:	2100      	movs	r1, #0
   b5c60:	f7ff be10 	b.w	b5884 <hal_spi_acquire>

000b5c64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5c64:	b510      	push	{r4, lr}
   b5c66:	4604      	mov	r4, r0
   b5c68:	4608      	mov	r0, r1
{
    _spi = spi;
   b5c6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5c6c:	f7ff fdea 	bl	b5844 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5c70:	2300      	movs	r3, #0
   b5c72:	6063      	str	r3, [r4, #4]
}
   b5c74:	4620      	mov	r0, r4
   b5c76:	bd10      	pop	{r4, pc}

000b5c78 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5c78:	b513      	push	{r0, r1, r4, lr}
   b5c7a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5c7c:	7800      	ldrb	r0, [r0, #0]
   b5c7e:	f7ff ffee 	bl	b5c5e <_ZN8SPIClass4lockEv.isra.0>
   b5c82:	b958      	cbnz	r0, b5c9c <_ZN8SPIClass5beginEv+0x24>
   b5c84:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5c86:	9001      	str	r0, [sp, #4]
   b5c88:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5c8c:	f7ff fdca 	bl	b5824 <hal_spi_begin>
        unlock();
   b5c90:	9801      	ldr	r0, [sp, #4]
    }
}
   b5c92:	b002      	add	sp, #8
   b5c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5c98:	f7ff bfde 	b.w	b5c58 <_ZN8SPIClass6unlockEv.isra.0>
   b5c9c:	b002      	add	sp, #8
   b5c9e:	bd10      	pop	{r4, pc}

000b5ca0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5ca0:	7800      	ldrb	r0, [r0, #0]
   b5ca2:	f7ff bfd9 	b.w	b5c58 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5ca8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5ca8:	0840      	lsrs	r0, r0, #1
{
   b5caa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5cac:	6018      	str	r0, [r3, #0]
   b5cae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5cb0:	6818      	ldr	r0, [r3, #0]
   b5cb2:	4288      	cmp	r0, r1
   b5cb4:	b2e5      	uxtb	r5, r4
   b5cb6:	d906      	bls.n	b5cc6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5cb8:	3401      	adds	r4, #1
   b5cba:	2c08      	cmp	r4, #8
   b5cbc:	d002      	beq.n	b5cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5cbe:	0840      	lsrs	r0, r0, #1
   b5cc0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5cc2:	e7f5      	b.n	b5cb0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5cc4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5cc6:	4b02      	ldr	r3, [pc, #8]	; (b5cd0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5cc8:	5d5b      	ldrb	r3, [r3, r5]
   b5cca:	7013      	strb	r3, [r2, #0]
}
   b5ccc:	bd30      	pop	{r4, r5, pc}
   b5cce:	bf00      	nop
   b5cd0:	000b858c 	.word	0x000b858c

000b5cd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5cd8:	4606      	mov	r6, r0
   b5cda:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5cdc:	7800      	ldrb	r0, [r0, #0]
{
   b5cde:	460c      	mov	r4, r1
    CHECK(lock());
   b5ce0:	f7ff ffbd 	bl	b5c5e <_ZN8SPIClass4lockEv.isra.0>
   b5ce4:	2800      	cmp	r0, #0
   b5ce6:	db1b      	blt.n	b5d20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5ce8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5cea:	2214      	movs	r2, #20
   b5cec:	2100      	movs	r1, #0
   b5cee:	a809      	add	r0, sp, #36	; 0x24
   b5cf0:	f002 fa4c 	bl	b818c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5cf4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5cf6:	2200      	movs	r2, #0
   b5cf8:	a909      	add	r1, sp, #36	; 0x24
   b5cfa:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5cfc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5d00:	f7ff fdb0 	bl	b5864 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5d04:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5d08:	b113      	cbz	r3, b5d10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5d0a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5d0e:	b155      	cbz	r5, b5d26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5d10:	2700      	movs	r7, #0
   b5d12:	46b9      	mov	r9, r7
   b5d14:	46b8      	mov	r8, r7
   b5d16:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5d18:	7923      	ldrb	r3, [r4, #4]
   b5d1a:	b15d      	cbz	r5, b5d34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5d1c:	b1c3      	cbz	r3, b5d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5d1e:	2000      	movs	r0, #0
}
   b5d20:	b00f      	add	sp, #60	; 0x3c
   b5d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5d26:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5d2a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5d2e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5d32:	e7f1      	b.n	b5d18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5d34:	2b00      	cmp	r3, #0
   b5d36:	d135      	bne.n	b5da4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5d38:	68a3      	ldr	r3, [r4, #8]
   b5d3a:	4543      	cmp	r3, r8
   b5d3c:	d108      	bne.n	b5d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5d3e:	f88d 9020 	strb.w	r9, [sp, #32]
   b5d42:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5d46:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5d4a:	89a3      	ldrh	r3, [r4, #12]
   b5d4c:	429a      	cmp	r2, r3
   b5d4e:	d0e6      	beq.n	b5d1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5d50:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5d52:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5d54:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5d58:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5d5a:	ab04      	add	r3, sp, #16
   b5d5c:	f10d 020f 	add.w	r2, sp, #15
   b5d60:	f7ff ffa2 	bl	b5ca8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5d64:	7921      	ldrb	r1, [r4, #4]
   b5d66:	b985      	cbnz	r5, b5d8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5d68:	b989      	cbnz	r1, b5d8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5d6a:	68a3      	ldr	r3, [r4, #8]
   b5d6c:	4543      	cmp	r3, r8
   b5d6e:	d30e      	bcc.n	b5d8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5d70:	f88d 9020 	strb.w	r9, [sp, #32]
   b5d74:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5d78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5d7c:	89a3      	ldrh	r3, [r4, #12]
   b5d7e:	429a      	cmp	r2, r3
   b5d80:	d105      	bne.n	b5d8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5d82:	9b04      	ldr	r3, [sp, #16]
   b5d84:	4543      	cmp	r3, r8
   b5d86:	d102      	bne.n	b5d8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5d88:	e7c9      	b.n	b5d1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5d8a:	2900      	cmp	r1, #0
   b5d8c:	d1f9      	bne.n	b5d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5d8e:	2300      	movs	r3, #0
   b5d90:	9301      	str	r3, [sp, #4]
   b5d92:	7b63      	ldrb	r3, [r4, #13]
   b5d94:	9300      	str	r3, [sp, #0]
   b5d96:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5d9a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5d9c:	7830      	ldrb	r0, [r6, #0]
   b5d9e:	f7ff fd69 	bl	b5874 <hal_spi_set_settings>
   b5da2:	e7bc      	b.n	b5d1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5da4:	e9cd 5500 	strd	r5, r5, [sp]
   b5da8:	462b      	mov	r3, r5
   b5daa:	462a      	mov	r2, r5
   b5dac:	2101      	movs	r1, #1
   b5dae:	e7f5      	b.n	b5d9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5db0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5db0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5db2:	7800      	ldrb	r0, [r0, #0]
   b5db4:	f7ff fd3e 	bl	b5834 <hal_spi_transfer>
}
   b5db8:	b2c0      	uxtb	r0, r0
   b5dba:	bd08      	pop	{r3, pc}

000b5dbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5dbc:	4b05      	ldr	r3, [pc, #20]	; (b5dd4 <_GLOBAL__sub_I_System+0x18>)
   b5dbe:	2202      	movs	r2, #2
   b5dc0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5dc2:	4b05      	ldr	r3, [pc, #20]	; (b5dd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5dc4:	4a05      	ldr	r2, [pc, #20]	; (b5ddc <_GLOBAL__sub_I_System+0x20>)
   b5dc6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5dc8:	2000      	movs	r0, #0
   b5dca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5dce:	f7ff bda9 	b.w	b5924 <set_system_mode>
   b5dd2:	bf00      	nop
   b5dd4:	2003e6c4 	.word	0x2003e6c4
   b5dd8:	2003e6b8 	.word	0x2003e6b8
   b5ddc:	ffff0000 	.word	0xffff0000

000b5de0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5de0:	b510      	push	{r4, lr}
   b5de2:	4604      	mov	r4, r0
{
	free(buffer);
   b5de4:	6800      	ldr	r0, [r0, #0]
   b5de6:	f7ff fea1 	bl	b5b2c <free>
}
   b5dea:	4620      	mov	r0, r4
   b5dec:	bd10      	pop	{r4, pc}

000b5dee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5dee:	b510      	push	{r4, lr}
   b5df0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5df2:	6800      	ldr	r0, [r0, #0]
   b5df4:	b108      	cbz	r0, b5dfa <_ZN6String10invalidateEv+0xc>
   b5df6:	f7ff fe99 	bl	b5b2c <free>
	buffer = NULL;
   b5dfa:	2300      	movs	r3, #0
	capacity = len = 0;
   b5dfc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5e00:	6023      	str	r3, [r4, #0]
}
   b5e02:	bd10      	pop	{r4, pc}

000b5e04 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5e04:	b538      	push	{r3, r4, r5, lr}
   b5e06:	4604      	mov	r4, r0
   b5e08:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5e0a:	6800      	ldr	r0, [r0, #0]
   b5e0c:	3101      	adds	r1, #1
   b5e0e:	f7ff fe95 	bl	b5b3c <realloc>
	if (newbuffer) {
   b5e12:	b110      	cbz	r0, b5e1a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5e14:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5e18:	2001      	movs	r0, #1
	}
	return 0;
}
   b5e1a:	bd38      	pop	{r3, r4, r5, pc}

000b5e1c <_ZN6String7reserveEj>:
{
   b5e1c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5e1e:	6803      	ldr	r3, [r0, #0]
{
   b5e20:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5e22:	b123      	cbz	r3, b5e2e <_ZN6String7reserveEj+0x12>
   b5e24:	6843      	ldr	r3, [r0, #4]
   b5e26:	428b      	cmp	r3, r1
   b5e28:	d301      	bcc.n	b5e2e <_ZN6String7reserveEj+0x12>
   b5e2a:	2001      	movs	r0, #1
}
   b5e2c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5e2e:	4620      	mov	r0, r4
   b5e30:	f7ff ffe8 	bl	b5e04 <_ZN6String12changeBufferEj>
   b5e34:	2800      	cmp	r0, #0
   b5e36:	d0f9      	beq.n	b5e2c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5e38:	68a3      	ldr	r3, [r4, #8]
   b5e3a:	2b00      	cmp	r3, #0
   b5e3c:	d1f5      	bne.n	b5e2a <_ZN6String7reserveEj+0xe>
   b5e3e:	6822      	ldr	r2, [r4, #0]
   b5e40:	7013      	strb	r3, [r2, #0]
   b5e42:	e7f2      	b.n	b5e2a <_ZN6String7reserveEj+0xe>

000b5e44 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5e46:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5e48:	4611      	mov	r1, r2
   b5e4a:	9201      	str	r2, [sp, #4]
{
   b5e4c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5e4e:	f7ff ffe5 	bl	b5e1c <_ZN6String7reserveEj>
   b5e52:	9a01      	ldr	r2, [sp, #4]
   b5e54:	b928      	cbnz	r0, b5e62 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5e56:	4620      	mov	r0, r4
   b5e58:	f7ff ffc9 	bl	b5dee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5e5c:	4620      	mov	r0, r4
   b5e5e:	b003      	add	sp, #12
   b5e60:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5e62:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5e64:	4629      	mov	r1, r5
   b5e66:	6820      	ldr	r0, [r4, #0]
   b5e68:	f002 f982 	bl	b8170 <memcpy>
	buffer[len] = 0;
   b5e6c:	6822      	ldr	r2, [r4, #0]
   b5e6e:	68a3      	ldr	r3, [r4, #8]
   b5e70:	2100      	movs	r1, #0
   b5e72:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5e74:	e7f2      	b.n	b5e5c <_ZN6String4copyEPKcj+0x18>

000b5e76 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5e76:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5e78:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5e7a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5e7e:	4604      	mov	r4, r0
	len = 0;
   b5e80:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5e82:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5e84:	b141      	cbz	r1, b5e98 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5e86:	4608      	mov	r0, r1
   b5e88:	9101      	str	r1, [sp, #4]
   b5e8a:	f002 f9e4 	bl	b8256 <strlen>
   b5e8e:	9901      	ldr	r1, [sp, #4]
   b5e90:	4602      	mov	r2, r0
   b5e92:	4620      	mov	r0, r4
   b5e94:	f7ff ffd6 	bl	b5e44 <_ZN6String4copyEPKcj>
}
   b5e98:	4620      	mov	r0, r4
   b5e9a:	b002      	add	sp, #8
   b5e9c:	bd10      	pop	{r4, pc}

000b5e9e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5e9e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5ea0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5ea2:	4604      	mov	r4, r0
      if (_M_manager)
   b5ea4:	b113      	cbz	r3, b5eac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5ea6:	2203      	movs	r2, #3
   b5ea8:	4601      	mov	r1, r0
   b5eaa:	4798      	blx	r3
    }
   b5eac:	4620      	mov	r0, r4
   b5eae:	bd10      	pop	{r4, pc}

000b5eb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5eb0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5eb2:	6843      	ldr	r3, [r0, #4]
   b5eb4:	3b01      	subs	r3, #1
    {
   b5eb6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5eb8:	6043      	str	r3, [r0, #4]
   b5eba:	b963      	cbnz	r3, b5ed6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5ebc:	6803      	ldr	r3, [r0, #0]
   b5ebe:	689b      	ldr	r3, [r3, #8]
   b5ec0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5ec2:	68a3      	ldr	r3, [r4, #8]
   b5ec4:	3b01      	subs	r3, #1
   b5ec6:	60a3      	str	r3, [r4, #8]
   b5ec8:	b92b      	cbnz	r3, b5ed6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5eca:	6823      	ldr	r3, [r4, #0]
   b5ecc:	4620      	mov	r0, r4
   b5ece:	68db      	ldr	r3, [r3, #12]
    }
   b5ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5ed4:	4718      	bx	r3
    }
   b5ed6:	bd10      	pop	{r4, pc}

000b5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5ed8:	b510      	push	{r4, lr}
   b5eda:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5edc:	6800      	ldr	r0, [r0, #0]
   b5ede:	b108      	cbz	r0, b5ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5ee0:	f7ff ffe6 	bl	b5eb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	bd10      	pop	{r4, pc}

000b5ee8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5ee8:	b513      	push	{r0, r1, r4, lr}
   b5eea:	460b      	mov	r3, r1
   b5eec:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5eee:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5ef2:	466c      	mov	r4, sp
   b5ef4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5ef8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5efc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5f00:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5f04:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5f08:	b002      	add	sp, #8
   b5f0a:	bd10      	pop	{r4, pc}

000b5f0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5f0c:	4802      	ldr	r0, [pc, #8]	; (b5f18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5f0e:	2300      	movs	r3, #0
   b5f10:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5f12:	f7ff bbdf 	b.w	b56d4 <os_mutex_recursive_create>
   b5f16:	bf00      	nop
   b5f18:	2003e6c8 	.word	0x2003e6c8

000b5f1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f1e:	4606      	mov	r6, r0
   b5f20:	460d      	mov	r5, r1
  size_t n = 0;
   b5f22:	188f      	adds	r7, r1, r2
   b5f24:	2400      	movs	r4, #0
  while (size--) {
   b5f26:	42bd      	cmp	r5, r7
   b5f28:	d00c      	beq.n	b5f44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5f2a:	6833      	ldr	r3, [r6, #0]
   b5f2c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5f30:	689b      	ldr	r3, [r3, #8]
   b5f32:	4630      	mov	r0, r6
   b5f34:	4798      	blx	r3
     if (chunk>=0)
   b5f36:	1e03      	subs	r3, r0, #0
   b5f38:	db01      	blt.n	b5f3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5f3a:	441c      	add	r4, r3
  while (size--) {
   b5f3c:	e7f3      	b.n	b5f26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5f3e:	2c00      	cmp	r4, #0
   b5f40:	bf08      	it	eq
   b5f42:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5f44:	4620      	mov	r0, r4
   b5f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f48 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5f48:	b513      	push	{r0, r1, r4, lr}
   b5f4a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5f4c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5f4e:	b159      	cbz	r1, b5f68 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5f50:	9101      	str	r1, [sp, #4]
   b5f52:	f002 f980 	bl	b8256 <strlen>
   b5f56:	6823      	ldr	r3, [r4, #0]
   b5f58:	9901      	ldr	r1, [sp, #4]
   b5f5a:	68db      	ldr	r3, [r3, #12]
   b5f5c:	4602      	mov	r2, r0
   b5f5e:	4620      	mov	r0, r4
    }
   b5f60:	b002      	add	sp, #8
   b5f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5f66:	4718      	bx	r3
    }
   b5f68:	b002      	add	sp, #8
   b5f6a:	bd10      	pop	{r4, pc}

000b5f6c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5f6c:	b508      	push	{r3, lr}
  return write(str);
   b5f6e:	f7ff ffeb 	bl	b5f48 <_ZN5Print5writeEPKc>
}
   b5f72:	bd08      	pop	{r3, pc}

000b5f74 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5f74:	6803      	ldr	r3, [r0, #0]
   b5f76:	689b      	ldr	r3, [r3, #8]
   b5f78:	4718      	bx	r3

000b5f7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5f7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5f7c:	210d      	movs	r1, #13
{
   b5f7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5f80:	f7ff fff8 	bl	b5f74 <_ZN5Print5printEc>
  n += print('\n');
   b5f84:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5f86:	4604      	mov	r4, r0
  n += print('\n');
   b5f88:	4628      	mov	r0, r5
   b5f8a:	f7ff fff3 	bl	b5f74 <_ZN5Print5printEc>
  return n;
}
   b5f8e:	4420      	add	r0, r4
   b5f90:	bd38      	pop	{r3, r4, r5, pc}

000b5f92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5f92:	b538      	push	{r3, r4, r5, lr}
   b5f94:	4605      	mov	r5, r0
  return write(str);
   b5f96:	f7ff ffd7 	bl	b5f48 <_ZN5Print5writeEPKc>
   b5f9a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5f9c:	4628      	mov	r0, r5
   b5f9e:	f7ff ffec 	bl	b5f7a <_ZN5Print7printlnEv>
  return n;
}
   b5fa2:	4420      	add	r0, r4
   b5fa4:	bd38      	pop	{r3, r4, r5, pc}

000b5fa6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5fa6:	b530      	push	{r4, r5, lr}
   b5fa8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5faa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5fac:	2a01      	cmp	r2, #1
  *str = '\0';
   b5fae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5fb2:	bf98      	it	ls
   b5fb4:	220a      	movls	r2, #10
   b5fb6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5fb8:	460d      	mov	r5, r1
   b5fba:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5fbe:	fb01 5312 	mls	r3, r1, r2, r5
   b5fc2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5fc6:	2b09      	cmp	r3, #9
   b5fc8:	bf94      	ite	ls
   b5fca:	3330      	addls	r3, #48	; 0x30
   b5fcc:	3337      	addhi	r3, #55	; 0x37
   b5fce:	b2db      	uxtb	r3, r3
  } while(n);
   b5fd0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5fd2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5fd6:	d9ef      	bls.n	b5fb8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5fd8:	4621      	mov	r1, r4
   b5fda:	f7ff ffb5 	bl	b5f48 <_ZN5Print5writeEPKc>
}
   b5fde:	b00b      	add	sp, #44	; 0x2c
   b5fe0:	bd30      	pop	{r4, r5, pc}

000b5fe2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fe6:	b086      	sub	sp, #24
   b5fe8:	af00      	add	r7, sp, #0
   b5fea:	4605      	mov	r5, r0
   b5fec:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5fee:	1d38      	adds	r0, r7, #4
   b5ff0:	2114      	movs	r1, #20
{
   b5ff2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5ff4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5ff6:	f7ff fdb9 	bl	b5b6c <vsnprintf>

    if (n<bufsize)
   b5ffa:	2813      	cmp	r0, #19
   b5ffc:	d80e      	bhi.n	b601c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5ffe:	1d39      	adds	r1, r7, #4
   b6000:	4628      	mov	r0, r5
   b6002:	f7ff ffa1 	bl	b5f48 <_ZN5Print5writeEPKc>
   b6006:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6008:	b11e      	cbz	r6, b6012 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b600a:	4628      	mov	r0, r5
   b600c:	f7ff ffb5 	bl	b5f7a <_ZN5Print7printlnEv>
   b6010:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6012:	4620      	mov	r0, r4
   b6014:	3718      	adds	r7, #24
   b6016:	46bd      	mov	sp, r7
   b6018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b601c:	f100 0308 	add.w	r3, r0, #8
   b6020:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6024:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6026:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b602a:	4622      	mov	r2, r4
   b602c:	1c41      	adds	r1, r0, #1
   b602e:	683b      	ldr	r3, [r7, #0]
   b6030:	4668      	mov	r0, sp
   b6032:	f7ff fd9b 	bl	b5b6c <vsnprintf>
  return write(str);
   b6036:	4669      	mov	r1, sp
   b6038:	4628      	mov	r0, r5
   b603a:	f7ff ff85 	bl	b5f48 <_ZN5Print5writeEPKc>
   b603e:	4604      	mov	r4, r0
   b6040:	46c5      	mov	sp, r8
   b6042:	e7e1      	b.n	b6008 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6044 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6044:	4b01      	ldr	r3, [pc, #4]	; (b604c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6046:	4a02      	ldr	r2, [pc, #8]	; (b6050 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6048:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b604a:	4770      	bx	lr
   b604c:	2003e6cc 	.word	0x2003e6cc
   b6050:	000b8594 	.word	0x000b8594

000b6054 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b6054:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6056:	2000      	movs	r0, #0
   b6058:	f7ff fd38 	bl	b5acc <spark_sync_time_pending>
   b605c:	b128      	cbz	r0, b606a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b605e:	f7ff fd15 	bl	b5a8c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6062:	f080 0001 	eor.w	r0, r0, #1
   b6066:	b2c0      	uxtb	r0, r0
    }
   b6068:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b606a:	2001      	movs	r0, #1
   b606c:	e7fc      	b.n	b6068 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b6070 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b6070:	b530      	push	{r4, r5, lr}
   b6072:	b093      	sub	sp, #76	; 0x4c
   b6074:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b6078:	4b19      	ldr	r3, [pc, #100]	; (b60e0 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b607a:	4604      	mov	r4, r0
    t += time_zone_cache;
   b607c:	e9d3 1000 	ldrd	r1, r0, [r3]
   b6080:	9b01      	ldr	r3, [sp, #4]
   b6082:	1852      	adds	r2, r2, r1
   b6084:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b6088:	4816      	ldr	r0, [pc, #88]	; (b60e4 <_ZN9TimeClass7timeStrEx+0x74>)
   b608a:	e9d0 1000 	ldrd	r1, r0, [r0]
   b608e:	1852      	adds	r2, r2, r1
   b6090:	eb43 0300 	adc.w	r3, r3, r0
   b6094:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b6098:	2224      	movs	r2, #36	; 0x24
   b609a:	eb0d 0002 	add.w	r0, sp, r2
   b609e:	2100      	movs	r1, #0
   b60a0:	f002 f874 	bl	b818c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b60a4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b60a6:	a909      	add	r1, sp, #36	; 0x24
   b60a8:	4668      	mov	r0, sp
   b60aa:	f7ff fd8f 	bl	b5bcc <localtime_r>
    char ascstr[26] = {};
   b60ae:	2216      	movs	r2, #22
   b60b0:	4629      	mov	r1, r5
   b60b2:	a803      	add	r0, sp, #12
   b60b4:	9502      	str	r5, [sp, #8]
   b60b6:	f002 f869 	bl	b818c <memset>
    asctime_r(&calendar_time, ascstr);
   b60ba:	a902      	add	r1, sp, #8
   b60bc:	a809      	add	r0, sp, #36	; 0x24
   b60be:	f002 f823 	bl	b8108 <asctime_r>
    int len = strlen(ascstr);
   b60c2:	a802      	add	r0, sp, #8
   b60c4:	f002 f8c7 	bl	b8256 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b60c8:	ab12      	add	r3, sp, #72	; 0x48
   b60ca:	4418      	add	r0, r3
    return String(ascstr);
   b60cc:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b60ce:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b60d2:	4620      	mov	r0, r4
   b60d4:	f7ff fecf 	bl	b5e76 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b60d8:	4620      	mov	r0, r4
   b60da:	b013      	add	sp, #76	; 0x4c
   b60dc:	bd30      	pop	{r4, r5, pc}
   b60de:	bf00      	nop
   b60e0:	2003e6e0 	.word	0x2003e6e0
   b60e4:	2003e6d8 	.word	0x2003e6d8

000b60e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b60e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b60ec:	b0a4      	sub	sp, #144	; 0x90
   b60ee:	4607      	mov	r7, r0
   b60f0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b60f2:	a814      	add	r0, sp, #80	; 0x50
{
   b60f4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b60f6:	223f      	movs	r2, #63	; 0x3f
{
   b60f8:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b60fa:	f002 f8b4 	bl	b8266 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b60fe:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b6100:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b6102:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b6106:	f002 f8a6 	bl	b8256 <strlen>
   b610a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b610c:	bb4c      	cbnz	r4, b6162 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b610e:	4929      	ldr	r1, [pc, #164]	; (b61b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b6110:	a803      	add	r0, sp, #12
   b6112:	f002 f87b 	bl	b820c <strcpy>
   b6116:	ac14      	add	r4, sp, #80	; 0x50
{
   b6118:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b611a:	f105 39ff 	add.w	r9, r5, #4294967295
   b611e:	45b1      	cmp	r9, r6
   b6120:	d934      	bls.n	b618c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b6122:	7823      	ldrb	r3, [r4, #0]
   b6124:	2b25      	cmp	r3, #37	; 0x25
   b6126:	f106 0a01 	add.w	sl, r6, #1
   b612a:	d117      	bne.n	b615c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b612c:	7863      	ldrb	r3, [r4, #1]
   b612e:	2b7a      	cmp	r3, #122	; 0x7a
   b6130:	d114      	bne.n	b615c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b6132:	a803      	add	r0, sp, #12
   b6134:	f002 f88f 	bl	b8256 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b6138:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b613a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b613c:	1830      	adds	r0, r6, r0
   b613e:	4418      	add	r0, r3
   b6140:	eba9 0206 	sub.w	r2, r9, r6
   b6144:	1ca1      	adds	r1, r4, #2
   b6146:	f002 f813 	bl	b8170 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b614a:	462a      	mov	r2, r5
   b614c:	a903      	add	r1, sp, #12
   b614e:	4620      	mov	r0, r4
   b6150:	f002 f80e 	bl	b8170 <memcpy>
            len = strlen(format_str);
   b6154:	a814      	add	r0, sp, #80	; 0x50
   b6156:	f002 f87e 	bl	b8256 <strlen>
   b615a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b615c:	3401      	adds	r4, #1
   b615e:	4656      	mov	r6, sl
   b6160:	e7db      	b.n	b611a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b6162:	233c      	movs	r3, #60	; 0x3c
   b6164:	fb94 f2f3 	sdiv	r2, r4, r3
   b6168:	2a00      	cmp	r2, #0
   b616a:	bfb8      	it	lt
   b616c:	4252      	neglt	r2, r2
   b616e:	fbb2 f1f3 	udiv	r1, r2, r3
   b6172:	fb03 2211 	mls	r2, r3, r1, r2
   b6176:	9200      	str	r2, [sp, #0]
   b6178:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b617c:	4a0e      	ldr	r2, [pc, #56]	; (b61b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b617e:	fb94 f3f3 	sdiv	r3, r4, r3
   b6182:	2110      	movs	r1, #16
   b6184:	a803      	add	r0, sp, #12
   b6186:	f7ff fce9 	bl	b5b5c <snprintf>
   b618a:	e7c4      	b.n	b6116 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b618c:	2100      	movs	r1, #0
   b618e:	222e      	movs	r2, #46	; 0x2e
   b6190:	a808      	add	r0, sp, #32
   b6192:	9107      	str	r1, [sp, #28]
   b6194:	f001 fffa 	bl	b818c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b6198:	4643      	mov	r3, r8
   b619a:	aa14      	add	r2, sp, #80	; 0x50
   b619c:	2132      	movs	r1, #50	; 0x32
   b619e:	a807      	add	r0, sp, #28
   b61a0:	f7ff fd0c 	bl	b5bbc <strftime>
    return String(buf);
   b61a4:	a907      	add	r1, sp, #28
   b61a6:	4638      	mov	r0, r7
   b61a8:	f7ff fe65 	bl	b5e76 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b61ac:	4638      	mov	r0, r7
   b61ae:	b024      	add	sp, #144	; 0x90
   b61b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b61b4:	000b8598 	.word	0x000b8598
   b61b8:	000b859a 	.word	0x000b859a

000b61bc <_ZN9TimeClass6formatExPKc>:
{
   b61bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b61be:	b08d      	sub	sp, #52	; 0x34
   b61c0:	e9cd 2300 	strd	r2, r3, [sp]
   b61c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b61c6:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b61c8:	b915      	cbnz	r5, b61d0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b61ca:	4b19      	ldr	r3, [pc, #100]	; (b6230 <_ZN9TimeClass6formatExPKc+0x74>)
   b61cc:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b61ce:	b12d      	cbz	r5, b61dc <_ZN9TimeClass6formatExPKc+0x20>
   b61d0:	4b18      	ldr	r3, [pc, #96]	; (b6234 <_ZN9TimeClass6formatExPKc+0x78>)
   b61d2:	4628      	mov	r0, r5
   b61d4:	6819      	ldr	r1, [r3, #0]
   b61d6:	f002 f80f 	bl	b81f8 <strcmp>
   b61da:	b938      	cbnz	r0, b61ec <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b61dc:	e9dd 2300 	ldrd	r2, r3, [sp]
   b61e0:	4620      	mov	r0, r4
   b61e2:	f7ff ff45 	bl	b6070 <_ZN9TimeClass7timeStrEx>
}
   b61e6:	4620      	mov	r0, r4
   b61e8:	b00d      	add	sp, #52	; 0x34
   b61ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b61ec:	4e12      	ldr	r6, [pc, #72]	; (b6238 <_ZN9TimeClass6formatExPKc+0x7c>)
   b61ee:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b61f0:	4f12      	ldr	r7, [pc, #72]	; (b623c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b61f2:	e9d6 3200 	ldrd	r3, r2, [r6]
   b61f6:	185b      	adds	r3, r3, r1
   b61f8:	9901      	ldr	r1, [sp, #4]
   b61fa:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b61fe:	e9d7 0100 	ldrd	r0, r1, [r7]
   b6202:	181b      	adds	r3, r3, r0
   b6204:	eb42 0201 	adc.w	r2, r2, r1
   b6208:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b620c:	2100      	movs	r1, #0
   b620e:	2224      	movs	r2, #36	; 0x24
   b6210:	a803      	add	r0, sp, #12
   b6212:	f001 ffbb 	bl	b818c <memset>
    localtime_r(&t, &calendar_time);
   b6216:	a903      	add	r1, sp, #12
   b6218:	4668      	mov	r0, sp
   b621a:	f7ff fcd7 	bl	b5bcc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b621e:	6832      	ldr	r2, [r6, #0]
   b6220:	683b      	ldr	r3, [r7, #0]
   b6222:	a903      	add	r1, sp, #12
   b6224:	4413      	add	r3, r2
   b6226:	4620      	mov	r0, r4
   b6228:	462a      	mov	r2, r5
   b622a:	f7ff ff5d 	bl	b60e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b622e:	e7da      	b.n	b61e6 <_ZN9TimeClass6formatExPKc+0x2a>
   b6230:	2003e6d4 	.word	0x2003e6d4
   b6234:	2003e588 	.word	0x2003e588
   b6238:	2003e6e0 	.word	0x2003e6e0
   b623c:	2003e6d8 	.word	0x2003e6d8

000b6240 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b6240:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6242:	2000      	movs	r0, #0
   b6244:	f7ff fa36 	bl	b56b4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6248:	4604      	mov	r4, r0
   b624a:	b9a0      	cbnz	r0, b6276 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b624c:	f7ff fb62 	bl	b5914 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6250:	2801      	cmp	r0, #1
   b6252:	d110      	bne.n	b6276 <_ZN9TimeClass7isValidEv+0x36>
   b6254:	4620      	mov	r0, r4
   b6256:	f7ff fb8d 	bl	b5974 <system_thread_get_state>
   b625a:	b960      	cbnz	r0, b6276 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b625c:	f7ff fefa 	bl	b6054 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6260:	b910      	cbnz	r0, b6268 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6262:	f7ff fc03 	bl	b5a6c <spark_process>
        while (_while() && !_condition()) {
   b6266:	e7f9      	b.n	b625c <_ZN9TimeClass7isValidEv+0x1c>
   b6268:	f7ff fef4 	bl	b6054 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6270:	2000      	movs	r0, #0
   b6272:	f7ff ba1f 	b.w	b56b4 <hal_rtc_time_is_valid>
}
   b6276:	4620      	mov	r0, r4
   b6278:	bd10      	pop	{r4, pc}

000b627a <_ZN9TimeClass3nowEv>:
{
   b627a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b627c:	f7ff ffe0 	bl	b6240 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6280:	2210      	movs	r2, #16
   b6282:	2100      	movs	r1, #0
   b6284:	4668      	mov	r0, sp
   b6286:	f001 ff81 	bl	b818c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b628a:	2100      	movs	r1, #0
   b628c:	4668      	mov	r0, sp
   b628e:	f7ff fa19 	bl	b56c4 <hal_rtc_get_time>
}
   b6292:	9800      	ldr	r0, [sp, #0]
   b6294:	b005      	add	sp, #20
   b6296:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b629c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b629c:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b629e:	681a      	ldr	r2, [r3, #0]
   b62a0:	4b02      	ldr	r3, [pc, #8]	; (b62ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b62a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b62a4:	4770      	bx	lr
   b62a6:	bf00      	nop
   b62a8:	2003e588 	.word	0x2003e588
   b62ac:	2003e6d4 	.word	0x2003e6d4

000b62b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b62b0:	2100      	movs	r1, #0
   b62b2:	f7ff bb3f 	b.w	b5934 <system_delay_ms>
	...

000b62b8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b62b8:	4b01      	ldr	r3, [pc, #4]	; (b62c0 <_GLOBAL__sub_I_RGB+0x8>)
   b62ba:	2200      	movs	r2, #0
   b62bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b62be:	4770      	bx	lr
   b62c0:	2003e6e8 	.word	0x2003e6e8

000b62c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b62c4:	4b01      	ldr	r3, [pc, #4]	; (b62cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b62c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b62c8:	4770      	bx	lr
   b62ca:	bf00      	nop
   b62cc:	2003e590 	.word	0x2003e590

000b62d0 <serialEventRun>:
{
   b62d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b62d2:	4b0b      	ldr	r3, [pc, #44]	; (b6300 <serialEventRun+0x30>)
   b62d4:	b143      	cbz	r3, b62e8 <serialEventRun+0x18>
   b62d6:	f000 fc35 	bl	b6b44 <_Z16_fetch_usbserialv>
   b62da:	6803      	ldr	r3, [r0, #0]
   b62dc:	691b      	ldr	r3, [r3, #16]
   b62de:	4798      	blx	r3
   b62e0:	2800      	cmp	r0, #0
   b62e2:	dd01      	ble.n	b62e8 <serialEventRun+0x18>
        serialEvent();
   b62e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b62e8:	4b06      	ldr	r3, [pc, #24]	; (b6304 <serialEventRun+0x34>)
   b62ea:	b143      	cbz	r3, b62fe <serialEventRun+0x2e>
   b62ec:	f000 ffc0 	bl	b7270 <_Z22__fetch_global_Serial1v>
   b62f0:	6803      	ldr	r3, [r0, #0]
   b62f2:	691b      	ldr	r3, [r3, #16]
   b62f4:	4798      	blx	r3
   b62f6:	2800      	cmp	r0, #0
   b62f8:	dd01      	ble.n	b62fe <serialEventRun+0x2e>
        serialEvent1();
   b62fa:	f3af 8000 	nop.w
}
   b62fe:	bd08      	pop	{r3, pc}
	...

000b6308 <_post_loop>:
{
   b6308:	b508      	push	{r3, lr}
	serialEventRun();
   b630a:	f7ff ffe1 	bl	b62d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b630e:	f7ff f9c9 	bl	b56a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6312:	4b01      	ldr	r3, [pc, #4]	; (b6318 <_post_loop+0x10>)
   b6314:	6018      	str	r0, [r3, #0]
}
   b6316:	bd08      	pop	{r3, pc}
   b6318:	2003e740 	.word	0x2003e740

000b631c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b631c:	4805      	ldr	r0, [pc, #20]	; (b6334 <_Z33system_initialize_user_backup_ramv+0x18>)
   b631e:	4a06      	ldr	r2, [pc, #24]	; (b6338 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6320:	4906      	ldr	r1, [pc, #24]	; (b633c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6322:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6324:	1a12      	subs	r2, r2, r0
   b6326:	f001 ff23 	bl	b8170 <memcpy>
    __backup_sram_signature = signature;
   b632a:	4b05      	ldr	r3, [pc, #20]	; (b6340 <_Z33system_initialize_user_backup_ramv+0x24>)
   b632c:	4a05      	ldr	r2, [pc, #20]	; (b6344 <_Z33system_initialize_user_backup_ramv+0x28>)
   b632e:	601a      	str	r2, [r3, #0]
}
   b6330:	bd08      	pop	{r3, pc}
   b6332:	bf00      	nop
   b6334:	2003f400 	.word	0x2003f400
   b6338:	2003f404 	.word	0x2003f404
   b633c:	000b895c 	.word	0x000b895c
   b6340:	2003f400 	.word	0x2003f400
   b6344:	9a271c1e 	.word	0x9a271c1e

000b6348 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6348:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b634a:	2300      	movs	r3, #0
   b634c:	9300      	str	r3, [sp, #0]
   b634e:	461a      	mov	r2, r3
   b6350:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6354:	f7ff fb20 	bl	b5998 <system_ctrl_set_result>
}
   b6358:	b003      	add	sp, #12
   b635a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6360 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6360:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6362:	8843      	ldrh	r3, [r0, #2]
   b6364:	2b0a      	cmp	r3, #10
   b6366:	d008      	beq.n	b637a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6368:	2b50      	cmp	r3, #80	; 0x50
   b636a:	d10b      	bne.n	b6384 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b636c:	4b09      	ldr	r3, [pc, #36]	; (b6394 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b636e:	681b      	ldr	r3, [r3, #0]
   b6370:	b14b      	cbz	r3, b6386 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6372:	b003      	add	sp, #12
   b6374:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6378:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b637a:	f7ff ffe5 	bl	b6348 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b637e:	b003      	add	sp, #12
   b6380:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6384:	2300      	movs	r3, #0
   b6386:	9300      	str	r3, [sp, #0]
   b6388:	461a      	mov	r2, r3
   b638a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b638e:	f7ff fb03 	bl	b5998 <system_ctrl_set_result>
}
   b6392:	e7f4      	b.n	b637e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6394:	2003e6fc 	.word	0x2003e6fc

000b6398 <module_user_init_hook>:
{
   b6398:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b639a:	4812      	ldr	r0, [pc, #72]	; (b63e4 <module_user_init_hook+0x4c>)
   b639c:	2100      	movs	r1, #0
   b639e:	f7ff fc05 	bl	b5bac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b63a2:	4b11      	ldr	r3, [pc, #68]	; (b63e8 <module_user_init_hook+0x50>)
   b63a4:	681a      	ldr	r2, [r3, #0]
   b63a6:	4b11      	ldr	r3, [pc, #68]	; (b63ec <module_user_init_hook+0x54>)
   b63a8:	429a      	cmp	r2, r3
   b63aa:	4b11      	ldr	r3, [pc, #68]	; (b63f0 <module_user_init_hook+0x58>)
   b63ac:	bf0c      	ite	eq
   b63ae:	2201      	moveq	r2, #1
   b63b0:	2200      	movne	r2, #0
   b63b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b63b4:	d001      	beq.n	b63ba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b63b6:	f7ff ffb1 	bl	b631c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b63ba:	f7ff f96b 	bl	b5694 <HAL_RNG_GetRandomNumber>
   b63be:	4604      	mov	r4, r0
    srand(seed);
   b63c0:	f001 feec 	bl	b819c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b63c4:	4b0b      	ldr	r3, [pc, #44]	; (b63f4 <module_user_init_hook+0x5c>)
   b63c6:	b113      	cbz	r3, b63ce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b63c8:	4620      	mov	r0, r4
   b63ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b63ce:	2100      	movs	r1, #0
   b63d0:	4808      	ldr	r0, [pc, #32]	; (b63f4 <module_user_init_hook+0x5c>)
   b63d2:	f7ff fb93 	bl	b5afc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b63d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b63da:	4807      	ldr	r0, [pc, #28]	; (b63f8 <module_user_init_hook+0x60>)
   b63dc:	2100      	movs	r1, #0
   b63de:	f7ff bad1 	b.w	b5984 <system_ctrl_set_app_request_handler>
   b63e2:	bf00      	nop
   b63e4:	000b62c5 	.word	0x000b62c5
   b63e8:	2003f400 	.word	0x2003f400
   b63ec:	9a271c1e 	.word	0x9a271c1e
   b63f0:	2003e6f8 	.word	0x2003e6f8
   b63f4:	00000000 	.word	0x00000000
   b63f8:	000b6361 	.word	0x000b6361

000b63fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b63fc:	4770      	bx	lr

000b63fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b63fe:	2000      	movs	r0, #0
   b6400:	4770      	bx	lr

000b6402 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6402:	b510      	push	{r4, lr}
   b6404:	2110      	movs	r1, #16
   b6406:	4604      	mov	r4, r0
   b6408:	f7fd fe49 	bl	b409e <_ZdlPvj>
   b640c:	4620      	mov	r0, r4
   b640e:	bd10      	pop	{r4, pc}

000b6410 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6410:	b508      	push	{r3, lr}
      { delete this; }
   b6412:	f7ff fff6 	bl	b6402 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6416:	bd08      	pop	{r3, pc}

000b6418 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6418:	b530      	push	{r4, r5, lr}
        type_(type) {
   b641a:	2200      	movs	r2, #0
   b641c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6420:	6002      	str	r2, [r0, #0]
   b6422:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6424:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6426:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6428:	680c      	ldr	r4, [r1, #0]
   b642a:	8085      	strh	r5, [r0, #4]
   b642c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b642e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6430:	bd30      	pop	{r4, r5, pc}

000b6432 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6432:	b510      	push	{r4, lr}
   b6434:	4604      	mov	r4, r0
    free((void*)msg_);
   b6436:	6800      	ldr	r0, [r0, #0]
   b6438:	f7ff fb78 	bl	b5b2c <free>
}
   b643c:	4620      	mov	r0, r4
   b643e:	bd10      	pop	{r4, pc}

000b6440 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6440:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6442:	68c4      	ldr	r4, [r0, #12]
   b6444:	b1f4      	cbz	r4, b6484 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6446:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6448:	2b02      	cmp	r3, #2
   b644a:	d103      	bne.n	b6454 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b644c:	f104 000c 	add.w	r0, r4, #12
   b6450:	f7ff ffef 	bl	b6432 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6454:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6456:	b135      	cbz	r5, b6466 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6458:	4628      	mov	r0, r5
   b645a:	f7ff fd20 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
   b645e:	2110      	movs	r1, #16
   b6460:	4628      	mov	r0, r5
   b6462:	f7fd fe1c 	bl	b409e <_ZdlPvj>
   b6466:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6468:	b135      	cbz	r5, b6478 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b646a:	4628      	mov	r0, r5
   b646c:	f7ff fd17 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
   b6470:	2110      	movs	r1, #16
   b6472:	4628      	mov	r0, r5
   b6474:	f7fd fe13 	bl	b409e <_ZdlPvj>
   b6478:	4620      	mov	r0, r4
   b647a:	2114      	movs	r1, #20
   b647c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6480:	f7fd be0d 	b.w	b409e <_ZdlPvj>
   b6484:	bd38      	pop	{r3, r4, r5, pc}

000b6486 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b6486:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b6488:	230c      	movs	r3, #12
   b648a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b648e:	6803      	ldr	r3, [r0, #0]
   b6490:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b6494:	7a03      	ldrb	r3, [r0, #8]
   b6496:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b649a:	6843      	ldr	r3, [r0, #4]
   b649c:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b649e:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b64a0:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b64a2:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b64a6:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b64a8:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b64ac:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b64b0:	f7ff fb2c 	bl	b5b0c <spark_cloud_disconnect>
}
   b64b4:	b005      	add	sp, #20
   b64b6:	f85d fb04 	ldr.w	pc, [sp], #4

000b64ba <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b64ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b64bc:	220c      	movs	r2, #12
   b64be:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b64c2:	6802      	ldr	r2, [r0, #0]
   b64c4:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b64c8:	7a02      	ldrb	r2, [r0, #8]
   b64ca:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b64ce:	6842      	ldr	r2, [r0, #4]
   b64d0:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b64d2:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b64d4:	7a42      	ldrb	r2, [r0, #9]
   b64d6:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b64da:	4619      	mov	r1, r3
   b64dc:	aa01      	add	r2, sp, #4
   b64de:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b64e0:	f8ad 300d 	strh.w	r3, [sp, #13]
   b64e4:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b64e8:	f7ff fb00 	bl	b5aec <spark_set_connection_property>
}
   b64ec:	b005      	add	sp, #20
   b64ee:	f85d fb04 	ldr.w	pc, [sp], #4

000b64f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b64f2:	680b      	ldr	r3, [r1, #0]
   b64f4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b64f6:	684b      	ldr	r3, [r1, #4]
   b64f8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b64fa:	b113      	cbz	r3, b6502 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b64fc:	685a      	ldr	r2, [r3, #4]
   b64fe:	3201      	adds	r2, #1
   b6500:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6502:	4770      	bx	lr

000b6504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6504:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6506:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6508:	4668      	mov	r0, sp
   b650a:	460d      	mov	r5, r1
   b650c:	f7ff fff1 	bl	b64f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6510:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6512:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6514:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6516:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6518:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b651a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b651c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b651e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6520:	f7ff fcda 	bl	b5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6524:	b135      	cbz	r5, b6534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6526:	1d28      	adds	r0, r5, #4
   b6528:	f7ff fcd6 	bl	b5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b652c:	2108      	movs	r1, #8
   b652e:	4628      	mov	r0, r5
   b6530:	f7fd fdb5 	bl	b409e <_ZdlPvj>
        return p;
    }
   b6534:	4620      	mov	r0, r4
   b6536:	b003      	add	sp, #12
   b6538:	bd30      	pop	{r4, r5, pc}

000b653a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b653a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b653c:	b510      	push	{r4, lr}
      if (_M_empty())
   b653e:	b90a      	cbnz	r2, b6544 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6540:	f000 fef8 	bl	b7334 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b6544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6548:	68c3      	ldr	r3, [r0, #12]
   b654a:	4718      	bx	r3

000b654c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b654c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b654e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6550:	f100 0110 	add.w	r1, r0, #16
   b6554:	f7ff fff1 	bl	b653a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6558:	bd08      	pop	{r3, pc}

000b655a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b655a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b655c:	b510      	push	{r4, lr}
      if (_M_empty())
   b655e:	b90a      	cbnz	r2, b6564 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6560:	f000 fee8 	bl	b7334 <_ZSt25__throw_bad_function_callv>
    }
   b6564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6568:	68c3      	ldr	r3, [r0, #12]
   b656a:	4718      	bx	r3

000b656c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b656c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b656e:	6800      	ldr	r0, [r0, #0]
   b6570:	f100 0110 	add.w	r1, r0, #16
   b6574:	f7ff fff1 	bl	b655a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6578:	bd08      	pop	{r3, pc}
	...

000b657c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b657c:	b538      	push	{r3, r4, r5, lr}
   b657e:	2300      	movs	r3, #0
   b6580:	4604      	mov	r4, r0
   b6582:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6584:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6586:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6588:	f7fd fd85 	bl	b4096 <_Znwj>
   b658c:	b128      	cbz	r0, b659a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b658e:	2301      	movs	r3, #1
   b6590:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6594:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6596:	6003      	str	r3, [r0, #0]
   b6598:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b659a:	6020      	str	r0, [r4, #0]
	}
   b659c:	4620      	mov	r0, r4
   b659e:	bd38      	pop	{r3, r4, r5, pc}
   b65a0:	000b85cc 	.word	0x000b85cc

000b65a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b65a4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b65a6:	2300      	movs	r3, #0
   b65a8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b65aa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b65ac:	4604      	mov	r4, r0
   b65ae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b65b0:	b12b      	cbz	r3, b65be <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b65b2:	2202      	movs	r2, #2
   b65b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b65b6:	68eb      	ldr	r3, [r5, #12]
   b65b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b65ba:	68ab      	ldr	r3, [r5, #8]
   b65bc:	60a3      	str	r3, [r4, #8]
    }
   b65be:	4620      	mov	r0, r4
   b65c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b65c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b65c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65c6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b65c8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b65ca:	4668      	mov	r0, sp
   b65cc:	f7ff ff24 	bl	b6418 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b65d0:	f04f 0302 	mov.w	r3, #2
   b65d4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b65d8:	2a00      	cmp	r2, #0
   b65da:	d103      	bne.n	b65e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b65dc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b65e0:	2900      	cmp	r1, #0
   b65e2:	d1f7      	bne.n	b65d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b65e4:	d125      	bne.n	b6632 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b65e6:	f104 050c 	add.w	r5, r4, #12
   b65ea:	4669      	mov	r1, sp
   b65ec:	4628      	mov	r0, r5
   b65ee:	f7ff ff13 	bl	b6418 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b65f2:	f3bf 8f5b 	dmb	ish
   b65f6:	2301      	movs	r3, #1
   b65f8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b65fa:	2000      	movs	r0, #0
   b65fc:	f104 0308 	add.w	r3, r4, #8
   b6600:	f3bf 8f5b 	dmb	ish
   b6604:	e853 6f00 	ldrex	r6, [r3]
   b6608:	e843 0200 	strex	r2, r0, [r3]
   b660c:	2a00      	cmp	r2, #0
   b660e:	d1f9      	bne.n	b6604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6610:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6614:	b16e      	cbz	r6, b6632 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6616:	f7ff f99d 	bl	b5954 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b661a:	b178      	cbz	r0, b663c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b661c:	4629      	mov	r1, r5
   b661e:	4630      	mov	r0, r6
   b6620:	f7ff ff8b 	bl	b653a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6624:	4630      	mov	r0, r6
   b6626:	f7ff fc3a 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b662a:	2110      	movs	r1, #16
   b662c:	4630      	mov	r0, r6
   b662e:	f7fd fd36 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b6632:	4668      	mov	r0, sp
   b6634:	f7ff fefd 	bl	b6432 <_ZN8particle5ErrorD1Ev>
    }
   b6638:	b009      	add	sp, #36	; 0x24
   b663a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b663c:	4631      	mov	r1, r6
   b663e:	a802      	add	r0, sp, #8
   b6640:	f7ff ffb0 	bl	b65a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6644:	68e0      	ldr	r0, [r4, #12]
   b6646:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b664a:	b108      	cbz	r0, b6650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b664c:	f001 fde6 	bl	b821c <strdup>
        type_(type) {
   b6650:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6652:	2010      	movs	r0, #16
   b6654:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6658:	f7fd fd1d 	bl	b4096 <_Znwj>
   b665c:	4605      	mov	r5, r0
   b665e:	b1e8      	cbz	r0, b669c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6660:	2700      	movs	r7, #0
   b6662:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6664:	2018      	movs	r0, #24
   b6666:	f7fd fd16 	bl	b4096 <_Znwj>
   b666a:	4604      	mov	r4, r0
   b666c:	b188      	cbz	r0, b6692 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b666e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6670:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6672:	a802      	add	r0, sp, #8
   b6674:	f7ff fc38 	bl	b5ee8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6678:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b667a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b667c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b667e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6680:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6682:	a906      	add	r1, sp, #24
   b6684:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6686:	60e3      	str	r3, [r4, #12]
   b6688:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b668c:	9205      	str	r2, [sp, #20]
   b668e:	f7ff fec3 	bl	b6418 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6692:	4b08      	ldr	r3, [pc, #32]	; (b66b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6694:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6696:	4b08      	ldr	r3, [pc, #32]	; (b66b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6698:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b669a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b669c:	a806      	add	r0, sp, #24
   b669e:	f7ff fec8 	bl	b6432 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b66a2:	a802      	add	r0, sp, #8
   b66a4:	f7ff fbfb 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b66a8:	2200      	movs	r2, #0
   b66aa:	4629      	mov	r1, r5
   b66ac:	4803      	ldr	r0, [pc, #12]	; (b66bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b66ae:	f7ff f959 	bl	b5964 <application_thread_invoke>
   b66b2:	e7b7      	b.n	b6624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b66b4:	000b654d 	.word	0x000b654d
   b66b8:	000b67d1 	.word	0x000b67d1
   b66bc:	000b6c35 	.word	0x000b6c35

000b66c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b66c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b66c4:	b08b      	sub	sp, #44	; 0x2c
   b66c6:	4605      	mov	r5, r0
   b66c8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b66cc:	460f      	mov	r7, r1
   b66ce:	4690      	mov	r8, r2
   b66d0:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b66d2:	f7ff f9db 	bl	b5a8c <spark_cloud_flag_connected>
   b66d6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b66d8:	4683      	mov	fp, r0
   b66da:	bb38      	cbnz	r0, b672c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b66dc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b66e0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b66e2:	a905      	add	r1, sp, #20
   b66e4:	4630      	mov	r0, r6
   b66e6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b66ea:	f7ff fe95 	bl	b6418 <_ZN8particle5ErrorC1EOS0_>
   b66ee:	2014      	movs	r0, #20
   b66f0:	f7fd fcd1 	bl	b4096 <_Znwj>
   b66f4:	4604      	mov	r4, r0
   b66f6:	b148      	cbz	r0, b670c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b66f8:	2302      	movs	r3, #2
   b66fa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b66fc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b66fe:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6702:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6704:	4631      	mov	r1, r6
   b6706:	300c      	adds	r0, #12
   b6708:	f7ff fe86 	bl	b6418 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b670c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b670e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6710:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6714:	f7ff ff32 	bl	b657c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6718:	4630      	mov	r0, r6
   b671a:	f7ff fe8a 	bl	b6432 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b671e:	a805      	add	r0, sp, #20
   b6720:	f7ff fe87 	bl	b6432 <_ZN8particle5ErrorD1Ev>
}
   b6724:	4628      	mov	r0, r5
   b6726:	b00b      	add	sp, #44	; 0x2c
   b6728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b672c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b672e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6730:	2014      	movs	r0, #20
   b6732:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6736:	9307      	str	r3, [sp, #28]
   b6738:	f7fd fcad 	bl	b4096 <_Znwj>
   b673c:	4601      	mov	r1, r0
   b673e:	b118      	cbz	r0, b6748 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6740:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6744:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6746:	7044      	strb	r4, [r0, #1]
   b6748:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b674a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b674c:	f7ff ff16 	bl	b657c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6750:	4b1e      	ldr	r3, [pc, #120]	; (b67cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6752:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6754:	2008      	movs	r0, #8
   b6756:	f7fd fc9e 	bl	b4096 <_Znwj>
   b675a:	4604      	mov	r4, r0
   b675c:	b110      	cbz	r0, b6764 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b675e:	a903      	add	r1, sp, #12
   b6760:	f7ff fec7 	bl	b64f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6764:	9600      	str	r6, [sp, #0]
   b6766:	fa5f f38a 	uxtb.w	r3, sl
   b676a:	464a      	mov	r2, r9
   b676c:	4641      	mov	r1, r8
   b676e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6770:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6772:	f7ff f99b 	bl	b5aac <spark_send_event>
   b6776:	b9b8      	cbnz	r0, b67a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6778:	9b03      	ldr	r3, [sp, #12]
   b677a:	785b      	ldrb	r3, [r3, #1]
   b677c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6780:	b993      	cbnz	r3, b67a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6782:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6786:	a905      	add	r1, sp, #20
   b6788:	a803      	add	r0, sp, #12
   b678a:	9205      	str	r2, [sp, #20]
   b678c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6790:	f7ff ff18 	bl	b65c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6794:	a805      	add	r0, sp, #20
   b6796:	f7ff fe4c 	bl	b6432 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b679a:	a805      	add	r0, sp, #20
   b679c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b679e:	f7ff feb1 	bl	b6504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b67a2:	a806      	add	r0, sp, #24
   b67a4:	f7ff fb98 	bl	b5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67a8:	a903      	add	r1, sp, #12
   b67aa:	a805      	add	r0, sp, #20
   b67ac:	f7ff fea1 	bl	b64f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67b0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b67b2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67b4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b67b6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b67b8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b67ba:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b67bc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b67be:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b67c0:	f7ff fb8a 	bl	b5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67c4:	a804      	add	r0, sp, #16
   b67c6:	f7ff fb87 	bl	b5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b67ca:	e7ab      	b.n	b6724 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b67cc:	000b684d 	.word	0x000b684d

000b67d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b67d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b67d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67d4:	4605      	mov	r5, r0
	switch (__op)
   b67d6:	d103      	bne.n	b67e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b67d8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b67da:	6003      	str	r3, [r0, #0]
      }
   b67dc:	2000      	movs	r0, #0
   b67de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b67e0:	2a02      	cmp	r2, #2
   b67e2:	d010      	beq.n	b6806 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b67e4:	2a03      	cmp	r2, #3
   b67e6:	d1f9      	bne.n	b67dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b67e8:	6804      	ldr	r4, [r0, #0]
   b67ea:	2c00      	cmp	r4, #0
   b67ec:	d0f6      	beq.n	b67dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b67ee:	f104 0010 	add.w	r0, r4, #16
   b67f2:	f7ff fe1e 	bl	b6432 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b67f6:	4620      	mov	r0, r4
   b67f8:	f7ff fb51 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b67fc:	2118      	movs	r1, #24
   b67fe:	4620      	mov	r0, r4
   b6800:	f7fd fc4d 	bl	b409e <_ZdlPvj>
   b6804:	e7ea      	b.n	b67dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6806:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6808:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b680a:	f7fd fc44 	bl	b4096 <_Znwj>
   b680e:	4604      	mov	r4, r0
   b6810:	b150      	cbz	r0, b6828 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6812:	4631      	mov	r1, r6
   b6814:	f7ff fec6 	bl	b65a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6818:	6930      	ldr	r0, [r6, #16]
   b681a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b681e:	b108      	cbz	r0, b6824 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6820:	f001 fcfc 	bl	b821c <strdup>
        type_(type) {
   b6824:	6120      	str	r0, [r4, #16]
   b6826:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6828:	602c      	str	r4, [r5, #0]
	}
   b682a:	e7d7      	b.n	b67dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b682c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b682c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b682e:	2300      	movs	r3, #0
   b6830:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6832:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6834:	4604      	mov	r4, r0
   b6836:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6838:	b12b      	cbz	r3, b6846 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b683a:	2202      	movs	r2, #2
   b683c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b683e:	68eb      	ldr	r3, [r5, #12]
   b6840:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6842:	68ab      	ldr	r3, [r5, #8]
   b6844:	60a3      	str	r3, [r4, #8]
    }
   b6846:	4620      	mov	r0, r4
   b6848:	bd38      	pop	{r3, r4, r5, pc}
	...

000b684c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b684c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b684e:	b089      	sub	sp, #36	; 0x24
   b6850:	4604      	mov	r4, r0
   b6852:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6854:	a801      	add	r0, sp, #4
   b6856:	4611      	mov	r1, r2
   b6858:	f7ff fe54 	bl	b6504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b685c:	b1a4      	cbz	r4, b6888 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b685e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6860:	b11d      	cbz	r5, b686a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6862:	4628      	mov	r0, r5
   b6864:	f001 fcda 	bl	b821c <strdup>
   b6868:	4605      	mov	r5, r0
   b686a:	a801      	add	r0, sp, #4
   b686c:	a903      	add	r1, sp, #12
        type_(type) {
   b686e:	9503      	str	r5, [sp, #12]
   b6870:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6874:	f7ff fea6 	bl	b65c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6878:	a803      	add	r0, sp, #12
   b687a:	f7ff fdda 	bl	b6432 <_ZN8particle5ErrorD1Ev>
   b687e:	a802      	add	r0, sp, #8
   b6880:	f7ff fb2a 	bl	b5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6884:	b009      	add	sp, #36	; 0x24
   b6886:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6888:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b688a:	2301      	movs	r3, #1
   b688c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6890:	2a00      	cmp	r2, #0
   b6892:	d103      	bne.n	b689c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6894:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6898:	2900      	cmp	r1, #0
   b689a:	d1f7      	bne.n	b688c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b689c:	d1ef      	bne.n	b687e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b689e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b68a0:	f3bf 8f5b 	dmb	ish
   b68a4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b68a6:	1d2b      	adds	r3, r5, #4
   b68a8:	f3bf 8f5b 	dmb	ish
   b68ac:	e853 6f00 	ldrex	r6, [r3]
   b68b0:	e843 4200 	strex	r2, r4, [r3]
   b68b4:	2a00      	cmp	r2, #0
   b68b6:	d1f9      	bne.n	b68ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b68b8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b68bc:	2e00      	cmp	r6, #0
   b68be:	d0de      	beq.n	b687e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b68c0:	4620      	mov	r0, r4
   b68c2:	f7ff f847 	bl	b5954 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b68c6:	4607      	mov	r7, r0
   b68c8:	b160      	cbz	r0, b68e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b68ca:	f105 010c 	add.w	r1, r5, #12
   b68ce:	4630      	mov	r0, r6
   b68d0:	f7ff fe43 	bl	b655a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b68d4:	4630      	mov	r0, r6
   b68d6:	f7ff fae2 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b68da:	2110      	movs	r1, #16
   b68dc:	4630      	mov	r0, r6
   b68de:	f7fd fbde 	bl	b409e <_ZdlPvj>
   b68e2:	e7cc      	b.n	b687e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b68e4:	4631      	mov	r1, r6
   b68e6:	a803      	add	r0, sp, #12
   b68e8:	f7ff ffa0 	bl	b682c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b68ec:	7b2b      	ldrb	r3, [r5, #12]
   b68ee:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b68f2:	2010      	movs	r0, #16
   b68f4:	f7fd fbcf 	bl	b4096 <_Znwj>
   b68f8:	4605      	mov	r5, r0
   b68fa:	b1d0      	cbz	r0, b6932 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b68fc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68fe:	2014      	movs	r0, #20
   b6900:	f7fd fbc9 	bl	b4096 <_Znwj>
   b6904:	4604      	mov	r4, r0
   b6906:	b178      	cbz	r0, b6928 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6908:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b690a:	4601      	mov	r1, r0
   b690c:	a803      	add	r0, sp, #12
   b690e:	f7ff faeb 	bl	b5ee8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6912:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6914:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6916:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6918:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b691a:	9205      	str	r2, [sp, #20]
   b691c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b691e:	60e3      	str	r3, [r4, #12]
   b6920:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6924:	9206      	str	r2, [sp, #24]
   b6926:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6928:	4b06      	ldr	r3, [pc, #24]	; (b6944 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b692a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b692c:	4b06      	ldr	r3, [pc, #24]	; (b6948 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b692e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6930:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6932:	a803      	add	r0, sp, #12
   b6934:	f7ff fab3 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6938:	2200      	movs	r2, #0
   b693a:	4629      	mov	r1, r5
   b693c:	4803      	ldr	r0, [pc, #12]	; (b694c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b693e:	f7ff f811 	bl	b5964 <application_thread_invoke>
   b6942:	e7c7      	b.n	b68d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6944:	000b656d 	.word	0x000b656d
   b6948:	000b6951 	.word	0x000b6951
   b694c:	000b6c35 	.word	0x000b6c35

000b6950 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6950:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6952:	b570      	push	{r4, r5, r6, lr}
   b6954:	4604      	mov	r4, r0
	switch (__op)
   b6956:	d103      	bne.n	b6960 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6958:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b695a:	6003      	str	r3, [r0, #0]
      }
   b695c:	2000      	movs	r0, #0
   b695e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6960:	2a02      	cmp	r2, #2
   b6962:	d00c      	beq.n	b697e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6964:	2a03      	cmp	r2, #3
   b6966:	d1f9      	bne.n	b695c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6968:	6804      	ldr	r4, [r0, #0]
   b696a:	2c00      	cmp	r4, #0
   b696c:	d0f6      	beq.n	b695c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b696e:	4620      	mov	r0, r4
   b6970:	f7ff fa95 	bl	b5e9e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6974:	2114      	movs	r1, #20
   b6976:	4620      	mov	r0, r4
   b6978:	f7fd fb91 	bl	b409e <_ZdlPvj>
   b697c:	e7ee      	b.n	b695c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b697e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6980:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6982:	f7fd fb88 	bl	b4096 <_Znwj>
   b6986:	4605      	mov	r5, r0
   b6988:	b120      	cbz	r0, b6994 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b698a:	4631      	mov	r1, r6
   b698c:	f7ff ff4e 	bl	b682c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6990:	7c33      	ldrb	r3, [r6, #16]
   b6992:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6994:	6025      	str	r5, [r4, #0]
	}
   b6996:	e7e1      	b.n	b695c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6998 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6998:	4770      	bx	lr

000b699a <_ZN9IPAddressD0Ev>:
   b699a:	b510      	push	{r4, lr}
   b699c:	2118      	movs	r1, #24
   b699e:	4604      	mov	r4, r0
   b69a0:	f7fd fb7d 	bl	b409e <_ZdlPvj>
   b69a4:	4620      	mov	r0, r4
   b69a6:	bd10      	pop	{r4, pc}

000b69a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b69a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b69aa:	7d03      	ldrb	r3, [r0, #20]
   b69ac:	2b06      	cmp	r3, #6
{
   b69ae:	b08d      	sub	sp, #52	; 0x34
   b69b0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b69b2:	f100 0704 	add.w	r7, r0, #4
   b69b6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b69ba:	d012      	beq.n	b69e2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b69bc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b69c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b69c4:	220a      	movs	r2, #10
   b69c6:	4630      	mov	r0, r6
   b69c8:	f7ff faed 	bl	b5fa6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b69cc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b69ce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b69d0:	d019      	beq.n	b6a06 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b69d2:	2c00      	cmp	r4, #0
   b69d4:	d0f4      	beq.n	b69c0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b69d6:	212e      	movs	r1, #46	; 0x2e
   b69d8:	4630      	mov	r0, r6
   b69da:	f7ff facb 	bl	b5f74 <_ZN5Print5printEc>
   b69de:	4404      	add	r4, r0
   b69e0:	e7ee      	b.n	b69c0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b69e2:	232f      	movs	r3, #47	; 0x2f
   b69e4:	466a      	mov	r2, sp
   b69e6:	4639      	mov	r1, r7
   b69e8:	200a      	movs	r0, #10
		buf[0] = 0;
   b69ea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b69ee:	f7fe fe79 	bl	b56e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b69f2:	4668      	mov	r0, sp
   b69f4:	f001 fc2f 	bl	b8256 <strlen>
   b69f8:	6833      	ldr	r3, [r6, #0]
   b69fa:	4602      	mov	r2, r0
   b69fc:	68db      	ldr	r3, [r3, #12]
   b69fe:	4669      	mov	r1, sp
   b6a00:	4630      	mov	r0, r6
   b6a02:	4798      	blx	r3
   b6a04:	4604      	mov	r4, r0
    }
    return n;
}
   b6a06:	4620      	mov	r0, r4
   b6a08:	b00d      	add	sp, #52	; 0x34
   b6a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a0c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6a0c:	b510      	push	{r4, lr}
   b6a0e:	4b05      	ldr	r3, [pc, #20]	; (b6a24 <_ZN9IPAddressC1Ev+0x18>)
   b6a10:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6a12:	2211      	movs	r2, #17
   b6a14:	f840 3b04 	str.w	r3, [r0], #4
   b6a18:	2100      	movs	r1, #0
   b6a1a:	f001 fbb7 	bl	b818c <memset>
}
   b6a1e:	4620      	mov	r0, r4
   b6a20:	bd10      	pop	{r4, pc}
   b6a22:	bf00      	nop
   b6a24:	000b85e8 	.word	0x000b85e8

000b6a28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6a28:	4603      	mov	r3, r0
   b6a2a:	4a07      	ldr	r2, [pc, #28]	; (b6a48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6a2c:	b510      	push	{r4, lr}
   b6a2e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6a32:	f101 0210 	add.w	r2, r1, #16
   b6a36:	f851 4b04 	ldr.w	r4, [r1], #4
   b6a3a:	f843 4b04 	str.w	r4, [r3], #4
   b6a3e:	4291      	cmp	r1, r2
   b6a40:	d1f9      	bne.n	b6a36 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6a42:	780a      	ldrb	r2, [r1, #0]
   b6a44:	701a      	strb	r2, [r3, #0]
}
   b6a46:	bd10      	pop	{r4, pc}
   b6a48:	000b85e8 	.word	0x000b85e8

000b6a4c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6a4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6a4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6a52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6a56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6a5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6a5e:	2304      	movs	r3, #4
   b6a60:	6041      	str	r1, [r0, #4]
   b6a62:	7503      	strb	r3, [r0, #20]
}
   b6a64:	bd10      	pop	{r4, pc}
	...

000b6a68 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6a68:	b507      	push	{r0, r1, r2, lr}
   b6a6a:	4b06      	ldr	r3, [pc, #24]	; (b6a84 <_ZN9IPAddressC1EPKh+0x1c>)
   b6a6c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6a6e:	78cb      	ldrb	r3, [r1, #3]
   b6a70:	9300      	str	r3, [sp, #0]
   b6a72:	788b      	ldrb	r3, [r1, #2]
   b6a74:	784a      	ldrb	r2, [r1, #1]
   b6a76:	7809      	ldrb	r1, [r1, #0]
   b6a78:	f7ff ffe8 	bl	b6a4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6a7c:	b003      	add	sp, #12
   b6a7e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6a82:	bf00      	nop
   b6a84:	000b85e8 	.word	0x000b85e8

000b6a88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6a88:	7441      	strb	r1, [r0, #17]
}
   b6a8a:	4770      	bx	lr

000b6a8c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6a8c:	4770      	bx	lr

000b6a8e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6a8e:	4770      	bx	lr

000b6a90 <_ZN9USBSerial4readEv>:
{
   b6a90:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6a92:	2100      	movs	r1, #0
   b6a94:	7c00      	ldrb	r0, [r0, #16]
   b6a96:	f7fe ff25 	bl	b58e4 <HAL_USB_USART_Receive_Data>
}
   b6a9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6a9e:	bd08      	pop	{r3, pc}

000b6aa0 <_ZN9USBSerial4peekEv>:
{
   b6aa0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6aa2:	2101      	movs	r1, #1
   b6aa4:	7c00      	ldrb	r0, [r0, #16]
   b6aa6:	f7fe ff1d 	bl	b58e4 <HAL_USB_USART_Receive_Data>
}
   b6aaa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6aae:	bd08      	pop	{r3, pc}

000b6ab0 <_ZN9USBSerial17availableForWriteEv>:
{
   b6ab0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6ab2:	7c00      	ldrb	r0, [r0, #16]
   b6ab4:	f7fe ff0e 	bl	b58d4 <HAL_USB_USART_Available_Data_For_Write>
}
   b6ab8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6abc:	bd08      	pop	{r3, pc}

000b6abe <_ZN9USBSerial9availableEv>:
{
   b6abe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6ac0:	7c00      	ldrb	r0, [r0, #16]
   b6ac2:	f7fe feff 	bl	b58c4 <HAL_USB_USART_Available_Data>
}
   b6ac6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6aca:	bd08      	pop	{r3, pc}

000b6acc <_ZN9USBSerial5writeEh>:
{
   b6acc:	b513      	push	{r0, r1, r4, lr}
   b6ace:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ad0:	7c00      	ldrb	r0, [r0, #16]
{
   b6ad2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ad4:	f7fe fefe 	bl	b58d4 <HAL_USB_USART_Available_Data_For_Write>
   b6ad8:	2800      	cmp	r0, #0
   b6ada:	9901      	ldr	r1, [sp, #4]
   b6adc:	dc01      	bgt.n	b6ae2 <_ZN9USBSerial5writeEh+0x16>
   b6ade:	7c60      	ldrb	r0, [r4, #17]
   b6ae0:	b120      	cbz	r0, b6aec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6ae2:	7c20      	ldrb	r0, [r4, #16]
   b6ae4:	f7fe ff06 	bl	b58f4 <HAL_USB_USART_Send_Data>
   b6ae8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6aec:	b002      	add	sp, #8
   b6aee:	bd10      	pop	{r4, pc}

000b6af0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6af0:	7c00      	ldrb	r0, [r0, #16]
   b6af2:	f7fe bf07 	b.w	b5904 <HAL_USB_USART_Flush_Data>

000b6af6 <_ZN9USBSerialD0Ev>:
   b6af6:	b510      	push	{r4, lr}
   b6af8:	2114      	movs	r1, #20
   b6afa:	4604      	mov	r4, r0
   b6afc:	f7fd facf 	bl	b409e <_ZdlPvj>
   b6b00:	4620      	mov	r0, r4
   b6b02:	bd10      	pop	{r4, pc}

000b6b04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6b04:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b0a:	4604      	mov	r4, r0
   b6b0c:	4608      	mov	r0, r1
   b6b0e:	2100      	movs	r1, #0
   b6b10:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6b14:	4b04      	ldr	r3, [pc, #16]	; (b6b28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6b16:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6b18:	2301      	movs	r3, #1
  _serial = serial;
   b6b1a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6b1c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6b1e:	4611      	mov	r1, r2
   b6b20:	f7fe fec0 	bl	b58a4 <HAL_USB_USART_Init>
}
   b6b24:	4620      	mov	r0, r4
   b6b26:	bd10      	pop	{r4, pc}
   b6b28:	000b85fc 	.word	0x000b85fc

000b6b2c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6b2c:	7c00      	ldrb	r0, [r0, #16]
   b6b2e:	2200      	movs	r2, #0
   b6b30:	f7fe bec0 	b.w	b58b4 <HAL_USB_USART_Begin>

000b6b34 <_Z19acquireSerialBufferv>:
{
   b6b34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6b36:	2214      	movs	r2, #20
{
   b6b38:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6b3a:	2100      	movs	r1, #0
   b6b3c:	f001 fb26 	bl	b818c <memset>
}
   b6b40:	4620      	mov	r0, r4
   b6b42:	bd10      	pop	{r4, pc}

000b6b44 <_Z16_fetch_usbserialv>:
{
   b6b44:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b46:	4c0f      	ldr	r4, [pc, #60]	; (b6b84 <_Z16_fetch_usbserialv+0x40>)
{
   b6b48:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6b4a:	a803      	add	r0, sp, #12
   b6b4c:	f7ff fff2 	bl	b6b34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b50:	7821      	ldrb	r1, [r4, #0]
   b6b52:	f3bf 8f5b 	dmb	ish
   b6b56:	f011 0101 	ands.w	r1, r1, #1
   b6b5a:	d10f      	bne.n	b6b7c <_Z16_fetch_usbserialv+0x38>
   b6b5c:	4620      	mov	r0, r4
   b6b5e:	9101      	str	r1, [sp, #4]
   b6b60:	f7fd fa9f 	bl	b40a2 <__cxa_guard_acquire>
   b6b64:	9901      	ldr	r1, [sp, #4]
   b6b66:	b148      	cbz	r0, b6b7c <_Z16_fetch_usbserialv+0x38>
   b6b68:	aa03      	add	r2, sp, #12
   b6b6a:	4807      	ldr	r0, [pc, #28]	; (b6b88 <_Z16_fetch_usbserialv+0x44>)
   b6b6c:	f7ff ffca 	bl	b6b04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6b70:	4620      	mov	r0, r4
   b6b72:	f7fd fa9b 	bl	b40ac <__cxa_guard_release>
   b6b76:	4805      	ldr	r0, [pc, #20]	; (b6b8c <_Z16_fetch_usbserialv+0x48>)
   b6b78:	f001 faec 	bl	b8154 <atexit>
	return _usbserial;
}
   b6b7c:	4802      	ldr	r0, [pc, #8]	; (b6b88 <_Z16_fetch_usbserialv+0x44>)
   b6b7e:	b008      	add	sp, #32
   b6b80:	bd10      	pop	{r4, pc}
   b6b82:	bf00      	nop
   b6b84:	2003e700 	.word	0x2003e700
   b6b88:	2003e704 	.word	0x2003e704
   b6b8c:	000b6a8d 	.word	0x000b6a8d

000b6b90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6b90:	4770      	bx	lr

000b6b92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6b92:	7441      	strb	r1, [r0, #17]
}
   b6b94:	4770      	bx	lr

000b6b96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6b96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6b98:	7c00      	ldrb	r0, [r0, #16]
   b6b9a:	f7fe fddb 	bl	b5754 <hal_usart_available_data_for_write>
}
   b6b9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ba2:	bd08      	pop	{r3, pc}

000b6ba4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6ba4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6ba6:	7c00      	ldrb	r0, [r0, #16]
   b6ba8:	f7fe fdac 	bl	b5704 <hal_usart_available>
}
   b6bac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bb0:	bd08      	pop	{r3, pc}

000b6bb2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6bb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6bb4:	7c00      	ldrb	r0, [r0, #16]
   b6bb6:	f7fe fdb5 	bl	b5724 <hal_usart_peek>
}
   b6bba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bbe:	bd08      	pop	{r3, pc}

000b6bc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6bc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6bc2:	7c00      	ldrb	r0, [r0, #16]
   b6bc4:	f7fe fda6 	bl	b5714 <hal_usart_read>
}
   b6bc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bcc:	bd08      	pop	{r3, pc}

000b6bce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6bce:	7c00      	ldrb	r0, [r0, #16]
   b6bd0:	f7fe bdb0 	b.w	b5734 <hal_usart_flush>

000b6bd4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6bd6:	7c45      	ldrb	r5, [r0, #17]
{
   b6bd8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6bda:	b12d      	cbz	r5, b6be8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6bdc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6bde:	b003      	add	sp, #12
   b6be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6be4:	f7fe bd86 	b.w	b56f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6be8:	7c00      	ldrb	r0, [r0, #16]
   b6bea:	9101      	str	r1, [sp, #4]
   b6bec:	f7fe fdb2 	bl	b5754 <hal_usart_available_data_for_write>
   b6bf0:	2800      	cmp	r0, #0
   b6bf2:	9901      	ldr	r1, [sp, #4]
   b6bf4:	dcf2      	bgt.n	b6bdc <_ZN11USARTSerial5writeEh+0x8>
}
   b6bf6:	4628      	mov	r0, r5
   b6bf8:	b003      	add	sp, #12
   b6bfa:	bd30      	pop	{r4, r5, pc}

000b6bfc <_ZN11USARTSerialD0Ev>:
   b6bfc:	b510      	push	{r4, lr}
   b6bfe:	2114      	movs	r1, #20
   b6c00:	4604      	mov	r4, r0
   b6c02:	f7fd fa4c 	bl	b409e <_ZdlPvj>
   b6c06:	4620      	mov	r0, r4
   b6c08:	bd10      	pop	{r4, pc}
	...

000b6c0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6c0c:	b510      	push	{r4, lr}
   b6c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c12:	4604      	mov	r4, r0
   b6c14:	4608      	mov	r0, r1
   b6c16:	4611      	mov	r1, r2
   b6c18:	2200      	movs	r2, #0
   b6c1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6c1e:	4b04      	ldr	r3, [pc, #16]	; (b6c30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6c20:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c22:	2301      	movs	r3, #1
  _serial = serial;
   b6c24:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6c28:	f7fe fd9c 	bl	b5764 <hal_usart_init_ex>
}
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	bd10      	pop	{r4, pc}
   b6c30:	000b862c 	.word	0x000b862c

000b6c34 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6c34:	b510      	push	{r4, lr}
      if (_M_empty())
   b6c36:	6883      	ldr	r3, [r0, #8]
   b6c38:	4604      	mov	r4, r0
   b6c3a:	b90b      	cbnz	r3, b6c40 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6c3c:	f000 fb7a 	bl	b7334 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c40:	68c3      	ldr	r3, [r0, #12]
   b6c42:	4798      	blx	r3
      if (_M_manager)
   b6c44:	68a3      	ldr	r3, [r4, #8]
   b6c46:	b11b      	cbz	r3, b6c50 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6c48:	2203      	movs	r2, #3
   b6c4a:	4621      	mov	r1, r4
   b6c4c:	4620      	mov	r0, r4
   b6c4e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6c50:	4620      	mov	r0, r4
   b6c52:	2110      	movs	r1, #16
}
   b6c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6c58:	f7fd ba21 	b.w	b409e <_ZdlPvj>

000b6c5c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6c5c:	4770      	bx	lr

000b6c5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c60:	4606      	mov	r6, r0
   b6c62:	4615      	mov	r5, r2
   b6c64:	460c      	mov	r4, r1
   b6c66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6c68:	42bc      	cmp	r4, r7
   b6c6a:	d006      	beq.n	b6c7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6c6c:	6833      	ldr	r3, [r6, #0]
   b6c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6c72:	689b      	ldr	r3, [r3, #8]
   b6c74:	4630      	mov	r0, r6
   b6c76:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6c78:	e7f6      	b.n	b6c68 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6c7a:	4628      	mov	r0, r5
   b6c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c7e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6c7e:	7c00      	ldrb	r0, [r0, #16]
   b6c80:	2200      	movs	r2, #0
   b6c82:	f7fe bd8f 	b.w	b57a4 <hal_i2c_write>

000b6c86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6c86:	7c00      	ldrb	r0, [r0, #16]
   b6c88:	2100      	movs	r1, #0
   b6c8a:	f7fe bd93 	b.w	b57b4 <hal_i2c_available>

000b6c8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6c8e:	7c00      	ldrb	r0, [r0, #16]
   b6c90:	2100      	movs	r1, #0
   b6c92:	f7fe bd97 	b.w	b57c4 <hal_i2c_read>

000b6c96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6c96:	7c00      	ldrb	r0, [r0, #16]
   b6c98:	2100      	movs	r1, #0
   b6c9a:	f7fe bd9b 	b.w	b57d4 <hal_i2c_peek>

000b6c9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6c9e:	7c00      	ldrb	r0, [r0, #16]
   b6ca0:	2100      	movs	r1, #0
   b6ca2:	f7fe bd9f 	b.w	b57e4 <hal_i2c_flush>

000b6ca6 <_ZN7TwoWireD0Ev>:
   b6ca6:	b510      	push	{r4, lr}
   b6ca8:	2114      	movs	r1, #20
   b6caa:	4604      	mov	r4, r0
   b6cac:	f7fd f9f7 	bl	b409e <_ZdlPvj>
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	bd10      	pop	{r4, pc}

000b6cb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6cb4:	b510      	push	{r4, lr}
   b6cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6cba:	4604      	mov	r4, r0
   b6cbc:	4608      	mov	r0, r1
   b6cbe:	2100      	movs	r1, #0
   b6cc0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6cc4:	4b03      	ldr	r3, [pc, #12]	; (b6cd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6cc6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6cc8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6cca:	4611      	mov	r1, r2
   b6ccc:	f7fe fd9a 	bl	b5804 <hal_i2c_init>
}
   b6cd0:	4620      	mov	r0, r4
   b6cd2:	bd10      	pop	{r4, pc}
   b6cd4:	000b865c 	.word	0x000b865c

000b6cd8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6cd8:	2300      	movs	r3, #0
   b6cda:	7c00      	ldrb	r0, [r0, #16]
   b6cdc:	461a      	mov	r2, r3
   b6cde:	4619      	mov	r1, r3
   b6ce0:	f7fe bd48 	b.w	b5774 <hal_i2c_begin>

000b6ce4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6ce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6ce6:	2200      	movs	r2, #0
   b6ce8:	2314      	movs	r3, #20
   b6cea:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6cee:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6cf2:	780b      	ldrb	r3, [r1, #0]
   b6cf4:	f88d 3008 	strb.w	r3, [sp, #8]
   b6cf8:	684b      	ldr	r3, [r1, #4]
   b6cfa:	9303      	str	r3, [sp, #12]
   b6cfc:	68cb      	ldr	r3, [r1, #12]
   b6cfe:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6d00:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6d02:	7a0b      	ldrb	r3, [r1, #8]
   b6d04:	9305      	str	r3, [sp, #20]
   b6d06:	a901      	add	r1, sp, #4
   b6d08:	f7fe fd84 	bl	b5814 <hal_i2c_request_ex>
}
   b6d0c:	b007      	add	sp, #28
   b6d0e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d12 <_ZN7TwoWire11requestFromEhjh>:
{
   b6d12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6d14:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6d16:	f88d 1000 	strb.w	r1, [sp]
   b6d1a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6d1e:	9103      	str	r1, [sp, #12]
   b6d20:	bf18      	it	ne
   b6d22:	2301      	movne	r3, #1
   b6d24:	4669      	mov	r1, sp
    size_ = size;
   b6d26:	9201      	str	r2, [sp, #4]
   b6d28:	f88d 3008 	strb.w	r3, [sp, #8]
   b6d2c:	f7ff ffda 	bl	b6ce4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6d30:	b005      	add	sp, #20
   b6d32:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d36 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6d36:	2301      	movs	r3, #1
   b6d38:	f7ff bfeb 	b.w	b6d12 <_ZN7TwoWire11requestFromEhjh>

000b6d3c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6d3c:	7c00      	ldrb	r0, [r0, #16]
   b6d3e:	2200      	movs	r2, #0
   b6d40:	f7fe bd20 	b.w	b5784 <hal_i2c_begin_transmission>

000b6d44 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6d44:	b2c9      	uxtb	r1, r1
   b6d46:	f7ff bff9 	b.w	b6d3c <_ZN7TwoWire17beginTransmissionEh>

000b6d4a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6d4a:	7c00      	ldrb	r0, [r0, #16]
   b6d4c:	2200      	movs	r2, #0
   b6d4e:	f7fe bd21 	b.w	b5794 <hal_i2c_end_transmission>

000b6d52 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6d52:	2101      	movs	r1, #1
   b6d54:	f7ff bff9 	b.w	b6d4a <_ZN7TwoWire15endTransmissionEh>

000b6d58 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b6d58:	7c00      	ldrb	r0, [r0, #16]
   b6d5a:	2100      	movs	r1, #0
   b6d5c:	f7fe bd4a 	b.w	b57f4 <hal_i2c_is_enabled>

000b6d60 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6d60:	2200      	movs	r2, #0
   b6d62:	6840      	ldr	r0, [r0, #4]
   b6d64:	4611      	mov	r1, r2
   b6d66:	f7fe be39 	b.w	b59dc <network_ready>

000b6d6a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6d6a:	2200      	movs	r2, #0
   b6d6c:	6840      	ldr	r0, [r0, #4]
   b6d6e:	4611      	mov	r1, r2
   b6d70:	f7fe be54 	b.w	b5a1c <network_listening>

000b6d74 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6d74:	2200      	movs	r2, #0
   b6d76:	6840      	ldr	r0, [r0, #4]
   b6d78:	4611      	mov	r1, r2
   b6d7a:	f7fe be5f 	b.w	b5a3c <network_get_listen_timeout>

000b6d7e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6d7e:	6840      	ldr	r0, [r0, #4]
   b6d80:	2200      	movs	r2, #0
   b6d82:	f7fe be53 	b.w	b5a2c <network_set_listen_timeout>

000b6d86 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6d86:	6840      	ldr	r0, [r0, #4]
   b6d88:	2200      	movs	r2, #0
   b6d8a:	f081 0101 	eor.w	r1, r1, #1
   b6d8e:	f7fe be3d 	b.w	b5a0c <network_listen>

000b6d92 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6d92:	2300      	movs	r3, #0
   b6d94:	6840      	ldr	r0, [r0, #4]
   b6d96:	461a      	mov	r2, r3
   b6d98:	4619      	mov	r1, r3
   b6d9a:	f7fe be27 	b.w	b59ec <network_on>

000b6d9e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6d9e:	2200      	movs	r2, #0
   b6da0:	6840      	ldr	r0, [r0, #4]
   b6da2:	4611      	mov	r1, r2
   b6da4:	f7fe be0a 	b.w	b59bc <network_connecting>

000b6da8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6da8:	6840      	ldr	r0, [r0, #4]
   b6daa:	2200      	movs	r2, #0
   b6dac:	2102      	movs	r1, #2
   b6dae:	f7fe be0d 	b.w	b59cc <network_disconnect>

000b6db2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6db2:	2300      	movs	r3, #0
   b6db4:	6840      	ldr	r0, [r0, #4]
   b6db6:	461a      	mov	r2, r3
   b6db8:	f7fe bdf8 	b.w	b59ac <network_connect>

000b6dbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6dbc:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6dbe:	2204      	movs	r2, #4
   b6dc0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6dc2:	4a02      	ldr	r2, [pc, #8]	; (b6dcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6dc4:	601a      	str	r2, [r3, #0]
>>>>>>> collate-readings
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
<<<<<<< HEAD
   b6ba6:	4770      	bx	lr
   b6ba8:	2003e718 	.word	0x2003e718
   b6bac:	000b841c 	.word	0x000b841c

000b6bb0 <_ZN5spark12NetworkClass7connectEj>:
=======
   b6dc6:	4770      	bx	lr
   b6dc8:	2003e718 	.word	0x2003e718
   b6dcc:	000b8684 	.word	0x000b8684

000b6dd0 <_ZN5spark12NetworkClass7connectEj>:
>>>>>>> collate-readings
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
<<<<<<< HEAD
   b6bb0:	2300      	movs	r3, #0
   b6bb2:	6840      	ldr	r0, [r0, #4]
   b6bb4:	461a      	mov	r2, r3
   b6bb6:	f7fe be07 	b.w	b57c8 <network_connect>

000b6bba <_ZN5spark12NetworkClass10disconnectEv>:
=======
   b6dd0:	2300      	movs	r3, #0
   b6dd2:	6840      	ldr	r0, [r0, #4]
   b6dd4:	461a      	mov	r2, r3
   b6dd6:	f7fe bde9 	b.w	b59ac <network_connect>

000b6dda <_ZN5spark12NetworkClass10disconnectEv>:
>>>>>>> collate-readings
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
<<<<<<< HEAD
   b6bba:	6840      	ldr	r0, [r0, #4]
   b6bbc:	2200      	movs	r2, #0
   b6bbe:	2102      	movs	r1, #2
   b6bc0:	f7fe be12 	b.w	b57e8 <network_disconnect>

000b6bc4 <_ZN5spark12NetworkClass10connectingEv>:
=======
   b6dda:	6840      	ldr	r0, [r0, #4]
   b6ddc:	2200      	movs	r2, #0
   b6dde:	2102      	movs	r1, #2
   b6de0:	f7fe bdf4 	b.w	b59cc <network_disconnect>

000b6de4 <_ZN5spark12NetworkClass10connectingEv>:
>>>>>>> collate-readings
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
<<<<<<< HEAD
   b6bc4:	2200      	movs	r2, #0
   b6bc6:	6840      	ldr	r0, [r0, #4]
   b6bc8:	4611      	mov	r1, r2
   b6bca:	f7fe be05 	b.w	b57d8 <network_connecting>

000b6bce <_ZN5spark12NetworkClass5readyEv>:
=======
   b6de4:	2200      	movs	r2, #0
   b6de6:	6840      	ldr	r0, [r0, #4]
   b6de8:	4611      	mov	r1, r2
   b6dea:	f7fe bde7 	b.w	b59bc <network_connecting>

000b6dee <_ZN5spark12NetworkClass5readyEv>:
>>>>>>> collate-readings
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
<<<<<<< HEAD
   b6bce:	2200      	movs	r2, #0
   b6bd0:	6840      	ldr	r0, [r0, #4]
   b6bd2:	4611      	mov	r1, r2
   b6bd4:	f7fe be10 	b.w	b57f8 <network_ready>

000b6bd8 <_ZN5spark12NetworkClass2onEv>:
=======
   b6dee:	2200      	movs	r2, #0
   b6df0:	6840      	ldr	r0, [r0, #4]
   b6df2:	4611      	mov	r1, r2
   b6df4:	f7fe bdf2 	b.w	b59dc <network_ready>

000b6df8 <_ZN5spark12NetworkClass2onEv>:
>>>>>>> collate-readings
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
<<<<<<< HEAD
   b6bd8:	2300      	movs	r3, #0
   b6bda:	6840      	ldr	r0, [r0, #4]
   b6bdc:	461a      	mov	r2, r3
   b6bde:	4619      	mov	r1, r3
   b6be0:	f7fe be12 	b.w	b5808 <network_on>

000b6be4 <_ZN5spark12NetworkClass3offEv>:
=======
   b6df8:	2300      	movs	r3, #0
   b6dfa:	6840      	ldr	r0, [r0, #4]
   b6dfc:	461a      	mov	r2, r3
   b6dfe:	4619      	mov	r1, r3
   b6e00:	f7fe bdf4 	b.w	b59ec <network_on>

000b6e04 <_ZN5spark12NetworkClass3offEv>:
>>>>>>> collate-readings
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
<<<<<<< HEAD
   b6be4:	2300      	movs	r3, #0
   b6be6:	6840      	ldr	r0, [r0, #4]
   b6be8:	461a      	mov	r2, r3
   b6bea:	4619      	mov	r1, r3
   b6bec:	f7fe be14 	b.w	b5818 <network_off>

000b6bf0 <_ZN5spark12NetworkClass4isOnEv>:
=======
   b6e04:	2300      	movs	r3, #0
   b6e06:	6840      	ldr	r0, [r0, #4]
   b6e08:	461a      	mov	r2, r3
   b6e0a:	4619      	mov	r1, r3
   b6e0c:	f7fe bdf6 	b.w	b59fc <network_off>

000b6e10 <_ZN5spark12NetworkClass4isOnEv>:
>>>>>>> collate-readings
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
<<<<<<< HEAD
   b6bf0:	6840      	ldr	r0, [r0, #4]
   b6bf2:	2100      	movs	r1, #0
   b6bf4:	f7fe be38 	b.w	b5868 <network_is_on>

000b6bf8 <_ZN5spark12NetworkClass5isOffEv>:
=======
   b6e10:	6840      	ldr	r0, [r0, #4]
   b6e12:	2100      	movs	r1, #0
   b6e14:	f7fe be1a 	b.w	b5a4c <network_is_on>

000b6e18 <_ZN5spark12NetworkClass5isOffEv>:
>>>>>>> collate-readings
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
<<<<<<< HEAD
   b6bf8:	6840      	ldr	r0, [r0, #4]
   b6bfa:	2100      	movs	r1, #0
   b6bfc:	f7fe be3c 	b.w	b5878 <network_is_off>

000b6c00 <_ZN5spark12NetworkClass6listenEb>:
=======
   b6e18:	6840      	ldr	r0, [r0, #4]
   b6e1a:	2100      	movs	r1, #0
   b6e1c:	f7fe be1e 	b.w	b5a5c <network_is_off>

000b6e20 <_ZN5spark12NetworkClass6listenEb>:
>>>>>>> collate-readings
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
<<<<<<< HEAD
   b6c00:	6840      	ldr	r0, [r0, #4]
   b6c02:	2200      	movs	r2, #0
   b6c04:	f081 0101 	eor.w	r1, r1, #1
   b6c08:	f7fe be0e 	b.w	b5828 <network_listen>

000b6c0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
=======
   b6e20:	6840      	ldr	r0, [r0, #4]
   b6e22:	2200      	movs	r2, #0
   b6e24:	f081 0101 	eor.w	r1, r1, #1
   b6e28:	f7fe bdf0 	b.w	b5a0c <network_listen>

000b6e2c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
>>>>>>> collate-readings
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
<<<<<<< HEAD
   b6c0c:	6840      	ldr	r0, [r0, #4]
   b6c0e:	2200      	movs	r2, #0
   b6c10:	f7fe be1a 	b.w	b5848 <network_set_listen_timeout>

000b6c14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
=======
   b6e2c:	6840      	ldr	r0, [r0, #4]
   b6e2e:	2200      	movs	r2, #0
   b6e30:	f7fe bdfc 	b.w	b5a2c <network_set_listen_timeout>

000b6e34 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
>>>>>>> collate-readings
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
<<<<<<< HEAD
   b6c14:	2200      	movs	r2, #0
   b6c16:	6840      	ldr	r0, [r0, #4]
   b6c18:	4611      	mov	r1, r2
   b6c1a:	f7fe be1d 	b.w	b5858 <network_get_listen_timeout>

000b6c1e <_ZN5spark12NetworkClass9listeningEv>:
=======
   b6e34:	2200      	movs	r2, #0
   b6e36:	6840      	ldr	r0, [r0, #4]
   b6e38:	4611      	mov	r1, r2
   b6e3a:	f7fe bdff 	b.w	b5a3c <network_get_listen_timeout>

000b6e3e <_ZN5spark12NetworkClass9listeningEv>:
>>>>>>> collate-readings
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
<<<<<<< HEAD
   b6c1e:	2200      	movs	r2, #0
   b6c20:	6840      	ldr	r0, [r0, #4]
   b6c22:	4611      	mov	r1, r2
   b6c24:	f7fe be08 	b.w	b5838 <network_listening>

000b6c28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c2c:	b095      	sub	sp, #84	; 0x54
   b6c2e:	4614      	mov	r4, r2
   b6c30:	460d      	mov	r5, r1
   b6c32:	4607      	mov	r7, r0
    IPAddress addr;
   b6c34:	f7ff fdd4 	bl	b67e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6c38:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6c3a:	221c      	movs	r2, #28
   b6c3c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6c3e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6c40:	f001 f984 	bl	b7f4c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6c44:	2340      	movs	r3, #64	; 0x40
   b6c46:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6c48:	4620      	mov	r0, r4
   b6c4a:	466b      	mov	r3, sp
   b6c4c:	aa0c      	add	r2, sp, #48	; 0x30
   b6c4e:	2100      	movs	r1, #0
   b6c50:	f7fe fc0e 	bl	b5470 <netdb_getaddrinfo>
    if (!r) {
   b6c54:	4604      	mov	r4, r0
   b6c56:	2800      	cmp	r0, #0
   b6c58:	d14b      	bne.n	b6cf2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c5a:	4602      	mov	r2, r0
   b6c5c:	2101      	movs	r1, #1
   b6c5e:	6868      	ldr	r0, [r5, #4]
   b6c60:	f7fe fdca 	bl	b57f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c68:	4622      	mov	r2, r4
   b6c6a:	6868      	ldr	r0, [r5, #4]
   b6c6c:	f7fe fdc4 	bl	b57f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c72:	4681      	mov	r9, r0
        bool ok = false;
   b6c74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c76:	2e00      	cmp	r6, #0
   b6c78:	d03b      	beq.n	b6cf2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6c7a:	2900      	cmp	r1, #0
   b6c7c:	d139      	bne.n	b6cf2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6c7e:	6873      	ldr	r3, [r6, #4]
   b6c80:	2b02      	cmp	r3, #2
   b6c82:	d003      	beq.n	b6c8c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6c84:	2b0a      	cmp	r3, #10
   b6c86:	d011      	beq.n	b6cac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c88:	69f6      	ldr	r6, [r6, #28]
   b6c8a:	e7f4      	b.n	b6c76 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6c8c:	f1b8 0f00 	cmp.w	r8, #0
   b6c90:	d0fa      	beq.n	b6c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
=======
   b6e3e:	2200      	movs	r2, #0
   b6e40:	6840      	ldr	r0, [r0, #4]
   b6e42:	4611      	mov	r1, r2
   b6e44:	f7fe bdea 	b.w	b5a1c <network_listening>

000b6e48 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e4c:	b095      	sub	sp, #84	; 0x54
   b6e4e:	4614      	mov	r4, r2
   b6e50:	460d      	mov	r5, r1
   b6e52:	4607      	mov	r7, r0
    IPAddress addr;
   b6e54:	f7ff fdda 	bl	b6a0c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6e58:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6e5a:	221c      	movs	r2, #28
   b6e5c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6e5e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6e60:	f001 f994 	bl	b818c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6e64:	2340      	movs	r3, #64	; 0x40
   b6e66:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6e68:	4620      	mov	r0, r4
   b6e6a:	466b      	mov	r3, sp
   b6e6c:	aa0c      	add	r2, sp, #48	; 0x30
   b6e6e:	2100      	movs	r1, #0
   b6e70:	f7fe fbe8 	bl	b5644 <netdb_getaddrinfo>
    if (!r) {
   b6e74:	4604      	mov	r4, r0
   b6e76:	2800      	cmp	r0, #0
   b6e78:	d14b      	bne.n	b6f12 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6e7a:	4602      	mov	r2, r0
   b6e7c:	2101      	movs	r1, #1
   b6e7e:	6868      	ldr	r0, [r5, #4]
   b6e80:	f7fe fdac 	bl	b59dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e84:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6e86:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e88:	4622      	mov	r2, r4
   b6e8a:	6868      	ldr	r0, [r5, #4]
   b6e8c:	f7fe fda6 	bl	b59dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e90:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e92:	4681      	mov	r9, r0
        bool ok = false;
   b6e94:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e96:	2e00      	cmp	r6, #0
   b6e98:	d03b      	beq.n	b6f12 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6e9a:	2900      	cmp	r1, #0
   b6e9c:	d139      	bne.n	b6f12 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6e9e:	6873      	ldr	r3, [r6, #4]
   b6ea0:	2b02      	cmp	r3, #2
   b6ea2:	d003      	beq.n	b6eac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ea4:	2b0a      	cmp	r3, #10
   b6ea6:	d011      	beq.n	b6ecc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ea8:	69f6      	ldr	r6, [r6, #28]
   b6eaa:	e7f4      	b.n	b6e96 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6eac:	f1b8 0f00 	cmp.w	r8, #0
   b6eb0:	d0fa      	beq.n	b6ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
>>>>>>> collate-readings
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
<<<<<<< HEAD
   b6c92:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6c94:	a806      	add	r0, sp, #24
   b6c96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6c98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6c9a:	f7ff fdcf 	bl	b683c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ca0:	1d3c      	adds	r4, r7, #4
   b6ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ca4:	682b      	ldr	r3, [r5, #0]
   b6ca6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6ca8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6caa:	e7ed      	b.n	b6c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
=======
   b6eb2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6eb4:	a806      	add	r0, sp, #24
   b6eb6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6eb8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6eba:	f7ff fdd5 	bl	b6a68 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ec0:	1d3c      	adds	r4, r7, #4
   b6ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ec4:	682b      	ldr	r3, [r5, #0]
   b6ec6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6ec8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6eca:	e7ed      	b.n	b6ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
>>>>>>> collate-readings
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
<<<<<<< HEAD
   b6cac:	f1b9 0f00 	cmp.w	r9, #0
   b6cb0:	d0ea      	beq.n	b6c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6cb2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6cb4:	2210      	movs	r2, #16
   b6cb6:	a801      	add	r0, sp, #4
   b6cb8:	f001 f948 	bl	b7f4c <memset>
                    a.v = 6;
   b6cbc:	2306      	movs	r3, #6
   b6cbe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6cc2:	ad01      	add	r5, sp, #4
   b6cc4:	f104 0308 	add.w	r3, r4, #8
   b6cc8:	3418      	adds	r4, #24
   b6cca:	6818      	ldr	r0, [r3, #0]
   b6ccc:	6859      	ldr	r1, [r3, #4]
   b6cce:	462a      	mov	r2, r5
   b6cd0:	c203      	stmia	r2!, {r0, r1}
   b6cd2:	3308      	adds	r3, #8
   b6cd4:	42a3      	cmp	r3, r4
   b6cd6:	4615      	mov	r5, r2
   b6cd8:	d1f7      	bne.n	b6cca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6cda:	a901      	add	r1, sp, #4
   b6cdc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6cde:	ad07      	add	r5, sp, #28
   b6ce0:	f7ff fd8c 	bl	b67fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ce6:	1d3c      	adds	r4, r7, #4
   b6ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cea:	682b      	ldr	r3, [r5, #0]
   b6cec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6cee:	4649      	mov	r1, r9
   b6cf0:	e7ca      	b.n	b6c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
=======
   b6ecc:	f1b9 0f00 	cmp.w	r9, #0
   b6ed0:	d0ea      	beq.n	b6ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6ed2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6ed4:	2210      	movs	r2, #16
   b6ed6:	a801      	add	r0, sp, #4
   b6ed8:	f001 f958 	bl	b818c <memset>
                    a.v = 6;
   b6edc:	2306      	movs	r3, #6
   b6ede:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6ee2:	ad01      	add	r5, sp, #4
   b6ee4:	f104 0308 	add.w	r3, r4, #8
   b6ee8:	3418      	adds	r4, #24
   b6eea:	6818      	ldr	r0, [r3, #0]
   b6eec:	6859      	ldr	r1, [r3, #4]
   b6eee:	462a      	mov	r2, r5
   b6ef0:	c203      	stmia	r2!, {r0, r1}
   b6ef2:	3308      	adds	r3, #8
   b6ef4:	42a3      	cmp	r3, r4
   b6ef6:	4615      	mov	r5, r2
   b6ef8:	d1f7      	bne.n	b6eea <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6efa:	a901      	add	r1, sp, #4
   b6efc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6efe:	ad07      	add	r5, sp, #28
   b6f00:	f7ff fd92 	bl	b6a28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f06:	1d3c      	adds	r4, r7, #4
   b6f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f0a:	682b      	ldr	r3, [r5, #0]
   b6f0c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f0e:	4649      	mov	r1, r9
   b6f10:	e7ca      	b.n	b6ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
>>>>>>> collate-readings
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
<<<<<<< HEAD
   b6cf2:	9800      	ldr	r0, [sp, #0]
   b6cf4:	f7fe fbb4 	bl	b5460 <netdb_freeaddrinfo>
=======
   b6f12:	9800      	ldr	r0, [sp, #0]
   b6f14:	f7fe fb8e 	bl	b5634 <netdb_freeaddrinfo>
>>>>>>> collate-readings
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
<<<<<<< HEAD
   b6cf8:	4638      	mov	r0, r7
   b6cfa:	b015      	add	sp, #84	; 0x54
   b6cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6d00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6d00:	4b02      	ldr	r3, [pc, #8]	; (b6d0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6d02:	4a03      	ldr	r2, [pc, #12]	; (b6d10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6d04:	601a      	str	r2, [r3, #0]
   b6d06:	2200      	movs	r2, #0
   b6d08:	605a      	str	r2, [r3, #4]

} // spark
   b6d0a:	4770      	bx	lr
   b6d0c:	2003e720 	.word	0x2003e720
   b6d10:	000b8458 	.word	0x000b8458

000b6d14 <_ZN5spark16JSONBufferWriterD1Ev>:
=======
   b6f18:	4638      	mov	r0, r7
   b6f1a:	b015      	add	sp, #84	; 0x54
   b6f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6f20 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6f20:	4b02      	ldr	r3, [pc, #8]	; (b6f2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6f22:	4a03      	ldr	r2, [pc, #12]	; (b6f30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6f24:	601a      	str	r2, [r3, #0]
   b6f26:	2200      	movs	r2, #0
   b6f28:	605a      	str	r2, [r3, #4]

} // spark
   b6f2a:	4770      	bx	lr
   b6f2c:	2003e720 	.word	0x2003e720
   b6f30:	000b86c0 	.word	0x000b86c0

000b6f34 <_ZN5spark16JSONBufferWriterD1Ev>:
>>>>>>> collate-readings

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
<<<<<<< HEAD
   b6d14:	4770      	bx	lr

000b6d16 <_ZN5spark16JSONBufferWriterD0Ev>:
   b6d16:	b510      	push	{r4, lr}
   b6d18:	2114      	movs	r1, #20
   b6d1a:	4604      	mov	r4, r0
   b6d1c:	f7fd f9bf 	bl	b409e <_ZdlPvj>
   b6d20:	4620      	mov	r0, r4
   b6d22:	bd10      	pop	{r4, pc}

000b6d24 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
=======
   b6f34:	4770      	bx	lr

000b6f36 <_ZN5spark16JSONBufferWriterD0Ev>:
   b6f36:	b510      	push	{r4, lr}
   b6f38:	2114      	movs	r1, #20
   b6f3a:	4604      	mov	r4, r0
   b6f3c:	f7fd f8af 	bl	b409e <_ZdlPvj>
   b6f40:	4620      	mov	r0, r4
   b6f42:	bd10      	pop	{r4, pc}

000b6f44 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
>>>>>>> collate-readings
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
<<<<<<< HEAD
   b6d24:	b538      	push	{r3, r4, r5, lr}
   b6d26:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   b6d28:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   b6d2c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b6d2e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   b6d30:	d207      	bcs.n	b6d42 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   b6d32:	1ad2      	subs	r2, r2, r3
   b6d34:	6880      	ldr	r0, [r0, #8]
   b6d36:	42aa      	cmp	r2, r5
   b6d38:	bf28      	it	cs
   b6d3a:	462a      	movcs	r2, r5
   b6d3c:	4418      	add	r0, r3
   b6d3e:	f001 f8f7 	bl	b7f30 <memcpy>
    }
    n_ += size;
   b6d42:	6922      	ldr	r2, [r4, #16]
   b6d44:	442a      	add	r2, r5
   b6d46:	6122      	str	r2, [r4, #16]
}
   b6d48:	bd38      	pop	{r3, r4, r5, pc}

000b6d4a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   b6d4a:	b40e      	push	{r1, r2, r3}
   b6d4c:	b517      	push	{r0, r1, r2, r4, lr}
   b6d4e:	ab05      	add	r3, sp, #20
   b6d50:	4604      	mov	r4, r0
   b6d52:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b6d56:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   b6d58:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b6d5a:	6903      	ldr	r3, [r0, #16]
   b6d5c:	6880      	ldr	r0, [r0, #8]
   b6d5e:	428b      	cmp	r3, r1
   b6d60:	bf38      	it	cc
   b6d62:	1ac9      	subcc	r1, r1, r3
   b6d64:	4418      	add	r0, r3
   b6d66:	bf28      	it	cs
   b6d68:	2100      	movcs	r1, #0
   b6d6a:	9b01      	ldr	r3, [sp, #4]
   b6d6c:	f7fe fde4 	bl	b5938 <vsnprintf>
    va_end(args);
    n_ += n;
   b6d70:	6923      	ldr	r3, [r4, #16]
   b6d72:	4418      	add	r0, r3
   b6d74:	6120      	str	r0, [r4, #16]
}
   b6d76:	b003      	add	sp, #12
   b6d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d7c:	b003      	add	sp, #12
   b6d7e:	4770      	bx	lr

000b6d80 <_ZN5spark10JSONWriter5writeEc>:
=======
   b6f44:	b538      	push	{r3, r4, r5, lr}
   b6f46:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   b6f48:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   b6f4c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b6f4e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   b6f50:	d207      	bcs.n	b6f62 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   b6f52:	1ad2      	subs	r2, r2, r3
   b6f54:	6880      	ldr	r0, [r0, #8]
   b6f56:	42aa      	cmp	r2, r5
   b6f58:	bf28      	it	cs
   b6f5a:	462a      	movcs	r2, r5
   b6f5c:	4418      	add	r0, r3
   b6f5e:	f001 f907 	bl	b8170 <memcpy>
    }
    n_ += size;
   b6f62:	6922      	ldr	r2, [r4, #16]
   b6f64:	442a      	add	r2, r5
   b6f66:	6122      	str	r2, [r4, #16]
}
   b6f68:	bd38      	pop	{r3, r4, r5, pc}

000b6f6a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   b6f6a:	b40e      	push	{r1, r2, r3}
   b6f6c:	b517      	push	{r0, r1, r2, r4, lr}
   b6f6e:	ab05      	add	r3, sp, #20
   b6f70:	4604      	mov	r4, r0
   b6f72:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b6f76:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   b6f78:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b6f7a:	6903      	ldr	r3, [r0, #16]
   b6f7c:	6880      	ldr	r0, [r0, #8]
   b6f7e:	428b      	cmp	r3, r1
   b6f80:	bf38      	it	cc
   b6f82:	1ac9      	subcc	r1, r1, r3
   b6f84:	4418      	add	r0, r3
   b6f86:	bf28      	it	cs
   b6f88:	2100      	movcs	r1, #0
   b6f8a:	9b01      	ldr	r3, [sp, #4]
   b6f8c:	f7fe fdee 	bl	b5b6c <vsnprintf>
    va_end(args);
    n_ += n;
   b6f90:	6923      	ldr	r3, [r4, #16]
   b6f92:	4418      	add	r0, r3
   b6f94:	6120      	str	r0, [r4, #16]
}
   b6f96:	b003      	add	sp, #12
   b6f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f9c:	b003      	add	sp, #12
   b6f9e:	4770      	bx	lr

000b6fa0 <_ZN5spark10JSONWriter5writeEc>:
>>>>>>> collate-readings

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
<<<<<<< HEAD
   b6d80:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6d82:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6d84:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6d88:	689b      	ldr	r3, [r3, #8]
   b6d8a:	2201      	movs	r2, #1
   b6d8c:	f10d 0107 	add.w	r1, sp, #7
   b6d90:	4798      	blx	r3
}
   b6d92:	b003      	add	sp, #12
   b6d94:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d98 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6d98:	b510      	push	{r4, lr}
    write('}');
   b6d9a:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6d9c:	4604      	mov	r4, r0
    write('}');
   b6d9e:	f7ff ffef 	bl	b6d80 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6da2:	2301      	movs	r3, #1
   b6da4:	7123      	strb	r3, [r4, #4]
}
   b6da6:	4620      	mov	r0, r4
   b6da8:	bd10      	pop	{r4, pc}

000b6daa <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   b6daa:	b508      	push	{r3, lr}
    switch (state_) {
   b6dac:	7903      	ldrb	r3, [r0, #4]
   b6dae:	2b01      	cmp	r3, #1
   b6db0:	d002      	beq.n	b6db8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6db2:	2b02      	cmp	r3, #2
   b6db4:	d004      	beq.n	b6dc0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   b6db6:	bd08      	pop	{r3, pc}
        write(',');
   b6db8:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6dba:	f7ff ffe1 	bl	b6d80 <_ZN5spark10JSONWriter5writeEc>
}
   b6dbe:	e7fa      	b.n	b6db6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6dc0:	213a      	movs	r1, #58	; 0x3a
   b6dc2:	e7fa      	b.n	b6dba <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6dc4 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6dc4:	b510      	push	{r4, lr}
   b6dc6:	4604      	mov	r4, r0
    writeSeparator();
   b6dc8:	f7ff ffef 	bl	b6daa <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6dcc:	4620      	mov	r0, r4
   b6dce:	217b      	movs	r1, #123	; 0x7b
   b6dd0:	f7ff ffd6 	bl	b6d80 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6dd4:	2300      	movs	r3, #0
   b6dd6:	7123      	strb	r3, [r4, #4]
}
   b6dd8:	4620      	mov	r0, r4
   b6dda:	bd10      	pop	{r4, pc}

000b6ddc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6ddc:	b513      	push	{r0, r1, r4, lr}
   b6dde:	4604      	mov	r4, r0
   b6de0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6de2:	f7ff ffe2 	bl	b6daa <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6de6:	6823      	ldr	r3, [r4, #0]
   b6de8:	9a01      	ldr	r2, [sp, #4]
   b6dea:	68db      	ldr	r3, [r3, #12]
   b6dec:	4903      	ldr	r1, [pc, #12]	; (b6dfc <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6dee:	4620      	mov	r0, r4
   b6df0:	4798      	blx	r3
    state_ = NEXT;
   b6df2:	2301      	movs	r3, #1
}
   b6df4:	4620      	mov	r0, r4
    state_ = NEXT;
   b6df6:	7123      	strb	r3, [r4, #4]
}
   b6df8:	b002      	add	sp, #8
   b6dfa:	bd10      	pop	{r4, pc}
   b6dfc:	000b848c 	.word	0x000b848c

000b6e00 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   b6e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e02:	4604      	mov	r4, r0
   b6e04:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   b6e08:	f7ff ffcf 	bl	b6daa <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   b6e0c:	6823      	ldr	r3, [r4, #0]
   b6e0e:	4905      	ldr	r1, [pc, #20]	; (b6e24 <_ZN5spark10JSONWriter5valueEd+0x24>)
   b6e10:	68dd      	ldr	r5, [r3, #12]
   b6e12:	4620      	mov	r0, r4
   b6e14:	463b      	mov	r3, r7
   b6e16:	4632      	mov	r2, r6
   b6e18:	47a8      	blx	r5
    state_ = NEXT;
   b6e1a:	2301      	movs	r3, #1
   b6e1c:	7123      	strb	r3, [r4, #4]
}
   b6e1e:	4620      	mov	r0, r4
   b6e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6e22:	bf00      	nop
   b6e24:	000b848f 	.word	0x000b848f

000b6e28 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6e2c:	460d      	mov	r5, r1
    write('"');
   b6e2e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6e30:	4690      	mov	r8, r2
   b6e32:	4604      	mov	r4, r0
    write('"');
   b6e34:	f7ff ffa4 	bl	b6d80 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
   b6e38:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6ee0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6e3c:	44a8      	add	r8, r5
    const char *s = str;
   b6e3e:	462f      	mov	r7, r5
    while (s != end) {
   b6e40:	4547      	cmp	r7, r8
   b6e42:	46ba      	mov	sl, r7
   b6e44:	d03d      	beq.n	b6ec2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6e46:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6e4a:	2e22      	cmp	r6, #34	; 0x22
   b6e4c:	d006      	beq.n	b6e5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6e4e:	2e5c      	cmp	r6, #92	; 0x5c
   b6e50:	d004      	beq.n	b6e5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6e52:	4630      	mov	r0, r6
   b6e54:	f001 f864 	bl	b7f20 <isprint>
   b6e58:	2800      	cmp	r0, #0
   b6e5a:	d1f1      	bne.n	b6e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6e5c:	6823      	ldr	r3, [r4, #0]
   b6e5e:	ebaa 0205 	sub.w	r2, sl, r5
   b6e62:	689b      	ldr	r3, [r3, #8]
   b6e64:	4629      	mov	r1, r5
   b6e66:	4620      	mov	r0, r4
   b6e68:	4798      	blx	r3
            write('\\');
   b6e6a:	215c      	movs	r1, #92	; 0x5c
   b6e6c:	4620      	mov	r0, r4
   b6e6e:	f7ff ff87 	bl	b6d80 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6e72:	2e0d      	cmp	r6, #13
   b6e74:	d80a      	bhi.n	b6e8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6e76:	2e07      	cmp	r6, #7
   b6e78:	d91c      	bls.n	b6eb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6e7a:	f1a6 0308 	sub.w	r3, r6, #8
   b6e7e:	2b05      	cmp	r3, #5
   b6e80:	d818      	bhi.n	b6eb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6e82:	e8df f003 	tbb	[pc, r3]
   b6e86:	0f0d      	.short	0x0f0d
   b6e88:	15131711 	.word	0x15131711
   b6e8c:	2e22      	cmp	r6, #34	; 0x22
   b6e8e:	d001      	beq.n	b6e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6e90:	2e5c      	cmp	r6, #92	; 0x5c
   b6e92:	d10f      	bne.n	b6eb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6e94:	4631      	mov	r1, r6
                write('b');
   b6e96:	4620      	mov	r0, r4
   b6e98:	f7ff ff72 	bl	b6d80 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   b6e9c:	463d      	mov	r5, r7
    while (s != end) {
   b6e9e:	e7cf      	b.n	b6e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6ea0:	2162      	movs	r1, #98	; 0x62
   b6ea2:	e7f8      	b.n	b6e96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6ea4:	2174      	movs	r1, #116	; 0x74
   b6ea6:	e7f6      	b.n	b6e96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6ea8:	216e      	movs	r1, #110	; 0x6e
   b6eaa:	e7f4      	b.n	b6e96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6eac:	2166      	movs	r1, #102	; 0x66
   b6eae:	e7f2      	b.n	b6e96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6eb0:	2172      	movs	r1, #114	; 0x72
   b6eb2:	e7f0      	b.n	b6e96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6eb4:	6823      	ldr	r3, [r4, #0]
   b6eb6:	4632      	mov	r2, r6
   b6eb8:	68db      	ldr	r3, [r3, #12]
   b6eba:	4649      	mov	r1, r9
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	4798      	blx	r3
                break;
   b6ec0:	e7ec      	b.n	b6e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
   b6ec2:	42bd      	cmp	r5, r7
   b6ec4:	d005      	beq.n	b6ed2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b6ec6:	6823      	ldr	r3, [r4, #0]
   b6ec8:	1b7a      	subs	r2, r7, r5
   b6eca:	689b      	ldr	r3, [r3, #8]
   b6ecc:	4629      	mov	r1, r5
   b6ece:	4620      	mov	r0, r4
   b6ed0:	4798      	blx	r3
    write('"');
   b6ed2:	2122      	movs	r1, #34	; 0x22
   b6ed4:	4620      	mov	r0, r4
   b6ed6:	f7ff ff53 	bl	b6d80 <_ZN5spark10JSONWriter5writeEc>
}
   b6eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6ede:	bf00      	nop
   b6ee0:	000b8492 	.word	0x000b8492

000b6ee4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6ee4:	b513      	push	{r0, r1, r4, lr}
   b6ee6:	4604      	mov	r4, r0
   b6ee8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6eec:	f7ff ff5d 	bl	b6daa <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6ef0:	4620      	mov	r0, r4
   b6ef2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6ef6:	f7ff ff97 	bl	b6e28 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b6efa:	2302      	movs	r3, #2
}
   b6efc:	4620      	mov	r0, r4
    state_ = VALUE;
   b6efe:	7123      	strb	r3, [r4, #4]
}
   b6f00:	b002      	add	sp, #8
   b6f02:	bd10      	pop	{r4, pc}

000b6f04 <pinAvailable>:
=======
   b6fa0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6fa2:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6fa4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6fa8:	689b      	ldr	r3, [r3, #8]
   b6faa:	2201      	movs	r2, #1
   b6fac:	f10d 0107 	add.w	r1, sp, #7
   b6fb0:	4798      	blx	r3
}
   b6fb2:	b003      	add	sp, #12
   b6fb4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6fb8 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6fb8:	b510      	push	{r4, lr}
    write('}');
   b6fba:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6fbc:	4604      	mov	r4, r0
    write('}');
   b6fbe:	f7ff ffef 	bl	b6fa0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6fc2:	2301      	movs	r3, #1
   b6fc4:	7123      	strb	r3, [r4, #4]
}
   b6fc6:	4620      	mov	r0, r4
   b6fc8:	bd10      	pop	{r4, pc}

000b6fca <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   b6fca:	b508      	push	{r3, lr}
    switch (state_) {
   b6fcc:	7903      	ldrb	r3, [r0, #4]
   b6fce:	2b01      	cmp	r3, #1
   b6fd0:	d002      	beq.n	b6fd8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6fd2:	2b02      	cmp	r3, #2
   b6fd4:	d004      	beq.n	b6fe0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   b6fd6:	bd08      	pop	{r3, pc}
        write(',');
   b6fd8:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6fda:	f7ff ffe1 	bl	b6fa0 <_ZN5spark10JSONWriter5writeEc>
}
   b6fde:	e7fa      	b.n	b6fd6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6fe0:	213a      	movs	r1, #58	; 0x3a
   b6fe2:	e7fa      	b.n	b6fda <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6fe4 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6fe4:	b510      	push	{r4, lr}
   b6fe6:	4604      	mov	r4, r0
    writeSeparator();
   b6fe8:	f7ff ffef 	bl	b6fca <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6fec:	4620      	mov	r0, r4
   b6fee:	217b      	movs	r1, #123	; 0x7b
   b6ff0:	f7ff ffd6 	bl	b6fa0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6ff4:	2300      	movs	r3, #0
   b6ff6:	7123      	strb	r3, [r4, #4]
}
   b6ff8:	4620      	mov	r0, r4
   b6ffa:	bd10      	pop	{r4, pc}

000b6ffc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6ffc:	b513      	push	{r0, r1, r4, lr}
   b6ffe:	4604      	mov	r4, r0
   b7000:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7002:	f7ff ffe2 	bl	b6fca <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7006:	6823      	ldr	r3, [r4, #0]
   b7008:	9a01      	ldr	r2, [sp, #4]
   b700a:	68db      	ldr	r3, [r3, #12]
   b700c:	4903      	ldr	r1, [pc, #12]	; (b701c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b700e:	4620      	mov	r0, r4
   b7010:	4798      	blx	r3
    state_ = NEXT;
   b7012:	2301      	movs	r3, #1
}
   b7014:	4620      	mov	r0, r4
    state_ = NEXT;
   b7016:	7123      	strb	r3, [r4, #4]
}
   b7018:	b002      	add	sp, #8
   b701a:	bd10      	pop	{r4, pc}
   b701c:	000b86f4 	.word	0x000b86f4

000b7020 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   b7020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7022:	4604      	mov	r4, r0
   b7024:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   b7028:	f7ff ffcf 	bl	b6fca <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   b702c:	6823      	ldr	r3, [r4, #0]
   b702e:	4905      	ldr	r1, [pc, #20]	; (b7044 <_ZN5spark10JSONWriter5valueEd+0x24>)
   b7030:	68dd      	ldr	r5, [r3, #12]
   b7032:	4620      	mov	r0, r4
   b7034:	463b      	mov	r3, r7
   b7036:	4632      	mov	r2, r6
   b7038:	47a8      	blx	r5
    state_ = NEXT;
   b703a:	2301      	movs	r3, #1
   b703c:	7123      	strb	r3, [r4, #4]
}
   b703e:	4620      	mov	r0, r4
   b7040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7042:	bf00      	nop
   b7044:	000b86f7 	.word	0x000b86f7

000b7048 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b704c:	460d      	mov	r5, r1
    write('"');
   b704e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7050:	4690      	mov	r8, r2
   b7052:	4604      	mov	r4, r0
    write('"');
   b7054:	f7ff ffa4 	bl	b6fa0 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
   b7058:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7100 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b705c:	44a8      	add	r8, r5
    const char *s = str;
   b705e:	462f      	mov	r7, r5
    while (s != end) {
   b7060:	4547      	cmp	r7, r8
   b7062:	46ba      	mov	sl, r7
   b7064:	d03d      	beq.n	b70e2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b7066:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b706a:	2e22      	cmp	r6, #34	; 0x22
   b706c:	d006      	beq.n	b707c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b706e:	2e5c      	cmp	r6, #92	; 0x5c
   b7070:	d004      	beq.n	b707c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7072:	4630      	mov	r0, r6
   b7074:	f001 f874 	bl	b8160 <isprint>
   b7078:	2800      	cmp	r0, #0
   b707a:	d1f1      	bne.n	b7060 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b707c:	6823      	ldr	r3, [r4, #0]
   b707e:	ebaa 0205 	sub.w	r2, sl, r5
   b7082:	689b      	ldr	r3, [r3, #8]
   b7084:	4629      	mov	r1, r5
   b7086:	4620      	mov	r0, r4
   b7088:	4798      	blx	r3
            write('\\');
   b708a:	215c      	movs	r1, #92	; 0x5c
   b708c:	4620      	mov	r0, r4
   b708e:	f7ff ff87 	bl	b6fa0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b7092:	2e0d      	cmp	r6, #13
   b7094:	d80a      	bhi.n	b70ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7096:	2e07      	cmp	r6, #7
   b7098:	d91c      	bls.n	b70d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b709a:	f1a6 0308 	sub.w	r3, r6, #8
   b709e:	2b05      	cmp	r3, #5
   b70a0:	d818      	bhi.n	b70d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b70a2:	e8df f003 	tbb	[pc, r3]
   b70a6:	0f0d      	.short	0x0f0d
   b70a8:	15131711 	.word	0x15131711
   b70ac:	2e22      	cmp	r6, #34	; 0x22
   b70ae:	d001      	beq.n	b70b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b70b0:	2e5c      	cmp	r6, #92	; 0x5c
   b70b2:	d10f      	bne.n	b70d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b70b4:	4631      	mov	r1, r6
                write('b');
   b70b6:	4620      	mov	r0, r4
   b70b8:	f7ff ff72 	bl	b6fa0 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   b70bc:	463d      	mov	r5, r7
    while (s != end) {
   b70be:	e7cf      	b.n	b7060 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b70c0:	2162      	movs	r1, #98	; 0x62
   b70c2:	e7f8      	b.n	b70b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b70c4:	2174      	movs	r1, #116	; 0x74
   b70c6:	e7f6      	b.n	b70b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b70c8:	216e      	movs	r1, #110	; 0x6e
   b70ca:	e7f4      	b.n	b70b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b70cc:	2166      	movs	r1, #102	; 0x66
   b70ce:	e7f2      	b.n	b70b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b70d0:	2172      	movs	r1, #114	; 0x72
   b70d2:	e7f0      	b.n	b70b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b70d4:	6823      	ldr	r3, [r4, #0]
   b70d6:	4632      	mov	r2, r6
   b70d8:	68db      	ldr	r3, [r3, #12]
   b70da:	4649      	mov	r1, r9
   b70dc:	4620      	mov	r0, r4
   b70de:	4798      	blx	r3
                break;
   b70e0:	e7ec      	b.n	b70bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
   b70e2:	42bd      	cmp	r5, r7
   b70e4:	d005      	beq.n	b70f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b70e6:	6823      	ldr	r3, [r4, #0]
   b70e8:	1b7a      	subs	r2, r7, r5
   b70ea:	689b      	ldr	r3, [r3, #8]
   b70ec:	4629      	mov	r1, r5
   b70ee:	4620      	mov	r0, r4
   b70f0:	4798      	blx	r3
    write('"');
   b70f2:	2122      	movs	r1, #34	; 0x22
   b70f4:	4620      	mov	r0, r4
   b70f6:	f7ff ff53 	bl	b6fa0 <_ZN5spark10JSONWriter5writeEc>
}
   b70fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b70fe:	bf00      	nop
   b7100:	000b86fa 	.word	0x000b86fa

000b7104 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7104:	b513      	push	{r0, r1, r4, lr}
   b7106:	4604      	mov	r4, r0
   b7108:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b710c:	f7ff ff5d 	bl	b6fca <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b7110:	4620      	mov	r0, r4
   b7112:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7116:	f7ff ff97 	bl	b7048 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b711a:	2302      	movs	r3, #2
}
   b711c:	4620      	mov	r0, r4
    state_ = VALUE;
   b711e:	7123      	strb	r3, [r4, #4]
}
   b7120:	b002      	add	sp, #8
   b7122:	bd10      	pop	{r4, pc}

000b7124 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7124:	b513      	push	{r0, r1, r4, lr}
   b7126:	4604      	mov	r4, r0
   b7128:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b712c:	f7ff ff4d 	bl	b6fca <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b7130:	4620      	mov	r0, r4
   b7132:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7136:	f7ff ff87 	bl	b7048 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b713a:	2301      	movs	r3, #1
}
   b713c:	4620      	mov	r0, r4
    state_ = NEXT;
   b713e:	7123      	strb	r3, [r4, #4]
}
   b7140:	b002      	add	sp, #8
   b7142:	bd10      	pop	{r4, pc}

000b7144 <pinAvailable>:
>>>>>>> collate-readings
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
<<<<<<< HEAD
   b6f04:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6f06:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6f08:	d902      	bls.n	b6f10 <pinAvailable+0xc>
    return false;
   b6f0a:	2000      	movs	r0, #0
=======
   b7144:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7146:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7148:	d902      	bls.n	b7150 <pinAvailable+0xc>
    return false;
   b714a:	2000      	movs	r0, #0
>>>>>>> collate-readings
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
<<<<<<< HEAD
   b6f0c:	b002      	add	sp, #8
   b6f0e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6f10:	f1a0 030b 	sub.w	r3, r0, #11
   b6f14:	2b02      	cmp	r3, #2
   b6f16:	d81a      	bhi.n	b6f4e <pinAvailable+0x4a>
=======
   b714c:	b002      	add	sp, #8
   b714e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7150:	f1a0 030b 	sub.w	r3, r0, #11
   b7154:	2b02      	cmp	r3, #2
   b7156:	d81a      	bhi.n	b718e <pinAvailable+0x4a>
>>>>>>> collate-readings

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
<<<<<<< HEAD
   b6f18:	4c17      	ldr	r4, [pc, #92]	; (b6f78 <pinAvailable+0x74>)
   b6f1a:	7821      	ldrb	r1, [r4, #0]
   b6f1c:	f3bf 8f5b 	dmb	ish
   b6f20:	f011 0101 	ands.w	r1, r1, #1
   b6f24:	d10b      	bne.n	b6f3e <pinAvailable+0x3a>
   b6f26:	4620      	mov	r0, r4
   b6f28:	9101      	str	r1, [sp, #4]
   b6f2a:	f7fd f8ba 	bl	b40a2 <__cxa_guard_acquire>
   b6f2e:	9901      	ldr	r1, [sp, #4]
   b6f30:	b128      	cbz	r0, b6f3e <pinAvailable+0x3a>
   b6f32:	4812      	ldr	r0, [pc, #72]	; (b6f7c <pinAvailable+0x78>)
   b6f34:	f7fe fd7c 	bl	b5a30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6f38:	4620      	mov	r0, r4
   b6f3a:	f7fd f8b7 	bl	b40ac <__cxa_guard_release>
   b6f3e:	4b0f      	ldr	r3, [pc, #60]	; (b6f7c <pinAvailable+0x78>)
   b6f40:	7818      	ldrb	r0, [r3, #0]
   b6f42:	f7fe fb9d 	bl	b5680 <hal_spi_is_enabled>
   b6f46:	2800      	cmp	r0, #0
   b6f48:	d1df      	bne.n	b6f0a <pinAvailable+0x6>
  return true; // 'pin' is available
   b6f4a:	2001      	movs	r0, #1
   b6f4c:	e7de      	b.n	b6f0c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6f4e:	2801      	cmp	r0, #1
   b6f50:	d809      	bhi.n	b6f66 <pinAvailable+0x62>
   b6f52:	f000 f8a9 	bl	b70a8 <_Z19__fetch_global_Wirev>
   b6f56:	2100      	movs	r1, #0
   b6f58:	7c00      	ldrb	r0, [r0, #16]
   b6f5a:	f7fe fb61 	bl	b5620 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6f5e:	f080 0001 	eor.w	r0, r0, #1
   b6f62:	b2c0      	uxtb	r0, r0
   b6f64:	e7d2      	b.n	b6f0c <pinAvailable+0x8>
   b6f66:	3809      	subs	r0, #9
   b6f68:	2801      	cmp	r0, #1
   b6f6a:	d8ee      	bhi.n	b6f4a <pinAvailable+0x46>
   b6f6c:	f000 f860 	bl	b7030 <_Z22__fetch_global_Serial1v>
   b6f70:	7c00      	ldrb	r0, [r0, #16]
   b6f72:	f7fe fafd 	bl	b5570 <hal_usart_is_enabled>
   b6f76:	e7f2      	b.n	b6f5e <pinAvailable+0x5a>
   b6f78:	2003e6a0 	.word	0x2003e6a0
   b6f7c:	2003e6a4 	.word	0x2003e6a4

000b6f80 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6f80:	2823      	cmp	r0, #35	; 0x23
{
   b6f82:	b538      	push	{r3, r4, r5, lr}
   b6f84:	4604      	mov	r4, r0
   b6f86:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6f88:	d80a      	bhi.n	b6fa0 <pinMode+0x20>
   b6f8a:	29ff      	cmp	r1, #255	; 0xff
   b6f8c:	d008      	beq.n	b6fa0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6f8e:	f7ff ffb9 	bl	b6f04 <pinAvailable>
   b6f92:	b128      	cbz	r0, b6fa0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6f94:	4629      	mov	r1, r5
   b6f96:	4620      	mov	r0, r4
}
   b6f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6f9c:	f7fe ba70 	b.w	b5480 <HAL_Pin_Mode>
}
   b6fa0:	bd38      	pop	{r3, r4, r5, pc}

000b6fa2 <digitalWrite>:
=======
   b7158:	4c17      	ldr	r4, [pc, #92]	; (b71b8 <pinAvailable+0x74>)
   b715a:	7821      	ldrb	r1, [r4, #0]
   b715c:	f3bf 8f5b 	dmb	ish
   b7160:	f011 0101 	ands.w	r1, r1, #1
   b7164:	d10b      	bne.n	b717e <pinAvailable+0x3a>
   b7166:	4620      	mov	r0, r4
   b7168:	9101      	str	r1, [sp, #4]
   b716a:	f7fc ff9a 	bl	b40a2 <__cxa_guard_acquire>
   b716e:	9901      	ldr	r1, [sp, #4]
   b7170:	b128      	cbz	r0, b717e <pinAvailable+0x3a>
   b7172:	4812      	ldr	r0, [pc, #72]	; (b71bc <pinAvailable+0x78>)
   b7174:	f7fe fd76 	bl	b5c64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7178:	4620      	mov	r0, r4
   b717a:	f7fc ff97 	bl	b40ac <__cxa_guard_release>
   b717e:	4b0f      	ldr	r3, [pc, #60]	; (b71bc <pinAvailable+0x78>)
   b7180:	7818      	ldrb	r0, [r3, #0]
   b7182:	f7fe fb67 	bl	b5854 <hal_spi_is_enabled>
   b7186:	2800      	cmp	r0, #0
   b7188:	d1df      	bne.n	b714a <pinAvailable+0x6>
  return true; // 'pin' is available
   b718a:	2001      	movs	r0, #1
   b718c:	e7de      	b.n	b714c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b718e:	2801      	cmp	r0, #1
   b7190:	d809      	bhi.n	b71a6 <pinAvailable+0x62>
   b7192:	f000 f8a9 	bl	b72e8 <_Z19__fetch_global_Wirev>
   b7196:	2100      	movs	r1, #0
   b7198:	7c00      	ldrb	r0, [r0, #16]
   b719a:	f7fe fb2b 	bl	b57f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b719e:	f080 0001 	eor.w	r0, r0, #1
   b71a2:	b2c0      	uxtb	r0, r0
   b71a4:	e7d2      	b.n	b714c <pinAvailable+0x8>
   b71a6:	3809      	subs	r0, #9
   b71a8:	2801      	cmp	r0, #1
   b71aa:	d8ee      	bhi.n	b718a <pinAvailable+0x46>
   b71ac:	f000 f860 	bl	b7270 <_Z22__fetch_global_Serial1v>
   b71b0:	7c00      	ldrb	r0, [r0, #16]
   b71b2:	f7fe fac7 	bl	b5744 <hal_usart_is_enabled>
   b71b6:	e7f2      	b.n	b719e <pinAvailable+0x5a>
   b71b8:	2003e6a4 	.word	0x2003e6a4
   b71bc:	2003e6a8 	.word	0x2003e6a8

000b71c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b71c0:	2823      	cmp	r0, #35	; 0x23
{
   b71c2:	b538      	push	{r3, r4, r5, lr}
   b71c4:	4604      	mov	r4, r0
   b71c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b71c8:	d80a      	bhi.n	b71e0 <pinMode+0x20>
   b71ca:	29ff      	cmp	r1, #255	; 0xff
   b71cc:	d008      	beq.n	b71e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b71ce:	f7ff ffb9 	bl	b7144 <pinAvailable>
   b71d2:	b128      	cbz	r0, b71e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b71d4:	4629      	mov	r1, r5
   b71d6:	4620      	mov	r0, r4
}
   b71d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b71dc:	f7fe ba3a 	b.w	b5654 <HAL_Pin_Mode>
}
   b71e0:	bd38      	pop	{r3, r4, r5, pc}

000b71e2 <digitalWrite>:
>>>>>>> collate-readings

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
<<<<<<< HEAD
   b6fa2:	b538      	push	{r3, r4, r5, lr}
   b6fa4:	4604      	mov	r4, r0
   b6fa6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6fa8:	f7fe fa72 	bl	b5490 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6fac:	28ff      	cmp	r0, #255	; 0xff
   b6fae:	d010      	beq.n	b6fd2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6fb0:	2806      	cmp	r0, #6
   b6fb2:	d804      	bhi.n	b6fbe <digitalWrite+0x1c>
   b6fb4:	234d      	movs	r3, #77	; 0x4d
   b6fb6:	fa23 f000 	lsr.w	r0, r3, r0
   b6fba:	07c3      	lsls	r3, r0, #31
   b6fbc:	d409      	bmi.n	b6fd2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	f7ff ffa0 	bl	b6f04 <pinAvailable>
   b6fc4:	b128      	cbz	r0, b6fd2 <digitalWrite+0x30>
=======
   b71e2:	b538      	push	{r3, r4, r5, lr}
   b71e4:	4604      	mov	r4, r0
   b71e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b71e8:	f7fe fa3c 	bl	b5664 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b71ec:	28ff      	cmp	r0, #255	; 0xff
   b71ee:	d010      	beq.n	b7212 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b71f0:	2806      	cmp	r0, #6
   b71f2:	d804      	bhi.n	b71fe <digitalWrite+0x1c>
   b71f4:	234d      	movs	r3, #77	; 0x4d
   b71f6:	fa23 f000 	lsr.w	r0, r3, r0
   b71fa:	07c3      	lsls	r3, r0, #31
   b71fc:	d409      	bmi.n	b7212 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b71fe:	4620      	mov	r0, r4
   b7200:	f7ff ffa0 	bl	b7144 <pinAvailable>
   b7204:	b128      	cbz	r0, b7212 <digitalWrite+0x30>
>>>>>>> collate-readings
    return;
  }

  HAL_GPIO_Write(pin, value);
<<<<<<< HEAD
   b6fc6:	4629      	mov	r1, r5
   b6fc8:	4620      	mov	r0, r4
}
   b6fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6fce:	f7fe ba67 	b.w	b54a0 <HAL_GPIO_Write>
}
   b6fd2:	bd38      	pop	{r3, r4, r5, pc}

000b6fd4 <digitalRead>:
=======
   b7206:	4629      	mov	r1, r5
   b7208:	4620      	mov	r0, r4
}
   b720a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b720e:	f7fe ba31 	b.w	b5674 <HAL_GPIO_Write>
}
   b7212:	bd38      	pop	{r3, r4, r5, pc}

000b7214 <digitalRead>:
>>>>>>> collate-readings

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
<<<<<<< HEAD
   b6fd4:	b510      	push	{r4, lr}
   b6fd6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6fd8:	f7fe fa5a 	bl	b5490 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6fdc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6fde:	b2db      	uxtb	r3, r3
   b6fe0:	2b01      	cmp	r3, #1
   b6fe2:	d908      	bls.n	b6ff6 <digitalRead+0x22>
=======
   b7214:	b510      	push	{r4, lr}
   b7216:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7218:	f7fe fa24 	bl	b5664 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b721c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b721e:	b2db      	uxtb	r3, r3
   b7220:	2b01      	cmp	r3, #1
   b7222:	d908      	bls.n	b7236 <digitalRead+0x22>
>>>>>>> collate-readings
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
<<<<<<< HEAD
   b6fe4:	4620      	mov	r0, r4
   b6fe6:	f7ff ff8d 	bl	b6f04 <pinAvailable>
   b6fea:	b120      	cbz	r0, b6ff6 <digitalRead+0x22>
=======
   b7224:	4620      	mov	r0, r4
   b7226:	f7ff ff8d 	bl	b7144 <pinAvailable>
   b722a:	b120      	cbz	r0, b7236 <digitalRead+0x22>
>>>>>>> collate-readings
      return LOW;
    }

    return HAL_GPIO_Read(pin);
<<<<<<< HEAD
   b6fec:	4620      	mov	r0, r4
}
   b6fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6ff2:	f7fe ba5d 	b.w	b54b0 <HAL_GPIO_Read>
}
   b6ff6:	2000      	movs	r0, #0
   b6ff8:	bd10      	pop	{r4, pc}

000b6ffa <__tcf_0>:
=======
   b722c:	4620      	mov	r0, r4
}
   b722e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7232:	f7fe ba27 	b.w	b5684 <HAL_GPIO_Read>
}
   b7236:	2000      	movs	r0, #0
   b7238:	bd10      	pop	{r4, pc}

000b723a <__tcf_0>:
>>>>>>> collate-readings
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
<<<<<<< HEAD
   b6ffa:	4770      	bx	lr

000b6ffc <_Z20acquireSerial1Bufferv>:
{
   b6ffc:	b538      	push	{r3, r4, r5, lr}
   b6ffe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7000:	2514      	movs	r5, #20
   b7002:	462a      	mov	r2, r5
   b7004:	2100      	movs	r1, #0
   b7006:	f000 ffa1 	bl	b7f4c <memset>
   b700a:	8025      	strh	r5, [r4, #0]
   b700c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b700e:	4907      	ldr	r1, [pc, #28]	; (b702c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7010:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7012:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7014:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7016:	f000 f86b 	bl	b70f0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b701a:	4904      	ldr	r1, [pc, #16]	; (b702c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b701c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b701e:	4628      	mov	r0, r5
   b7020:	f000 f866 	bl	b70f0 <_ZnajRKSt9nothrow_t>
    };
   b7024:	60e0      	str	r0, [r4, #12]
}
   b7026:	4620      	mov	r0, r4
   b7028:	bd38      	pop	{r3, r4, r5, pc}
   b702a:	bf00      	nop
   b702c:	000b84b0 	.word	0x000b84b0

000b7030 <_Z22__fetch_global_Serial1v>:
{
   b7030:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7032:	4d0e      	ldr	r5, [pc, #56]	; (b706c <_Z22__fetch_global_Serial1v+0x3c>)
   b7034:	7829      	ldrb	r1, [r5, #0]
   b7036:	f3bf 8f5b 	dmb	ish
   b703a:	f011 0401 	ands.w	r4, r1, #1
{
   b703e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7040:	d111      	bne.n	b7066 <_Z22__fetch_global_Serial1v+0x36>
   b7042:	4628      	mov	r0, r5
   b7044:	f7fd f82d 	bl	b40a2 <__cxa_guard_acquire>
   b7048:	b168      	cbz	r0, b7066 <_Z22__fetch_global_Serial1v+0x36>
   b704a:	a801      	add	r0, sp, #4
   b704c:	f7ff ffd6 	bl	b6ffc <_Z20acquireSerial1Bufferv>
   b7050:	aa01      	add	r2, sp, #4
   b7052:	4621      	mov	r1, r4
   b7054:	4806      	ldr	r0, [pc, #24]	; (b7070 <_Z22__fetch_global_Serial1v+0x40>)
   b7056:	f7ff fcc3 	bl	b69e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b705a:	4628      	mov	r0, r5
   b705c:	f7fd f826 	bl	b40ac <__cxa_guard_release>
   b7060:	4804      	ldr	r0, [pc, #16]	; (b7074 <_Z22__fetch_global_Serial1v+0x44>)
   b7062:	f000 ff57 	bl	b7f14 <atexit>
    return serial1;
}
   b7066:	4802      	ldr	r0, [pc, #8]	; (b7070 <_Z22__fetch_global_Serial1v+0x40>)
   b7068:	b007      	add	sp, #28
   b706a:	bd30      	pop	{r4, r5, pc}
   b706c:	2003e728 	.word	0x2003e728
   b7070:	2003e72c 	.word	0x2003e72c
   b7074:	000b6ffb 	.word	0x000b6ffb

000b7078 <__tcf_0>:
=======
   b723a:	4770      	bx	lr

000b723c <_Z20acquireSerial1Bufferv>:
{
   b723c:	b538      	push	{r3, r4, r5, lr}
   b723e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7240:	2514      	movs	r5, #20
   b7242:	462a      	mov	r2, r5
   b7244:	2100      	movs	r1, #0
   b7246:	f000 ffa1 	bl	b818c <memset>
   b724a:	8025      	strh	r5, [r4, #0]
   b724c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b724e:	4907      	ldr	r1, [pc, #28]	; (b726c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7250:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7252:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7254:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7256:	f000 f86b 	bl	b7330 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b725a:	4904      	ldr	r1, [pc, #16]	; (b726c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b725c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b725e:	4628      	mov	r0, r5
   b7260:	f000 f866 	bl	b7330 <_ZnajRKSt9nothrow_t>
    };
   b7264:	60e0      	str	r0, [r4, #12]
}
   b7266:	4620      	mov	r0, r4
   b7268:	bd38      	pop	{r3, r4, r5, pc}
   b726a:	bf00      	nop
   b726c:	000b8718 	.word	0x000b8718

000b7270 <_Z22__fetch_global_Serial1v>:
{
   b7270:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7272:	4d0e      	ldr	r5, [pc, #56]	; (b72ac <_Z22__fetch_global_Serial1v+0x3c>)
   b7274:	7829      	ldrb	r1, [r5, #0]
   b7276:	f3bf 8f5b 	dmb	ish
   b727a:	f011 0401 	ands.w	r4, r1, #1
{
   b727e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7280:	d111      	bne.n	b72a6 <_Z22__fetch_global_Serial1v+0x36>
   b7282:	4628      	mov	r0, r5
   b7284:	f7fc ff0d 	bl	b40a2 <__cxa_guard_acquire>
   b7288:	b168      	cbz	r0, b72a6 <_Z22__fetch_global_Serial1v+0x36>
   b728a:	a801      	add	r0, sp, #4
   b728c:	f7ff ffd6 	bl	b723c <_Z20acquireSerial1Bufferv>
   b7290:	aa01      	add	r2, sp, #4
   b7292:	4621      	mov	r1, r4
   b7294:	4806      	ldr	r0, [pc, #24]	; (b72b0 <_Z22__fetch_global_Serial1v+0x40>)
   b7296:	f7ff fcb9 	bl	b6c0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b729a:	4628      	mov	r0, r5
   b729c:	f7fc ff06 	bl	b40ac <__cxa_guard_release>
   b72a0:	4804      	ldr	r0, [pc, #16]	; (b72b4 <_Z22__fetch_global_Serial1v+0x44>)
   b72a2:	f000 ff57 	bl	b8154 <atexit>
    return serial1;
}
   b72a6:	4802      	ldr	r0, [pc, #8]	; (b72b0 <_Z22__fetch_global_Serial1v+0x40>)
   b72a8:	b007      	add	sp, #28
   b72aa:	bd30      	pop	{r4, r5, pc}
   b72ac:	2003e728 	.word	0x2003e728
   b72b0:	2003e72c 	.word	0x2003e72c
   b72b4:	000b723b 	.word	0x000b723b

000b72b8 <__tcf_0>:
>>>>>>> collate-readings
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
<<<<<<< HEAD
   b7078:	4770      	bx	lr
	...

000b707c <_Z17acquireWireBufferv>:
{
   b707c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b707e:	2520      	movs	r5, #32
   b7080:	2314      	movs	r3, #20
{
   b7082:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7084:	6003      	str	r3, [r0, #0]
   b7086:	6085      	str	r5, [r0, #8]
   b7088:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b708a:	4906      	ldr	r1, [pc, #24]	; (b70a4 <_Z17acquireWireBufferv+0x28>)
   b708c:	4628      	mov	r0, r5
   b708e:	f000 f82f 	bl	b70f0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7092:	4904      	ldr	r1, [pc, #16]	; (b70a4 <_Z17acquireWireBufferv+0x28>)
	};
   b7094:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7096:	4628      	mov	r0, r5
   b7098:	f000 f82a 	bl	b70f0 <_ZnajRKSt9nothrow_t>
	};
   b709c:	60e0      	str	r0, [r4, #12]
}
   b709e:	4620      	mov	r0, r4
   b70a0:	bd38      	pop	{r3, r4, r5, pc}
   b70a2:	bf00      	nop
   b70a4:	000b84b0 	.word	0x000b84b0

000b70a8 <_Z19__fetch_global_Wirev>:
{
   b70a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70aa:	4d0e      	ldr	r5, [pc, #56]	; (b70e4 <_Z19__fetch_global_Wirev+0x3c>)
   b70ac:	7829      	ldrb	r1, [r5, #0]
   b70ae:	f3bf 8f5b 	dmb	ish
   b70b2:	f011 0401 	ands.w	r4, r1, #1
{
   b70b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70b8:	d111      	bne.n	b70de <_Z19__fetch_global_Wirev+0x36>
   b70ba:	4628      	mov	r0, r5
   b70bc:	f7fc fff1 	bl	b40a2 <__cxa_guard_acquire>
   b70c0:	b168      	cbz	r0, b70de <_Z19__fetch_global_Wirev+0x36>
   b70c2:	a801      	add	r0, sp, #4
   b70c4:	f7ff ffda 	bl	b707c <_Z17acquireWireBufferv>
   b70c8:	aa01      	add	r2, sp, #4
   b70ca:	4621      	mov	r1, r4
   b70cc:	4806      	ldr	r0, [pc, #24]	; (b70e8 <_Z19__fetch_global_Wirev+0x40>)
   b70ce:	f7ff fcdb 	bl	b6a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b70d2:	4628      	mov	r0, r5
   b70d4:	f7fc ffea 	bl	b40ac <__cxa_guard_release>
   b70d8:	4804      	ldr	r0, [pc, #16]	; (b70ec <_Z19__fetch_global_Wirev+0x44>)
   b70da:	f000 ff1b 	bl	b7f14 <atexit>
	return wire;
}
   b70de:	4802      	ldr	r0, [pc, #8]	; (b70e8 <_Z19__fetch_global_Wirev+0x40>)
   b70e0:	b007      	add	sp, #28
   b70e2:	bd30      	pop	{r4, r5, pc}
   b70e4:	2003e744 	.word	0x2003e744
   b70e8:	2003e748 	.word	0x2003e748
   b70ec:	000b7079 	.word	0x000b7079

000b70f0 <_ZnajRKSt9nothrow_t>:
   b70f0:	f7fc bfd3 	b.w	b409a <_Znaj>

000b70f4 <_ZSt25__throw_bad_function_callv>:
   b70f4:	b508      	push	{r3, lr}
   b70f6:	f7fe fc27 	bl	b5948 <abort>
	...

000b70fc <__aeabi_drsub>:
   b70fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7100:	e002      	b.n	b7108 <__adddf3>
   b7102:	bf00      	nop

000b7104 <__aeabi_dsub>:
   b7104:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7108 <__adddf3>:
   b7108:	b530      	push	{r4, r5, lr}
   b710a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b710e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7112:	ea94 0f05 	teq	r4, r5
   b7116:	bf08      	it	eq
   b7118:	ea90 0f02 	teqeq	r0, r2
   b711c:	bf1f      	itttt	ne
   b711e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7122:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7126:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b712a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b712e:	f000 80e2 	beq.w	b72f6 <__adddf3+0x1ee>
   b7132:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7136:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b713a:	bfb8      	it	lt
   b713c:	426d      	neglt	r5, r5
   b713e:	dd0c      	ble.n	b715a <__adddf3+0x52>
   b7140:	442c      	add	r4, r5
   b7142:	ea80 0202 	eor.w	r2, r0, r2
   b7146:	ea81 0303 	eor.w	r3, r1, r3
   b714a:	ea82 0000 	eor.w	r0, r2, r0
   b714e:	ea83 0101 	eor.w	r1, r3, r1
   b7152:	ea80 0202 	eor.w	r2, r0, r2
   b7156:	ea81 0303 	eor.w	r3, r1, r3
   b715a:	2d36      	cmp	r5, #54	; 0x36
   b715c:	bf88      	it	hi
   b715e:	bd30      	pophi	{r4, r5, pc}
   b7160:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7164:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7168:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b716c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7170:	d002      	beq.n	b7178 <__adddf3+0x70>
   b7172:	4240      	negs	r0, r0
   b7174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7178:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b717c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7180:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7184:	d002      	beq.n	b718c <__adddf3+0x84>
   b7186:	4252      	negs	r2, r2
   b7188:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b718c:	ea94 0f05 	teq	r4, r5
   b7190:	f000 80a7 	beq.w	b72e2 <__adddf3+0x1da>
   b7194:	f1a4 0401 	sub.w	r4, r4, #1
   b7198:	f1d5 0e20 	rsbs	lr, r5, #32
   b719c:	db0d      	blt.n	b71ba <__adddf3+0xb2>
   b719e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b71a2:	fa22 f205 	lsr.w	r2, r2, r5
   b71a6:	1880      	adds	r0, r0, r2
   b71a8:	f141 0100 	adc.w	r1, r1, #0
   b71ac:	fa03 f20e 	lsl.w	r2, r3, lr
   b71b0:	1880      	adds	r0, r0, r2
   b71b2:	fa43 f305 	asr.w	r3, r3, r5
   b71b6:	4159      	adcs	r1, r3
   b71b8:	e00e      	b.n	b71d8 <__adddf3+0xd0>
   b71ba:	f1a5 0520 	sub.w	r5, r5, #32
   b71be:	f10e 0e20 	add.w	lr, lr, #32
   b71c2:	2a01      	cmp	r2, #1
   b71c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b71c8:	bf28      	it	cs
   b71ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   b71ce:	fa43 f305 	asr.w	r3, r3, r5
   b71d2:	18c0      	adds	r0, r0, r3
   b71d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b71d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b71dc:	d507      	bpl.n	b71ee <__adddf3+0xe6>
   b71de:	f04f 0e00 	mov.w	lr, #0
   b71e2:	f1dc 0c00 	rsbs	ip, ip, #0
   b71e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b71ea:	eb6e 0101 	sbc.w	r1, lr, r1
   b71ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b71f2:	d31b      	bcc.n	b722c <__adddf3+0x124>
   b71f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b71f8:	d30c      	bcc.n	b7214 <__adddf3+0x10c>
   b71fa:	0849      	lsrs	r1, r1, #1
   b71fc:	ea5f 0030 	movs.w	r0, r0, rrx
   b7200:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7204:	f104 0401 	add.w	r4, r4, #1
   b7208:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b720c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7210:	f080 809a 	bcs.w	b7348 <__adddf3+0x240>
   b7214:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7218:	bf08      	it	eq
   b721a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b721e:	f150 0000 	adcs.w	r0, r0, #0
   b7222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7226:	ea41 0105 	orr.w	r1, r1, r5
   b722a:	bd30      	pop	{r4, r5, pc}
   b722c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7230:	4140      	adcs	r0, r0
   b7232:	eb41 0101 	adc.w	r1, r1, r1
   b7236:	3c01      	subs	r4, #1
   b7238:	bf28      	it	cs
   b723a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b723e:	d2e9      	bcs.n	b7214 <__adddf3+0x10c>
   b7240:	f091 0f00 	teq	r1, #0
   b7244:	bf04      	itt	eq
   b7246:	4601      	moveq	r1, r0
   b7248:	2000      	moveq	r0, #0
   b724a:	fab1 f381 	clz	r3, r1
   b724e:	bf08      	it	eq
   b7250:	3320      	addeq	r3, #32
   b7252:	f1a3 030b 	sub.w	r3, r3, #11
   b7256:	f1b3 0220 	subs.w	r2, r3, #32
   b725a:	da0c      	bge.n	b7276 <__adddf3+0x16e>
   b725c:	320c      	adds	r2, #12
   b725e:	dd08      	ble.n	b7272 <__adddf3+0x16a>
   b7260:	f102 0c14 	add.w	ip, r2, #20
   b7264:	f1c2 020c 	rsb	r2, r2, #12
   b7268:	fa01 f00c 	lsl.w	r0, r1, ip
   b726c:	fa21 f102 	lsr.w	r1, r1, r2
   b7270:	e00c      	b.n	b728c <__adddf3+0x184>
   b7272:	f102 0214 	add.w	r2, r2, #20
   b7276:	bfd8      	it	le
   b7278:	f1c2 0c20 	rsble	ip, r2, #32
   b727c:	fa01 f102 	lsl.w	r1, r1, r2
   b7280:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7284:	bfdc      	itt	le
   b7286:	ea41 010c 	orrle.w	r1, r1, ip
   b728a:	4090      	lslle	r0, r2
   b728c:	1ae4      	subs	r4, r4, r3
   b728e:	bfa2      	ittt	ge
   b7290:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7294:	4329      	orrge	r1, r5
   b7296:	bd30      	popge	{r4, r5, pc}
   b7298:	ea6f 0404 	mvn.w	r4, r4
   b729c:	3c1f      	subs	r4, #31
   b729e:	da1c      	bge.n	b72da <__adddf3+0x1d2>
   b72a0:	340c      	adds	r4, #12
   b72a2:	dc0e      	bgt.n	b72c2 <__adddf3+0x1ba>
   b72a4:	f104 0414 	add.w	r4, r4, #20
   b72a8:	f1c4 0220 	rsb	r2, r4, #32
   b72ac:	fa20 f004 	lsr.w	r0, r0, r4
   b72b0:	fa01 f302 	lsl.w	r3, r1, r2
   b72b4:	ea40 0003 	orr.w	r0, r0, r3
   b72b8:	fa21 f304 	lsr.w	r3, r1, r4
   b72bc:	ea45 0103 	orr.w	r1, r5, r3
   b72c0:	bd30      	pop	{r4, r5, pc}
   b72c2:	f1c4 040c 	rsb	r4, r4, #12
   b72c6:	f1c4 0220 	rsb	r2, r4, #32
   b72ca:	fa20 f002 	lsr.w	r0, r0, r2
   b72ce:	fa01 f304 	lsl.w	r3, r1, r4
   b72d2:	ea40 0003 	orr.w	r0, r0, r3
   b72d6:	4629      	mov	r1, r5
   b72d8:	bd30      	pop	{r4, r5, pc}
   b72da:	fa21 f004 	lsr.w	r0, r1, r4
   b72de:	4629      	mov	r1, r5
   b72e0:	bd30      	pop	{r4, r5, pc}
   b72e2:	f094 0f00 	teq	r4, #0
   b72e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b72ea:	bf06      	itte	eq
   b72ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b72f0:	3401      	addeq	r4, #1
   b72f2:	3d01      	subne	r5, #1
   b72f4:	e74e      	b.n	b7194 <__adddf3+0x8c>
   b72f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b72fa:	bf18      	it	ne
   b72fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7300:	d029      	beq.n	b7356 <__adddf3+0x24e>
   b7302:	ea94 0f05 	teq	r4, r5
   b7306:	bf08      	it	eq
   b7308:	ea90 0f02 	teqeq	r0, r2
   b730c:	d005      	beq.n	b731a <__adddf3+0x212>
   b730e:	ea54 0c00 	orrs.w	ip, r4, r0
   b7312:	bf04      	itt	eq
   b7314:	4619      	moveq	r1, r3
   b7316:	4610      	moveq	r0, r2
   b7318:	bd30      	pop	{r4, r5, pc}
   b731a:	ea91 0f03 	teq	r1, r3
   b731e:	bf1e      	ittt	ne
   b7320:	2100      	movne	r1, #0
   b7322:	2000      	movne	r0, #0
   b7324:	bd30      	popne	{r4, r5, pc}
   b7326:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b732a:	d105      	bne.n	b7338 <__adddf3+0x230>
   b732c:	0040      	lsls	r0, r0, #1
   b732e:	4149      	adcs	r1, r1
   b7330:	bf28      	it	cs
   b7332:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7336:	bd30      	pop	{r4, r5, pc}
   b7338:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b733c:	bf3c      	itt	cc
   b733e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7342:	bd30      	popcc	{r4, r5, pc}
   b7344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7348:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b734c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7350:	f04f 0000 	mov.w	r0, #0
   b7354:	bd30      	pop	{r4, r5, pc}
   b7356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b735a:	bf1a      	itte	ne
   b735c:	4619      	movne	r1, r3
   b735e:	4610      	movne	r0, r2
   b7360:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7364:	bf1c      	itt	ne
   b7366:	460b      	movne	r3, r1
   b7368:	4602      	movne	r2, r0
   b736a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b736e:	bf06      	itte	eq
   b7370:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7374:	ea91 0f03 	teqeq	r1, r3
   b7378:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b737c:	bd30      	pop	{r4, r5, pc}
   b737e:	bf00      	nop

000b7380 <__aeabi_ui2d>:
   b7380:	f090 0f00 	teq	r0, #0
   b7384:	bf04      	itt	eq
   b7386:	2100      	moveq	r1, #0
   b7388:	4770      	bxeq	lr
   b738a:	b530      	push	{r4, r5, lr}
   b738c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7390:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7394:	f04f 0500 	mov.w	r5, #0
   b7398:	f04f 0100 	mov.w	r1, #0
   b739c:	e750      	b.n	b7240 <__adddf3+0x138>
   b739e:	bf00      	nop

000b73a0 <__aeabi_i2d>:
   b73a0:	f090 0f00 	teq	r0, #0
   b73a4:	bf04      	itt	eq
   b73a6:	2100      	moveq	r1, #0
   b73a8:	4770      	bxeq	lr
   b73aa:	b530      	push	{r4, r5, lr}
   b73ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b73b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b73b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b73b8:	bf48      	it	mi
   b73ba:	4240      	negmi	r0, r0
   b73bc:	f04f 0100 	mov.w	r1, #0
   b73c0:	e73e      	b.n	b7240 <__adddf3+0x138>
   b73c2:	bf00      	nop

000b73c4 <__aeabi_f2d>:
   b73c4:	0042      	lsls	r2, r0, #1
   b73c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b73ca:	ea4f 0131 	mov.w	r1, r1, rrx
   b73ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b73d2:	bf1f      	itttt	ne
   b73d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b73d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b73dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b73e0:	4770      	bxne	lr
   b73e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b73e6:	bf08      	it	eq
   b73e8:	4770      	bxeq	lr
   b73ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b73ee:	bf04      	itt	eq
   b73f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b73f4:	4770      	bxeq	lr
   b73f6:	b530      	push	{r4, r5, lr}
   b73f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b73fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7404:	e71c      	b.n	b7240 <__adddf3+0x138>
   b7406:	bf00      	nop

000b7408 <__aeabi_ul2d>:
   b7408:	ea50 0201 	orrs.w	r2, r0, r1
   b740c:	bf08      	it	eq
   b740e:	4770      	bxeq	lr
   b7410:	b530      	push	{r4, r5, lr}
   b7412:	f04f 0500 	mov.w	r5, #0
   b7416:	e00a      	b.n	b742e <__aeabi_l2d+0x16>

000b7418 <__aeabi_l2d>:
   b7418:	ea50 0201 	orrs.w	r2, r0, r1
   b741c:	bf08      	it	eq
   b741e:	4770      	bxeq	lr
   b7420:	b530      	push	{r4, r5, lr}
   b7422:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7426:	d502      	bpl.n	b742e <__aeabi_l2d+0x16>
   b7428:	4240      	negs	r0, r0
   b742a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b742e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7432:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7436:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b743a:	f43f aed8 	beq.w	b71ee <__adddf3+0xe6>
   b743e:	f04f 0203 	mov.w	r2, #3
   b7442:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7446:	bf18      	it	ne
   b7448:	3203      	addne	r2, #3
   b744a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b744e:	bf18      	it	ne
   b7450:	3203      	addne	r2, #3
   b7452:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7456:	f1c2 0320 	rsb	r3, r2, #32
   b745a:	fa00 fc03 	lsl.w	ip, r0, r3
   b745e:	fa20 f002 	lsr.w	r0, r0, r2
   b7462:	fa01 fe03 	lsl.w	lr, r1, r3
   b7466:	ea40 000e 	orr.w	r0, r0, lr
   b746a:	fa21 f102 	lsr.w	r1, r1, r2
   b746e:	4414      	add	r4, r2
   b7470:	e6bd      	b.n	b71ee <__adddf3+0xe6>
   b7472:	bf00      	nop

000b7474 <__aeabi_dmul>:
   b7474:	b570      	push	{r4, r5, r6, lr}
   b7476:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b747a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b747e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7482:	bf1d      	ittte	ne
   b7484:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7488:	ea94 0f0c 	teqne	r4, ip
   b748c:	ea95 0f0c 	teqne	r5, ip
   b7490:	f000 f8de 	bleq	b7650 <__aeabi_dmul+0x1dc>
   b7494:	442c      	add	r4, r5
   b7496:	ea81 0603 	eor.w	r6, r1, r3
   b749a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b749e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b74a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b74a6:	bf18      	it	ne
   b74a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b74ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b74b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b74b4:	d038      	beq.n	b7528 <__aeabi_dmul+0xb4>
   b74b6:	fba0 ce02 	umull	ip, lr, r0, r2
   b74ba:	f04f 0500 	mov.w	r5, #0
   b74be:	fbe1 e502 	umlal	lr, r5, r1, r2
   b74c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b74c6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b74ca:	f04f 0600 	mov.w	r6, #0
   b74ce:	fbe1 5603 	umlal	r5, r6, r1, r3
   b74d2:	f09c 0f00 	teq	ip, #0
   b74d6:	bf18      	it	ne
   b74d8:	f04e 0e01 	orrne.w	lr, lr, #1
   b74dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b74e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b74e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b74e8:	d204      	bcs.n	b74f4 <__aeabi_dmul+0x80>
   b74ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b74ee:	416d      	adcs	r5, r5
   b74f0:	eb46 0606 	adc.w	r6, r6, r6
   b74f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b74f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b74fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7500:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7504:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7508:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b750c:	bf88      	it	hi
   b750e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7512:	d81e      	bhi.n	b7552 <__aeabi_dmul+0xde>
   b7514:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7518:	bf08      	it	eq
   b751a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b751e:	f150 0000 	adcs.w	r0, r0, #0
   b7522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7526:	bd70      	pop	{r4, r5, r6, pc}
   b7528:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b752c:	ea46 0101 	orr.w	r1, r6, r1
   b7530:	ea40 0002 	orr.w	r0, r0, r2
   b7534:	ea81 0103 	eor.w	r1, r1, r3
   b7538:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b753c:	bfc2      	ittt	gt
   b753e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7542:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7546:	bd70      	popgt	{r4, r5, r6, pc}
   b7548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b754c:	f04f 0e00 	mov.w	lr, #0
   b7550:	3c01      	subs	r4, #1
   b7552:	f300 80ab 	bgt.w	b76ac <__aeabi_dmul+0x238>
   b7556:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b755a:	bfde      	ittt	le
   b755c:	2000      	movle	r0, #0
   b755e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7562:	bd70      	pople	{r4, r5, r6, pc}
   b7564:	f1c4 0400 	rsb	r4, r4, #0
   b7568:	3c20      	subs	r4, #32
   b756a:	da35      	bge.n	b75d8 <__aeabi_dmul+0x164>
   b756c:	340c      	adds	r4, #12
   b756e:	dc1b      	bgt.n	b75a8 <__aeabi_dmul+0x134>
   b7570:	f104 0414 	add.w	r4, r4, #20
   b7574:	f1c4 0520 	rsb	r5, r4, #32
   b7578:	fa00 f305 	lsl.w	r3, r0, r5
   b757c:	fa20 f004 	lsr.w	r0, r0, r4
   b7580:	fa01 f205 	lsl.w	r2, r1, r5
   b7584:	ea40 0002 	orr.w	r0, r0, r2
   b7588:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b758c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7590:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7594:	fa21 f604 	lsr.w	r6, r1, r4
   b7598:	eb42 0106 	adc.w	r1, r2, r6
   b759c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b75a0:	bf08      	it	eq
   b75a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b75a6:	bd70      	pop	{r4, r5, r6, pc}
   b75a8:	f1c4 040c 	rsb	r4, r4, #12
   b75ac:	f1c4 0520 	rsb	r5, r4, #32
   b75b0:	fa00 f304 	lsl.w	r3, r0, r4
   b75b4:	fa20 f005 	lsr.w	r0, r0, r5
   b75b8:	fa01 f204 	lsl.w	r2, r1, r4
   b75bc:	ea40 0002 	orr.w	r0, r0, r2
   b75c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b75c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b75c8:	f141 0100 	adc.w	r1, r1, #0
   b75cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b75d0:	bf08      	it	eq
   b75d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b75d6:	bd70      	pop	{r4, r5, r6, pc}
   b75d8:	f1c4 0520 	rsb	r5, r4, #32
   b75dc:	fa00 f205 	lsl.w	r2, r0, r5
   b75e0:	ea4e 0e02 	orr.w	lr, lr, r2
   b75e4:	fa20 f304 	lsr.w	r3, r0, r4
   b75e8:	fa01 f205 	lsl.w	r2, r1, r5
   b75ec:	ea43 0302 	orr.w	r3, r3, r2
   b75f0:	fa21 f004 	lsr.w	r0, r1, r4
   b75f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b75f8:	fa21 f204 	lsr.w	r2, r1, r4
   b75fc:	ea20 0002 	bic.w	r0, r0, r2
   b7600:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7608:	bf08      	it	eq
   b760a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b760e:	bd70      	pop	{r4, r5, r6, pc}
   b7610:	f094 0f00 	teq	r4, #0
   b7614:	d10f      	bne.n	b7636 <__aeabi_dmul+0x1c2>
   b7616:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b761a:	0040      	lsls	r0, r0, #1
   b761c:	eb41 0101 	adc.w	r1, r1, r1
   b7620:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7624:	bf08      	it	eq
   b7626:	3c01      	subeq	r4, #1
   b7628:	d0f7      	beq.n	b761a <__aeabi_dmul+0x1a6>
   b762a:	ea41 0106 	orr.w	r1, r1, r6
   b762e:	f095 0f00 	teq	r5, #0
   b7632:	bf18      	it	ne
   b7634:	4770      	bxne	lr
   b7636:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b763a:	0052      	lsls	r2, r2, #1
   b763c:	eb43 0303 	adc.w	r3, r3, r3
   b7640:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7644:	bf08      	it	eq
   b7646:	3d01      	subeq	r5, #1
   b7648:	d0f7      	beq.n	b763a <__aeabi_dmul+0x1c6>
   b764a:	ea43 0306 	orr.w	r3, r3, r6
   b764e:	4770      	bx	lr
   b7650:	ea94 0f0c 	teq	r4, ip
   b7654:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7658:	bf18      	it	ne
   b765a:	ea95 0f0c 	teqne	r5, ip
   b765e:	d00c      	beq.n	b767a <__aeabi_dmul+0x206>
   b7660:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7664:	bf18      	it	ne
   b7666:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b766a:	d1d1      	bne.n	b7610 <__aeabi_dmul+0x19c>
   b766c:	ea81 0103 	eor.w	r1, r1, r3
   b7670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7674:	f04f 0000 	mov.w	r0, #0
   b7678:	bd70      	pop	{r4, r5, r6, pc}
   b767a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b767e:	bf06      	itte	eq
   b7680:	4610      	moveq	r0, r2
   b7682:	4619      	moveq	r1, r3
   b7684:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7688:	d019      	beq.n	b76be <__aeabi_dmul+0x24a>
   b768a:	ea94 0f0c 	teq	r4, ip
   b768e:	d102      	bne.n	b7696 <__aeabi_dmul+0x222>
   b7690:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7694:	d113      	bne.n	b76be <__aeabi_dmul+0x24a>
   b7696:	ea95 0f0c 	teq	r5, ip
   b769a:	d105      	bne.n	b76a8 <__aeabi_dmul+0x234>
   b769c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b76a0:	bf1c      	itt	ne
   b76a2:	4610      	movne	r0, r2
   b76a4:	4619      	movne	r1, r3
   b76a6:	d10a      	bne.n	b76be <__aeabi_dmul+0x24a>
   b76a8:	ea81 0103 	eor.w	r1, r1, r3
   b76ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b76b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b76b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b76b8:	f04f 0000 	mov.w	r0, #0
   b76bc:	bd70      	pop	{r4, r5, r6, pc}
   b76be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b76c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b76c6:	bd70      	pop	{r4, r5, r6, pc}

000b76c8 <__aeabi_ddiv>:
   b76c8:	b570      	push	{r4, r5, r6, lr}
   b76ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b76ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b76d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b76d6:	bf1d      	ittte	ne
   b76d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b76dc:	ea94 0f0c 	teqne	r4, ip
   b76e0:	ea95 0f0c 	teqne	r5, ip
   b76e4:	f000 f8a7 	bleq	b7836 <__aeabi_ddiv+0x16e>
   b76e8:	eba4 0405 	sub.w	r4, r4, r5
   b76ec:	ea81 0e03 	eor.w	lr, r1, r3
   b76f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b76f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b76f8:	f000 8088 	beq.w	b780c <__aeabi_ddiv+0x144>
   b76fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7700:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7704:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7708:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b770c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7710:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7714:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7718:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b771c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7720:	429d      	cmp	r5, r3
   b7722:	bf08      	it	eq
   b7724:	4296      	cmpeq	r6, r2
   b7726:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b772a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b772e:	d202      	bcs.n	b7736 <__aeabi_ddiv+0x6e>
   b7730:	085b      	lsrs	r3, r3, #1
   b7732:	ea4f 0232 	mov.w	r2, r2, rrx
   b7736:	1ab6      	subs	r6, r6, r2
   b7738:	eb65 0503 	sbc.w	r5, r5, r3
   b773c:	085b      	lsrs	r3, r3, #1
   b773e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7742:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7746:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b774a:	ebb6 0e02 	subs.w	lr, r6, r2
   b774e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7752:	bf22      	ittt	cs
   b7754:	1ab6      	subcs	r6, r6, r2
   b7756:	4675      	movcs	r5, lr
   b7758:	ea40 000c 	orrcs.w	r0, r0, ip
   b775c:	085b      	lsrs	r3, r3, #1
   b775e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7762:	ebb6 0e02 	subs.w	lr, r6, r2
   b7766:	eb75 0e03 	sbcs.w	lr, r5, r3
   b776a:	bf22      	ittt	cs
   b776c:	1ab6      	subcs	r6, r6, r2
   b776e:	4675      	movcs	r5, lr
   b7770:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7774:	085b      	lsrs	r3, r3, #1
   b7776:	ea4f 0232 	mov.w	r2, r2, rrx
   b777a:	ebb6 0e02 	subs.w	lr, r6, r2
   b777e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7782:	bf22      	ittt	cs
   b7784:	1ab6      	subcs	r6, r6, r2
   b7786:	4675      	movcs	r5, lr
   b7788:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b778c:	085b      	lsrs	r3, r3, #1
   b778e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7792:	ebb6 0e02 	subs.w	lr, r6, r2
   b7796:	eb75 0e03 	sbcs.w	lr, r5, r3
   b779a:	bf22      	ittt	cs
   b779c:	1ab6      	subcs	r6, r6, r2
   b779e:	4675      	movcs	r5, lr
   b77a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b77a4:	ea55 0e06 	orrs.w	lr, r5, r6
   b77a8:	d018      	beq.n	b77dc <__aeabi_ddiv+0x114>
   b77aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b77ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b77b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b77b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b77ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b77be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b77c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b77c6:	d1c0      	bne.n	b774a <__aeabi_ddiv+0x82>
   b77c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b77cc:	d10b      	bne.n	b77e6 <__aeabi_ddiv+0x11e>
   b77ce:	ea41 0100 	orr.w	r1, r1, r0
   b77d2:	f04f 0000 	mov.w	r0, #0
   b77d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b77da:	e7b6      	b.n	b774a <__aeabi_ddiv+0x82>
   b77dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b77e0:	bf04      	itt	eq
   b77e2:	4301      	orreq	r1, r0
   b77e4:	2000      	moveq	r0, #0
   b77e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b77ea:	bf88      	it	hi
   b77ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b77f0:	f63f aeaf 	bhi.w	b7552 <__aeabi_dmul+0xde>
   b77f4:	ebb5 0c03 	subs.w	ip, r5, r3
   b77f8:	bf04      	itt	eq
   b77fa:	ebb6 0c02 	subseq.w	ip, r6, r2
   b77fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7802:	f150 0000 	adcs.w	r0, r0, #0
   b7806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b780a:	bd70      	pop	{r4, r5, r6, pc}
   b780c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7810:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7814:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7818:	bfc2      	ittt	gt
   b781a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b781e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7822:	bd70      	popgt	{r4, r5, r6, pc}
   b7824:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7828:	f04f 0e00 	mov.w	lr, #0
   b782c:	3c01      	subs	r4, #1
   b782e:	e690      	b.n	b7552 <__aeabi_dmul+0xde>
   b7830:	ea45 0e06 	orr.w	lr, r5, r6
   b7834:	e68d      	b.n	b7552 <__aeabi_dmul+0xde>
   b7836:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b783a:	ea94 0f0c 	teq	r4, ip
   b783e:	bf08      	it	eq
   b7840:	ea95 0f0c 	teqeq	r5, ip
   b7844:	f43f af3b 	beq.w	b76be <__aeabi_dmul+0x24a>
   b7848:	ea94 0f0c 	teq	r4, ip
   b784c:	d10a      	bne.n	b7864 <__aeabi_ddiv+0x19c>
   b784e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7852:	f47f af34 	bne.w	b76be <__aeabi_dmul+0x24a>
   b7856:	ea95 0f0c 	teq	r5, ip
   b785a:	f47f af25 	bne.w	b76a8 <__aeabi_dmul+0x234>
   b785e:	4610      	mov	r0, r2
   b7860:	4619      	mov	r1, r3
   b7862:	e72c      	b.n	b76be <__aeabi_dmul+0x24a>
   b7864:	ea95 0f0c 	teq	r5, ip
   b7868:	d106      	bne.n	b7878 <__aeabi_ddiv+0x1b0>
   b786a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b786e:	f43f aefd 	beq.w	b766c <__aeabi_dmul+0x1f8>
   b7872:	4610      	mov	r0, r2
   b7874:	4619      	mov	r1, r3
   b7876:	e722      	b.n	b76be <__aeabi_dmul+0x24a>
   b7878:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b787c:	bf18      	it	ne
   b787e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7882:	f47f aec5 	bne.w	b7610 <__aeabi_dmul+0x19c>
   b7886:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b788a:	f47f af0d 	bne.w	b76a8 <__aeabi_dmul+0x234>
   b788e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7892:	f47f aeeb 	bne.w	b766c <__aeabi_dmul+0x1f8>
   b7896:	e712      	b.n	b76be <__aeabi_dmul+0x24a>

000b7898 <__aeabi_d2f>:
   b7898:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b789c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b78a0:	bf24      	itt	cs
   b78a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b78a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b78aa:	d90d      	bls.n	b78c8 <__aeabi_d2f+0x30>
   b78ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b78b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b78b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b78b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b78bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b78c0:	bf08      	it	eq
   b78c2:	f020 0001 	biceq.w	r0, r0, #1
   b78c6:	4770      	bx	lr
   b78c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b78cc:	d121      	bne.n	b7912 <__aeabi_d2f+0x7a>
   b78ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b78d2:	bfbc      	itt	lt
   b78d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b78d8:	4770      	bxlt	lr
   b78da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b78de:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b78e2:	f1c2 0218 	rsb	r2, r2, #24
   b78e6:	f1c2 0c20 	rsb	ip, r2, #32
   b78ea:	fa10 f30c 	lsls.w	r3, r0, ip
   b78ee:	fa20 f002 	lsr.w	r0, r0, r2
   b78f2:	bf18      	it	ne
   b78f4:	f040 0001 	orrne.w	r0, r0, #1
   b78f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b78fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7900:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7904:	ea40 000c 	orr.w	r0, r0, ip
   b7908:	fa23 f302 	lsr.w	r3, r3, r2
   b790c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7910:	e7cc      	b.n	b78ac <__aeabi_d2f+0x14>
   b7912:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7916:	d107      	bne.n	b7928 <__aeabi_d2f+0x90>
   b7918:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b791c:	bf1e      	ittt	ne
   b791e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7922:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7926:	4770      	bxne	lr
   b7928:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b792c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7930:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7934:	4770      	bx	lr
   b7936:	bf00      	nop

000b7938 <__aeabi_frsub>:
   b7938:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b793c:	e002      	b.n	b7944 <__addsf3>
   b793e:	bf00      	nop

000b7940 <__aeabi_fsub>:
   b7940:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7944 <__addsf3>:
   b7944:	0042      	lsls	r2, r0, #1
   b7946:	bf1f      	itttt	ne
   b7948:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b794c:	ea92 0f03 	teqne	r2, r3
   b7950:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b7954:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7958:	d06a      	beq.n	b7a30 <__addsf3+0xec>
   b795a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b795e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b7962:	bfc1      	itttt	gt
   b7964:	18d2      	addgt	r2, r2, r3
   b7966:	4041      	eorgt	r1, r0
   b7968:	4048      	eorgt	r0, r1
   b796a:	4041      	eorgt	r1, r0
   b796c:	bfb8      	it	lt
   b796e:	425b      	neglt	r3, r3
   b7970:	2b19      	cmp	r3, #25
   b7972:	bf88      	it	hi
   b7974:	4770      	bxhi	lr
   b7976:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b797a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b797e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b7982:	bf18      	it	ne
   b7984:	4240      	negne	r0, r0
   b7986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b798a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b798e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b7992:	bf18      	it	ne
   b7994:	4249      	negne	r1, r1
   b7996:	ea92 0f03 	teq	r2, r3
   b799a:	d03f      	beq.n	b7a1c <__addsf3+0xd8>
   b799c:	f1a2 0201 	sub.w	r2, r2, #1
   b79a0:	fa41 fc03 	asr.w	ip, r1, r3
   b79a4:	eb10 000c 	adds.w	r0, r0, ip
   b79a8:	f1c3 0320 	rsb	r3, r3, #32
   b79ac:	fa01 f103 	lsl.w	r1, r1, r3
   b79b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b79b4:	d502      	bpl.n	b79bc <__addsf3+0x78>
   b79b6:	4249      	negs	r1, r1
   b79b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b79bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b79c0:	d313      	bcc.n	b79ea <__addsf3+0xa6>
   b79c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b79c6:	d306      	bcc.n	b79d6 <__addsf3+0x92>
   b79c8:	0840      	lsrs	r0, r0, #1
   b79ca:	ea4f 0131 	mov.w	r1, r1, rrx
   b79ce:	f102 0201 	add.w	r2, r2, #1
   b79d2:	2afe      	cmp	r2, #254	; 0xfe
   b79d4:	d251      	bcs.n	b7a7a <__addsf3+0x136>
   b79d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b79da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b79de:	bf08      	it	eq
   b79e0:	f020 0001 	biceq.w	r0, r0, #1
   b79e4:	ea40 0003 	orr.w	r0, r0, r3
   b79e8:	4770      	bx	lr
   b79ea:	0049      	lsls	r1, r1, #1
   b79ec:	eb40 0000 	adc.w	r0, r0, r0
   b79f0:	3a01      	subs	r2, #1
   b79f2:	bf28      	it	cs
   b79f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b79f8:	d2ed      	bcs.n	b79d6 <__addsf3+0x92>
   b79fa:	fab0 fc80 	clz	ip, r0
   b79fe:	f1ac 0c08 	sub.w	ip, ip, #8
   b7a02:	ebb2 020c 	subs.w	r2, r2, ip
   b7a06:	fa00 f00c 	lsl.w	r0, r0, ip
   b7a0a:	bfaa      	itet	ge
   b7a0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7a10:	4252      	neglt	r2, r2
   b7a12:	4318      	orrge	r0, r3
   b7a14:	bfbc      	itt	lt
   b7a16:	40d0      	lsrlt	r0, r2
   b7a18:	4318      	orrlt	r0, r3
   b7a1a:	4770      	bx	lr
   b7a1c:	f092 0f00 	teq	r2, #0
   b7a20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7a24:	bf06      	itte	eq
   b7a26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b7a2a:	3201      	addeq	r2, #1
   b7a2c:	3b01      	subne	r3, #1
   b7a2e:	e7b5      	b.n	b799c <__addsf3+0x58>
   b7a30:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7a34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b7a38:	bf18      	it	ne
   b7a3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7a3e:	d021      	beq.n	b7a84 <__addsf3+0x140>
   b7a40:	ea92 0f03 	teq	r2, r3
   b7a44:	d004      	beq.n	b7a50 <__addsf3+0x10c>
   b7a46:	f092 0f00 	teq	r2, #0
   b7a4a:	bf08      	it	eq
   b7a4c:	4608      	moveq	r0, r1
   b7a4e:	4770      	bx	lr
   b7a50:	ea90 0f01 	teq	r0, r1
   b7a54:	bf1c      	itt	ne
   b7a56:	2000      	movne	r0, #0
   b7a58:	4770      	bxne	lr
   b7a5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b7a5e:	d104      	bne.n	b7a6a <__addsf3+0x126>
   b7a60:	0040      	lsls	r0, r0, #1
   b7a62:	bf28      	it	cs
   b7a64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b7a68:	4770      	bx	lr
   b7a6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b7a6e:	bf3c      	itt	cc
   b7a70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b7a74:	4770      	bxcc	lr
   b7a76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7a7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b7a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7a82:	4770      	bx	lr
   b7a84:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b7a88:	bf16      	itet	ne
   b7a8a:	4608      	movne	r0, r1
   b7a8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b7a90:	4601      	movne	r1, r0
   b7a92:	0242      	lsls	r2, r0, #9
   b7a94:	bf06      	itte	eq
   b7a96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b7a9a:	ea90 0f01 	teqeq	r0, r1
   b7a9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b7aa2:	4770      	bx	lr

000b7aa4 <__aeabi_ui2f>:
   b7aa4:	f04f 0300 	mov.w	r3, #0
   b7aa8:	e004      	b.n	b7ab4 <__aeabi_i2f+0x8>
   b7aaa:	bf00      	nop

000b7aac <__aeabi_i2f>:
   b7aac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b7ab0:	bf48      	it	mi
   b7ab2:	4240      	negmi	r0, r0
   b7ab4:	ea5f 0c00 	movs.w	ip, r0
   b7ab8:	bf08      	it	eq
   b7aba:	4770      	bxeq	lr
   b7abc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7ac0:	4601      	mov	r1, r0
   b7ac2:	f04f 0000 	mov.w	r0, #0
   b7ac6:	e01c      	b.n	b7b02 <__aeabi_l2f+0x2a>

000b7ac8 <__aeabi_ul2f>:
   b7ac8:	ea50 0201 	orrs.w	r2, r0, r1
   b7acc:	bf08      	it	eq
   b7ace:	4770      	bxeq	lr
   b7ad0:	f04f 0300 	mov.w	r3, #0
   b7ad4:	e00a      	b.n	b7aec <__aeabi_l2f+0x14>
   b7ad6:	bf00      	nop

000b7ad8 <__aeabi_l2f>:
   b7ad8:	ea50 0201 	orrs.w	r2, r0, r1
   b7adc:	bf08      	it	eq
   b7ade:	4770      	bxeq	lr
   b7ae0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7ae4:	d502      	bpl.n	b7aec <__aeabi_l2f+0x14>
   b7ae6:	4240      	negs	r0, r0
   b7ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7aec:	ea5f 0c01 	movs.w	ip, r1
   b7af0:	bf02      	ittt	eq
   b7af2:	4684      	moveq	ip, r0
   b7af4:	4601      	moveq	r1, r0
   b7af6:	2000      	moveq	r0, #0
   b7af8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b7afc:	bf08      	it	eq
   b7afe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7b02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b7b06:	fabc f28c 	clz	r2, ip
   b7b0a:	3a08      	subs	r2, #8
   b7b0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7b10:	db10      	blt.n	b7b34 <__aeabi_l2f+0x5c>
   b7b12:	fa01 fc02 	lsl.w	ip, r1, r2
   b7b16:	4463      	add	r3, ip
   b7b18:	fa00 fc02 	lsl.w	ip, r0, r2
   b7b1c:	f1c2 0220 	rsb	r2, r2, #32
   b7b20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7b24:	fa20 f202 	lsr.w	r2, r0, r2
   b7b28:	eb43 0002 	adc.w	r0, r3, r2
   b7b2c:	bf08      	it	eq
   b7b2e:	f020 0001 	biceq.w	r0, r0, #1
   b7b32:	4770      	bx	lr
   b7b34:	f102 0220 	add.w	r2, r2, #32
   b7b38:	fa01 fc02 	lsl.w	ip, r1, r2
   b7b3c:	f1c2 0220 	rsb	r2, r2, #32
   b7b40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7b44:	fa21 f202 	lsr.w	r2, r1, r2
   b7b48:	eb43 0002 	adc.w	r0, r3, r2
   b7b4c:	bf08      	it	eq
   b7b4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7b52:	4770      	bx	lr

000b7b54 <__aeabi_ldivmod>:
   b7b54:	b97b      	cbnz	r3, b7b76 <__aeabi_ldivmod+0x22>
   b7b56:	b972      	cbnz	r2, b7b76 <__aeabi_ldivmod+0x22>
   b7b58:	2900      	cmp	r1, #0
   b7b5a:	bfbe      	ittt	lt
   b7b5c:	2000      	movlt	r0, #0
   b7b5e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b7b62:	e006      	blt.n	b7b72 <__aeabi_ldivmod+0x1e>
   b7b64:	bf08      	it	eq
   b7b66:	2800      	cmpeq	r0, #0
   b7b68:	bf1c      	itt	ne
   b7b6a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b7b6e:	f04f 30ff 	movne.w	r0, #4294967295
   b7b72:	f000 b9a7 	b.w	b7ec4 <__aeabi_idiv0>
   b7b76:	f1ad 0c08 	sub.w	ip, sp, #8
   b7b7a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7b7e:	2900      	cmp	r1, #0
   b7b80:	db09      	blt.n	b7b96 <__aeabi_ldivmod+0x42>
   b7b82:	2b00      	cmp	r3, #0
   b7b84:	db1a      	blt.n	b7bbc <__aeabi_ldivmod+0x68>
   b7b86:	f000 f835 	bl	b7bf4 <__udivmoddi4>
   b7b8a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7b92:	b004      	add	sp, #16
   b7b94:	4770      	bx	lr
   b7b96:	4240      	negs	r0, r0
   b7b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b9c:	2b00      	cmp	r3, #0
   b7b9e:	db1b      	blt.n	b7bd8 <__aeabi_ldivmod+0x84>
   b7ba0:	f000 f828 	bl	b7bf4 <__udivmoddi4>
   b7ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7bac:	b004      	add	sp, #16
   b7bae:	4240      	negs	r0, r0
   b7bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7bb4:	4252      	negs	r2, r2
   b7bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7bba:	4770      	bx	lr
   b7bbc:	4252      	negs	r2, r2
   b7bbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7bc2:	f000 f817 	bl	b7bf4 <__udivmoddi4>
   b7bc6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7bca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7bce:	b004      	add	sp, #16
   b7bd0:	4240      	negs	r0, r0
   b7bd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7bd6:	4770      	bx	lr
   b7bd8:	4252      	negs	r2, r2
   b7bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7bde:	f000 f809 	bl	b7bf4 <__udivmoddi4>
   b7be2:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7bea:	b004      	add	sp, #16
   b7bec:	4252      	negs	r2, r2
   b7bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7bf2:	4770      	bx	lr

000b7bf4 <__udivmoddi4>:
   b7bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7bf8:	9d08      	ldr	r5, [sp, #32]
   b7bfa:	4604      	mov	r4, r0
   b7bfc:	468e      	mov	lr, r1
   b7bfe:	2b00      	cmp	r3, #0
   b7c00:	d14d      	bne.n	b7c9e <__udivmoddi4+0xaa>
   b7c02:	428a      	cmp	r2, r1
   b7c04:	4694      	mov	ip, r2
   b7c06:	d969      	bls.n	b7cdc <__udivmoddi4+0xe8>
   b7c08:	fab2 f282 	clz	r2, r2
   b7c0c:	b152      	cbz	r2, b7c24 <__udivmoddi4+0x30>
   b7c0e:	fa01 f302 	lsl.w	r3, r1, r2
   b7c12:	f1c2 0120 	rsb	r1, r2, #32
   b7c16:	fa20 f101 	lsr.w	r1, r0, r1
   b7c1a:	fa0c fc02 	lsl.w	ip, ip, r2
   b7c1e:	ea41 0e03 	orr.w	lr, r1, r3
   b7c22:	4094      	lsls	r4, r2
   b7c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7c28:	0c21      	lsrs	r1, r4, #16
   b7c2a:	fbbe f6f8 	udiv	r6, lr, r8
   b7c2e:	fa1f f78c 	uxth.w	r7, ip
   b7c32:	fb08 e316 	mls	r3, r8, r6, lr
   b7c36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b7c3a:	fb06 f107 	mul.w	r1, r6, r7
   b7c3e:	4299      	cmp	r1, r3
   b7c40:	d90a      	bls.n	b7c58 <__udivmoddi4+0x64>
   b7c42:	eb1c 0303 	adds.w	r3, ip, r3
   b7c46:	f106 30ff 	add.w	r0, r6, #4294967295
   b7c4a:	f080 811f 	bcs.w	b7e8c <__udivmoddi4+0x298>
   b7c4e:	4299      	cmp	r1, r3
   b7c50:	f240 811c 	bls.w	b7e8c <__udivmoddi4+0x298>
   b7c54:	3e02      	subs	r6, #2
   b7c56:	4463      	add	r3, ip
   b7c58:	1a5b      	subs	r3, r3, r1
   b7c5a:	b2a4      	uxth	r4, r4
   b7c5c:	fbb3 f0f8 	udiv	r0, r3, r8
   b7c60:	fb08 3310 	mls	r3, r8, r0, r3
   b7c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7c68:	fb00 f707 	mul.w	r7, r0, r7
   b7c6c:	42a7      	cmp	r7, r4
   b7c6e:	d90a      	bls.n	b7c86 <__udivmoddi4+0x92>
   b7c70:	eb1c 0404 	adds.w	r4, ip, r4
   b7c74:	f100 33ff 	add.w	r3, r0, #4294967295
   b7c78:	f080 810a 	bcs.w	b7e90 <__udivmoddi4+0x29c>
   b7c7c:	42a7      	cmp	r7, r4
   b7c7e:	f240 8107 	bls.w	b7e90 <__udivmoddi4+0x29c>
   b7c82:	4464      	add	r4, ip
   b7c84:	3802      	subs	r0, #2
   b7c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b7c8a:	1be4      	subs	r4, r4, r7
   b7c8c:	2600      	movs	r6, #0
   b7c8e:	b11d      	cbz	r5, b7c98 <__udivmoddi4+0xa4>
   b7c90:	40d4      	lsrs	r4, r2
   b7c92:	2300      	movs	r3, #0
   b7c94:	e9c5 4300 	strd	r4, r3, [r5]
   b7c98:	4631      	mov	r1, r6
   b7c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7c9e:	428b      	cmp	r3, r1
   b7ca0:	d909      	bls.n	b7cb6 <__udivmoddi4+0xc2>
   b7ca2:	2d00      	cmp	r5, #0
   b7ca4:	f000 80ef 	beq.w	b7e86 <__udivmoddi4+0x292>
   b7ca8:	2600      	movs	r6, #0
   b7caa:	e9c5 0100 	strd	r0, r1, [r5]
   b7cae:	4630      	mov	r0, r6
   b7cb0:	4631      	mov	r1, r6
   b7cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7cb6:	fab3 f683 	clz	r6, r3
   b7cba:	2e00      	cmp	r6, #0
   b7cbc:	d14a      	bne.n	b7d54 <__udivmoddi4+0x160>
   b7cbe:	428b      	cmp	r3, r1
   b7cc0:	d302      	bcc.n	b7cc8 <__udivmoddi4+0xd4>
   b7cc2:	4282      	cmp	r2, r0
   b7cc4:	f200 80f9 	bhi.w	b7eba <__udivmoddi4+0x2c6>
   b7cc8:	1a84      	subs	r4, r0, r2
   b7cca:	eb61 0303 	sbc.w	r3, r1, r3
   b7cce:	2001      	movs	r0, #1
   b7cd0:	469e      	mov	lr, r3
   b7cd2:	2d00      	cmp	r5, #0
   b7cd4:	d0e0      	beq.n	b7c98 <__udivmoddi4+0xa4>
   b7cd6:	e9c5 4e00 	strd	r4, lr, [r5]
   b7cda:	e7dd      	b.n	b7c98 <__udivmoddi4+0xa4>
   b7cdc:	b902      	cbnz	r2, b7ce0 <__udivmoddi4+0xec>
   b7cde:	deff      	udf	#255	; 0xff
   b7ce0:	fab2 f282 	clz	r2, r2
   b7ce4:	2a00      	cmp	r2, #0
   b7ce6:	f040 8092 	bne.w	b7e0e <__udivmoddi4+0x21a>
   b7cea:	eba1 010c 	sub.w	r1, r1, ip
   b7cee:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7cf2:	fa1f fe8c 	uxth.w	lr, ip
   b7cf6:	2601      	movs	r6, #1
   b7cf8:	0c20      	lsrs	r0, r4, #16
   b7cfa:	fbb1 f3f7 	udiv	r3, r1, r7
   b7cfe:	fb07 1113 	mls	r1, r7, r3, r1
   b7d02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7d06:	fb0e f003 	mul.w	r0, lr, r3
   b7d0a:	4288      	cmp	r0, r1
   b7d0c:	d908      	bls.n	b7d20 <__udivmoddi4+0x12c>
   b7d0e:	eb1c 0101 	adds.w	r1, ip, r1
   b7d12:	f103 38ff 	add.w	r8, r3, #4294967295
   b7d16:	d202      	bcs.n	b7d1e <__udivmoddi4+0x12a>
   b7d18:	4288      	cmp	r0, r1
   b7d1a:	f200 80cb 	bhi.w	b7eb4 <__udivmoddi4+0x2c0>
   b7d1e:	4643      	mov	r3, r8
   b7d20:	1a09      	subs	r1, r1, r0
   b7d22:	b2a4      	uxth	r4, r4
   b7d24:	fbb1 f0f7 	udiv	r0, r1, r7
   b7d28:	fb07 1110 	mls	r1, r7, r0, r1
   b7d2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7d30:	fb0e fe00 	mul.w	lr, lr, r0
   b7d34:	45a6      	cmp	lr, r4
   b7d36:	d908      	bls.n	b7d4a <__udivmoddi4+0x156>
   b7d38:	eb1c 0404 	adds.w	r4, ip, r4
   b7d3c:	f100 31ff 	add.w	r1, r0, #4294967295
   b7d40:	d202      	bcs.n	b7d48 <__udivmoddi4+0x154>
   b7d42:	45a6      	cmp	lr, r4
   b7d44:	f200 80bb 	bhi.w	b7ebe <__udivmoddi4+0x2ca>
   b7d48:	4608      	mov	r0, r1
   b7d4a:	eba4 040e 	sub.w	r4, r4, lr
   b7d4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7d52:	e79c      	b.n	b7c8e <__udivmoddi4+0x9a>
   b7d54:	f1c6 0720 	rsb	r7, r6, #32
   b7d58:	40b3      	lsls	r3, r6
   b7d5a:	fa22 fc07 	lsr.w	ip, r2, r7
   b7d5e:	ea4c 0c03 	orr.w	ip, ip, r3
   b7d62:	fa20 f407 	lsr.w	r4, r0, r7
   b7d66:	fa01 f306 	lsl.w	r3, r1, r6
   b7d6a:	431c      	orrs	r4, r3
   b7d6c:	40f9      	lsrs	r1, r7
   b7d6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7d72:	fa00 f306 	lsl.w	r3, r0, r6
   b7d76:	fbb1 f8f9 	udiv	r8, r1, r9
   b7d7a:	0c20      	lsrs	r0, r4, #16
   b7d7c:	fa1f fe8c 	uxth.w	lr, ip
   b7d80:	fb09 1118 	mls	r1, r9, r8, r1
   b7d84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7d88:	fb08 f00e 	mul.w	r0, r8, lr
   b7d8c:	4288      	cmp	r0, r1
   b7d8e:	fa02 f206 	lsl.w	r2, r2, r6
   b7d92:	d90b      	bls.n	b7dac <__udivmoddi4+0x1b8>
   b7d94:	eb1c 0101 	adds.w	r1, ip, r1
   b7d98:	f108 3aff 	add.w	sl, r8, #4294967295
   b7d9c:	f080 8088 	bcs.w	b7eb0 <__udivmoddi4+0x2bc>
   b7da0:	4288      	cmp	r0, r1
   b7da2:	f240 8085 	bls.w	b7eb0 <__udivmoddi4+0x2bc>
   b7da6:	f1a8 0802 	sub.w	r8, r8, #2
   b7daa:	4461      	add	r1, ip
   b7dac:	1a09      	subs	r1, r1, r0
   b7dae:	b2a4      	uxth	r4, r4
   b7db0:	fbb1 f0f9 	udiv	r0, r1, r9
   b7db4:	fb09 1110 	mls	r1, r9, r0, r1
   b7db8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7dbc:	fb00 fe0e 	mul.w	lr, r0, lr
   b7dc0:	458e      	cmp	lr, r1
   b7dc2:	d908      	bls.n	b7dd6 <__udivmoddi4+0x1e2>
   b7dc4:	eb1c 0101 	adds.w	r1, ip, r1
   b7dc8:	f100 34ff 	add.w	r4, r0, #4294967295
   b7dcc:	d26c      	bcs.n	b7ea8 <__udivmoddi4+0x2b4>
   b7dce:	458e      	cmp	lr, r1
   b7dd0:	d96a      	bls.n	b7ea8 <__udivmoddi4+0x2b4>
   b7dd2:	3802      	subs	r0, #2
   b7dd4:	4461      	add	r1, ip
   b7dd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b7dda:	fba0 9402 	umull	r9, r4, r0, r2
   b7dde:	eba1 010e 	sub.w	r1, r1, lr
   b7de2:	42a1      	cmp	r1, r4
   b7de4:	46c8      	mov	r8, r9
   b7de6:	46a6      	mov	lr, r4
   b7de8:	d356      	bcc.n	b7e98 <__udivmoddi4+0x2a4>
   b7dea:	d053      	beq.n	b7e94 <__udivmoddi4+0x2a0>
   b7dec:	b15d      	cbz	r5, b7e06 <__udivmoddi4+0x212>
   b7dee:	ebb3 0208 	subs.w	r2, r3, r8
   b7df2:	eb61 010e 	sbc.w	r1, r1, lr
   b7df6:	fa01 f707 	lsl.w	r7, r1, r7
   b7dfa:	fa22 f306 	lsr.w	r3, r2, r6
   b7dfe:	40f1      	lsrs	r1, r6
   b7e00:	431f      	orrs	r7, r3
   b7e02:	e9c5 7100 	strd	r7, r1, [r5]
   b7e06:	2600      	movs	r6, #0
   b7e08:	4631      	mov	r1, r6
   b7e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e0e:	f1c2 0320 	rsb	r3, r2, #32
   b7e12:	40d8      	lsrs	r0, r3
   b7e14:	fa0c fc02 	lsl.w	ip, ip, r2
   b7e18:	fa21 f303 	lsr.w	r3, r1, r3
   b7e1c:	4091      	lsls	r1, r2
   b7e1e:	4301      	orrs	r1, r0
   b7e20:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7e24:	fa1f fe8c 	uxth.w	lr, ip
   b7e28:	fbb3 f0f7 	udiv	r0, r3, r7
   b7e2c:	fb07 3610 	mls	r6, r7, r0, r3
   b7e30:	0c0b      	lsrs	r3, r1, #16
   b7e32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b7e36:	fb00 f60e 	mul.w	r6, r0, lr
   b7e3a:	429e      	cmp	r6, r3
   b7e3c:	fa04 f402 	lsl.w	r4, r4, r2
   b7e40:	d908      	bls.n	b7e54 <__udivmoddi4+0x260>
   b7e42:	eb1c 0303 	adds.w	r3, ip, r3
   b7e46:	f100 38ff 	add.w	r8, r0, #4294967295
   b7e4a:	d22f      	bcs.n	b7eac <__udivmoddi4+0x2b8>
   b7e4c:	429e      	cmp	r6, r3
   b7e4e:	d92d      	bls.n	b7eac <__udivmoddi4+0x2b8>
   b7e50:	3802      	subs	r0, #2
   b7e52:	4463      	add	r3, ip
   b7e54:	1b9b      	subs	r3, r3, r6
   b7e56:	b289      	uxth	r1, r1
   b7e58:	fbb3 f6f7 	udiv	r6, r3, r7
   b7e5c:	fb07 3316 	mls	r3, r7, r6, r3
   b7e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b7e64:	fb06 f30e 	mul.w	r3, r6, lr
   b7e68:	428b      	cmp	r3, r1
   b7e6a:	d908      	bls.n	b7e7e <__udivmoddi4+0x28a>
   b7e6c:	eb1c 0101 	adds.w	r1, ip, r1
   b7e70:	f106 38ff 	add.w	r8, r6, #4294967295
   b7e74:	d216      	bcs.n	b7ea4 <__udivmoddi4+0x2b0>
   b7e76:	428b      	cmp	r3, r1
   b7e78:	d914      	bls.n	b7ea4 <__udivmoddi4+0x2b0>
   b7e7a:	3e02      	subs	r6, #2
   b7e7c:	4461      	add	r1, ip
   b7e7e:	1ac9      	subs	r1, r1, r3
   b7e80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b7e84:	e738      	b.n	b7cf8 <__udivmoddi4+0x104>
   b7e86:	462e      	mov	r6, r5
   b7e88:	4628      	mov	r0, r5
   b7e8a:	e705      	b.n	b7c98 <__udivmoddi4+0xa4>
   b7e8c:	4606      	mov	r6, r0
   b7e8e:	e6e3      	b.n	b7c58 <__udivmoddi4+0x64>
   b7e90:	4618      	mov	r0, r3
   b7e92:	e6f8      	b.n	b7c86 <__udivmoddi4+0x92>
   b7e94:	454b      	cmp	r3, r9
   b7e96:	d2a9      	bcs.n	b7dec <__udivmoddi4+0x1f8>
   b7e98:	ebb9 0802 	subs.w	r8, r9, r2
   b7e9c:	eb64 0e0c 	sbc.w	lr, r4, ip
   b7ea0:	3801      	subs	r0, #1
   b7ea2:	e7a3      	b.n	b7dec <__udivmoddi4+0x1f8>
   b7ea4:	4646      	mov	r6, r8
   b7ea6:	e7ea      	b.n	b7e7e <__udivmoddi4+0x28a>
   b7ea8:	4620      	mov	r0, r4
   b7eaa:	e794      	b.n	b7dd6 <__udivmoddi4+0x1e2>
   b7eac:	4640      	mov	r0, r8
   b7eae:	e7d1      	b.n	b7e54 <__udivmoddi4+0x260>
   b7eb0:	46d0      	mov	r8, sl
   b7eb2:	e77b      	b.n	b7dac <__udivmoddi4+0x1b8>
   b7eb4:	3b02      	subs	r3, #2
   b7eb6:	4461      	add	r1, ip
   b7eb8:	e732      	b.n	b7d20 <__udivmoddi4+0x12c>
   b7eba:	4630      	mov	r0, r6
   b7ebc:	e709      	b.n	b7cd2 <__udivmoddi4+0xde>
   b7ebe:	4464      	add	r4, ip
   b7ec0:	3802      	subs	r0, #2
   b7ec2:	e742      	b.n	b7d4a <__udivmoddi4+0x156>

000b7ec4 <__aeabi_idiv0>:
   b7ec4:	4770      	bx	lr
   b7ec6:	bf00      	nop

000b7ec8 <asctime_r>:
   b7ec8:	b510      	push	{r4, lr}
   b7eca:	460c      	mov	r4, r1
   b7ecc:	6941      	ldr	r1, [r0, #20]
   b7ece:	6903      	ldr	r3, [r0, #16]
   b7ed0:	6982      	ldr	r2, [r0, #24]
   b7ed2:	b086      	sub	sp, #24
   b7ed4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b7ed8:	9104      	str	r1, [sp, #16]
   b7eda:	6801      	ldr	r1, [r0, #0]
   b7edc:	9103      	str	r1, [sp, #12]
   b7ede:	6841      	ldr	r1, [r0, #4]
   b7ee0:	9102      	str	r1, [sp, #8]
   b7ee2:	6881      	ldr	r1, [r0, #8]
   b7ee4:	9101      	str	r1, [sp, #4]
   b7ee6:	68c1      	ldr	r1, [r0, #12]
   b7ee8:	9100      	str	r1, [sp, #0]
   b7eea:	4907      	ldr	r1, [pc, #28]	; (b7f08 <asctime_r+0x40>)
   b7eec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7ef0:	440b      	add	r3, r1
   b7ef2:	4906      	ldr	r1, [pc, #24]	; (b7f0c <asctime_r+0x44>)
   b7ef4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7ef8:	440a      	add	r2, r1
   b7efa:	4620      	mov	r0, r4
   b7efc:	4904      	ldr	r1, [pc, #16]	; (b7f10 <asctime_r+0x48>)
   b7efe:	f7fd fd0b 	bl	b5918 <siprintf>
   b7f02:	4620      	mov	r0, r4
   b7f04:	b006      	add	sp, #24
   b7f06:	bd10      	pop	{r4, pc}
   b7f08:	000b84e6 	.word	0x000b84e6
   b7f0c:	000b84d1 	.word	0x000b84d1
   b7f10:	000b84b1 	.word	0x000b84b1

000b7f14 <atexit>:
   b7f14:	2300      	movs	r3, #0
   b7f16:	4601      	mov	r1, r0
   b7f18:	461a      	mov	r2, r3
   b7f1a:	4618      	mov	r0, r3
   b7f1c:	f000 b896 	b.w	b804c <__register_exitproc>

000b7f20 <isprint>:
   b7f20:	4b02      	ldr	r3, [pc, #8]	; (b7f2c <isprint+0xc>)
   b7f22:	4418      	add	r0, r3
   b7f24:	7840      	ldrb	r0, [r0, #1]
   b7f26:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7f2a:	4770      	bx	lr
   b7f2c:	000b859e 	.word	0x000b859e

000b7f30 <memcpy>:
   b7f30:	440a      	add	r2, r1
   b7f32:	4291      	cmp	r1, r2
   b7f34:	f100 33ff 	add.w	r3, r0, #4294967295
   b7f38:	d100      	bne.n	b7f3c <memcpy+0xc>
   b7f3a:	4770      	bx	lr
   b7f3c:	b510      	push	{r4, lr}
   b7f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7f42:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7f46:	4291      	cmp	r1, r2
   b7f48:	d1f9      	bne.n	b7f3e <memcpy+0xe>
   b7f4a:	bd10      	pop	{r4, pc}

000b7f4c <memset>:
   b7f4c:	4402      	add	r2, r0
   b7f4e:	4603      	mov	r3, r0
   b7f50:	4293      	cmp	r3, r2
   b7f52:	d100      	bne.n	b7f56 <memset+0xa>
   b7f54:	4770      	bx	lr
   b7f56:	f803 1b01 	strb.w	r1, [r3], #1
   b7f5a:	e7f9      	b.n	b7f50 <memset+0x4>

000b7f5c <srand>:
   b7f5c:	b538      	push	{r3, r4, r5, lr}
   b7f5e:	4b10      	ldr	r3, [pc, #64]	; (b7fa0 <srand+0x44>)
   b7f60:	681d      	ldr	r5, [r3, #0]
   b7f62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f64:	4604      	mov	r4, r0
   b7f66:	b9b3      	cbnz	r3, b7f96 <srand+0x3a>
   b7f68:	2018      	movs	r0, #24
   b7f6a:	f7fd fcbd 	bl	b58e8 <malloc>
   b7f6e:	4602      	mov	r2, r0
   b7f70:	63a8      	str	r0, [r5, #56]	; 0x38
   b7f72:	b920      	cbnz	r0, b7f7e <srand+0x22>
   b7f74:	4b0b      	ldr	r3, [pc, #44]	; (b7fa4 <srand+0x48>)
   b7f76:	480c      	ldr	r0, [pc, #48]	; (b7fa8 <srand+0x4c>)
   b7f78:	2142      	movs	r1, #66	; 0x42
   b7f7a:	f7fd fcf5 	bl	b5968 <__assert_func>
   b7f7e:	490b      	ldr	r1, [pc, #44]	; (b7fac <srand+0x50>)
   b7f80:	4b0b      	ldr	r3, [pc, #44]	; (b7fb0 <srand+0x54>)
   b7f82:	e9c0 1300 	strd	r1, r3, [r0]
   b7f86:	4b0b      	ldr	r3, [pc, #44]	; (b7fb4 <srand+0x58>)
   b7f88:	6083      	str	r3, [r0, #8]
   b7f8a:	230b      	movs	r3, #11
   b7f8c:	8183      	strh	r3, [r0, #12]
   b7f8e:	2100      	movs	r1, #0
   b7f90:	2001      	movs	r0, #1
   b7f92:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7f96:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f98:	2200      	movs	r2, #0
   b7f9a:	611c      	str	r4, [r3, #16]
   b7f9c:	615a      	str	r2, [r3, #20]
   b7f9e:	bd38      	pop	{r3, r4, r5, pc}
   b7fa0:	2003e590 	.word	0x2003e590
   b7fa4:	000b850a 	.word	0x000b850a
   b7fa8:	000b8521 	.word	0x000b8521
   b7fac:	abcd330e 	.word	0xabcd330e
   b7fb0:	e66d1234 	.word	0xe66d1234
   b7fb4:	0005deec 	.word	0x0005deec

000b7fb8 <strcmp>:
   b7fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7fc0:	2a01      	cmp	r2, #1
   b7fc2:	bf28      	it	cs
   b7fc4:	429a      	cmpcs	r2, r3
   b7fc6:	d0f7      	beq.n	b7fb8 <strcmp>
   b7fc8:	1ad0      	subs	r0, r2, r3
   b7fca:	4770      	bx	lr

000b7fcc <strcpy>:
   b7fcc:	4603      	mov	r3, r0
   b7fce:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7fd2:	f803 2b01 	strb.w	r2, [r3], #1
   b7fd6:	2a00      	cmp	r2, #0
   b7fd8:	d1f9      	bne.n	b7fce <strcpy+0x2>
   b7fda:	4770      	bx	lr

000b7fdc <strdup>:
   b7fdc:	4b02      	ldr	r3, [pc, #8]	; (b7fe8 <strdup+0xc>)
   b7fde:	4601      	mov	r1, r0
   b7fe0:	6818      	ldr	r0, [r3, #0]
   b7fe2:	f000 b803 	b.w	b7fec <_strdup_r>
   b7fe6:	bf00      	nop
   b7fe8:	2003e590 	.word	0x2003e590

000b7fec <_strdup_r>:
   b7fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7fee:	4604      	mov	r4, r0
   b7ff0:	4608      	mov	r0, r1
   b7ff2:	460d      	mov	r5, r1
   b7ff4:	f000 f80f 	bl	b8016 <strlen>
   b7ff8:	1c42      	adds	r2, r0, #1
   b7ffa:	4611      	mov	r1, r2
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	9201      	str	r2, [sp, #4]
   b8000:	f7fd fcaa 	bl	b5958 <_malloc_r>
   b8004:	4604      	mov	r4, r0
   b8006:	b118      	cbz	r0, b8010 <_strdup_r+0x24>
   b8008:	9a01      	ldr	r2, [sp, #4]
   b800a:	4629      	mov	r1, r5
   b800c:	f7ff ff90 	bl	b7f30 <memcpy>
   b8010:	4620      	mov	r0, r4
   b8012:	b003      	add	sp, #12
   b8014:	bd30      	pop	{r4, r5, pc}

000b8016 <strlen>:
   b8016:	4603      	mov	r3, r0
   b8018:	f813 2b01 	ldrb.w	r2, [r3], #1
   b801c:	2a00      	cmp	r2, #0
   b801e:	d1fb      	bne.n	b8018 <strlen+0x2>
   b8020:	1a18      	subs	r0, r3, r0
   b8022:	3801      	subs	r0, #1
   b8024:	4770      	bx	lr

000b8026 <strncpy>:
   b8026:	b510      	push	{r4, lr}
   b8028:	3901      	subs	r1, #1
   b802a:	4603      	mov	r3, r0
   b802c:	b132      	cbz	r2, b803c <strncpy+0x16>
   b802e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8032:	f803 4b01 	strb.w	r4, [r3], #1
   b8036:	3a01      	subs	r2, #1
   b8038:	2c00      	cmp	r4, #0
   b803a:	d1f7      	bne.n	b802c <strncpy+0x6>
   b803c:	441a      	add	r2, r3
   b803e:	2100      	movs	r1, #0
   b8040:	4293      	cmp	r3, r2
   b8042:	d100      	bne.n	b8046 <strncpy+0x20>
   b8044:	bd10      	pop	{r4, pc}
   b8046:	f803 1b01 	strb.w	r1, [r3], #1
   b804a:	e7f9      	b.n	b8040 <strncpy+0x1a>

000b804c <__register_exitproc>:
   b804c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8050:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b810c <__register_exitproc+0xc0>
   b8054:	4606      	mov	r6, r0
   b8056:	f8d8 0000 	ldr.w	r0, [r8]
   b805a:	461f      	mov	r7, r3
   b805c:	460d      	mov	r5, r1
   b805e:	4691      	mov	r9, r2
   b8060:	f000 f856 	bl	b8110 <__retarget_lock_acquire_recursive>
   b8064:	4b25      	ldr	r3, [pc, #148]	; (b80fc <__register_exitproc+0xb0>)
   b8066:	681c      	ldr	r4, [r3, #0]
   b8068:	b934      	cbnz	r4, b8078 <__register_exitproc+0x2c>
   b806a:	4c25      	ldr	r4, [pc, #148]	; (b8100 <__register_exitproc+0xb4>)
   b806c:	601c      	str	r4, [r3, #0]
   b806e:	4b25      	ldr	r3, [pc, #148]	; (b8104 <__register_exitproc+0xb8>)
   b8070:	b113      	cbz	r3, b8078 <__register_exitproc+0x2c>
   b8072:	681b      	ldr	r3, [r3, #0]
   b8074:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8078:	6863      	ldr	r3, [r4, #4]
   b807a:	2b1f      	cmp	r3, #31
   b807c:	dd07      	ble.n	b808e <__register_exitproc+0x42>
   b807e:	f8d8 0000 	ldr.w	r0, [r8]
   b8082:	f000 f847 	bl	b8114 <__retarget_lock_release_recursive>
   b8086:	f04f 30ff 	mov.w	r0, #4294967295
   b808a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b808e:	b34e      	cbz	r6, b80e4 <__register_exitproc+0x98>
   b8090:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8094:	b988      	cbnz	r0, b80ba <__register_exitproc+0x6e>
   b8096:	4b1c      	ldr	r3, [pc, #112]	; (b8108 <__register_exitproc+0xbc>)
   b8098:	b923      	cbnz	r3, b80a4 <__register_exitproc+0x58>
   b809a:	f8d8 0000 	ldr.w	r0, [r8]
   b809e:	f000 f838 	bl	b8112 <__retarget_lock_release>
   b80a2:	e7f0      	b.n	b8086 <__register_exitproc+0x3a>
   b80a4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b80a8:	f7fd fc1e 	bl	b58e8 <malloc>
   b80ac:	2800      	cmp	r0, #0
   b80ae:	d0f4      	beq.n	b809a <__register_exitproc+0x4e>
   b80b0:	2300      	movs	r3, #0
   b80b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b80b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b80ba:	6863      	ldr	r3, [r4, #4]
   b80bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b80c0:	2201      	movs	r2, #1
   b80c2:	409a      	lsls	r2, r3
   b80c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b80c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b80cc:	4313      	orrs	r3, r2
   b80ce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b80d2:	2e02      	cmp	r6, #2
   b80d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b80d8:	bf02      	ittt	eq
   b80da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b80de:	4313      	orreq	r3, r2
   b80e0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b80e4:	6863      	ldr	r3, [r4, #4]
   b80e6:	f8d8 0000 	ldr.w	r0, [r8]
   b80ea:	1c5a      	adds	r2, r3, #1
   b80ec:	3302      	adds	r3, #2
   b80ee:	6062      	str	r2, [r4, #4]
   b80f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b80f4:	f000 f80e 	bl	b8114 <__retarget_lock_release_recursive>
   b80f8:	2000      	movs	r0, #0
   b80fa:	e7c6      	b.n	b808a <__register_exitproc+0x3e>
   b80fc:	2003e7e8 	.word	0x2003e7e8
   b8100:	2003e75c 	.word	0x2003e75c
   b8104:	00000000 	.word	0x00000000
   b8108:	000b58e9 	.word	0x000b58e9
   b810c:	2003e5f4 	.word	0x2003e5f4

000b8110 <__retarget_lock_acquire_recursive>:
   b8110:	4770      	bx	lr

000b8112 <__retarget_lock_release>:
   b8112:	4770      	bx	lr

000b8114 <__retarget_lock_release_recursive>:
   b8114:	4770      	bx	lr

000b8116 <link_code_end>:
	...

000b8118 <dynalib_user>:
   b8118:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8128:	0000 0000 4842 3731 3035 4c00 6769 7468     ....BH1750.Light
   b8138:	6c2d 7875 5300 4443 3033 4300 324f 702d     -lux.SCD30.CO2-p
   b8148:	6d70 5400 6d65 2d70 0043 4852 252d 5000     pm.Temp-C.RH-%.P
   b8158:	534d 3041 3330 0049 7453 5f64 4d50 2e31     MSA003I.Std_PM1.
   b8168:	0030 7453 5f64 4d50 2e32 0035 7453 5f64     0.Std_PM2.5.Std_
   b8178:	4d50 3031 4500 766e 505f 314d 302e 4500     PM10.Env_PM1.0.E
   b8188:	766e 505f 324d 352e 4500 766e 505f 314d     nv_PM2.5.Env_PM1
   b8198:	0030 7771 6969 0063 4441 2d43 6176 006c     0.qwiic.ADC-val.
   b81a8:	4264 5600 4d45 364c 3730 0030 5655 6c2d     dB.VEML6070.UV-l
   b81b8:	6c76 4200 454d 3832 0030 2d50 626d 7261     vl.BME280.P-mbar
   b81c8:	7300 6e65 6f73 5f72 6164 6174 4300 6568     .sensor_data.Che
   b81d8:	6b63 6320 6e6f 656e 7463 6f69 736e 202e     ck connections. 
   b81e8:	6f4e 7320 616c 6576 6120 7474 6361 6568     No slave attache
   b81f8:	2e64 5400 7972 6e69 2067 6f74 6320 6e6f     d..Trying to con
   b8208:	656e 7463 4220 3148 3537 2030 754c 2078     nect BH1750 Lux 
   b8218:	6553 736e 726f 5400 7972 6e69 2067 6f74     Sensor.Trying to
   b8228:	6320 6e6f 656e 7463 4220 454d 3832 2030      connect BME280 
   b8238:	5450 2048 6553 736e 726f 5400 7972 6e69     PTH Sensor.Tryin
   b8248:	2067 6f74 6320 6e6f 656e 7463 5320 4443     g to connect SCD
   b8258:	3033 4320 324f 5320 6e65 6f73 0072 695a     30 CO2 Sensor.Zi
   b8268:	206f 7751 6969 2063 6f4c 6475 656e 7373     o Qwiic Loudness
   b8278:	5320 6e65 6f73 2072 614d 7473 7265 4120      Sensor Master A
   b8288:	6177 656b 6400 6665 7561 746c 0020 534d     wake.default .MS
   b8298:	0042 534c 0042 533c 4950 6553 7474 6e69     B.LSB.<SPISettin
   b82a8:	7367 6420 6665 7561 746c 003e 533c 4950     gs default>.<SPI
   b82b8:	6553 7474 6e69 7367 2520 2573 2075 7325     Settings %s%u %s
   b82c8:	4d20 444f 2545 3e75 0000 0000                MODE%u>....

000b82d4 <_ZTVN8particle11SPISettingsE>:
	...
   b82dc:	4785 000b 4757 000b 4759 000b               .G..WG..YG..

000b82e8 <_ZTVN5spark13EthernetClassE>:
	...
   b82f0:	5a07 000b 59fd 000b 59f3 000b 59e9 000b     .Z...Y...Y...Y..
   b8300:	59dd 000b 59d1 000b 6bf1 000b 6bf9 000b     .Y...Y...k...k..
   b8310:	59c5 000b 59bd 000b 59b3 000b 59a9 000b     .Y...Y...Y...Y..
   b8320:	6c29 000b                                   )l..

000b8324 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8324:	0800 1810 2820 3830 7061 0070 005a 2b25     .... (08app.Z.%+
   b8334:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   b8344:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   b8354:	6974 656d 0000 0000                         time....

000b835c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8364:	623d 000b 6243 000b 6281 000b 6251 000b     =b..Cb...b..Qb..
   b8374:	623f 000b                                   ?b..

000b8378 <_ZTV9IPAddress>:
	...
   b8380:	677d 000b 676d 000b 676f 000b               }g..mg..og..

000b838c <_ZTV9USBSerial>:
	...
   b8394:	6863 000b 68cb 000b 68a1 000b 5d5d 000b     ch...h...h..]]..
   b83a4:	6893 000b 6865 000b 6875 000b 68c5 000b     .h..eh..uh...h..
   b83b4:	6885 000b 685d 000b                         .h..]h..

000b83bc <_ZTV11USARTSerial>:
	...
   b83c4:	6965 000b 69d1 000b 69a9 000b 5d5d 000b     ei...i...i..]]..
   b83d4:	6979 000b 6995 000b 6987 000b 69a3 000b     yi...i...i...i..
   b83e4:	6967 000b 696b 000b                         gi..ki..

000b83ec <_ZTV7TwoWire>:
	...
   b83f4:	6a31 000b 6a7b 000b 6a53 000b 6a33 000b     1j..{j..Sj..3j..
   b8404:	6a5b 000b 6a63 000b 6a6b 000b 6a73 000b     [j..cj..kj..sj..

000b8414 <_ZTVN5spark9WiFiClassE>:
	...
   b841c:	6b93 000b 6b89 000b 6b7f 000b 6b35 000b     .k...k...k..5k..
   b842c:	6b73 000b 6b67 000b 6bf1 000b 6bf9 000b     sk..gk...k...k..
   b843c:	6b5b 000b 6b53 000b 6b49 000b 6b3f 000b     [k..Sk..Ik..?k..
   b844c:	6c29 000b                                   )l..

000b8450 <_ZTVN5spark12NetworkClassE>:
	...
   b8458:	6bb1 000b 6bbb 000b 6bc5 000b 6bcf 000b     .k...k...k...k..
   b8468:	6bd9 000b 6be5 000b 6bf1 000b 6bf9 000b     .k...k...k...k..
   b8478:	6c01 000b 6c0d 000b 6c15 000b 6c1f 000b     .l...l...l...l..
   b8488:	6c29 000b 6425 2500 0067 2575 3430 0078     )l..%d.%g.u%04x.

000b8498 <_ZTVN5spark16JSONBufferWriterE>:
	...
   b84a0:	6d15 000b 6d17 000b 6d25 000b 6d4b 000b     .m...m..%m..Km..

000b84b0 <_ZSt7nothrow>:
   b84b0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b84c0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b84d1 <day_name.1>:
   b84d1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b84e1:	6972 6153                                    riSat

000b84e6 <mon_name.0>:
   b84e6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b84f6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b8506:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b8516:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b8526:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b8536:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b8546:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b8556:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b8566:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b8576:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b8586:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b8596:	722f 6e61 2e64 0063                         /rand.c.

000b859e <_ctype_>:
   b859e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b85ae:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b85be:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b85ce:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b85de:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b85ee:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b85fe:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b860e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b861e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b869f <link_const_variable_data_end>:
	...

000b86a0 <link_constructors_location>:
   b86a0:	000b467d 	.word	0x000b467d
   b86a4:	000b5a11 	.word	0x000b5a11
   b86a8:	000b5b89 	.word	0x000b5b89
   b86ac:	000b5d4d 	.word	0x000b5d4d
   b86b0:	000b5e85 	.word	0x000b5e85
   b86b4:	000b60dd 	.word	0x000b60dd
   b86b8:	000b60f9 	.word	0x000b60f9
   b86bc:	000b6b9d 	.word	0x000b6b9d
   b86c0:	000b6d01 	.word	0x000b6d01

000b86c4 <link_constructors_end>:
	...
=======
   b72b8:	4770      	bx	lr
	...

000b72bc <_Z17acquireWireBufferv>:
{
   b72bc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b72be:	2520      	movs	r5, #32
   b72c0:	2314      	movs	r3, #20
{
   b72c2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b72c4:	6003      	str	r3, [r0, #0]
   b72c6:	6085      	str	r5, [r0, #8]
   b72c8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b72ca:	4906      	ldr	r1, [pc, #24]	; (b72e4 <_Z17acquireWireBufferv+0x28>)
   b72cc:	4628      	mov	r0, r5
   b72ce:	f000 f82f 	bl	b7330 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b72d2:	4904      	ldr	r1, [pc, #16]	; (b72e4 <_Z17acquireWireBufferv+0x28>)
	};
   b72d4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b72d6:	4628      	mov	r0, r5
   b72d8:	f000 f82a 	bl	b7330 <_ZnajRKSt9nothrow_t>
	};
   b72dc:	60e0      	str	r0, [r4, #12]
}
   b72de:	4620      	mov	r0, r4
   b72e0:	bd38      	pop	{r3, r4, r5, pc}
   b72e2:	bf00      	nop
   b72e4:	000b8718 	.word	0x000b8718

000b72e8 <_Z19__fetch_global_Wirev>:
{
   b72e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b72ea:	4d0e      	ldr	r5, [pc, #56]	; (b7324 <_Z19__fetch_global_Wirev+0x3c>)
   b72ec:	7829      	ldrb	r1, [r5, #0]
   b72ee:	f3bf 8f5b 	dmb	ish
   b72f2:	f011 0401 	ands.w	r4, r1, #1
{
   b72f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b72f8:	d111      	bne.n	b731e <_Z19__fetch_global_Wirev+0x36>
   b72fa:	4628      	mov	r0, r5
   b72fc:	f7fc fed1 	bl	b40a2 <__cxa_guard_acquire>
   b7300:	b168      	cbz	r0, b731e <_Z19__fetch_global_Wirev+0x36>
   b7302:	a801      	add	r0, sp, #4
   b7304:	f7ff ffda 	bl	b72bc <_Z17acquireWireBufferv>
   b7308:	aa01      	add	r2, sp, #4
   b730a:	4621      	mov	r1, r4
   b730c:	4806      	ldr	r0, [pc, #24]	; (b7328 <_Z19__fetch_global_Wirev+0x40>)
   b730e:	f7ff fcd1 	bl	b6cb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7312:	4628      	mov	r0, r5
   b7314:	f7fc feca 	bl	b40ac <__cxa_guard_release>
   b7318:	4804      	ldr	r0, [pc, #16]	; (b732c <_Z19__fetch_global_Wirev+0x44>)
   b731a:	f000 ff1b 	bl	b8154 <atexit>
	return wire;
}
   b731e:	4802      	ldr	r0, [pc, #8]	; (b7328 <_Z19__fetch_global_Wirev+0x40>)
   b7320:	b007      	add	sp, #28
   b7322:	bd30      	pop	{r4, r5, pc}
   b7324:	2003e744 	.word	0x2003e744
   b7328:	2003e748 	.word	0x2003e748
   b732c:	000b72b9 	.word	0x000b72b9

000b7330 <_ZnajRKSt9nothrow_t>:
   b7330:	f7fc beb3 	b.w	b409a <_Znaj>

000b7334 <_ZSt25__throw_bad_function_callv>:
   b7334:	b508      	push	{r3, lr}
   b7336:	f7fe fc21 	bl	b5b7c <abort>
	...

000b733c <__aeabi_drsub>:
   b733c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7340:	e002      	b.n	b7348 <__adddf3>
   b7342:	bf00      	nop

000b7344 <__aeabi_dsub>:
   b7344:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7348 <__adddf3>:
   b7348:	b530      	push	{r4, r5, lr}
   b734a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b734e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7352:	ea94 0f05 	teq	r4, r5
   b7356:	bf08      	it	eq
   b7358:	ea90 0f02 	teqeq	r0, r2
   b735c:	bf1f      	itttt	ne
   b735e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7362:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7366:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b736a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b736e:	f000 80e2 	beq.w	b7536 <__adddf3+0x1ee>
   b7372:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7376:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b737a:	bfb8      	it	lt
   b737c:	426d      	neglt	r5, r5
   b737e:	dd0c      	ble.n	b739a <__adddf3+0x52>
   b7380:	442c      	add	r4, r5
   b7382:	ea80 0202 	eor.w	r2, r0, r2
   b7386:	ea81 0303 	eor.w	r3, r1, r3
   b738a:	ea82 0000 	eor.w	r0, r2, r0
   b738e:	ea83 0101 	eor.w	r1, r3, r1
   b7392:	ea80 0202 	eor.w	r2, r0, r2
   b7396:	ea81 0303 	eor.w	r3, r1, r3
   b739a:	2d36      	cmp	r5, #54	; 0x36
   b739c:	bf88      	it	hi
   b739e:	bd30      	pophi	{r4, r5, pc}
   b73a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b73a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b73a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b73ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b73b0:	d002      	beq.n	b73b8 <__adddf3+0x70>
   b73b2:	4240      	negs	r0, r0
   b73b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b73b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b73bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b73c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b73c4:	d002      	beq.n	b73cc <__adddf3+0x84>
   b73c6:	4252      	negs	r2, r2
   b73c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b73cc:	ea94 0f05 	teq	r4, r5
   b73d0:	f000 80a7 	beq.w	b7522 <__adddf3+0x1da>
   b73d4:	f1a4 0401 	sub.w	r4, r4, #1
   b73d8:	f1d5 0e20 	rsbs	lr, r5, #32
   b73dc:	db0d      	blt.n	b73fa <__adddf3+0xb2>
   b73de:	fa02 fc0e 	lsl.w	ip, r2, lr
   b73e2:	fa22 f205 	lsr.w	r2, r2, r5
   b73e6:	1880      	adds	r0, r0, r2
   b73e8:	f141 0100 	adc.w	r1, r1, #0
   b73ec:	fa03 f20e 	lsl.w	r2, r3, lr
   b73f0:	1880      	adds	r0, r0, r2
   b73f2:	fa43 f305 	asr.w	r3, r3, r5
   b73f6:	4159      	adcs	r1, r3
   b73f8:	e00e      	b.n	b7418 <__adddf3+0xd0>
   b73fa:	f1a5 0520 	sub.w	r5, r5, #32
   b73fe:	f10e 0e20 	add.w	lr, lr, #32
   b7402:	2a01      	cmp	r2, #1
   b7404:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7408:	bf28      	it	cs
   b740a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b740e:	fa43 f305 	asr.w	r3, r3, r5
   b7412:	18c0      	adds	r0, r0, r3
   b7414:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b741c:	d507      	bpl.n	b742e <__adddf3+0xe6>
   b741e:	f04f 0e00 	mov.w	lr, #0
   b7422:	f1dc 0c00 	rsbs	ip, ip, #0
   b7426:	eb7e 0000 	sbcs.w	r0, lr, r0
   b742a:	eb6e 0101 	sbc.w	r1, lr, r1
   b742e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7432:	d31b      	bcc.n	b746c <__adddf3+0x124>
   b7434:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7438:	d30c      	bcc.n	b7454 <__adddf3+0x10c>
   b743a:	0849      	lsrs	r1, r1, #1
   b743c:	ea5f 0030 	movs.w	r0, r0, rrx
   b7440:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7444:	f104 0401 	add.w	r4, r4, #1
   b7448:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b744c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7450:	f080 809a 	bcs.w	b7588 <__adddf3+0x240>
   b7454:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7458:	bf08      	it	eq
   b745a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b745e:	f150 0000 	adcs.w	r0, r0, #0
   b7462:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7466:	ea41 0105 	orr.w	r1, r1, r5
   b746a:	bd30      	pop	{r4, r5, pc}
   b746c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7470:	4140      	adcs	r0, r0
   b7472:	eb41 0101 	adc.w	r1, r1, r1
   b7476:	3c01      	subs	r4, #1
   b7478:	bf28      	it	cs
   b747a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b747e:	d2e9      	bcs.n	b7454 <__adddf3+0x10c>
   b7480:	f091 0f00 	teq	r1, #0
   b7484:	bf04      	itt	eq
   b7486:	4601      	moveq	r1, r0
   b7488:	2000      	moveq	r0, #0
   b748a:	fab1 f381 	clz	r3, r1
   b748e:	bf08      	it	eq
   b7490:	3320      	addeq	r3, #32
   b7492:	f1a3 030b 	sub.w	r3, r3, #11
   b7496:	f1b3 0220 	subs.w	r2, r3, #32
   b749a:	da0c      	bge.n	b74b6 <__adddf3+0x16e>
   b749c:	320c      	adds	r2, #12
   b749e:	dd08      	ble.n	b74b2 <__adddf3+0x16a>
   b74a0:	f102 0c14 	add.w	ip, r2, #20
   b74a4:	f1c2 020c 	rsb	r2, r2, #12
   b74a8:	fa01 f00c 	lsl.w	r0, r1, ip
   b74ac:	fa21 f102 	lsr.w	r1, r1, r2
   b74b0:	e00c      	b.n	b74cc <__adddf3+0x184>
   b74b2:	f102 0214 	add.w	r2, r2, #20
   b74b6:	bfd8      	it	le
   b74b8:	f1c2 0c20 	rsble	ip, r2, #32
   b74bc:	fa01 f102 	lsl.w	r1, r1, r2
   b74c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b74c4:	bfdc      	itt	le
   b74c6:	ea41 010c 	orrle.w	r1, r1, ip
   b74ca:	4090      	lslle	r0, r2
   b74cc:	1ae4      	subs	r4, r4, r3
   b74ce:	bfa2      	ittt	ge
   b74d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b74d4:	4329      	orrge	r1, r5
   b74d6:	bd30      	popge	{r4, r5, pc}
   b74d8:	ea6f 0404 	mvn.w	r4, r4
   b74dc:	3c1f      	subs	r4, #31
   b74de:	da1c      	bge.n	b751a <__adddf3+0x1d2>
   b74e0:	340c      	adds	r4, #12
   b74e2:	dc0e      	bgt.n	b7502 <__adddf3+0x1ba>
   b74e4:	f104 0414 	add.w	r4, r4, #20
   b74e8:	f1c4 0220 	rsb	r2, r4, #32
   b74ec:	fa20 f004 	lsr.w	r0, r0, r4
   b74f0:	fa01 f302 	lsl.w	r3, r1, r2
   b74f4:	ea40 0003 	orr.w	r0, r0, r3
   b74f8:	fa21 f304 	lsr.w	r3, r1, r4
   b74fc:	ea45 0103 	orr.w	r1, r5, r3
   b7500:	bd30      	pop	{r4, r5, pc}
   b7502:	f1c4 040c 	rsb	r4, r4, #12
   b7506:	f1c4 0220 	rsb	r2, r4, #32
   b750a:	fa20 f002 	lsr.w	r0, r0, r2
   b750e:	fa01 f304 	lsl.w	r3, r1, r4
   b7512:	ea40 0003 	orr.w	r0, r0, r3
   b7516:	4629      	mov	r1, r5
   b7518:	bd30      	pop	{r4, r5, pc}
   b751a:	fa21 f004 	lsr.w	r0, r1, r4
   b751e:	4629      	mov	r1, r5
   b7520:	bd30      	pop	{r4, r5, pc}
   b7522:	f094 0f00 	teq	r4, #0
   b7526:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b752a:	bf06      	itte	eq
   b752c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7530:	3401      	addeq	r4, #1
   b7532:	3d01      	subne	r5, #1
   b7534:	e74e      	b.n	b73d4 <__adddf3+0x8c>
   b7536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b753a:	bf18      	it	ne
   b753c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7540:	d029      	beq.n	b7596 <__adddf3+0x24e>
   b7542:	ea94 0f05 	teq	r4, r5
   b7546:	bf08      	it	eq
   b7548:	ea90 0f02 	teqeq	r0, r2
   b754c:	d005      	beq.n	b755a <__adddf3+0x212>
   b754e:	ea54 0c00 	orrs.w	ip, r4, r0
   b7552:	bf04      	itt	eq
   b7554:	4619      	moveq	r1, r3
   b7556:	4610      	moveq	r0, r2
   b7558:	bd30      	pop	{r4, r5, pc}
   b755a:	ea91 0f03 	teq	r1, r3
   b755e:	bf1e      	ittt	ne
   b7560:	2100      	movne	r1, #0
   b7562:	2000      	movne	r0, #0
   b7564:	bd30      	popne	{r4, r5, pc}
   b7566:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b756a:	d105      	bne.n	b7578 <__adddf3+0x230>
   b756c:	0040      	lsls	r0, r0, #1
   b756e:	4149      	adcs	r1, r1
   b7570:	bf28      	it	cs
   b7572:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7576:	bd30      	pop	{r4, r5, pc}
   b7578:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b757c:	bf3c      	itt	cc
   b757e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7582:	bd30      	popcc	{r4, r5, pc}
   b7584:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7588:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b758c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7590:	f04f 0000 	mov.w	r0, #0
   b7594:	bd30      	pop	{r4, r5, pc}
   b7596:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b759a:	bf1a      	itte	ne
   b759c:	4619      	movne	r1, r3
   b759e:	4610      	movne	r0, r2
   b75a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b75a4:	bf1c      	itt	ne
   b75a6:	460b      	movne	r3, r1
   b75a8:	4602      	movne	r2, r0
   b75aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b75ae:	bf06      	itte	eq
   b75b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b75b4:	ea91 0f03 	teqeq	r1, r3
   b75b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b75bc:	bd30      	pop	{r4, r5, pc}
   b75be:	bf00      	nop

000b75c0 <__aeabi_ui2d>:
   b75c0:	f090 0f00 	teq	r0, #0
   b75c4:	bf04      	itt	eq
   b75c6:	2100      	moveq	r1, #0
   b75c8:	4770      	bxeq	lr
   b75ca:	b530      	push	{r4, r5, lr}
   b75cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b75d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b75d4:	f04f 0500 	mov.w	r5, #0
   b75d8:	f04f 0100 	mov.w	r1, #0
   b75dc:	e750      	b.n	b7480 <__adddf3+0x138>
   b75de:	bf00      	nop

000b75e0 <__aeabi_i2d>:
   b75e0:	f090 0f00 	teq	r0, #0
   b75e4:	bf04      	itt	eq
   b75e6:	2100      	moveq	r1, #0
   b75e8:	4770      	bxeq	lr
   b75ea:	b530      	push	{r4, r5, lr}
   b75ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b75f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b75f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b75f8:	bf48      	it	mi
   b75fa:	4240      	negmi	r0, r0
   b75fc:	f04f 0100 	mov.w	r1, #0
   b7600:	e73e      	b.n	b7480 <__adddf3+0x138>
   b7602:	bf00      	nop

000b7604 <__aeabi_f2d>:
   b7604:	0042      	lsls	r2, r0, #1
   b7606:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b760a:	ea4f 0131 	mov.w	r1, r1, rrx
   b760e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7612:	bf1f      	itttt	ne
   b7614:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7618:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b761c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7620:	4770      	bxne	lr
   b7622:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7626:	bf08      	it	eq
   b7628:	4770      	bxeq	lr
   b762a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b762e:	bf04      	itt	eq
   b7630:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7634:	4770      	bxeq	lr
   b7636:	b530      	push	{r4, r5, lr}
   b7638:	f44f 7460 	mov.w	r4, #896	; 0x380
   b763c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7640:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7644:	e71c      	b.n	b7480 <__adddf3+0x138>
   b7646:	bf00      	nop

000b7648 <__aeabi_ul2d>:
   b7648:	ea50 0201 	orrs.w	r2, r0, r1
   b764c:	bf08      	it	eq
   b764e:	4770      	bxeq	lr
   b7650:	b530      	push	{r4, r5, lr}
   b7652:	f04f 0500 	mov.w	r5, #0
   b7656:	e00a      	b.n	b766e <__aeabi_l2d+0x16>

000b7658 <__aeabi_l2d>:
   b7658:	ea50 0201 	orrs.w	r2, r0, r1
   b765c:	bf08      	it	eq
   b765e:	4770      	bxeq	lr
   b7660:	b530      	push	{r4, r5, lr}
   b7662:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7666:	d502      	bpl.n	b766e <__aeabi_l2d+0x16>
   b7668:	4240      	negs	r0, r0
   b766a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b766e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7672:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7676:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b767a:	f43f aed8 	beq.w	b742e <__adddf3+0xe6>
   b767e:	f04f 0203 	mov.w	r2, #3
   b7682:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7686:	bf18      	it	ne
   b7688:	3203      	addne	r2, #3
   b768a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b768e:	bf18      	it	ne
   b7690:	3203      	addne	r2, #3
   b7692:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7696:	f1c2 0320 	rsb	r3, r2, #32
   b769a:	fa00 fc03 	lsl.w	ip, r0, r3
   b769e:	fa20 f002 	lsr.w	r0, r0, r2
   b76a2:	fa01 fe03 	lsl.w	lr, r1, r3
   b76a6:	ea40 000e 	orr.w	r0, r0, lr
   b76aa:	fa21 f102 	lsr.w	r1, r1, r2
   b76ae:	4414      	add	r4, r2
   b76b0:	e6bd      	b.n	b742e <__adddf3+0xe6>
   b76b2:	bf00      	nop

000b76b4 <__aeabi_dmul>:
   b76b4:	b570      	push	{r4, r5, r6, lr}
   b76b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b76ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b76be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b76c2:	bf1d      	ittte	ne
   b76c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b76c8:	ea94 0f0c 	teqne	r4, ip
   b76cc:	ea95 0f0c 	teqne	r5, ip
   b76d0:	f000 f8de 	bleq	b7890 <__aeabi_dmul+0x1dc>
   b76d4:	442c      	add	r4, r5
   b76d6:	ea81 0603 	eor.w	r6, r1, r3
   b76da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b76de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b76e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b76e6:	bf18      	it	ne
   b76e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b76ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b76f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b76f4:	d038      	beq.n	b7768 <__aeabi_dmul+0xb4>
   b76f6:	fba0 ce02 	umull	ip, lr, r0, r2
   b76fa:	f04f 0500 	mov.w	r5, #0
   b76fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7702:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7706:	fbe0 e503 	umlal	lr, r5, r0, r3
   b770a:	f04f 0600 	mov.w	r6, #0
   b770e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7712:	f09c 0f00 	teq	ip, #0
   b7716:	bf18      	it	ne
   b7718:	f04e 0e01 	orrne.w	lr, lr, #1
   b771c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7720:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7724:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7728:	d204      	bcs.n	b7734 <__aeabi_dmul+0x80>
   b772a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b772e:	416d      	adcs	r5, r5
   b7730:	eb46 0606 	adc.w	r6, r6, r6
   b7734:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7738:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b773c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7740:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7744:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7748:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b774c:	bf88      	it	hi
   b774e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7752:	d81e      	bhi.n	b7792 <__aeabi_dmul+0xde>
   b7754:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7758:	bf08      	it	eq
   b775a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b775e:	f150 0000 	adcs.w	r0, r0, #0
   b7762:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7766:	bd70      	pop	{r4, r5, r6, pc}
   b7768:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b776c:	ea46 0101 	orr.w	r1, r6, r1
   b7770:	ea40 0002 	orr.w	r0, r0, r2
   b7774:	ea81 0103 	eor.w	r1, r1, r3
   b7778:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b777c:	bfc2      	ittt	gt
   b777e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7782:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7786:	bd70      	popgt	{r4, r5, r6, pc}
   b7788:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b778c:	f04f 0e00 	mov.w	lr, #0
   b7790:	3c01      	subs	r4, #1
   b7792:	f300 80ab 	bgt.w	b78ec <__aeabi_dmul+0x238>
   b7796:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b779a:	bfde      	ittt	le
   b779c:	2000      	movle	r0, #0
   b779e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b77a2:	bd70      	pople	{r4, r5, r6, pc}
   b77a4:	f1c4 0400 	rsb	r4, r4, #0
   b77a8:	3c20      	subs	r4, #32
   b77aa:	da35      	bge.n	b7818 <__aeabi_dmul+0x164>
   b77ac:	340c      	adds	r4, #12
   b77ae:	dc1b      	bgt.n	b77e8 <__aeabi_dmul+0x134>
   b77b0:	f104 0414 	add.w	r4, r4, #20
   b77b4:	f1c4 0520 	rsb	r5, r4, #32
   b77b8:	fa00 f305 	lsl.w	r3, r0, r5
   b77bc:	fa20 f004 	lsr.w	r0, r0, r4
   b77c0:	fa01 f205 	lsl.w	r2, r1, r5
   b77c4:	ea40 0002 	orr.w	r0, r0, r2
   b77c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b77cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b77d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b77d4:	fa21 f604 	lsr.w	r6, r1, r4
   b77d8:	eb42 0106 	adc.w	r1, r2, r6
   b77dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b77e0:	bf08      	it	eq
   b77e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b77e6:	bd70      	pop	{r4, r5, r6, pc}
   b77e8:	f1c4 040c 	rsb	r4, r4, #12
   b77ec:	f1c4 0520 	rsb	r5, r4, #32
   b77f0:	fa00 f304 	lsl.w	r3, r0, r4
   b77f4:	fa20 f005 	lsr.w	r0, r0, r5
   b77f8:	fa01 f204 	lsl.w	r2, r1, r4
   b77fc:	ea40 0002 	orr.w	r0, r0, r2
   b7800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7808:	f141 0100 	adc.w	r1, r1, #0
   b780c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7810:	bf08      	it	eq
   b7812:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7816:	bd70      	pop	{r4, r5, r6, pc}
   b7818:	f1c4 0520 	rsb	r5, r4, #32
   b781c:	fa00 f205 	lsl.w	r2, r0, r5
   b7820:	ea4e 0e02 	orr.w	lr, lr, r2
   b7824:	fa20 f304 	lsr.w	r3, r0, r4
   b7828:	fa01 f205 	lsl.w	r2, r1, r5
   b782c:	ea43 0302 	orr.w	r3, r3, r2
   b7830:	fa21 f004 	lsr.w	r0, r1, r4
   b7834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7838:	fa21 f204 	lsr.w	r2, r1, r4
   b783c:	ea20 0002 	bic.w	r0, r0, r2
   b7840:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7848:	bf08      	it	eq
   b784a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b784e:	bd70      	pop	{r4, r5, r6, pc}
   b7850:	f094 0f00 	teq	r4, #0
   b7854:	d10f      	bne.n	b7876 <__aeabi_dmul+0x1c2>
   b7856:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b785a:	0040      	lsls	r0, r0, #1
   b785c:	eb41 0101 	adc.w	r1, r1, r1
   b7860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7864:	bf08      	it	eq
   b7866:	3c01      	subeq	r4, #1
   b7868:	d0f7      	beq.n	b785a <__aeabi_dmul+0x1a6>
   b786a:	ea41 0106 	orr.w	r1, r1, r6
   b786e:	f095 0f00 	teq	r5, #0
   b7872:	bf18      	it	ne
   b7874:	4770      	bxne	lr
   b7876:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b787a:	0052      	lsls	r2, r2, #1
   b787c:	eb43 0303 	adc.w	r3, r3, r3
   b7880:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7884:	bf08      	it	eq
   b7886:	3d01      	subeq	r5, #1
   b7888:	d0f7      	beq.n	b787a <__aeabi_dmul+0x1c6>
   b788a:	ea43 0306 	orr.w	r3, r3, r6
   b788e:	4770      	bx	lr
   b7890:	ea94 0f0c 	teq	r4, ip
   b7894:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7898:	bf18      	it	ne
   b789a:	ea95 0f0c 	teqne	r5, ip
   b789e:	d00c      	beq.n	b78ba <__aeabi_dmul+0x206>
   b78a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b78a4:	bf18      	it	ne
   b78a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b78aa:	d1d1      	bne.n	b7850 <__aeabi_dmul+0x19c>
   b78ac:	ea81 0103 	eor.w	r1, r1, r3
   b78b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b78b4:	f04f 0000 	mov.w	r0, #0
   b78b8:	bd70      	pop	{r4, r5, r6, pc}
   b78ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b78be:	bf06      	itte	eq
   b78c0:	4610      	moveq	r0, r2
   b78c2:	4619      	moveq	r1, r3
   b78c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b78c8:	d019      	beq.n	b78fe <__aeabi_dmul+0x24a>
   b78ca:	ea94 0f0c 	teq	r4, ip
   b78ce:	d102      	bne.n	b78d6 <__aeabi_dmul+0x222>
   b78d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b78d4:	d113      	bne.n	b78fe <__aeabi_dmul+0x24a>
   b78d6:	ea95 0f0c 	teq	r5, ip
   b78da:	d105      	bne.n	b78e8 <__aeabi_dmul+0x234>
   b78dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b78e0:	bf1c      	itt	ne
   b78e2:	4610      	movne	r0, r2
   b78e4:	4619      	movne	r1, r3
   b78e6:	d10a      	bne.n	b78fe <__aeabi_dmul+0x24a>
   b78e8:	ea81 0103 	eor.w	r1, r1, r3
   b78ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b78f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b78f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b78f8:	f04f 0000 	mov.w	r0, #0
   b78fc:	bd70      	pop	{r4, r5, r6, pc}
   b78fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7902:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7906:	bd70      	pop	{r4, r5, r6, pc}

000b7908 <__aeabi_ddiv>:
   b7908:	b570      	push	{r4, r5, r6, lr}
   b790a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b790e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7912:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7916:	bf1d      	ittte	ne
   b7918:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b791c:	ea94 0f0c 	teqne	r4, ip
   b7920:	ea95 0f0c 	teqne	r5, ip
   b7924:	f000 f8a7 	bleq	b7a76 <__aeabi_ddiv+0x16e>
   b7928:	eba4 0405 	sub.w	r4, r4, r5
   b792c:	ea81 0e03 	eor.w	lr, r1, r3
   b7930:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7934:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7938:	f000 8088 	beq.w	b7a4c <__aeabi_ddiv+0x144>
   b793c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7940:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7944:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7948:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b794c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7950:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7954:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7958:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b795c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7960:	429d      	cmp	r5, r3
   b7962:	bf08      	it	eq
   b7964:	4296      	cmpeq	r6, r2
   b7966:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b796a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b796e:	d202      	bcs.n	b7976 <__aeabi_ddiv+0x6e>
   b7970:	085b      	lsrs	r3, r3, #1
   b7972:	ea4f 0232 	mov.w	r2, r2, rrx
   b7976:	1ab6      	subs	r6, r6, r2
   b7978:	eb65 0503 	sbc.w	r5, r5, r3
   b797c:	085b      	lsrs	r3, r3, #1
   b797e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7982:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7986:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b798a:	ebb6 0e02 	subs.w	lr, r6, r2
   b798e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7992:	bf22      	ittt	cs
   b7994:	1ab6      	subcs	r6, r6, r2
   b7996:	4675      	movcs	r5, lr
   b7998:	ea40 000c 	orrcs.w	r0, r0, ip
   b799c:	085b      	lsrs	r3, r3, #1
   b799e:	ea4f 0232 	mov.w	r2, r2, rrx
   b79a2:	ebb6 0e02 	subs.w	lr, r6, r2
   b79a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b79aa:	bf22      	ittt	cs
   b79ac:	1ab6      	subcs	r6, r6, r2
   b79ae:	4675      	movcs	r5, lr
   b79b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b79b4:	085b      	lsrs	r3, r3, #1
   b79b6:	ea4f 0232 	mov.w	r2, r2, rrx
   b79ba:	ebb6 0e02 	subs.w	lr, r6, r2
   b79be:	eb75 0e03 	sbcs.w	lr, r5, r3
   b79c2:	bf22      	ittt	cs
   b79c4:	1ab6      	subcs	r6, r6, r2
   b79c6:	4675      	movcs	r5, lr
   b79c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b79cc:	085b      	lsrs	r3, r3, #1
   b79ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b79d2:	ebb6 0e02 	subs.w	lr, r6, r2
   b79d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b79da:	bf22      	ittt	cs
   b79dc:	1ab6      	subcs	r6, r6, r2
   b79de:	4675      	movcs	r5, lr
   b79e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b79e4:	ea55 0e06 	orrs.w	lr, r5, r6
   b79e8:	d018      	beq.n	b7a1c <__aeabi_ddiv+0x114>
   b79ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b79ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b79f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b79f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b79fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b79fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7a02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7a06:	d1c0      	bne.n	b798a <__aeabi_ddiv+0x82>
   b7a08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7a0c:	d10b      	bne.n	b7a26 <__aeabi_ddiv+0x11e>
   b7a0e:	ea41 0100 	orr.w	r1, r1, r0
   b7a12:	f04f 0000 	mov.w	r0, #0
   b7a16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7a1a:	e7b6      	b.n	b798a <__aeabi_ddiv+0x82>
   b7a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7a20:	bf04      	itt	eq
   b7a22:	4301      	orreq	r1, r0
   b7a24:	2000      	moveq	r0, #0
   b7a26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7a2a:	bf88      	it	hi
   b7a2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7a30:	f63f aeaf 	bhi.w	b7792 <__aeabi_dmul+0xde>
   b7a34:	ebb5 0c03 	subs.w	ip, r5, r3
   b7a38:	bf04      	itt	eq
   b7a3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7a3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7a42:	f150 0000 	adcs.w	r0, r0, #0
   b7a46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7a4a:	bd70      	pop	{r4, r5, r6, pc}
   b7a4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7a50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7a54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7a58:	bfc2      	ittt	gt
   b7a5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7a5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7a62:	bd70      	popgt	{r4, r5, r6, pc}
   b7a64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7a68:	f04f 0e00 	mov.w	lr, #0
   b7a6c:	3c01      	subs	r4, #1
   b7a6e:	e690      	b.n	b7792 <__aeabi_dmul+0xde>
   b7a70:	ea45 0e06 	orr.w	lr, r5, r6
   b7a74:	e68d      	b.n	b7792 <__aeabi_dmul+0xde>
   b7a76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7a7a:	ea94 0f0c 	teq	r4, ip
   b7a7e:	bf08      	it	eq
   b7a80:	ea95 0f0c 	teqeq	r5, ip
   b7a84:	f43f af3b 	beq.w	b78fe <__aeabi_dmul+0x24a>
   b7a88:	ea94 0f0c 	teq	r4, ip
   b7a8c:	d10a      	bne.n	b7aa4 <__aeabi_ddiv+0x19c>
   b7a8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7a92:	f47f af34 	bne.w	b78fe <__aeabi_dmul+0x24a>
   b7a96:	ea95 0f0c 	teq	r5, ip
   b7a9a:	f47f af25 	bne.w	b78e8 <__aeabi_dmul+0x234>
   b7a9e:	4610      	mov	r0, r2
   b7aa0:	4619      	mov	r1, r3
   b7aa2:	e72c      	b.n	b78fe <__aeabi_dmul+0x24a>
   b7aa4:	ea95 0f0c 	teq	r5, ip
   b7aa8:	d106      	bne.n	b7ab8 <__aeabi_ddiv+0x1b0>
   b7aaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7aae:	f43f aefd 	beq.w	b78ac <__aeabi_dmul+0x1f8>
   b7ab2:	4610      	mov	r0, r2
   b7ab4:	4619      	mov	r1, r3
   b7ab6:	e722      	b.n	b78fe <__aeabi_dmul+0x24a>
   b7ab8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7abc:	bf18      	it	ne
   b7abe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7ac2:	f47f aec5 	bne.w	b7850 <__aeabi_dmul+0x19c>
   b7ac6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7aca:	f47f af0d 	bne.w	b78e8 <__aeabi_dmul+0x234>
   b7ace:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7ad2:	f47f aeeb 	bne.w	b78ac <__aeabi_dmul+0x1f8>
   b7ad6:	e712      	b.n	b78fe <__aeabi_dmul+0x24a>

000b7ad8 <__aeabi_d2f>:
   b7ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7ae0:	bf24      	itt	cs
   b7ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7aea:	d90d      	bls.n	b7b08 <__aeabi_d2f+0x30>
   b7aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7b00:	bf08      	it	eq
   b7b02:	f020 0001 	biceq.w	r0, r0, #1
   b7b06:	4770      	bx	lr
   b7b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7b0c:	d121      	bne.n	b7b52 <__aeabi_d2f+0x7a>
   b7b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7b12:	bfbc      	itt	lt
   b7b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7b18:	4770      	bxlt	lr
   b7b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7b22:	f1c2 0218 	rsb	r2, r2, #24
   b7b26:	f1c2 0c20 	rsb	ip, r2, #32
   b7b2a:	fa10 f30c 	lsls.w	r3, r0, ip
   b7b2e:	fa20 f002 	lsr.w	r0, r0, r2
   b7b32:	bf18      	it	ne
   b7b34:	f040 0001 	orrne.w	r0, r0, #1
   b7b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7b40:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7b44:	ea40 000c 	orr.w	r0, r0, ip
   b7b48:	fa23 f302 	lsr.w	r3, r3, r2
   b7b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7b50:	e7cc      	b.n	b7aec <__aeabi_d2f+0x14>
   b7b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7b56:	d107      	bne.n	b7b68 <__aeabi_d2f+0x90>
   b7b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7b5c:	bf1e      	ittt	ne
   b7b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7b66:	4770      	bxne	lr
   b7b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7b74:	4770      	bx	lr
   b7b76:	bf00      	nop

000b7b78 <__aeabi_frsub>:
   b7b78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b7b7c:	e002      	b.n	b7b84 <__addsf3>
   b7b7e:	bf00      	nop

000b7b80 <__aeabi_fsub>:
   b7b80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7b84 <__addsf3>:
   b7b84:	0042      	lsls	r2, r0, #1
   b7b86:	bf1f      	itttt	ne
   b7b88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b7b8c:	ea92 0f03 	teqne	r2, r3
   b7b90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b7b94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7b98:	d06a      	beq.n	b7c70 <__addsf3+0xec>
   b7b9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b7b9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b7ba2:	bfc1      	itttt	gt
   b7ba4:	18d2      	addgt	r2, r2, r3
   b7ba6:	4041      	eorgt	r1, r0
   b7ba8:	4048      	eorgt	r0, r1
   b7baa:	4041      	eorgt	r1, r0
   b7bac:	bfb8      	it	lt
   b7bae:	425b      	neglt	r3, r3
   b7bb0:	2b19      	cmp	r3, #25
   b7bb2:	bf88      	it	hi
   b7bb4:	4770      	bxhi	lr
   b7bb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b7bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7bbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b7bc2:	bf18      	it	ne
   b7bc4:	4240      	negne	r0, r0
   b7bc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7bca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b7bce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b7bd2:	bf18      	it	ne
   b7bd4:	4249      	negne	r1, r1
   b7bd6:	ea92 0f03 	teq	r2, r3
   b7bda:	d03f      	beq.n	b7c5c <__addsf3+0xd8>
   b7bdc:	f1a2 0201 	sub.w	r2, r2, #1
   b7be0:	fa41 fc03 	asr.w	ip, r1, r3
   b7be4:	eb10 000c 	adds.w	r0, r0, ip
   b7be8:	f1c3 0320 	rsb	r3, r3, #32
   b7bec:	fa01 f103 	lsl.w	r1, r1, r3
   b7bf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7bf4:	d502      	bpl.n	b7bfc <__addsf3+0x78>
   b7bf6:	4249      	negs	r1, r1
   b7bf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b7bfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b7c00:	d313      	bcc.n	b7c2a <__addsf3+0xa6>
   b7c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b7c06:	d306      	bcc.n	b7c16 <__addsf3+0x92>
   b7c08:	0840      	lsrs	r0, r0, #1
   b7c0a:	ea4f 0131 	mov.w	r1, r1, rrx
   b7c0e:	f102 0201 	add.w	r2, r2, #1
   b7c12:	2afe      	cmp	r2, #254	; 0xfe
   b7c14:	d251      	bcs.n	b7cba <__addsf3+0x136>
   b7c16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b7c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b7c1e:	bf08      	it	eq
   b7c20:	f020 0001 	biceq.w	r0, r0, #1
   b7c24:	ea40 0003 	orr.w	r0, r0, r3
   b7c28:	4770      	bx	lr
   b7c2a:	0049      	lsls	r1, r1, #1
   b7c2c:	eb40 0000 	adc.w	r0, r0, r0
   b7c30:	3a01      	subs	r2, #1
   b7c32:	bf28      	it	cs
   b7c34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b7c38:	d2ed      	bcs.n	b7c16 <__addsf3+0x92>
   b7c3a:	fab0 fc80 	clz	ip, r0
   b7c3e:	f1ac 0c08 	sub.w	ip, ip, #8
   b7c42:	ebb2 020c 	subs.w	r2, r2, ip
   b7c46:	fa00 f00c 	lsl.w	r0, r0, ip
   b7c4a:	bfaa      	itet	ge
   b7c4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7c50:	4252      	neglt	r2, r2
   b7c52:	4318      	orrge	r0, r3
   b7c54:	bfbc      	itt	lt
   b7c56:	40d0      	lsrlt	r0, r2
   b7c58:	4318      	orrlt	r0, r3
   b7c5a:	4770      	bx	lr
   b7c5c:	f092 0f00 	teq	r2, #0
   b7c60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7c64:	bf06      	itte	eq
   b7c66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b7c6a:	3201      	addeq	r2, #1
   b7c6c:	3b01      	subne	r3, #1
   b7c6e:	e7b5      	b.n	b7bdc <__addsf3+0x58>
   b7c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b7c78:	bf18      	it	ne
   b7c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7c7e:	d021      	beq.n	b7cc4 <__addsf3+0x140>
   b7c80:	ea92 0f03 	teq	r2, r3
   b7c84:	d004      	beq.n	b7c90 <__addsf3+0x10c>
   b7c86:	f092 0f00 	teq	r2, #0
   b7c8a:	bf08      	it	eq
   b7c8c:	4608      	moveq	r0, r1
   b7c8e:	4770      	bx	lr
   b7c90:	ea90 0f01 	teq	r0, r1
   b7c94:	bf1c      	itt	ne
   b7c96:	2000      	movne	r0, #0
   b7c98:	4770      	bxne	lr
   b7c9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b7c9e:	d104      	bne.n	b7caa <__addsf3+0x126>
   b7ca0:	0040      	lsls	r0, r0, #1
   b7ca2:	bf28      	it	cs
   b7ca4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b7ca8:	4770      	bx	lr
   b7caa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b7cae:	bf3c      	itt	cc
   b7cb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b7cb4:	4770      	bxcc	lr
   b7cb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7cba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b7cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7cc2:	4770      	bx	lr
   b7cc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b7cc8:	bf16      	itet	ne
   b7cca:	4608      	movne	r0, r1
   b7ccc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b7cd0:	4601      	movne	r1, r0
   b7cd2:	0242      	lsls	r2, r0, #9
   b7cd4:	bf06      	itte	eq
   b7cd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b7cda:	ea90 0f01 	teqeq	r0, r1
   b7cde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b7ce2:	4770      	bx	lr

000b7ce4 <__aeabi_ui2f>:
   b7ce4:	f04f 0300 	mov.w	r3, #0
   b7ce8:	e004      	b.n	b7cf4 <__aeabi_i2f+0x8>
   b7cea:	bf00      	nop

000b7cec <__aeabi_i2f>:
   b7cec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b7cf0:	bf48      	it	mi
   b7cf2:	4240      	negmi	r0, r0
   b7cf4:	ea5f 0c00 	movs.w	ip, r0
   b7cf8:	bf08      	it	eq
   b7cfa:	4770      	bxeq	lr
   b7cfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7d00:	4601      	mov	r1, r0
   b7d02:	f04f 0000 	mov.w	r0, #0
   b7d06:	e01c      	b.n	b7d42 <__aeabi_l2f+0x2a>

000b7d08 <__aeabi_ul2f>:
   b7d08:	ea50 0201 	orrs.w	r2, r0, r1
   b7d0c:	bf08      	it	eq
   b7d0e:	4770      	bxeq	lr
   b7d10:	f04f 0300 	mov.w	r3, #0
   b7d14:	e00a      	b.n	b7d2c <__aeabi_l2f+0x14>
   b7d16:	bf00      	nop

000b7d18 <__aeabi_l2f>:
   b7d18:	ea50 0201 	orrs.w	r2, r0, r1
   b7d1c:	bf08      	it	eq
   b7d1e:	4770      	bxeq	lr
   b7d20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7d24:	d502      	bpl.n	b7d2c <__aeabi_l2f+0x14>
   b7d26:	4240      	negs	r0, r0
   b7d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7d2c:	ea5f 0c01 	movs.w	ip, r1
   b7d30:	bf02      	ittt	eq
   b7d32:	4684      	moveq	ip, r0
   b7d34:	4601      	moveq	r1, r0
   b7d36:	2000      	moveq	r0, #0
   b7d38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b7d3c:	bf08      	it	eq
   b7d3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7d42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b7d46:	fabc f28c 	clz	r2, ip
   b7d4a:	3a08      	subs	r2, #8
   b7d4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7d50:	db10      	blt.n	b7d74 <__aeabi_l2f+0x5c>
   b7d52:	fa01 fc02 	lsl.w	ip, r1, r2
   b7d56:	4463      	add	r3, ip
   b7d58:	fa00 fc02 	lsl.w	ip, r0, r2
   b7d5c:	f1c2 0220 	rsb	r2, r2, #32
   b7d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7d64:	fa20 f202 	lsr.w	r2, r0, r2
   b7d68:	eb43 0002 	adc.w	r0, r3, r2
   b7d6c:	bf08      	it	eq
   b7d6e:	f020 0001 	biceq.w	r0, r0, #1
   b7d72:	4770      	bx	lr
   b7d74:	f102 0220 	add.w	r2, r2, #32
   b7d78:	fa01 fc02 	lsl.w	ip, r1, r2
   b7d7c:	f1c2 0220 	rsb	r2, r2, #32
   b7d80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7d84:	fa21 f202 	lsr.w	r2, r1, r2
   b7d88:	eb43 0002 	adc.w	r0, r3, r2
   b7d8c:	bf08      	it	eq
   b7d8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7d92:	4770      	bx	lr

000b7d94 <__aeabi_ldivmod>:
   b7d94:	b97b      	cbnz	r3, b7db6 <__aeabi_ldivmod+0x22>
   b7d96:	b972      	cbnz	r2, b7db6 <__aeabi_ldivmod+0x22>
   b7d98:	2900      	cmp	r1, #0
   b7d9a:	bfbe      	ittt	lt
   b7d9c:	2000      	movlt	r0, #0
   b7d9e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b7da2:	e006      	blt.n	b7db2 <__aeabi_ldivmod+0x1e>
   b7da4:	bf08      	it	eq
   b7da6:	2800      	cmpeq	r0, #0
   b7da8:	bf1c      	itt	ne
   b7daa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b7dae:	f04f 30ff 	movne.w	r0, #4294967295
   b7db2:	f000 b9a7 	b.w	b8104 <__aeabi_idiv0>
   b7db6:	f1ad 0c08 	sub.w	ip, sp, #8
   b7dba:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7dbe:	2900      	cmp	r1, #0
   b7dc0:	db09      	blt.n	b7dd6 <__aeabi_ldivmod+0x42>
   b7dc2:	2b00      	cmp	r3, #0
   b7dc4:	db1a      	blt.n	b7dfc <__aeabi_ldivmod+0x68>
   b7dc6:	f000 f835 	bl	b7e34 <__udivmoddi4>
   b7dca:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7dd2:	b004      	add	sp, #16
   b7dd4:	4770      	bx	lr
   b7dd6:	4240      	negs	r0, r0
   b7dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7ddc:	2b00      	cmp	r3, #0
   b7dde:	db1b      	blt.n	b7e18 <__aeabi_ldivmod+0x84>
   b7de0:	f000 f828 	bl	b7e34 <__udivmoddi4>
   b7de4:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7dec:	b004      	add	sp, #16
   b7dee:	4240      	negs	r0, r0
   b7df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7df4:	4252      	negs	r2, r2
   b7df6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7dfa:	4770      	bx	lr
   b7dfc:	4252      	negs	r2, r2
   b7dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7e02:	f000 f817 	bl	b7e34 <__udivmoddi4>
   b7e06:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7e0e:	b004      	add	sp, #16
   b7e10:	4240      	negs	r0, r0
   b7e12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7e16:	4770      	bx	lr
   b7e18:	4252      	negs	r2, r2
   b7e1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7e1e:	f000 f809 	bl	b7e34 <__udivmoddi4>
   b7e22:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7e2a:	b004      	add	sp, #16
   b7e2c:	4252      	negs	r2, r2
   b7e2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7e32:	4770      	bx	lr

000b7e34 <__udivmoddi4>:
   b7e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7e38:	9d08      	ldr	r5, [sp, #32]
   b7e3a:	4604      	mov	r4, r0
   b7e3c:	468e      	mov	lr, r1
   b7e3e:	2b00      	cmp	r3, #0
   b7e40:	d14d      	bne.n	b7ede <__udivmoddi4+0xaa>
   b7e42:	428a      	cmp	r2, r1
   b7e44:	4694      	mov	ip, r2
   b7e46:	d969      	bls.n	b7f1c <__udivmoddi4+0xe8>
   b7e48:	fab2 f282 	clz	r2, r2
   b7e4c:	b152      	cbz	r2, b7e64 <__udivmoddi4+0x30>
   b7e4e:	fa01 f302 	lsl.w	r3, r1, r2
   b7e52:	f1c2 0120 	rsb	r1, r2, #32
   b7e56:	fa20 f101 	lsr.w	r1, r0, r1
   b7e5a:	fa0c fc02 	lsl.w	ip, ip, r2
   b7e5e:	ea41 0e03 	orr.w	lr, r1, r3
   b7e62:	4094      	lsls	r4, r2
   b7e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7e68:	0c21      	lsrs	r1, r4, #16
   b7e6a:	fbbe f6f8 	udiv	r6, lr, r8
   b7e6e:	fa1f f78c 	uxth.w	r7, ip
   b7e72:	fb08 e316 	mls	r3, r8, r6, lr
   b7e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b7e7a:	fb06 f107 	mul.w	r1, r6, r7
   b7e7e:	4299      	cmp	r1, r3
   b7e80:	d90a      	bls.n	b7e98 <__udivmoddi4+0x64>
   b7e82:	eb1c 0303 	adds.w	r3, ip, r3
   b7e86:	f106 30ff 	add.w	r0, r6, #4294967295
   b7e8a:	f080 811f 	bcs.w	b80cc <__udivmoddi4+0x298>
   b7e8e:	4299      	cmp	r1, r3
   b7e90:	f240 811c 	bls.w	b80cc <__udivmoddi4+0x298>
   b7e94:	3e02      	subs	r6, #2
   b7e96:	4463      	add	r3, ip
   b7e98:	1a5b      	subs	r3, r3, r1
   b7e9a:	b2a4      	uxth	r4, r4
   b7e9c:	fbb3 f0f8 	udiv	r0, r3, r8
   b7ea0:	fb08 3310 	mls	r3, r8, r0, r3
   b7ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7ea8:	fb00 f707 	mul.w	r7, r0, r7
   b7eac:	42a7      	cmp	r7, r4
   b7eae:	d90a      	bls.n	b7ec6 <__udivmoddi4+0x92>
   b7eb0:	eb1c 0404 	adds.w	r4, ip, r4
   b7eb4:	f100 33ff 	add.w	r3, r0, #4294967295
   b7eb8:	f080 810a 	bcs.w	b80d0 <__udivmoddi4+0x29c>
   b7ebc:	42a7      	cmp	r7, r4
   b7ebe:	f240 8107 	bls.w	b80d0 <__udivmoddi4+0x29c>
   b7ec2:	4464      	add	r4, ip
   b7ec4:	3802      	subs	r0, #2
   b7ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b7eca:	1be4      	subs	r4, r4, r7
   b7ecc:	2600      	movs	r6, #0
   b7ece:	b11d      	cbz	r5, b7ed8 <__udivmoddi4+0xa4>
   b7ed0:	40d4      	lsrs	r4, r2
   b7ed2:	2300      	movs	r3, #0
   b7ed4:	e9c5 4300 	strd	r4, r3, [r5]
   b7ed8:	4631      	mov	r1, r6
   b7eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7ede:	428b      	cmp	r3, r1
   b7ee0:	d909      	bls.n	b7ef6 <__udivmoddi4+0xc2>
   b7ee2:	2d00      	cmp	r5, #0
   b7ee4:	f000 80ef 	beq.w	b80c6 <__udivmoddi4+0x292>
   b7ee8:	2600      	movs	r6, #0
   b7eea:	e9c5 0100 	strd	r0, r1, [r5]
   b7eee:	4630      	mov	r0, r6
   b7ef0:	4631      	mov	r1, r6
   b7ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7ef6:	fab3 f683 	clz	r6, r3
   b7efa:	2e00      	cmp	r6, #0
   b7efc:	d14a      	bne.n	b7f94 <__udivmoddi4+0x160>
   b7efe:	428b      	cmp	r3, r1
   b7f00:	d302      	bcc.n	b7f08 <__udivmoddi4+0xd4>
   b7f02:	4282      	cmp	r2, r0
   b7f04:	f200 80f9 	bhi.w	b80fa <__udivmoddi4+0x2c6>
   b7f08:	1a84      	subs	r4, r0, r2
   b7f0a:	eb61 0303 	sbc.w	r3, r1, r3
   b7f0e:	2001      	movs	r0, #1
   b7f10:	469e      	mov	lr, r3
   b7f12:	2d00      	cmp	r5, #0
   b7f14:	d0e0      	beq.n	b7ed8 <__udivmoddi4+0xa4>
   b7f16:	e9c5 4e00 	strd	r4, lr, [r5]
   b7f1a:	e7dd      	b.n	b7ed8 <__udivmoddi4+0xa4>
   b7f1c:	b902      	cbnz	r2, b7f20 <__udivmoddi4+0xec>
   b7f1e:	deff      	udf	#255	; 0xff
   b7f20:	fab2 f282 	clz	r2, r2
   b7f24:	2a00      	cmp	r2, #0
   b7f26:	f040 8092 	bne.w	b804e <__udivmoddi4+0x21a>
   b7f2a:	eba1 010c 	sub.w	r1, r1, ip
   b7f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7f32:	fa1f fe8c 	uxth.w	lr, ip
   b7f36:	2601      	movs	r6, #1
   b7f38:	0c20      	lsrs	r0, r4, #16
   b7f3a:	fbb1 f3f7 	udiv	r3, r1, r7
   b7f3e:	fb07 1113 	mls	r1, r7, r3, r1
   b7f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7f46:	fb0e f003 	mul.w	r0, lr, r3
   b7f4a:	4288      	cmp	r0, r1
   b7f4c:	d908      	bls.n	b7f60 <__udivmoddi4+0x12c>
   b7f4e:	eb1c 0101 	adds.w	r1, ip, r1
   b7f52:	f103 38ff 	add.w	r8, r3, #4294967295
   b7f56:	d202      	bcs.n	b7f5e <__udivmoddi4+0x12a>
   b7f58:	4288      	cmp	r0, r1
   b7f5a:	f200 80cb 	bhi.w	b80f4 <__udivmoddi4+0x2c0>
   b7f5e:	4643      	mov	r3, r8
   b7f60:	1a09      	subs	r1, r1, r0
   b7f62:	b2a4      	uxth	r4, r4
   b7f64:	fbb1 f0f7 	udiv	r0, r1, r7
   b7f68:	fb07 1110 	mls	r1, r7, r0, r1
   b7f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7f70:	fb0e fe00 	mul.w	lr, lr, r0
   b7f74:	45a6      	cmp	lr, r4
   b7f76:	d908      	bls.n	b7f8a <__udivmoddi4+0x156>
   b7f78:	eb1c 0404 	adds.w	r4, ip, r4
   b7f7c:	f100 31ff 	add.w	r1, r0, #4294967295
   b7f80:	d202      	bcs.n	b7f88 <__udivmoddi4+0x154>
   b7f82:	45a6      	cmp	lr, r4
   b7f84:	f200 80bb 	bhi.w	b80fe <__udivmoddi4+0x2ca>
   b7f88:	4608      	mov	r0, r1
   b7f8a:	eba4 040e 	sub.w	r4, r4, lr
   b7f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7f92:	e79c      	b.n	b7ece <__udivmoddi4+0x9a>
   b7f94:	f1c6 0720 	rsb	r7, r6, #32
   b7f98:	40b3      	lsls	r3, r6
   b7f9a:	fa22 fc07 	lsr.w	ip, r2, r7
   b7f9e:	ea4c 0c03 	orr.w	ip, ip, r3
   b7fa2:	fa20 f407 	lsr.w	r4, r0, r7
   b7fa6:	fa01 f306 	lsl.w	r3, r1, r6
   b7faa:	431c      	orrs	r4, r3
   b7fac:	40f9      	lsrs	r1, r7
   b7fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7fb2:	fa00 f306 	lsl.w	r3, r0, r6
   b7fb6:	fbb1 f8f9 	udiv	r8, r1, r9
   b7fba:	0c20      	lsrs	r0, r4, #16
   b7fbc:	fa1f fe8c 	uxth.w	lr, ip
   b7fc0:	fb09 1118 	mls	r1, r9, r8, r1
   b7fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7fc8:	fb08 f00e 	mul.w	r0, r8, lr
   b7fcc:	4288      	cmp	r0, r1
   b7fce:	fa02 f206 	lsl.w	r2, r2, r6
   b7fd2:	d90b      	bls.n	b7fec <__udivmoddi4+0x1b8>
   b7fd4:	eb1c 0101 	adds.w	r1, ip, r1
   b7fd8:	f108 3aff 	add.w	sl, r8, #4294967295
   b7fdc:	f080 8088 	bcs.w	b80f0 <__udivmoddi4+0x2bc>
   b7fe0:	4288      	cmp	r0, r1
   b7fe2:	f240 8085 	bls.w	b80f0 <__udivmoddi4+0x2bc>
   b7fe6:	f1a8 0802 	sub.w	r8, r8, #2
   b7fea:	4461      	add	r1, ip
   b7fec:	1a09      	subs	r1, r1, r0
   b7fee:	b2a4      	uxth	r4, r4
   b7ff0:	fbb1 f0f9 	udiv	r0, r1, r9
   b7ff4:	fb09 1110 	mls	r1, r9, r0, r1
   b7ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7ffc:	fb00 fe0e 	mul.w	lr, r0, lr
   b8000:	458e      	cmp	lr, r1
   b8002:	d908      	bls.n	b8016 <__udivmoddi4+0x1e2>
   b8004:	eb1c 0101 	adds.w	r1, ip, r1
   b8008:	f100 34ff 	add.w	r4, r0, #4294967295
   b800c:	d26c      	bcs.n	b80e8 <__udivmoddi4+0x2b4>
   b800e:	458e      	cmp	lr, r1
   b8010:	d96a      	bls.n	b80e8 <__udivmoddi4+0x2b4>
   b8012:	3802      	subs	r0, #2
   b8014:	4461      	add	r1, ip
   b8016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b801a:	fba0 9402 	umull	r9, r4, r0, r2
   b801e:	eba1 010e 	sub.w	r1, r1, lr
   b8022:	42a1      	cmp	r1, r4
   b8024:	46c8      	mov	r8, r9
   b8026:	46a6      	mov	lr, r4
   b8028:	d356      	bcc.n	b80d8 <__udivmoddi4+0x2a4>
   b802a:	d053      	beq.n	b80d4 <__udivmoddi4+0x2a0>
   b802c:	b15d      	cbz	r5, b8046 <__udivmoddi4+0x212>
   b802e:	ebb3 0208 	subs.w	r2, r3, r8
   b8032:	eb61 010e 	sbc.w	r1, r1, lr
   b8036:	fa01 f707 	lsl.w	r7, r1, r7
   b803a:	fa22 f306 	lsr.w	r3, r2, r6
   b803e:	40f1      	lsrs	r1, r6
   b8040:	431f      	orrs	r7, r3
   b8042:	e9c5 7100 	strd	r7, r1, [r5]
   b8046:	2600      	movs	r6, #0
   b8048:	4631      	mov	r1, r6
   b804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b804e:	f1c2 0320 	rsb	r3, r2, #32
   b8052:	40d8      	lsrs	r0, r3
   b8054:	fa0c fc02 	lsl.w	ip, ip, r2
   b8058:	fa21 f303 	lsr.w	r3, r1, r3
   b805c:	4091      	lsls	r1, r2
   b805e:	4301      	orrs	r1, r0
   b8060:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8064:	fa1f fe8c 	uxth.w	lr, ip
   b8068:	fbb3 f0f7 	udiv	r0, r3, r7
   b806c:	fb07 3610 	mls	r6, r7, r0, r3
   b8070:	0c0b      	lsrs	r3, r1, #16
   b8072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b8076:	fb00 f60e 	mul.w	r6, r0, lr
   b807a:	429e      	cmp	r6, r3
   b807c:	fa04 f402 	lsl.w	r4, r4, r2
   b8080:	d908      	bls.n	b8094 <__udivmoddi4+0x260>
   b8082:	eb1c 0303 	adds.w	r3, ip, r3
   b8086:	f100 38ff 	add.w	r8, r0, #4294967295
   b808a:	d22f      	bcs.n	b80ec <__udivmoddi4+0x2b8>
   b808c:	429e      	cmp	r6, r3
   b808e:	d92d      	bls.n	b80ec <__udivmoddi4+0x2b8>
   b8090:	3802      	subs	r0, #2
   b8092:	4463      	add	r3, ip
   b8094:	1b9b      	subs	r3, r3, r6
   b8096:	b289      	uxth	r1, r1
   b8098:	fbb3 f6f7 	udiv	r6, r3, r7
   b809c:	fb07 3316 	mls	r3, r7, r6, r3
   b80a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b80a4:	fb06 f30e 	mul.w	r3, r6, lr
   b80a8:	428b      	cmp	r3, r1
   b80aa:	d908      	bls.n	b80be <__udivmoddi4+0x28a>
   b80ac:	eb1c 0101 	adds.w	r1, ip, r1
   b80b0:	f106 38ff 	add.w	r8, r6, #4294967295
   b80b4:	d216      	bcs.n	b80e4 <__udivmoddi4+0x2b0>
   b80b6:	428b      	cmp	r3, r1
   b80b8:	d914      	bls.n	b80e4 <__udivmoddi4+0x2b0>
   b80ba:	3e02      	subs	r6, #2
   b80bc:	4461      	add	r1, ip
   b80be:	1ac9      	subs	r1, r1, r3
   b80c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b80c4:	e738      	b.n	b7f38 <__udivmoddi4+0x104>
   b80c6:	462e      	mov	r6, r5
   b80c8:	4628      	mov	r0, r5
   b80ca:	e705      	b.n	b7ed8 <__udivmoddi4+0xa4>
   b80cc:	4606      	mov	r6, r0
   b80ce:	e6e3      	b.n	b7e98 <__udivmoddi4+0x64>
   b80d0:	4618      	mov	r0, r3
   b80d2:	e6f8      	b.n	b7ec6 <__udivmoddi4+0x92>
   b80d4:	454b      	cmp	r3, r9
   b80d6:	d2a9      	bcs.n	b802c <__udivmoddi4+0x1f8>
   b80d8:	ebb9 0802 	subs.w	r8, r9, r2
   b80dc:	eb64 0e0c 	sbc.w	lr, r4, ip
   b80e0:	3801      	subs	r0, #1
   b80e2:	e7a3      	b.n	b802c <__udivmoddi4+0x1f8>
   b80e4:	4646      	mov	r6, r8
   b80e6:	e7ea      	b.n	b80be <__udivmoddi4+0x28a>
   b80e8:	4620      	mov	r0, r4
   b80ea:	e794      	b.n	b8016 <__udivmoddi4+0x1e2>
   b80ec:	4640      	mov	r0, r8
   b80ee:	e7d1      	b.n	b8094 <__udivmoddi4+0x260>
   b80f0:	46d0      	mov	r8, sl
   b80f2:	e77b      	b.n	b7fec <__udivmoddi4+0x1b8>
   b80f4:	3b02      	subs	r3, #2
   b80f6:	4461      	add	r1, ip
   b80f8:	e732      	b.n	b7f60 <__udivmoddi4+0x12c>
   b80fa:	4630      	mov	r0, r6
   b80fc:	e709      	b.n	b7f12 <__udivmoddi4+0xde>
   b80fe:	4464      	add	r4, ip
   b8100:	3802      	subs	r0, #2
   b8102:	e742      	b.n	b7f8a <__udivmoddi4+0x156>

000b8104 <__aeabi_idiv0>:
   b8104:	4770      	bx	lr
   b8106:	bf00      	nop

000b8108 <asctime_r>:
   b8108:	b510      	push	{r4, lr}
   b810a:	460c      	mov	r4, r1
   b810c:	6941      	ldr	r1, [r0, #20]
   b810e:	6903      	ldr	r3, [r0, #16]
   b8110:	6982      	ldr	r2, [r0, #24]
   b8112:	b086      	sub	sp, #24
   b8114:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b8118:	9104      	str	r1, [sp, #16]
   b811a:	6801      	ldr	r1, [r0, #0]
   b811c:	9103      	str	r1, [sp, #12]
   b811e:	6841      	ldr	r1, [r0, #4]
   b8120:	9102      	str	r1, [sp, #8]
   b8122:	6881      	ldr	r1, [r0, #8]
   b8124:	9101      	str	r1, [sp, #4]
   b8126:	68c1      	ldr	r1, [r0, #12]
   b8128:	9100      	str	r1, [sp, #0]
   b812a:	4907      	ldr	r1, [pc, #28]	; (b8148 <asctime_r+0x40>)
   b812c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8130:	440b      	add	r3, r1
   b8132:	4906      	ldr	r1, [pc, #24]	; (b814c <asctime_r+0x44>)
   b8134:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b8138:	440a      	add	r2, r1
   b813a:	4620      	mov	r0, r4
   b813c:	4904      	ldr	r1, [pc, #16]	; (b8150 <asctime_r+0x48>)
   b813e:	f7fd fd05 	bl	b5b4c <siprintf>
   b8142:	4620      	mov	r0, r4
   b8144:	b006      	add	sp, #24
   b8146:	bd10      	pop	{r4, pc}
   b8148:	000b874e 	.word	0x000b874e
   b814c:	000b8739 	.word	0x000b8739
   b8150:	000b8719 	.word	0x000b8719

000b8154 <atexit>:
   b8154:	2300      	movs	r3, #0
   b8156:	4601      	mov	r1, r0
   b8158:	461a      	mov	r2, r3
   b815a:	4618      	mov	r0, r3
   b815c:	f000 b896 	b.w	b828c <__register_exitproc>

000b8160 <isprint>:
   b8160:	4b02      	ldr	r3, [pc, #8]	; (b816c <isprint+0xc>)
   b8162:	4418      	add	r0, r3
   b8164:	7840      	ldrb	r0, [r0, #1]
   b8166:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b816a:	4770      	bx	lr
   b816c:	000b8806 	.word	0x000b8806

000b8170 <memcpy>:
   b8170:	440a      	add	r2, r1
   b8172:	4291      	cmp	r1, r2
   b8174:	f100 33ff 	add.w	r3, r0, #4294967295
   b8178:	d100      	bne.n	b817c <memcpy+0xc>
   b817a:	4770      	bx	lr
   b817c:	b510      	push	{r4, lr}
   b817e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8182:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8186:	4291      	cmp	r1, r2
   b8188:	d1f9      	bne.n	b817e <memcpy+0xe>
   b818a:	bd10      	pop	{r4, pc}

000b818c <memset>:
   b818c:	4402      	add	r2, r0
   b818e:	4603      	mov	r3, r0
   b8190:	4293      	cmp	r3, r2
   b8192:	d100      	bne.n	b8196 <memset+0xa>
   b8194:	4770      	bx	lr
   b8196:	f803 1b01 	strb.w	r1, [r3], #1
   b819a:	e7f9      	b.n	b8190 <memset+0x4>

000b819c <srand>:
   b819c:	b538      	push	{r3, r4, r5, lr}
   b819e:	4b10      	ldr	r3, [pc, #64]	; (b81e0 <srand+0x44>)
   b81a0:	681d      	ldr	r5, [r3, #0]
   b81a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b81a4:	4604      	mov	r4, r0
   b81a6:	b9b3      	cbnz	r3, b81d6 <srand+0x3a>
   b81a8:	2018      	movs	r0, #24
   b81aa:	f7fd fcb7 	bl	b5b1c <malloc>
   b81ae:	4602      	mov	r2, r0
   b81b0:	63a8      	str	r0, [r5, #56]	; 0x38
   b81b2:	b920      	cbnz	r0, b81be <srand+0x22>
   b81b4:	4b0b      	ldr	r3, [pc, #44]	; (b81e4 <srand+0x48>)
   b81b6:	480c      	ldr	r0, [pc, #48]	; (b81e8 <srand+0x4c>)
   b81b8:	2142      	movs	r1, #66	; 0x42
   b81ba:	f7fd fcef 	bl	b5b9c <__assert_func>
   b81be:	490b      	ldr	r1, [pc, #44]	; (b81ec <srand+0x50>)
   b81c0:	4b0b      	ldr	r3, [pc, #44]	; (b81f0 <srand+0x54>)
   b81c2:	e9c0 1300 	strd	r1, r3, [r0]
   b81c6:	4b0b      	ldr	r3, [pc, #44]	; (b81f4 <srand+0x58>)
   b81c8:	6083      	str	r3, [r0, #8]
   b81ca:	230b      	movs	r3, #11
   b81cc:	8183      	strh	r3, [r0, #12]
   b81ce:	2100      	movs	r1, #0
   b81d0:	2001      	movs	r0, #1
   b81d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b81d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b81d8:	2200      	movs	r2, #0
   b81da:	611c      	str	r4, [r3, #16]
   b81dc:	615a      	str	r2, [r3, #20]
   b81de:	bd38      	pop	{r3, r4, r5, pc}
   b81e0:	2003e590 	.word	0x2003e590
   b81e4:	000b8772 	.word	0x000b8772
   b81e8:	000b8789 	.word	0x000b8789
   b81ec:	abcd330e 	.word	0xabcd330e
   b81f0:	e66d1234 	.word	0xe66d1234
   b81f4:	0005deec 	.word	0x0005deec

000b81f8 <strcmp>:
   b81f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b81fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8200:	2a01      	cmp	r2, #1
   b8202:	bf28      	it	cs
   b8204:	429a      	cmpcs	r2, r3
   b8206:	d0f7      	beq.n	b81f8 <strcmp>
   b8208:	1ad0      	subs	r0, r2, r3
   b820a:	4770      	bx	lr

000b820c <strcpy>:
   b820c:	4603      	mov	r3, r0
   b820e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8212:	f803 2b01 	strb.w	r2, [r3], #1
   b8216:	2a00      	cmp	r2, #0
   b8218:	d1f9      	bne.n	b820e <strcpy+0x2>
   b821a:	4770      	bx	lr

000b821c <strdup>:
   b821c:	4b02      	ldr	r3, [pc, #8]	; (b8228 <strdup+0xc>)
   b821e:	4601      	mov	r1, r0
   b8220:	6818      	ldr	r0, [r3, #0]
   b8222:	f000 b803 	b.w	b822c <_strdup_r>
   b8226:	bf00      	nop
   b8228:	2003e590 	.word	0x2003e590

000b822c <_strdup_r>:
   b822c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b822e:	4604      	mov	r4, r0
   b8230:	4608      	mov	r0, r1
   b8232:	460d      	mov	r5, r1
   b8234:	f000 f80f 	bl	b8256 <strlen>
   b8238:	1c42      	adds	r2, r0, #1
   b823a:	4611      	mov	r1, r2
   b823c:	4620      	mov	r0, r4
   b823e:	9201      	str	r2, [sp, #4]
   b8240:	f7fd fca4 	bl	b5b8c <_malloc_r>
   b8244:	4604      	mov	r4, r0
   b8246:	b118      	cbz	r0, b8250 <_strdup_r+0x24>
   b8248:	9a01      	ldr	r2, [sp, #4]
   b824a:	4629      	mov	r1, r5
   b824c:	f7ff ff90 	bl	b8170 <memcpy>
   b8250:	4620      	mov	r0, r4
   b8252:	b003      	add	sp, #12
   b8254:	bd30      	pop	{r4, r5, pc}

000b8256 <strlen>:
   b8256:	4603      	mov	r3, r0
   b8258:	f813 2b01 	ldrb.w	r2, [r3], #1
   b825c:	2a00      	cmp	r2, #0
   b825e:	d1fb      	bne.n	b8258 <strlen+0x2>
   b8260:	1a18      	subs	r0, r3, r0
   b8262:	3801      	subs	r0, #1
   b8264:	4770      	bx	lr

000b8266 <strncpy>:
   b8266:	b510      	push	{r4, lr}
   b8268:	3901      	subs	r1, #1
   b826a:	4603      	mov	r3, r0
   b826c:	b132      	cbz	r2, b827c <strncpy+0x16>
   b826e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8272:	f803 4b01 	strb.w	r4, [r3], #1
   b8276:	3a01      	subs	r2, #1
   b8278:	2c00      	cmp	r4, #0
   b827a:	d1f7      	bne.n	b826c <strncpy+0x6>
   b827c:	441a      	add	r2, r3
   b827e:	2100      	movs	r1, #0
   b8280:	4293      	cmp	r3, r2
   b8282:	d100      	bne.n	b8286 <strncpy+0x20>
   b8284:	bd10      	pop	{r4, pc}
   b8286:	f803 1b01 	strb.w	r1, [r3], #1
   b828a:	e7f9      	b.n	b8280 <strncpy+0x1a>

000b828c <__register_exitproc>:
   b828c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8290:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b834c <__register_exitproc+0xc0>
   b8294:	4606      	mov	r6, r0
   b8296:	f8d8 0000 	ldr.w	r0, [r8]
   b829a:	461f      	mov	r7, r3
   b829c:	460d      	mov	r5, r1
   b829e:	4691      	mov	r9, r2
   b82a0:	f000 f856 	bl	b8350 <__retarget_lock_acquire_recursive>
   b82a4:	4b25      	ldr	r3, [pc, #148]	; (b833c <__register_exitproc+0xb0>)
   b82a6:	681c      	ldr	r4, [r3, #0]
   b82a8:	b934      	cbnz	r4, b82b8 <__register_exitproc+0x2c>
   b82aa:	4c25      	ldr	r4, [pc, #148]	; (b8340 <__register_exitproc+0xb4>)
   b82ac:	601c      	str	r4, [r3, #0]
   b82ae:	4b25      	ldr	r3, [pc, #148]	; (b8344 <__register_exitproc+0xb8>)
   b82b0:	b113      	cbz	r3, b82b8 <__register_exitproc+0x2c>
   b82b2:	681b      	ldr	r3, [r3, #0]
   b82b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b82b8:	6863      	ldr	r3, [r4, #4]
   b82ba:	2b1f      	cmp	r3, #31
   b82bc:	dd07      	ble.n	b82ce <__register_exitproc+0x42>
   b82be:	f8d8 0000 	ldr.w	r0, [r8]
   b82c2:	f000 f847 	bl	b8354 <__retarget_lock_release_recursive>
   b82c6:	f04f 30ff 	mov.w	r0, #4294967295
   b82ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b82ce:	b34e      	cbz	r6, b8324 <__register_exitproc+0x98>
   b82d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b82d4:	b988      	cbnz	r0, b82fa <__register_exitproc+0x6e>
   b82d6:	4b1c      	ldr	r3, [pc, #112]	; (b8348 <__register_exitproc+0xbc>)
   b82d8:	b923      	cbnz	r3, b82e4 <__register_exitproc+0x58>
   b82da:	f8d8 0000 	ldr.w	r0, [r8]
   b82de:	f000 f838 	bl	b8352 <__retarget_lock_release>
   b82e2:	e7f0      	b.n	b82c6 <__register_exitproc+0x3a>
   b82e4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b82e8:	f7fd fc18 	bl	b5b1c <malloc>
   b82ec:	2800      	cmp	r0, #0
   b82ee:	d0f4      	beq.n	b82da <__register_exitproc+0x4e>
   b82f0:	2300      	movs	r3, #0
   b82f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b82f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b82fa:	6863      	ldr	r3, [r4, #4]
   b82fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8300:	2201      	movs	r2, #1
   b8302:	409a      	lsls	r2, r3
   b8304:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8308:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b830c:	4313      	orrs	r3, r2
   b830e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8312:	2e02      	cmp	r6, #2
   b8314:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8318:	bf02      	ittt	eq
   b831a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b831e:	4313      	orreq	r3, r2
   b8320:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8324:	6863      	ldr	r3, [r4, #4]
   b8326:	f8d8 0000 	ldr.w	r0, [r8]
   b832a:	1c5a      	adds	r2, r3, #1
   b832c:	3302      	adds	r3, #2
   b832e:	6062      	str	r2, [r4, #4]
   b8330:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8334:	f000 f80e 	bl	b8354 <__retarget_lock_release_recursive>
   b8338:	2000      	movs	r0, #0
   b833a:	e7c6      	b.n	b82ca <__register_exitproc+0x3e>
   b833c:	2003e7e8 	.word	0x2003e7e8
   b8340:	2003e75c 	.word	0x2003e75c
   b8344:	00000000 	.word	0x00000000
   b8348:	000b5b1d 	.word	0x000b5b1d
   b834c:	2003e5f4 	.word	0x2003e5f4

000b8350 <__retarget_lock_acquire_recursive>:
   b8350:	4770      	bx	lr

000b8352 <__retarget_lock_release>:
   b8352:	4770      	bx	lr

000b8354 <__retarget_lock_release_recursive>:
   b8354:	4770      	bx	lr

000b8356 <link_code_end>:
	...

000b8358 <dynalib_user>:
   b8358:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8368:	0000 0000 4842 3731 3035 6c00 7875 5300     ....BH1750.lux.S
   b8378:	4443 3033 4300 324f 702d 6d70 5400 6d65     CD30.CO2-ppm.Tem
   b8388:	4370 5200 2548 5000 534d 3041 3330 0049     pC.RH%.PMSA003I.
   b8398:	7453 5064 314d 302e 5300 6474 4d50 2e32     StdPM1.0.StdPM2.
   b83a8:	0035 7453 5064 314d 0030 6e45 5076 314d     5.StdPM10.EnvPM1
   b83b8:	302e 4500 766e 4d50 2e32 0035 6e45 5076     .0.EnvPM2.5.EnvP
   b83c8:	314d 0030 7771 6969 0063 4441 0043 4264     M10.qwiic.ADC.dB
   b83d8:	5600 4d45 364c 3730 0030 5655 4200 454d     .VEML6070.UV.BME
   b83e8:	3832 0030 2d50 626d 7261 4300 6568 6b63     280.P-mbar.Check
   b83f8:	6320 6e6f 656e 7463 6f69 736e 202e 6f4e      connections. No
   b8408:	7320 616c 6576 6120 7474 6361 6568 2e64      slave attached.
   b8418:	5400 7972 6e69 2067 6f74 6320 6e6f 656e     .Trying to conne
   b8428:	7463 4220 3148 3537 2030 754c 2078 6553     ct BH1750 Lux Se
   b8438:	736e 726f 5400 7972 6e69 2067 6f74 6320     nsor.Trying to c
   b8448:	6e6f 656e 7463 4220 454d 3832 2030 5450     onnect BME280 PT
   b8458:	2048 6553 736e 726f 5400 7972 6e69 2067     H Sensor.Trying 
   b8468:	6f74 6320 6e6f 656e 7463 5320 4443 3033     to connect SCD30
   b8478:	4320 324f 5320 6e65 6f73 0072 695a 206f      CO2 Sensor.Zio 
   b8488:	7751 6969 2063 6f4c 6475 656e 7373 5320     Qwiic Loudness S
   b8498:	6e65 6f73 2072 614d 7473 7265 4120 6177     ensor Master Awa
   b84a8:	656b 6400 7665 6369 4965 0044 6154 656b     ke.deviceID.Take
   b84b8:	5220 6165 6964 676e 7700 6669 2069 6e6f      Reading.wifi on
   b84c8:	7000 7261 6974 6c63 2065 6f63 6e6e 6365     .particle connec
   b84d8:	6574 0064 6f43 6c6c 7461 6465 003a 6573     ted.Collated:.se
   b84e8:	736e 726f 722d 6165 6964 676e 0073 6564     nsor-readings.de
   b84f8:	6166 6c75 2074 4d00 4253 4c00 4253 3c00     fault .MSB.LSB.<
   b8508:	5053 5349 7465 6974 676e 2073 6564 6166     SPISettings defa
   b8518:	6c75 3e74 3c00 5053 5349 7465 6974 676e     ult>.<SPISetting
   b8528:	2073 7325 7525 2520 2073 4f4d 4544 7525     s %s%u %s MODE%u
   b8538:	003e 0000                                   >...

000b853c <_ZTVN8particle11SPISettingsE>:
	...
   b8544:	4959 000b 492b 000b 492d 000b               YI..+I..-I..

000b8550 <_ZTVN5spark13EthernetClassE>:
	...
   b8558:	5c3b 000b 5c31 000b 5c27 000b 5c1d 000b     ;\..1\..'\...\..
   b8568:	5c11 000b 5c05 000b 6e11 000b 6e19 000b     .\...\...n...n..
   b8578:	5bf9 000b 5bf1 000b 5be7 000b 5bdd 000b     .[...[...[...[..
   b8588:	6e49 000b                                   In..

000b858c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b858c:	0800 1810 2820 3830 7061 0070 005a 2b25     .... (08app.Z.%+
   b859c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   b85ac:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   b85bc:	6974 656d 0000 0000                         time....

000b85c4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b85cc:	63fd 000b 6403 000b 6441 000b 6411 000b     .c...d..Ad...d..
   b85dc:	63ff 000b                                   .c..

000b85e0 <_ZTV9IPAddress>:
	...
   b85e8:	69a9 000b 6999 000b 699b 000b               .i...i...i..

000b85f4 <_ZTV9USBSerial>:
	...
   b85fc:	6a8f 000b 6af7 000b 6acd 000b 5f1d 000b     .j...j...j..._..
   b860c:	6abf 000b 6a91 000b 6aa1 000b 6af1 000b     .j...j...j...j..
   b861c:	6ab1 000b 6a89 000b                         .j...j..

000b8624 <_ZTV11USARTSerial>:
	...
   b862c:	6b91 000b 6bfd 000b 6bd5 000b 5f1d 000b     .k...k...k..._..
   b863c:	6ba5 000b 6bc1 000b 6bb3 000b 6bcf 000b     .k...k...k...k..
   b864c:	6b93 000b 6b97 000b                         .k...k..

000b8654 <_ZTV7TwoWire>:
	...
   b865c:	6c5d 000b 6ca7 000b 6c7f 000b 6c5f 000b     ]l...l...l.._l..
   b866c:	6c87 000b 6c8f 000b 6c97 000b 6c9f 000b     .l...l...l...l..

000b867c <_ZTVN5spark9WiFiClassE>:
	...
   b8684:	6db3 000b 6da9 000b 6d9f 000b 6d61 000b     .m...m...m..am..
   b8694:	6d93 000b 40b3 000b 6e11 000b 6e19 000b     .m...@...n...n..
   b86a4:	6d87 000b 6d7f 000b 6d75 000b 6d6b 000b     .m...m..um..km..
   b86b4:	6e49 000b                                   In..

000b86b8 <_ZTVN5spark12NetworkClassE>:
	...
   b86c0:	6dd1 000b 6ddb 000b 6de5 000b 6def 000b     .m...m...m...m..
   b86d0:	6df9 000b 6e05 000b 6e11 000b 6e19 000b     .m...n...n...n..
   b86e0:	6e21 000b 6e2d 000b 6e35 000b 6e3f 000b     !n..-n..5n..?n..
   b86f0:	6e49 000b 6425 2500 0067 2575 3430 0078     In..%d.%g.u%04x.

000b8700 <_ZTVN5spark16JSONBufferWriterE>:
	...
   b8708:	6f35 000b 6f37 000b 6f45 000b 6f6b 000b     5o..7o..Eo..ko..

000b8718 <_ZSt7nothrow>:
   b8718:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b8728:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b8739 <day_name.1>:
   b8739:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b8749:	6972 6153                                    riSat

000b874e <mon_name.0>:
   b874e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b875e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b876e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b877e:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b878e:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b879e:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b87ae:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b87be:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b87ce:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b87de:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b87ee:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b87fe:	722f 6e61 2e64 0063                         /rand.c.

000b8806 <_ctype_>:
   b8806:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8816:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8826:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8836:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8846:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8856:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8866:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8876:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8886:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b8907 <link_const_variable_data_end>:
	...

000b8908 <link_constructors_location>:
   b8908:	000b4841 	.word	0x000b4841
   b890c:	000b5c45 	.word	0x000b5c45
   b8910:	000b5dbd 	.word	0x000b5dbd
   b8914:	000b5f0d 	.word	0x000b5f0d
   b8918:	000b6045 	.word	0x000b6045
   b891c:	000b629d 	.word	0x000b629d
   b8920:	000b62b9 	.word	0x000b62b9
   b8924:	000b6dbd 	.word	0x000b6dbd
   b8928:	000b6f21 	.word	0x000b6f21

000b892c <link_constructors_end>:
   b892c:	00000000 	.word	0x00000000
>>>>>>> collate-readings
