
d:/JSN/Desktop/repos/c53-iot/sensors/target/3.3.0/argon/sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004100  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8120  000b8120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b8144  000b8144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b814c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e5a4  000b8150  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e0  2003e610  2003e610  0002e610  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b81bc  000b81bc  000281bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b81e4  000b81e4  000281e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00126529  00000000  00000000  000281e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015704  00000000  00000000  0014e711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00038640  00000000  00000000  00163e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c60  00000000  00000000  0019c455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009dc0  00000000  00000000  0019f0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004072d  00000000  00000000  001a8e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00049274  00000000  00000000  001e95a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00130692  00000000  00000000  00232816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007f4c  00000000  00000000  00362ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fd17 	bl	b7a64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fd1f 	bl	b7a80 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5a4 	.word	0x2003e5a4
   b404c:	000b8150 	.word	0x000b8150
   b4050:	2003e610 	.word	0x2003e610
   b4054:	2003e610 	.word	0x2003e610
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 f91d 	bl	b62a0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b80fc 	.word	0x000b80fc
   b4080:	000b8120 	.word	0x000b8120

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b8f4 	b.w	b4270 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa29 	bl	b44e0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 b8bd 	b.w	b6210 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bbe1 	b.w	b585c <malloc>

000b409a <_Znaj>:
   b409a:	f001 bbdf 	b.w	b585c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bbe5 	b.w	b586c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	b40e      	push	{r1, r2, r3}
   b40b4:	b503      	push	{r0, r1, lr}
   b40b6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40b8:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ba:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40c0:	f001 fee9 	bl	b5e96 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c4:	b002      	add	sp, #8
   b40c6:	f85d eb04 	ldr.w	lr, [sp], #4
   b40ca:	b003      	add	sp, #12
   b40cc:	4770      	bx	lr
	...

000b40d0 <_Z8getValuev>:

	uv.begin(VEML6070_1_T);
}

void getValue()
{
   b40d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Wire.beginTransmission(qwiicAddress);
   b40d4:	f002 fca8 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b40d8:	2130      	movs	r1, #48	; 0x30
   b40da:	f002 fad1 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(COMMAND_GET_VALUE); // command for status
   b40de:	f002 fca3 	bl	b6a28 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40e2:	6803      	ldr	r3, [r0, #0]
		uint8_t ADC_VALUE_H = Wire.read();
		// Serial.print("ADC_VALUE_H: ");
		// Serial.println(ADC_VALUE_H,DEC);
		ADC_VALUE=ADC_VALUE_H;
		ADC_VALUE<<=8;
		ADC_VALUE|=ADC_VALUE_L;
   b40e4:	4d28      	ldr	r5, [pc, #160]	; (b4188 <_Z8getValuev+0xb8>)
   b40e6:	689b      	ldr	r3, [r3, #8]
   b40e8:	2105      	movs	r1, #5
   b40ea:	4798      	blx	r3
	Wire.endTransmission(); // stop transmitting //this looks like it was essential.
   b40ec:	f002 fc9c 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b40f0:	f002 fad1 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(qwiicAddress, 2); // request 1 bytes from slave device qwiicAddress
   b40f4:	f002 fc98 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b40f8:	2202      	movs	r2, #2
   b40fa:	2130      	movs	r1, #48	; 0x30
   b40fc:	f002 fabd 	bl	b667a <_ZN7TwoWire11requestFromEhj>
		float dB = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b4100:	f20f 0974 	addw	r9, pc, #116	; 0x74
   b4104:	e9d9 8900 	ldrd	r8, r9, [r9]
   b4108:	a71d      	add	r7, pc, #116	; (adr r7, b4180 <_Z8getValuev+0xb0>)
   b410a:	e9d7 6700 	ldrd	r6, r7, [r7]
	while (Wire.available())
   b410e:	f002 fc8b 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b4112:	6803      	ldr	r3, [r0, #0]
   b4114:	691b      	ldr	r3, [r3, #16]
   b4116:	4798      	blx	r3
   b4118:	b358      	cbz	r0, b4172 <_Z8getValuev+0xa2>
		uint8_t ADC_VALUE_L = Wire.read();
   b411a:	f002 fc85 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b411e:	6803      	ldr	r3, [r0, #0]
   b4120:	695b      	ldr	r3, [r3, #20]
   b4122:	4798      	blx	r3
   b4124:	4604      	mov	r4, r0
		uint8_t ADC_VALUE_H = Wire.read();
   b4126:	f002 fc7f 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b412a:	6803      	ldr	r3, [r0, #0]
   b412c:	695b      	ldr	r3, [r3, #20]
   b412e:	4798      	blx	r3
		ADC_VALUE|=ADC_VALUE_L;
   b4130:	b2e4      	uxtb	r4, r4
		ADC_VALUE=ADC_VALUE_H;
   b4132:	b2c0      	uxtb	r0, r0
		ADC_VALUE|=ADC_VALUE_L;
   b4134:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
   b4138:	802c      	strh	r4, [r5, #0]
		//Serial.print("ADC_VALUE: ");
		//Serial.println(ADC_VALUE,DEC);
		Serial.printlnf("ADC VALUE: %u, dB: %.2f",ADC_VALUE,dB);
   b413a:	f002 f9b9 	bl	b64b0 <_Z16_fetch_usbserialv>
   b413e:	4682      	mov	sl, r0
		float dB = (ADC_VALUE+83.2073) / 11.003; //emprical formula to convert ADC value to dB
   b4140:	4620      	mov	r0, r4
   b4142:	f002 fde9 	bl	b6d18 <__aeabi_i2d>
   b4146:	4642      	mov	r2, r8
   b4148:	464b      	mov	r3, r9
   b414a:	f002 fc99 	bl	b6a80 <__adddf3>
   b414e:	4632      	mov	r2, r6
   b4150:	463b      	mov	r3, r7
   b4152:	f002 ff75 	bl	b7040 <__aeabi_ddiv>
   b4156:	f003 f941 	bl	b73dc <__aeabi_d2f>
		Serial.printlnf("ADC VALUE: %u, dB: %.2f",ADC_VALUE,dB);
   b415a:	f002 fdef 	bl	b6d3c <__aeabi_f2d>
   b415e:	f8b5 b000 	ldrh.w	fp, [r5]
   b4162:	e9cd 0100 	strd	r0, r1, [sp]
   b4166:	465a      	mov	r2, fp
   b4168:	4908      	ldr	r1, [pc, #32]	; (b418c <_Z8getValuev+0xbc>)
   b416a:	4650      	mov	r0, sl
   b416c:	f7ff ffa1 	bl	b40b2 <_ZN5Print8printlnfEPKcz>
	while (Wire.available())
   b4170:	e7cd      	b.n	b410e <_Z8getValuev+0x3e>
	}
}
   b4172:	b003      	add	sp, #12
   b4174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4178:	67381d7e 	.word	0x67381d7e
   b417c:	4054cd44 	.word	0x4054cd44
   b4180:	374bc6a8 	.word	0x374bc6a8
   b4184:	40260189 	.word	0x40260189
   b4188:	2003e610 	.word	0x2003e610
   b418c:	000b7c28 	.word	0x000b7c28

000b4190 <_Z19testForConnectivityv>:

// testForConnectivity() checks for an ACK from an Sensor. If no ACK
// program freezes and notifies user.
void testForConnectivity()
{
   b4190:	b508      	push	{r3, lr}
	Wire.beginTransmission(qwiicAddress);
   b4192:	f002 fc49 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b4196:	2130      	movs	r1, #48	; 0x30
   b4198:	f002 fa72 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
	//check here for an ACK from the slave, if no ACK don't allow change?
	if (Wire.endTransmission() != 0)
   b419c:	f002 fc44 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b41a0:	f002 fa79 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
   b41a4:	b128      	cbz	r0, b41b2 <_Z19testForConnectivityv+0x22>
	{
		Serial.println("Check connections. No slave attached.");
   b41a6:	f002 f983 	bl	b64b0 <_Z16_fetch_usbserialv>
   b41aa:	4902      	ldr	r1, [pc, #8]	; (b41b4 <_Z19testForConnectivityv+0x24>)
   b41ac:	f001 fd73 	bl	b5c96 <_ZN5Print7printlnEPKc>
		while (1);
   b41b0:	e7fe      	b.n	b41b0 <_Z19testForConnectivityv+0x20>
	}
}
   b41b2:	bd08      	pop	{r3, pc}
   b41b4:	000b7c40 	.word	0x000b7c40

000b41b8 <_Z17initializeSensorsv>:
{
   b41b8:	b538      	push	{r3, r4, r5, lr}
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b41ba:	4c24      	ldr	r4, [pc, #144]	; (b424c <_Z17initializeSensorsv+0x94>)
	while (!bh.begin())
   b41bc:	4824      	ldr	r0, [pc, #144]	; (b4250 <_Z17initializeSensorsv+0x98>)
   b41be:	f001 f8bb 	bl	b5338 <_ZN6BH17505beginEv>
   b41c2:	b948      	cbnz	r0, b41d8 <_Z17initializeSensorsv+0x20>
		delay(500);
   b41c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b41c8:	f001 fff6 	bl	b61b8 <delay>
		Serial.println("Trying to connect BH1750 Lux Sensor");
   b41cc:	f002 f970 	bl	b64b0 <_Z16_fetch_usbserialv>
   b41d0:	4621      	mov	r1, r4
   b41d2:	f001 fd60 	bl	b5c96 <_ZN5Print7printlnEPKc>
	while (!bh.begin())
   b41d6:	e7f1      	b.n	b41bc <_Z17initializeSensorsv+0x4>
	bh.set_sensor_mode(BH1750::continuous_low_res);
   b41d8:	481d      	ldr	r0, [pc, #116]	; (b4250 <_Z17initializeSensorsv+0x98>)
	while (!bme.begin())
   b41da:	4d1e      	ldr	r5, [pc, #120]	; (b4254 <_Z17initializeSensorsv+0x9c>)
		Serial.println("Trying to connect BME280 PTH Sensor");
   b41dc:	4c1e      	ldr	r4, [pc, #120]	; (b4258 <_Z17initializeSensorsv+0xa0>)
	bh.set_sensor_mode(BH1750::continuous_low_res);
   b41de:	2113      	movs	r1, #19
   b41e0:	f001 f8e7 	bl	b53b2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
	while (!bme.begin())
   b41e4:	4628      	mov	r0, r5
   b41e6:	f000 ff1e 	bl	b5026 <_ZN15Adafruit_BME2805beginEv>
   b41ea:	b190      	cbz	r0, b4212 <_Z17initializeSensorsv+0x5a>
	while (!airSensor.begin())
   b41ec:	4d1b      	ldr	r5, [pc, #108]	; (b425c <_Z17initializeSensorsv+0xa4>)
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b41ee:	4c1c      	ldr	r4, [pc, #112]	; (b4260 <_Z17initializeSensorsv+0xa8>)
	while (!airSensor.begin())
   b41f0:	f002 fc1a 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b41f4:	4601      	mov	r1, r0
   b41f6:	4628      	mov	r0, r5
   b41f8:	f001 f882 	bl	b5300 <_ZN5SCD305beginER7TwoWire>
   b41fc:	b998      	cbnz	r0, b4226 <_Z17initializeSensorsv+0x6e>
		delay(500);
   b41fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4202:	f001 ffd9 	bl	b61b8 <delay>
		Serial.println("Trying to connect SCD30 CO2 Sensor");
   b4206:	f002 f953 	bl	b64b0 <_Z16_fetch_usbserialv>
   b420a:	4621      	mov	r1, r4
   b420c:	f001 fd43 	bl	b5c96 <_ZN5Print7printlnEPKc>
	while (!airSensor.begin())
   b4210:	e7ee      	b.n	b41f0 <_Z17initializeSensorsv+0x38>
		delay(500);
   b4212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4216:	f001 ffcf 	bl	b61b8 <delay>
		Serial.println("Trying to connect BME280 PTH Sensor");
   b421a:	f002 f949 	bl	b64b0 <_Z16_fetch_usbserialv>
   b421e:	4621      	mov	r1, r4
   b4220:	f001 fd39 	bl	b5c96 <_ZN5Print7printlnEPKc>
	while (!bme.begin())
   b4224:	e7de      	b.n	b41e4 <_Z17initializeSensorsv+0x2c>
	aqi.begin_I2C();
   b4226:	f002 fbff 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b422a:	4601      	mov	r1, r0
   b422c:	480d      	ldr	r0, [pc, #52]	; (b4264 <_Z17initializeSensorsv+0xac>)
   b422e:	f000 f9ab 	bl	b4588 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
	Serial.println("Zio Qwiic Loudness Sensor Master Awake");
   b4232:	f002 f93d 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4236:	490c      	ldr	r1, [pc, #48]	; (b4268 <_Z17initializeSensorsv+0xb0>)
   b4238:	f001 fd2d 	bl	b5c96 <_ZN5Print7printlnEPKc>
	testForConnectivity();
   b423c:	f7ff ffa8 	bl	b4190 <_Z19testForConnectivityv>
}
   b4240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uv.begin(VEML6070_1_T);
   b4244:	4809      	ldr	r0, [pc, #36]	; (b426c <_Z17initializeSensorsv+0xb4>)
   b4246:	2101      	movs	r1, #1
   b4248:	f000 bf00 	b.w	b504c <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>
   b424c:	000b7c66 	.word	0x000b7c66
   b4250:	2003e650 	.word	0x2003e650
   b4254:	2003e658 	.word	0x2003e658
   b4258:	000b7c8a 	.word	0x000b7c8a
   b425c:	2003e614 	.word	0x2003e614
   b4260:	000b7cae 	.word	0x000b7cae
   b4264:	2003e628 	.word	0x2003e628
   b4268:	000b7cd1 	.word	0x000b7cd1
   b426c:	2003e69c 	.word	0x2003e69c

000b4270 <setup>:
void setup() {
   b4270:	b508      	push	{r3, lr}
	Wire.begin();
   b4272:	f002 fbd9 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b4276:	f002 f9d1 	bl	b661c <_ZN7TwoWire5beginEv>
	pinMode(D7,OUTPUT);
   b427a:	2101      	movs	r1, #1
   b427c:	2007      	movs	r0, #7
   b427e:	f002 fb3f 	bl	b6900 <pinMode>
	Serial.begin(9600);
   b4282:	f002 f915 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4286:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b428a:	f002 f905 	bl	b6498 <_ZN9USBSerial5beginEl>
}
   b428e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	initializeSensors();
   b4292:	f7ff bf91 	b.w	b41b8 <_Z17initializeSensorsv>
	...

000b4298 <_Z17getSensorReadingsv>:


void getSensorReadings()
{
   b4298:	b510      	push	{r4, lr}
   b429a:	ed2d 8b04 	vpush	{d8-d9}
	//LUX Sensor (BH1750); continuous mode takes measurements non-stop, one time mode takes a measurement then sleep
	bh.make_forced_measurement();
   b429e:	487e      	ldr	r0, [pc, #504]	; (b4498 <_Z17getSensorReadingsv+0x200>)
{
   b42a0:	b092      	sub	sp, #72	; 0x48
	bh.make_forced_measurement();
   b42a2:	f001 f89b 	bl	b53dc <_ZN6BH175023make_forced_measurementEv>
	Serial.println(String::format("Light level: %.1f lux", bh.get_light_level()));
   b42a6:	f002 f903 	bl	b64b0 <_Z16_fetch_usbserialv>
   b42aa:	4604      	mov	r4, r0
   b42ac:	487a      	ldr	r0, [pc, #488]	; (b4498 <_Z17getSensorReadingsv+0x200>)
   b42ae:	f001 f84f 	bl	b5350 <_ZN6BH175015get_light_levelEv>
   b42b2:	ee10 0a10 	vmov	r0, s0
   b42b6:	f002 fd41 	bl	b6d3c <__aeabi_f2d>
   b42ba:	4602      	mov	r2, r0
   b42bc:	460b      	mov	r3, r1
   b42be:	a80a      	add	r0, sp, #40	; 0x28
   b42c0:	4976      	ldr	r1, [pc, #472]	; (b449c <_Z17getSensorReadingsv+0x204>)
   b42c2:	f001 fc7d 	bl	b5bc0 <_ZN6String6formatEPKcz>
   b42c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   b42c8:	4620      	mov	r0, r4
   b42ca:	f001 fce4 	bl	b5c96 <_ZN5Print7printlnEPKc>
   b42ce:	a80a      	add	r0, sp, #40	; 0x28
   b42d0:	f001 fc16 	bl	b5b00 <_ZN6StringD1Ev>

	//CO2 Sensor (SCD30)
	if (airSensor.dataAvailable())
   b42d4:	4872      	ldr	r0, [pc, #456]	; (b44a0 <_Z17getSensorReadingsv+0x208>)
   b42d6:	f000 ff38 	bl	b514a <_ZN5SCD3013dataAvailableEv>
   b42da:	2800      	cmp	r0, #0
   b42dc:	d043      	beq.n	b4366 <_Z17getSensorReadingsv+0xce>
	{
		Serial.print("CO2(ppm): ");
   b42de:	f002 f8e7 	bl	b64b0 <_Z16_fetch_usbserialv>
   b42e2:	4970      	ldr	r1, [pc, #448]	; (b44a4 <_Z17getSensorReadingsv+0x20c>)
   b42e4:	f001 fcc4 	bl	b5c70 <_ZN5Print5printEPKc>
		Serial.print(airSensor.getCO2());
   b42e8:	f002 f8e2 	bl	b64b0 <_Z16_fetch_usbserialv>
   b42ec:	4604      	mov	r4, r0
   b42ee:	486c      	ldr	r0, [pc, #432]	; (b44a0 <_Z17getSensorReadingsv+0x208>)
   b42f0:	f000 ff8b 	bl	b520a <_ZN5SCD306getCO2Ev>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b42f4:	220a      	movs	r2, #10
   b42f6:	4601      	mov	r1, r0
   b42f8:	4620      	mov	r0, r4
   b42fa:	f001 fcd6 	bl	b5caa <_ZN5Print11printNumberEmh>
		Serial.print(" Temperature(*C): ");
   b42fe:	f002 f8d7 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4302:	4969      	ldr	r1, [pc, #420]	; (b44a8 <_Z17getSensorReadingsv+0x210>)
   b4304:	f001 fcb4 	bl	b5c70 <_ZN5Print5printEPKc>
		Serial.print(airSensor.getTemperature(), 1);
   b4308:	f002 f8d2 	bl	b64b0 <_Z16_fetch_usbserialv>
   b430c:	4604      	mov	r4, r0
   b430e:	4864      	ldr	r0, [pc, #400]	; (b44a0 <_Z17getSensorReadingsv+0x208>)
   b4310:	f000 ff96 	bl	b5240 <_ZN5SCD3014getTemperatureEv>
   b4314:	2101      	movs	r1, #1
   b4316:	4620      	mov	r0, r4
   b4318:	f001 fdae 	bl	b5e78 <_ZN5Print5printEfi>
		Serial.print(" Humidity(%): ");
   b431c:	f002 f8c8 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4320:	4962      	ldr	r1, [pc, #392]	; (b44ac <_Z17getSensorReadingsv+0x214>)
   b4322:	f001 fca5 	bl	b5c70 <_ZN5Print5printEPKc>
		Serial.print(airSensor.getHumidity(), 1);
   b4326:	f002 f8c3 	bl	b64b0 <_Z16_fetch_usbserialv>
   b432a:	4604      	mov	r4, r0
   b432c:	485c      	ldr	r0, [pc, #368]	; (b44a0 <_Z17getSensorReadingsv+0x208>)
   b432e:	f000 ff7c 	bl	b522a <_ZN5SCD3011getHumidityEv>
   b4332:	2101      	movs	r1, #1
   b4334:	4620      	mov	r0, r4
   b4336:	f001 fd9f 	bl	b5e78 <_ZN5Print5printEfi>
		Serial.println();
   b433a:	f002 f8b9 	bl	b64b0 <_Z16_fetch_usbserialv>
   b433e:	f001 fc9e 	bl	b5c7e <_ZN5Print7printlnEv>
	else
		Serial.println("No data");
	
	//Particulate Sensor (PMSA003I)
	PM25_AQI_Data data;
	if (!aqi.read(&data))
   b4342:	485b      	ldr	r0, [pc, #364]	; (b44b0 <_Z17getSensorReadingsv+0x218>)
   b4344:	a90a      	add	r1, sp, #40	; 0x28
   b4346:	f000 f935 	bl	b45b4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>
   b434a:	b990      	cbnz	r0, b4372 <_Z17getSensorReadingsv+0xda>
	{
		Serial.println("Could not read from AQI");
   b434c:	f002 f8b0 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4350:	4958      	ldr	r1, [pc, #352]	; (b44b4 <_Z17getSensorReadingsv+0x21c>)
   b4352:	f001 fca0 	bl	b5c96 <_ZN5Print7printlnEPKc>
		delay(5000); // try again in a bit!
   b4356:	f241 3088 	movw	r0, #5000	; 0x1388
   b435a:	f001 ff2d 	bl	b61b8 <delay>
	Serial.println(String::format("Pressure: %.2f mbar",(bme.readPressure()/100.0F)));
	Serial.print("Humidity: ");
	Serial.print(bme.readHumidity());
	Serial.println(" %");
	Serial.println(String::format("Temperature: %.2f *C",bme.readTemperature()));
   b435e:	b012      	add	sp, #72	; 0x48
   b4360:	ecbd 8b04 	vpop	{d8-d9}
   b4364:	bd10      	pop	{r4, pc}
		Serial.println("No data");
   b4366:	f002 f8a3 	bl	b64b0 <_Z16_fetch_usbserialv>
   b436a:	4953      	ldr	r1, [pc, #332]	; (b44b8 <_Z17getSensorReadingsv+0x220>)
   b436c:	f001 fc93 	bl	b5c96 <_ZN5Print7printlnEPKc>
   b4370:	e7e7      	b.n	b4342 <_Z17getSensorReadingsv+0xaa>
	float pm10s = data.pm10_standard;
   b4372:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   b4376:	ee09 3a10 	vmov	s18, r3
	float pm25s = data.pm25_standard;
   b437a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   b437e:	ee08 3a10 	vmov	s16, r3
	float pm100s = data.pm100_standard;
   b4382:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   b4386:	ee08 3a90 	vmov	s17, r3
	Serial.println(String::format("Standard PM -- PM1.0: %.2f | PM2.5: %.2f | PM10.0: %.2f", pm10s, pm25s, pm100s));
   b438a:	f002 f891 	bl	b64b0 <_Z16_fetch_usbserialv>
	float pm10s = data.pm10_standard;
   b438e:	eeb8 9a49 	vcvt.f32.u32	s18, s18
	Serial.println(String::format("Standard PM -- PM1.0: %.2f | PM2.5: %.2f | PM10.0: %.2f", pm10s, pm25s, pm100s));
   b4392:	4604      	mov	r4, r0
   b4394:	ee19 0a10 	vmov	r0, s18
   b4398:	f002 fcd0 	bl	b6d3c <__aeabi_f2d>
	float pm100s = data.pm100_standard;
   b439c:	eef8 8a68 	vcvt.f32.u32	s17, s17
	Serial.println(String::format("Standard PM -- PM1.0: %.2f | PM2.5: %.2f | PM10.0: %.2f", pm10s, pm25s, pm100s));
   b43a0:	4602      	mov	r2, r0
   b43a2:	460b      	mov	r3, r1
   b43a4:	ee18 0a90 	vmov	r0, s17
   b43a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b43ac:	f002 fcc6 	bl	b6d3c <__aeabi_f2d>
	float pm25s = data.pm25_standard;
   b43b0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
	Serial.println(String::format("Standard PM -- PM1.0: %.2f | PM2.5: %.2f | PM10.0: %.2f", pm10s, pm25s, pm100s));
   b43b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b43b8:	ee18 0a10 	vmov	r0, s16
   b43bc:	f002 fcbe 	bl	b6d3c <__aeabi_f2d>
   b43c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b43c4:	e9cd 0100 	strd	r0, r1, [sp]
   b43c8:	a806      	add	r0, sp, #24
   b43ca:	493c      	ldr	r1, [pc, #240]	; (b44bc <_Z17getSensorReadingsv+0x224>)
   b43cc:	f001 fbf8 	bl	b5bc0 <_ZN6String6formatEPKcz>
   b43d0:	9906      	ldr	r1, [sp, #24]
   b43d2:	4620      	mov	r0, r4
   b43d4:	f001 fc5f 	bl	b5c96 <_ZN5Print7printlnEPKc>
   b43d8:	a806      	add	r0, sp, #24
   b43da:	f001 fb91 	bl	b5b00 <_ZN6StringD1Ev>
	getValue();
   b43de:	f7ff fe77 	bl	b40d0 <_Z8getValuev>
	Serial.print("UV light level: "); Serial.println(uv.readUV());
   b43e2:	f002 f865 	bl	b64b0 <_Z16_fetch_usbserialv>
   b43e6:	4936      	ldr	r1, [pc, #216]	; (b44c0 <_Z17getSensorReadingsv+0x228>)
   b43e8:	f001 fc42 	bl	b5c70 <_ZN5Print5printEPKc>
   b43ec:	f002 f860 	bl	b64b0 <_Z16_fetch_usbserialv>
   b43f0:	4604      	mov	r4, r0
   b43f2:	4834      	ldr	r0, [pc, #208]	; (b44c4 <_Z17getSensorReadingsv+0x22c>)
   b43f4:	f000 fe49 	bl	b508a <_ZN17Adafruit_VEML60706readUVEv>
   b43f8:	220a      	movs	r2, #10
   b43fa:	4601      	mov	r1, r0
   b43fc:	4620      	mov	r0, r4
   b43fe:	f001 fc54 	bl	b5caa <_ZN5Print11printNumberEmh>
        n += println();
   b4402:	4620      	mov	r0, r4
   b4404:	f001 fc3b 	bl	b5c7e <_ZN5Print7printlnEv>
	Serial.println(String::format("Pressure: %.2f mbar",(bme.readPressure()/100.0F)));
   b4408:	f002 f852 	bl	b64b0 <_Z16_fetch_usbserialv>
   b440c:	4604      	mov	r4, r0
   b440e:	482e      	ldr	r0, [pc, #184]	; (b44c8 <_Z17getSensorReadingsv+0x230>)
   b4410:	f000 fce0 	bl	b4dd4 <_ZN15Adafruit_BME28012readPressureEv>
   b4414:	eddf 7a2d 	vldr	s15, [pc, #180]	; b44cc <_Z17getSensorReadingsv+0x234>
   b4418:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b441c:	ee17 0a90 	vmov	r0, s15
   b4420:	f002 fc8c 	bl	b6d3c <__aeabi_f2d>
   b4424:	4602      	mov	r2, r0
   b4426:	460b      	mov	r3, r1
   b4428:	a806      	add	r0, sp, #24
   b442a:	4929      	ldr	r1, [pc, #164]	; (b44d0 <_Z17getSensorReadingsv+0x238>)
   b442c:	f001 fbc8 	bl	b5bc0 <_ZN6String6formatEPKcz>
   b4430:	9906      	ldr	r1, [sp, #24]
   b4432:	4620      	mov	r0, r4
   b4434:	f001 fc2f 	bl	b5c96 <_ZN5Print7printlnEPKc>
   b4438:	a806      	add	r0, sp, #24
   b443a:	f001 fb61 	bl	b5b00 <_ZN6StringD1Ev>
	Serial.print("Humidity: ");
   b443e:	f002 f837 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4442:	4924      	ldr	r1, [pc, #144]	; (b44d4 <_Z17getSensorReadingsv+0x23c>)
   b4444:	f001 fc14 	bl	b5c70 <_ZN5Print5printEPKc>
	Serial.print(bme.readHumidity());
   b4448:	f002 f832 	bl	b64b0 <_Z16_fetch_usbserialv>
   b444c:	4604      	mov	r4, r0
   b444e:	481e      	ldr	r0, [pc, #120]	; (b44c8 <_Z17getSensorReadingsv+0x230>)
   b4450:	f000 fc76 	bl	b4d40 <_ZN15Adafruit_BME28012readHumidityEv>
   b4454:	2102      	movs	r1, #2
   b4456:	4620      	mov	r0, r4
   b4458:	f001 fd0e 	bl	b5e78 <_ZN5Print5printEfi>
	Serial.println(" %");
   b445c:	f002 f828 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4460:	491d      	ldr	r1, [pc, #116]	; (b44d8 <_Z17getSensorReadingsv+0x240>)
   b4462:	f001 fc18 	bl	b5c96 <_ZN5Print7printlnEPKc>
	Serial.println(String::format("Temperature: %.2f *C",bme.readTemperature()));
   b4466:	f002 f823 	bl	b64b0 <_Z16_fetch_usbserialv>
   b446a:	4604      	mov	r4, r0
   b446c:	4816      	ldr	r0, [pc, #88]	; (b44c8 <_Z17getSensorReadingsv+0x230>)
   b446e:	f000 fc37 	bl	b4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>
   b4472:	ee10 0a10 	vmov	r0, s0
   b4476:	f002 fc61 	bl	b6d3c <__aeabi_f2d>
   b447a:	4602      	mov	r2, r0
   b447c:	460b      	mov	r3, r1
   b447e:	a806      	add	r0, sp, #24
   b4480:	4916      	ldr	r1, [pc, #88]	; (b44dc <_Z17getSensorReadingsv+0x244>)
   b4482:	f001 fb9d 	bl	b5bc0 <_ZN6String6formatEPKcz>
   b4486:	9906      	ldr	r1, [sp, #24]
   b4488:	4620      	mov	r0, r4
   b448a:	f001 fc04 	bl	b5c96 <_ZN5Print7printlnEPKc>
   b448e:	a806      	add	r0, sp, #24
   b4490:	f001 fb36 	bl	b5b00 <_ZN6StringD1Ev>
   b4494:	e763      	b.n	b435e <_Z17getSensorReadingsv+0xc6>
   b4496:	bf00      	nop
   b4498:	2003e650 	.word	0x2003e650
   b449c:	000b7cf8 	.word	0x000b7cf8
   b44a0:	2003e614 	.word	0x2003e614
   b44a4:	000b7d0e 	.word	0x000b7d0e
   b44a8:	000b7d19 	.word	0x000b7d19
   b44ac:	000b7d2c 	.word	0x000b7d2c
   b44b0:	2003e628 	.word	0x2003e628
   b44b4:	000b7d43 	.word	0x000b7d43
   b44b8:	000b7d3b 	.word	0x000b7d3b
   b44bc:	000b7d5b 	.word	0x000b7d5b
   b44c0:	000b7d93 	.word	0x000b7d93
   b44c4:	2003e69c 	.word	0x2003e69c
   b44c8:	2003e658 	.word	0x2003e658
   b44cc:	42c80000 	.word	0x42c80000
   b44d0:	000b7da4 	.word	0x000b7da4
   b44d4:	000b7db8 	.word	0x000b7db8
   b44d8:	000b7dc3 	.word	0x000b7dc3
   b44dc:	000b7dc6 	.word	0x000b7dc6

000b44e0 <loop>:
void loop() {
   b44e0:	b510      	push	{r4, lr}
	digitalWrite(D7,HIGH);
   b44e2:	2101      	movs	r1, #1
void loop() {
   b44e4:	b088      	sub	sp, #32
	digitalWrite(D7,HIGH);
   b44e6:	2007      	movs	r0, #7
   b44e8:	f002 fa1b 	bl	b6922 <digitalWrite>
	Serial.println("==================================================================");
   b44ec:	f001 ffe0 	bl	b64b0 <_Z16_fetch_usbserialv>
   b44f0:	4912      	ldr	r1, [pc, #72]	; (b453c <loop+0x5c>)
   b44f2:	f001 fbd0 	bl	b5c96 <_ZN5Print7printlnEPKc>
	time_t time = Time.now();	// UTC time
   b44f6:	f001 fe44 	bl	b6182 <_ZN9TimeClass3nowEv>
   b44fa:	9003      	str	r0, [sp, #12]
	Serial.println(Time.format(time, TIME_FORMAT_DEFAULT));
   b44fc:	f001 ffd8 	bl	b64b0 <_Z16_fetch_usbserialv>
   b4500:	4b0f      	ldr	r3, [pc, #60]	; (b4540 <loop+0x60>)
   b4502:	9a03      	ldr	r2, [sp, #12]
   b4504:	681b      	ldr	r3, [r3, #0]
   b4506:	9300      	str	r3, [sp, #0]
   b4508:	4604      	mov	r4, r0
   b450a:	17d3      	asrs	r3, r2, #31
   b450c:	a804      	add	r0, sp, #16
   b450e:	490d      	ldr	r1, [pc, #52]	; (b4544 <loop+0x64>)
   b4510:	f001 fdd8 	bl	b60c4 <_ZN9TimeClass6formatExPKc>
   b4514:	9904      	ldr	r1, [sp, #16]
   b4516:	4620      	mov	r0, r4
   b4518:	f001 fbbd 	bl	b5c96 <_ZN5Print7printlnEPKc>
   b451c:	a804      	add	r0, sp, #16
   b451e:	f001 faef 	bl	b5b00 <_ZN6StringD1Ev>
	getSensorReadings();
   b4522:	f7ff feb9 	bl	b4298 <_Z17getSensorReadingsv>
	digitalWrite(D7,LOW);
   b4526:	2100      	movs	r1, #0
   b4528:	2007      	movs	r0, #7
   b452a:	f002 f9fa 	bl	b6922 <digitalWrite>
	delay(30000);
   b452e:	f247 5030 	movw	r0, #30000	; 0x7530
}
   b4532:	b008      	add	sp, #32
   b4534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay(30000);
   b4538:	f001 be3e 	b.w	b61b8 <delay>
   b453c:	000b7ddb 	.word	0x000b7ddb
   b4540:	2003e5a4 	.word	0x2003e5a4
   b4544:	2003e6cc 	.word	0x2003e6cc

000b4548 <_GLOBAL__sub_I_bh>:
   b4548:	b508      	push	{r3, lr}
BH1750 bh;
   b454a:	f002 fa6d 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b454e:	2123      	movs	r1, #35	; 0x23
   b4550:	4602      	mov	r2, r0
   b4552:	4807      	ldr	r0, [pc, #28]	; (b4570 <_GLOBAL__sub_I_bh+0x28>)
   b4554:	f000 feeb 	bl	b532e <_ZN6BH1750C1EhR7TwoWire>
Adafruit_BME280 bme;
   b4558:	4806      	ldr	r0, [pc, #24]	; (b4574 <_GLOBAL__sub_I_bh+0x2c>)
   b455a:	f000 f91d 	bl	b4798 <_ZN15Adafruit_BME280C1Ev>
SCD30 airSensor;
   b455e:	4806      	ldr	r0, [pc, #24]	; (b4578 <_GLOBAL__sub_I_bh+0x30>)
   b4560:	f000 fdbb 	bl	b50da <_ZN5SCD30C1Ev>
   b4564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_PM25AQI aqi = Adafruit_PM25AQI();
   b4568:	4804      	ldr	r0, [pc, #16]	; (b457c <_GLOBAL__sub_I_bh+0x34>)
   b456a:	f000 b809 	b.w	b4580 <_ZN16Adafruit_PM25AQIC1Ev>
   b456e:	bf00      	nop
   b4570:	2003e650 	.word	0x2003e650
   b4574:	2003e658 	.word	0x2003e658
   b4578:	2003e614 	.word	0x2003e614
   b457c:	2003e628 	.word	0x2003e628

000b4580 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
   b4580:	2200      	movs	r2, #0
   b4582:	e9c0 2200 	strd	r2, r2, [r0]
   b4586:	4770      	bx	lr

000b4588 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b4588:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b458a:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   b458c:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b458e:	b953      	cbnz	r3, b45a6 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
   b4590:	2010      	movs	r0, #16
   b4592:	9101      	str	r1, [sp, #4]
   b4594:	f7ff fd7f 	bl	b4096 <_Znwj>
   b4598:	4605      	mov	r5, r0
   b459a:	b118      	cbz	r0, b45a4 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
   b459c:	9a01      	ldr	r2, [sp, #4]
   b459e:	2112      	movs	r1, #18
   b45a0:	f000 f86c 	bl	b467c <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b45a4:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
   b45a6:	6820      	ldr	r0, [r4, #0]
   b45a8:	2101      	movs	r1, #1
    return false;
  }

  return true;
}
   b45aa:	b003      	add	sp, #12
   b45ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
   b45b0:	f000 b880 	b.w	b46b4 <_ZN18Adafruit_I2CDevice5beginEb>

000b45b4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>:
 *  @brief  Setups the hardware and detects a valid UART PM2.5
 *  @param  data
 *          Pointer to PM25_AQI_Data that will be filled by read()ing
 *  @return True on successful read, false if timed out or bad data
*/
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
   b45b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b45b6:	4605      	mov	r5, r0
   b45b8:	b091      	sub	sp, #68	; 0x44
  uint8_t buffer[32];
  uint16_t sum = 0;

  if (!data) {
   b45ba:	460e      	mov	r6, r1
   b45bc:	b911      	cbnz	r1, b45c4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x10>
    return false;
   b45be:	2000      	movs	r0, #0
    return false;
  }

  // success!
  return true;
}
   b45c0:	b011      	add	sp, #68	; 0x44
   b45c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (i2c_dev) { // ok using i2c?
   b45c4:	6804      	ldr	r4, [r0, #0]
   b45c6:	2c00      	cmp	r4, #0
   b45c8:	d03a      	beq.n	b4640 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x8c>
    if (!i2c_dev->read(buffer, 32)) {
   b45ca:	2220      	movs	r2, #32
   b45cc:	2301      	movs	r3, #1
   b45ce:	eb0d 0102 	add.w	r1, sp, r2
   b45d2:	4620      	mov	r0, r4
   b45d4:	f000 f87d 	bl	b46d2 <_ZN18Adafruit_I2CDevice4readEPhjb>
   b45d8:	2800      	cmp	r0, #0
   b45da:	d0f0      	beq.n	b45be <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
  if (buffer[0] != 0x42) {
   b45dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b45e0:	2b42      	cmp	r3, #66	; 0x42
   b45e2:	d1ec      	bne.n	b45be <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
   b45e4:	aa08      	add	r2, sp, #32
   b45e6:	4611      	mov	r1, r2
   b45e8:	231e      	movs	r3, #30
  uint16_t sum = 0;
   b45ea:	2400      	movs	r4, #0
    sum += buffer[i];
   b45ec:	f811 0b01 	ldrb.w	r0, [r1], #1
  for (uint8_t i = 0; i < 30; i++) {
   b45f0:	3b01      	subs	r3, #1
    sum += buffer[i];
   b45f2:	4420      	add	r0, r4
  for (uint8_t i = 0; i < 30; i++) {
   b45f4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    sum += buffer[i];
   b45f8:	b284      	uxth	r4, r0
  for (uint8_t i = 0; i < 30; i++) {
   b45fa:	d1f7      	bne.n	b45ec <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x38>
   b45fc:	4668      	mov	r0, sp
   b45fe:	2101      	movs	r1, #1
   b4600:	4603      	mov	r3, r0
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
   b4602:	7897      	ldrb	r7, [r2, #2]
    buffer_u16[i] = buffer[2 + i * 2 + 1];
   b4604:	78d5      	ldrb	r5, [r2, #3]
  for (uint8_t i = 0; i < 15; i++) {
   b4606:	3101      	adds	r1, #1
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
   b4608:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  for (uint8_t i = 0; i < 15; i++) {
   b460c:	2910      	cmp	r1, #16
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
   b460e:	f820 5b02 	strh.w	r5, [r0], #2
  for (uint8_t i = 0; i < 15; i++) {
   b4612:	f102 0202 	add.w	r2, r2, #2
   b4616:	d1f4      	bne.n	b4602 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x4e>
  memcpy((void *)data, (void *)buffer_u16, 30);
   b4618:	4632      	mov	r2, r6
   b461a:	af06      	add	r7, sp, #24
   b461c:	461d      	mov	r5, r3
   b461e:	cd03      	ldmia	r5!, {r0, r1}
   b4620:	42bd      	cmp	r5, r7
   b4622:	6010      	str	r0, [r2, #0]
   b4624:	6051      	str	r1, [r2, #4]
   b4626:	462b      	mov	r3, r5
   b4628:	f102 0208 	add.w	r2, r2, #8
   b462c:	d1f6      	bne.n	b461c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x68>
   b462e:	6828      	ldr	r0, [r5, #0]
   b4630:	6010      	str	r0, [r2, #0]
   b4632:	88ab      	ldrh	r3, [r5, #4]
   b4634:	8093      	strh	r3, [r2, #4]
  if (sum != data->checksum) {
   b4636:	8bb0      	ldrh	r0, [r6, #28]
   b4638:	1b03      	subs	r3, r0, r4
   b463a:	4258      	negs	r0, r3
   b463c:	4158      	adcs	r0, r3
   b463e:	e7bf      	b.n	b45c0 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc>
  } else if (serial_dev) { // ok using uart
   b4640:	6840      	ldr	r0, [r0, #4]
   b4642:	2800      	cmp	r0, #0
   b4644:	d0bb      	beq.n	b45be <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (!serial_dev->available()) {
   b4646:	6803      	ldr	r3, [r0, #0]
   b4648:	691b      	ldr	r3, [r3, #16]
   b464a:	4798      	blx	r3
   b464c:	2800      	cmp	r0, #0
   b464e:	d0b6      	beq.n	b45be <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->peek() != 0x42) {
   b4650:	6868      	ldr	r0, [r5, #4]
   b4652:	6803      	ldr	r3, [r0, #0]
   b4654:	699b      	ldr	r3, [r3, #24]
   b4656:	4798      	blx	r3
   b4658:	2842      	cmp	r0, #66	; 0x42
   b465a:	6868      	ldr	r0, [r5, #4]
      serial_dev->read();
   b465c:	6803      	ldr	r3, [r0, #0]
    if (serial_dev->peek() != 0x42) {
   b465e:	d002      	beq.n	b4666 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xb2>
      serial_dev->read();
   b4660:	695b      	ldr	r3, [r3, #20]
   b4662:	4798      	blx	r3
      return false;
   b4664:	e7ab      	b.n	b45be <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->available() < 32) {
   b4666:	691b      	ldr	r3, [r3, #16]
   b4668:	4798      	blx	r3
   b466a:	281f      	cmp	r0, #31
   b466c:	dda7      	ble.n	b45be <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    serial_dev->readBytes( (char *)buffer, 32);
   b466e:	2220      	movs	r2, #32
   b4670:	6868      	ldr	r0, [r5, #4]
   b4672:	eb0d 0102 	add.w	r1, sp, r2
   b4676:	f001 fc54 	bl	b5f22 <_ZN6Stream9readBytesEPcj>
   b467a:	e7af      	b.n	b45dc <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x28>

000b467c <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b467c:	6042      	str	r2, [r0, #4]
  _begun = false;
   b467e:	2200      	movs	r2, #0
   b4680:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b4682:	2220      	movs	r2, #32
  _addr = addr;
   b4684:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b4686:	60c2      	str	r2, [r0, #12]
#endif
}
   b4688:	4770      	bx	lr

000b468a <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b468a:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b468c:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b468e:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b4690:	b153      	cbz	r3, b46a8 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b4692:	7821      	ldrb	r1, [r4, #0]
   b4694:	6860      	ldr	r0, [r4, #4]
   b4696:	f001 fff3 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b469a:	6860      	ldr	r0, [r4, #4]
   b469c:	f001 fffb 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
   b46a0:	fab0 f080 	clz	r0, r0
   b46a4:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b46a6:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b46a8:	2101      	movs	r1, #1
   b46aa:	f000 f803 	bl	b46b4 <_ZN18Adafruit_I2CDevice5beginEb>
   b46ae:	2800      	cmp	r0, #0
   b46b0:	d1ef      	bne.n	b4692 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b46b2:	e7f8      	b.n	b46a6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b46b4 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b46b4:	b538      	push	{r3, r4, r5, lr}
   b46b6:	4604      	mov	r4, r0
  _wire->begin();
   b46b8:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b46ba:	460d      	mov	r5, r1
  _wire->begin();
   b46bc:	f001 ffae 	bl	b661c <_ZN7TwoWire5beginEv>
  _begun = true;
   b46c0:	2001      	movs	r0, #1
   b46c2:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b46c4:	b125      	cbz	r5, b46d0 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b46c6:	4620      	mov	r0, r4
}
   b46c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b46cc:	f7ff bfdd 	b.w	b468a <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b46d0:	bd38      	pop	{r3, r4, r5, pc}

000b46d2 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b46d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b46d6:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
   b46d8:	68c2      	ldr	r2, [r0, #12]
   b46da:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b46dc:	4604      	mov	r4, r0
   b46de:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
   b46e0:	d314      	bcc.n	b470c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b46e2:	7801      	ldrb	r1, [r0, #0]
   b46e4:	6840      	ldr	r0, [r0, #4]
   b46e6:	b2ea      	uxtb	r2, r5
   b46e8:	f001 ffb5 	bl	b6656 <_ZN7TwoWire11requestFromEhjh>
  if (recv != len) {
   b46ec:	4285      	cmp	r5, r0
   b46ee:	d10d      	bne.n	b470c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
   b46f0:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b46f2:	fa1f f887 	uxth.w	r8, r7
   b46f6:	4545      	cmp	r5, r8
   b46f8:	f107 0701 	add.w	r7, r7, #1
   b46fc:	d909      	bls.n	b4712 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
   b46fe:	6860      	ldr	r0, [r4, #4]
   b4700:	6803      	ldr	r3, [r0, #0]
   b4702:	695b      	ldr	r3, [r3, #20]
   b4704:	4798      	blx	r3
   b4706:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b470a:	e7f2      	b.n	b46f2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
   b470c:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4712:	2001      	movs	r0, #1
   b4714:	e7fb      	b.n	b470e <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

000b4716 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4716:	4770      	bx	lr

000b4718 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4718:	b510      	push	{r4, lr}
  }
   b471a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b471c:	4604      	mov	r4, r0
  }
   b471e:	f7ff fcbe 	bl	b409e <_ZdlPvj>
   b4722:	4620      	mov	r0, r4
   b4724:	bd10      	pop	{r4, pc}

000b4726 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4726:	b40e      	push	{r1, r2, r3}
   b4728:	b503      	push	{r0, r1, lr}
   b472a:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b472c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b472e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4732:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4734:	f001 fbaf 	bl	b5e96 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4738:	b002      	add	sp, #8
   b473a:	f85d eb04 	ldr.w	lr, [sp], #4
   b473e:	b003      	add	sp, #12
   b4740:	4770      	bx	lr
	...

000b4744 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4744:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4746:	4604      	mov	r4, r0
   b4748:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b474a:	7922      	ldrb	r2, [r4, #4]
   b474c:	68a3      	ldr	r3, [r4, #8]
   b474e:	b132      	cbz	r2, b475e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4750:	b9a3      	cbnz	r3, b477c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4752:	490b      	ldr	r1, [pc, #44]	; (b4780 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4754:	b002      	add	sp, #8
   b4756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b475a:	f001 ba89 	b.w	b5c70 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b475e:	4a09      	ldr	r2, [pc, #36]	; (b4784 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4760:	7b26      	ldrb	r6, [r4, #12]
   b4762:	4d09      	ldr	r5, [pc, #36]	; (b4788 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4764:	4909      	ldr	r1, [pc, #36]	; (b478c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4766:	7b64      	ldrb	r4, [r4, #13]
   b4768:	2e01      	cmp	r6, #1
   b476a:	bf18      	it	ne
   b476c:	4629      	movne	r1, r5
   b476e:	e9cd 1400 	strd	r1, r4, [sp]
   b4772:	4907      	ldr	r1, [pc, #28]	; (b4790 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4774:	f7ff ffd7 	bl	b4726 <_ZN5Print6printfEPKcz>
  }
   b4778:	b002      	add	sp, #8
   b477a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b477c:	4a05      	ldr	r2, [pc, #20]	; (b4794 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b477e:	e7ef      	b.n	b4760 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4780:	000b7e2f 	.word	0x000b7e2f
   b4784:	000b802c 	.word	0x000b802c
   b4788:	000b7e2b 	.word	0x000b7e2b
   b478c:	000b7e27 	.word	0x000b7e27
   b4790:	000b7e45 	.word	0x000b7e45
   b4794:	000b7e1e 	.word	0x000b7e1e

000b4798 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4798:	f04f 33ff 	mov.w	r3, #4294967295
   b479c:	6103      	str	r3, [r0, #16]
{ }
   b479e:	4770      	bx	lr

000b47a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b47a0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b47a2:	4c0b      	ldr	r4, [pc, #44]	; (b47d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b47a4:	7821      	ldrb	r1, [r4, #0]
   b47a6:	f3bf 8f5b 	dmb	ish
   b47aa:	f011 0101 	ands.w	r1, r1, #1
   b47ae:	d10b      	bne.n	b47c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47b0:	4620      	mov	r0, r4
   b47b2:	9101      	str	r1, [sp, #4]
   b47b4:	f7ff fc75 	bl	b40a2 <__cxa_guard_acquire>
   b47b8:	9901      	ldr	r1, [sp, #4]
   b47ba:	b128      	cbz	r0, b47c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47bc:	4805      	ldr	r0, [pc, #20]	; (b47d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47be:	f001 f8e1 	bl	b5984 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b47c2:	4620      	mov	r0, r4
   b47c4:	f7ff fc72 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b47c8:	4802      	ldr	r0, [pc, #8]	; (b47d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47ca:	b002      	add	sp, #8
   b47cc:	bd10      	pop	{r4, pc}
   b47ce:	bf00      	nop
   b47d0:	2003e6a0 	.word	0x2003e6a0
   b47d4:	2003e6a4 	.word	0x2003e6a4

000b47d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b47d8:	b508      	push	{r3, lr}
        instance().endTransaction();
   b47da:	f7ff ffe1 	bl	b47a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b47de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b47e2:	f001 b8ed 	b.w	b59c0 <_ZN8SPIClass14endTransactionEv>

000b47e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b47e6:	b507      	push	{r0, r1, r2, lr}
   b47e8:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b47ea:	f7ff ffd9 	bl	b47a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47ee:	9901      	ldr	r1, [sp, #4]
    }
   b47f0:	b003      	add	sp, #12
   b47f2:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b47f6:	f001 b8fd 	b.w	b59f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b47fa <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b47fe:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4802:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4804:	4605      	mov	r5, r0
   b4806:	460f      	mov	r7, r1
    if (_sck == -1)
   b4808:	d106      	bne.n	b4818 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b480a:	f7ff ffc9 	bl	b47a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b480e:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4814:	f001 b95c 	b.w	b5ad0 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4818:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b481a:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b481c:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4820:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4824:	2100      	movs	r1, #0
   b4826:	b280      	uxth	r0, r0
   b4828:	f002 f87b 	bl	b6922 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b482c:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4830:	fa08 f106 	lsl.w	r1, r8, r6
   b4834:	4039      	ands	r1, r7
   b4836:	b280      	uxth	r0, r0
   b4838:	f002 f873 	bl	b6922 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b483c:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4840:	2101      	movs	r1, #1
   b4842:	b280      	uxth	r0, r0
   b4844:	f002 f86d 	bl	b6922 <digitalWrite>
        if (digitalRead(_miso))
   b4848:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b484c:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b484e:	b280      	uxth	r0, r0
        reply <<= 1;
   b4850:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4852:	f002 f87f 	bl	b6954 <digitalRead>
   b4856:	b108      	cbz	r0, b485c <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4858:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b485c:	3e01      	subs	r6, #1
   b485e:	d2df      	bcs.n	b4820 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4860:	4620      	mov	r0, r4
   b4862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4868 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b486a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b486e:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4870:	4604      	mov	r4, r0
   b4872:	460e      	mov	r6, r1
   b4874:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4876:	d113      	bne.n	b48a0 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4878:	7901      	ldrb	r1, [r0, #4]
   b487a:	6800      	ldr	r0, [r0, #0]
   b487c:	f001 ff00 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4880:	6820      	ldr	r0, [r4, #0]
   b4882:	6803      	ldr	r3, [r0, #0]
   b4884:	4631      	mov	r1, r6
   b4886:	689b      	ldr	r3, [r3, #8]
   b4888:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b488a:	6820      	ldr	r0, [r4, #0]
   b488c:	6803      	ldr	r3, [r0, #0]
   b488e:	4629      	mov	r1, r5
   b4890:	689b      	ldr	r3, [r3, #8]
   b4892:	4798      	blx	r3
        _wire -> endTransmission();
   b4894:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4896:	b004      	add	sp, #16
   b4898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b489c:	f001 befb 	b.w	b6696 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b48a0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b48a4:	3301      	adds	r3, #1
   b48a6:	d10c      	bne.n	b48c2 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b48a8:	4b16      	ldr	r3, [pc, #88]	; (b4904 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b48aa:	9300      	str	r3, [sp, #0]
   b48ac:	2300      	movs	r3, #0
   b48ae:	f88d 3004 	strb.w	r3, [sp, #4]
   b48b2:	4b15      	ldr	r3, [pc, #84]	; (b4908 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b48b4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b48b6:	4668      	mov	r0, sp
   b48b8:	2301      	movs	r3, #1
   b48ba:	f8ad 300c 	strh.w	r3, [sp, #12]
   b48be:	f7ff ff92 	bl	b47e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b48c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48c6:	2100      	movs	r1, #0
   b48c8:	b280      	uxth	r0, r0
   b48ca:	f002 f82a 	bl	b6922 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b48ce:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b48d2:	4620      	mov	r0, r4
   b48d4:	f7ff ff91 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b48d8:	4629      	mov	r1, r5
   b48da:	4620      	mov	r0, r4
   b48dc:	f7ff ff8d 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b48e0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48e4:	2101      	movs	r1, #1
   b48e6:	b280      	uxth	r0, r0
   b48e8:	f002 f81b 	bl	b6922 <digitalWrite>
    if (_sck == -1)
   b48ec:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b48f0:	3301      	adds	r3, #1
   b48f2:	d104      	bne.n	b48fe <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b48f4:	b004      	add	sp, #16
   b48f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b48fa:	f7ff bf6d 	b.w	b47d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b48fe:	b004      	add	sp, #16
   b4900:	bd70      	pop	{r4, r5, r6, pc}
   b4902:	bf00      	nop
   b4904:	000b7e6c 	.word	0x000b7e6c
   b4908:	0007a120 	.word	0x0007a120

000b490c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b490e:	00db      	lsls	r3, r3, #3
   b4910:	f002 0207 	and.w	r2, r2, #7
   b4914:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4918:	4313      	orrs	r3, r2
   b491a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b491e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4922:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4926:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b492a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b492e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4932:	f366 1347 	bfi	r3, r6, #5, #3
   b4936:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b493a:	00ed      	lsls	r5, r5, #3
   b493c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4940:	f007 0707 	and.w	r7, r7, #7
   b4944:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4948:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b494c:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b494e:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4950:	431d      	orrs	r5, r3
   b4952:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4956:	f006 0207 	and.w	r2, r6, #7
   b495a:	21f2      	movs	r1, #242	; 0xf2
   b495c:	f7ff ff84 	bl	b4868 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4960:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4964:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4968:	f002 0107 	and.w	r1, r2, #7
   b496c:	009b      	lsls	r3, r3, #2
   b496e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4972:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4976:	4620      	mov	r0, r4
   b4978:	21f5      	movs	r1, #245	; 0xf5
   b497a:	f7ff ff75 	bl	b4868 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b497e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4982:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4986:	f002 0107 	and.w	r1, r2, #7
   b498a:	009b      	lsls	r3, r3, #2
   b498c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4990:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4994:	4620      	mov	r0, r4
   b4996:	21f4      	movs	r1, #244	; 0xf4
}
   b4998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b499c:	f7ff bf64 	b.w	b4868 <_ZN15Adafruit_BME2806write8Ehh>

000b49a0 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b49a0:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b49a2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b49a6:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b49a8:	b085      	sub	sp, #20
   b49aa:	4604      	mov	r4, r0
   b49ac:	460d      	mov	r5, r1
    if (_cs == -1) {
   b49ae:	d118      	bne.n	b49e2 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49b0:	7901      	ldrb	r1, [r0, #4]
   b49b2:	6800      	ldr	r0, [r0, #0]
   b49b4:	f001 fe64 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b49b8:	6820      	ldr	r0, [r4, #0]
   b49ba:	6803      	ldr	r3, [r0, #0]
   b49bc:	4629      	mov	r1, r5
   b49be:	689b      	ldr	r3, [r3, #8]
   b49c0:	4798      	blx	r3
        _wire -> endTransmission();
   b49c2:	6820      	ldr	r0, [r4, #0]
   b49c4:	f001 fe67 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b49c8:	7921      	ldrb	r1, [r4, #4]
   b49ca:	6820      	ldr	r0, [r4, #0]
   b49cc:	2201      	movs	r2, #1
   b49ce:	f001 fe54 	bl	b667a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b49d2:	6820      	ldr	r0, [r4, #0]
   b49d4:	6803      	ldr	r3, [r0, #0]
   b49d6:	695b      	ldr	r3, [r3, #20]
   b49d8:	4798      	blx	r3
   b49da:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b49dc:	4628      	mov	r0, r5
   b49de:	b005      	add	sp, #20
   b49e0:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b49e2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b49e6:	3301      	adds	r3, #1
   b49e8:	d10c      	bne.n	b4a04 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b49ea:	4b15      	ldr	r3, [pc, #84]	; (b4a40 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b49ec:	9300      	str	r3, [sp, #0]
   b49ee:	2300      	movs	r3, #0
   b49f0:	f88d 3004 	strb.w	r3, [sp, #4]
   b49f4:	4b13      	ldr	r3, [pc, #76]	; (b4a44 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b49f6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b49f8:	4668      	mov	r0, sp
   b49fa:	2301      	movs	r3, #1
   b49fc:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a00:	f7ff fef1 	bl	b47e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a04:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a08:	2100      	movs	r1, #0
   b4a0a:	b280      	uxth	r0, r0
   b4a0c:	f001 ff89 	bl	b6922 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a10:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a14:	4620      	mov	r0, r4
   b4a16:	f7ff fef0 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4a1a:	2100      	movs	r1, #0
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	f7ff feec 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
   b4a22:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4a24:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a28:	2101      	movs	r1, #1
   b4a2a:	b280      	uxth	r0, r0
   b4a2c:	f001 ff79 	bl	b6922 <digitalWrite>
        if (_sck == -1)
   b4a30:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a34:	3301      	adds	r3, #1
   b4a36:	d1d1      	bne.n	b49dc <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4a38:	f7ff fece 	bl	b47d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4a3c:	e7ce      	b.n	b49dc <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4a3e:	bf00      	nop
   b4a40:	000b7e6c 	.word	0x000b7e6c
   b4a44:	0007a120 	.word	0x0007a120

000b4a48 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4a48:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4a4a:	21f3      	movs	r1, #243	; 0xf3
   b4a4c:	f7ff ffa8 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4a50:	f000 0001 	and.w	r0, r0, #1
   b4a54:	bd08      	pop	{r3, pc}
	...

000b4a58 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4a58:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4a5a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a5e:	3301      	adds	r3, #1
{
   b4a60:	b085      	sub	sp, #20
   b4a62:	4604      	mov	r4, r0
   b4a64:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4a66:	d11f      	bne.n	b4aa8 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a68:	7901      	ldrb	r1, [r0, #4]
   b4a6a:	6800      	ldr	r0, [r0, #0]
   b4a6c:	f001 fe08 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a70:	6820      	ldr	r0, [r4, #0]
   b4a72:	6803      	ldr	r3, [r0, #0]
   b4a74:	4629      	mov	r1, r5
   b4a76:	689b      	ldr	r3, [r3, #8]
   b4a78:	4798      	blx	r3
        _wire -> endTransmission();
   b4a7a:	6820      	ldr	r0, [r4, #0]
   b4a7c:	f001 fe0b 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4a80:	7921      	ldrb	r1, [r4, #4]
   b4a82:	6820      	ldr	r0, [r4, #0]
   b4a84:	2202      	movs	r2, #2
   b4a86:	f001 fdf8 	bl	b667a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4a8a:	6820      	ldr	r0, [r4, #0]
   b4a8c:	6803      	ldr	r3, [r0, #0]
   b4a8e:	695b      	ldr	r3, [r3, #20]
   b4a90:	4798      	blx	r3
   b4a92:	4605      	mov	r5, r0
   b4a94:	6820      	ldr	r0, [r4, #0]
   b4a96:	6803      	ldr	r3, [r0, #0]
   b4a98:	695b      	ldr	r3, [r3, #20]
   b4a9a:	4798      	blx	r3
   b4a9c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4aa0:	b285      	uxth	r5, r0
}
   b4aa2:	4628      	mov	r0, r5
   b4aa4:	b005      	add	sp, #20
   b4aa6:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4aa8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4aac:	3301      	adds	r3, #1
   b4aae:	d10c      	bne.n	b4aca <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4ab0:	4b18      	ldr	r3, [pc, #96]	; (b4b14 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4ab2:	9300      	str	r3, [sp, #0]
   b4ab4:	2300      	movs	r3, #0
   b4ab6:	f88d 3004 	strb.w	r3, [sp, #4]
   b4aba:	4b17      	ldr	r3, [pc, #92]	; (b4b18 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4abc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4abe:	4668      	mov	r0, sp
   b4ac0:	2301      	movs	r3, #1
   b4ac2:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4ac6:	f7ff fe8e 	bl	b47e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4aca:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ace:	2100      	movs	r1, #0
   b4ad0:	b280      	uxth	r0, r0
   b4ad2:	f001 ff26 	bl	b6922 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4ad6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4ada:	4620      	mov	r0, r4
   b4adc:	f7ff fe8d 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4ae0:	2100      	movs	r1, #0
   b4ae2:	4620      	mov	r0, r4
   b4ae4:	f7ff fe89 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
   b4ae8:	2100      	movs	r1, #0
   b4aea:	4605      	mov	r5, r0
   b4aec:	4620      	mov	r0, r4
   b4aee:	f7ff fe84 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
   b4af2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4af6:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4af8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4afc:	2101      	movs	r1, #1
   b4afe:	b280      	uxth	r0, r0
   b4b00:	f001 ff0f 	bl	b6922 <digitalWrite>
        if (_sck == -1)
   b4b04:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4b08:	3301      	adds	r3, #1
   b4b0a:	d1ca      	bne.n	b4aa2 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4b0c:	f7ff fe64 	bl	b47d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4b10:	e7c7      	b.n	b4aa2 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4b12:	bf00      	nop
   b4b14:	000b7e6c 	.word	0x000b7e6c
   b4b18:	0007a120 	.word	0x0007a120

000b4b1c <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4b1c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4b1e:	f7ff ff9b 	bl	b4a58 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4b22:	ba40      	rev16	r0, r0
}
   b4b24:	b280      	uxth	r0, r0
   b4b26:	bd08      	pop	{r3, pc}

000b4b28 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4b28:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b2a:	2188      	movs	r1, #136	; 0x88
{
   b4b2c:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b2e:	f7ff fff5 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b32:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b34:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4b36:	4620      	mov	r0, r4
   b4b38:	f7ff fff0 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b3c:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4b3e:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4b40:	4620      	mov	r0, r4
   b4b42:	f7ff ffeb 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b46:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4b48:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b4a:	4620      	mov	r0, r4
   b4b4c:	f7ff ffe6 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b50:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b52:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4b54:	4620      	mov	r0, r4
   b4b56:	f7ff ffe1 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b5a:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4b5c:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4b5e:	4620      	mov	r0, r4
   b4b60:	f7ff ffdc 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b64:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4b66:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4b68:	4620      	mov	r0, r4
   b4b6a:	f7ff ffd7 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b6e:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4b70:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4b72:	4620      	mov	r0, r4
   b4b74:	f7ff ffd2 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b78:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4b7a:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	f7ff ffcd 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b82:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4b84:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4b86:	4620      	mov	r0, r4
   b4b88:	f7ff ffc8 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b8c:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4b8e:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4b90:	4620      	mov	r0, r4
   b4b92:	f7ff ffc3 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   b4b96:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4b98:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	f7ff ffbe 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4ba0:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4ba2:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4ba4:	4620      	mov	r0, r4
   b4ba6:	f7ff fefb 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4baa:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4bac:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	f7ff ffb3 	bl	b4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bb6:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4bb8:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bba:	4620      	mov	r0, r4
   b4bbc:	f7ff fef0 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4bc0:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bc2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4bc6:	4620      	mov	r0, r4
   b4bc8:	f7ff feea 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
   b4bcc:	21e5      	movs	r1, #229	; 0xe5
   b4bce:	4605      	mov	r5, r0
   b4bd0:	4620      	mov	r0, r4
   b4bd2:	f7ff fee5 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
   b4bd6:	f000 030f 	and.w	r3, r0, #15
   b4bda:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4bde:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4be0:	21e6      	movs	r1, #230	; 0xe6
   b4be2:	4620      	mov	r0, r4
   b4be4:	f7ff fedc 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
   b4be8:	21e5      	movs	r1, #229	; 0xe5
   b4bea:	4605      	mov	r5, r0
   b4bec:	4620      	mov	r0, r4
   b4bee:	f7ff fed7 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
   b4bf2:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4bf6:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4bfa:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4bfc:	21e7      	movs	r1, #231	; 0xe7
   b4bfe:	4620      	mov	r0, r4
   b4c00:	f7ff fece 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
   b4c04:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4c08:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4c0c <_ZN15Adafruit_BME2806read24Eh>:
{
   b4c0c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4c0e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4c12:	3301      	adds	r3, #1
{
   b4c14:	b085      	sub	sp, #20
   b4c16:	4604      	mov	r4, r0
   b4c18:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4c1a:	d123      	bne.n	b4c64 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4c1c:	7901      	ldrb	r1, [r0, #4]
   b4c1e:	6800      	ldr	r0, [r0, #0]
   b4c20:	f001 fd2e 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4c24:	6820      	ldr	r0, [r4, #0]
   b4c26:	6803      	ldr	r3, [r0, #0]
   b4c28:	4629      	mov	r1, r5
   b4c2a:	689b      	ldr	r3, [r3, #8]
   b4c2c:	4798      	blx	r3
        _wire -> endTransmission();
   b4c2e:	6820      	ldr	r0, [r4, #0]
   b4c30:	f001 fd31 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4c34:	7921      	ldrb	r1, [r4, #4]
   b4c36:	6820      	ldr	r0, [r4, #0]
   b4c38:	2203      	movs	r2, #3
   b4c3a:	f001 fd1e 	bl	b667a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4c3e:	6820      	ldr	r0, [r4, #0]
   b4c40:	6803      	ldr	r3, [r0, #0]
   b4c42:	695b      	ldr	r3, [r3, #20]
   b4c44:	4798      	blx	r3
        value <<= 8;
   b4c46:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c48:	6820      	ldr	r0, [r4, #0]
   b4c4a:	6803      	ldr	r3, [r0, #0]
   b4c4c:	695b      	ldr	r3, [r3, #20]
   b4c4e:	4798      	blx	r3
   b4c50:	4328      	orrs	r0, r5
        value <<= 8;
   b4c52:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c54:	6820      	ldr	r0, [r4, #0]
   b4c56:	6803      	ldr	r3, [r0, #0]
   b4c58:	695b      	ldr	r3, [r3, #20]
   b4c5a:	4798      	blx	r3
   b4c5c:	4305      	orrs	r5, r0
}
   b4c5e:	4628      	mov	r0, r5
   b4c60:	b005      	add	sp, #20
   b4c62:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c64:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c68:	3301      	adds	r3, #1
   b4c6a:	d10c      	bne.n	b4c86 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4c6c:	4b1a      	ldr	r3, [pc, #104]	; (b4cd8 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4c6e:	9300      	str	r3, [sp, #0]
   b4c70:	2300      	movs	r3, #0
   b4c72:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c76:	4b19      	ldr	r3, [pc, #100]	; (b4cdc <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4c78:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c7a:	4668      	mov	r0, sp
   b4c7c:	2301      	movs	r3, #1
   b4c7e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c82:	f7ff fdb0 	bl	b47e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c86:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c8a:	2100      	movs	r1, #0
   b4c8c:	b280      	uxth	r0, r0
   b4c8e:	f001 fe48 	bl	b6922 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c92:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c96:	4620      	mov	r0, r4
   b4c98:	f7ff fdaf 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4c9c:	2100      	movs	r1, #0
   b4c9e:	4620      	mov	r0, r4
   b4ca0:	f7ff fdab 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4ca4:	2100      	movs	r1, #0
        value <<= 8;
   b4ca6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4ca8:	4620      	mov	r0, r4
   b4caa:	f7ff fda6 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
   b4cae:	4328      	orrs	r0, r5
        value <<= 8;
   b4cb0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4cb2:	2100      	movs	r1, #0
   b4cb4:	4620      	mov	r0, r4
   b4cb6:	f7ff fda0 	bl	b47fa <_ZN15Adafruit_BME2807spixferEh>
   b4cba:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4cbc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4cc0:	2101      	movs	r1, #1
   b4cc2:	b280      	uxth	r0, r0
   b4cc4:	f001 fe2d 	bl	b6922 <digitalWrite>
        if (_sck == -1)
   b4cc8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4ccc:	3301      	adds	r3, #1
   b4cce:	d1c6      	bne.n	b4c5e <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4cd0:	f7ff fd82 	bl	b47d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4cd4:	e7c3      	b.n	b4c5e <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4cd6:	bf00      	nop
   b4cd8:	000b7e6c 	.word	0x000b7e6c
   b4cdc:	0007a120 	.word	0x0007a120

000b4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4ce0:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4ce2:	21fa      	movs	r1, #250	; 0xfa
{
   b4ce4:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4ce6:	f7ff ff91 	bl	b4c0c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4cea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4cee:	d01f      	beq.n	b4d30 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cf0:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4cf2:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4d38 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cf6:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cf8:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cfc:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4d00:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d04:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d06:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4d0a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4d0e:	131b      	asrs	r3, r3, #12
   b4d10:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d12:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4d14:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4d18:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4d1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4d1e:	3380      	adds	r3, #128	; 0x80
   b4d20:	121b      	asrs	r3, r3, #8
   b4d22:	ee07 3a90 	vmov	s15, r3
   b4d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4d2a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4d2e:	bd10      	pop	{r4, pc}
        return NAN;
   b4d30:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4d3c <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4d34:	e7fb      	b.n	b4d2e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4d36:	bf00      	nop
   b4d38:	42c80000 	.word	0x42c80000
   b4d3c:	7fc00000 	.word	0x7fc00000

000b4d40 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4d40:	b538      	push	{r3, r4, r5, lr}
   b4d42:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4d44:	f7ff ffcc 	bl	b4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4d48:	21fd      	movs	r1, #253	; 0xfd
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	f7ff fe84 	bl	b4a58 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4d50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4d54:	d038      	beq.n	b4dc8 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d56:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d58:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d5c:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d60:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4d64:	0509      	lsls	r1, r1, #20
   b4d66:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4d6a:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4d72:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d74:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d78:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d7c:	436b      	muls	r3, r5
   b4d7e:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d80:	4369      	muls	r1, r5
   b4d82:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d88:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d8a:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d8c:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d90:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d94:	434b      	muls	r3, r1
   b4d96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4d9a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d9c:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d9e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4da0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4da4:	4352      	muls	r2, r2
   b4da6:	11d2      	asrs	r2, r2, #7
   b4da8:	434a      	muls	r2, r1
   b4daa:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4dae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4db2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4db6:	bfa8      	it	ge
   b4db8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4dbc:	131b      	asrs	r3, r3, #12
   b4dbe:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4dc2:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4dc6:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4dd0 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4dcc:	e7fb      	b.n	b4dc6 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4dce:	bf00      	nop
   b4dd0:	7fc00000 	.word	0x7fc00000

000b4dd4 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4dd8:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4dda:	f7ff ff81 	bl	b4ce0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4dde:	21f7      	movs	r1, #247	; 0xf7
   b4de0:	4628      	mov	r0, r5
   b4de2:	f7ff ff13 	bl	b4c0c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4de6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4dea:	f000 80b6 	beq.w	b4f5a <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4dee:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4df0:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4df4:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4df8:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4dfc:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e00:	17dc      	asrs	r4, r3, #31
   b4e02:	fb03 f20e 	mul.w	r2, r3, lr
   b4e06:	fb01 2204 	mla	r2, r1, r4, r2
   b4e0a:	fba3 3401 	umull	r3, r4, r3, r1
   b4e0e:	4422      	add	r2, r4
   b4e10:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e12:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e16:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e18:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e1c:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e20:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e24:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e28:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4e2c:	fb03 f608 	mul.w	r6, r3, r8
   b4e30:	fb07 660c 	mla	r6, r7, ip, r6
   b4e34:	fba3 3c07 	umull	r3, ip, r3, r7
   b4e38:	4466      	add	r6, ip
   b4e3a:	0a1b      	lsrs	r3, r3, #8
   b4e3c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4e40:	191b      	adds	r3, r3, r4
   b4e42:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e46:	8b6e      	ldrh	r6, [r5, #26]
   b4e48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4e4c:	fba3 3406 	umull	r3, r4, r3, r6
   b4e50:	fb06 4402 	mla	r4, r6, r2, r4
   b4e54:	17e3      	asrs	r3, r4, #31
   b4e56:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4e58:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e5c:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4e60:	d07e      	beq.n	b4f60 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e62:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4e66:	fb04 f608 	mul.w	r6, r4, r8
   b4e6a:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4e6e:	fb07 6609 	mla	r6, r7, r9, r6
   b4e72:	fba4 4707 	umull	r4, r7, r4, r7
   b4e76:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e78:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4e7c:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4e80:	fb07 fe0e 	mul.w	lr, r7, lr
   b4e84:	fb01 ee08 	mla	lr, r1, r8, lr
   b4e88:	fba7 7101 	umull	r7, r1, r7, r1
   b4e8c:	4471      	add	r1, lr
   b4e8e:	0449      	lsls	r1, r1, #17
   b4e90:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4e94:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e96:	047f      	lsls	r7, r7, #17
   b4e98:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4e9a:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e9e:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4ea2:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4ea6:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4eaa:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4eae:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4eb2:	07e4      	lsls	r4, r4, #31
   b4eb4:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4eb6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4eba:	f640 4135 	movw	r1, #3125	; 0xc35
   b4ebe:	eb60 0606 	sbc.w	r6, r0, r6
   b4ec2:	fba4 0401 	umull	r0, r4, r4, r1
   b4ec6:	fb01 4106 	mla	r1, r1, r6, r4
   b4eca:	f002 fbe5 	bl	b7698 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4ece:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ed2:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4ed6:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4eda:	0b43      	lsrs	r3, r0, #13
   b4edc:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4ee0:	fb02 f70c 	mul.w	r7, r2, ip
   b4ee4:	17d4      	asrs	r4, r2, #31
   b4ee6:	fb03 7704 	mla	r7, r3, r4, r7
   b4eea:	fba2 2403 	umull	r2, r4, r2, r3
   b4eee:	443c      	add	r4, r7
   b4ef0:	fb02 f70c 	mul.w	r7, r2, ip
   b4ef4:	fb03 7704 	mla	r7, r3, r4, r7
   b4ef8:	fba2 2303 	umull	r2, r3, r2, r3
   b4efc:	441f      	add	r7, r3
   b4efe:	0e53      	lsrs	r3, r2, #25
   b4f00:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f04:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f06:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4f0a:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4f0e:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f10:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f14:	fb02 4100 	mla	r1, r2, r0, r4
   b4f18:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f1c:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f20:	4431      	add	r1, r6
   b4f22:	0cc0      	lsrs	r0, r0, #19
   b4f24:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f28:	1818      	adds	r0, r3, r0
   b4f2a:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4f2e:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4f32:	0a00      	lsrs	r0, r0, #8
   b4f34:	012d      	lsls	r5, r5, #4
   b4f36:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4f3a:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4f3e:	0124      	lsls	r4, r4, #4
   b4f40:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4f42:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4f46:	f002 fb69 	bl	b761c <__aeabi_l2f>
   b4f4a:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4f68 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4f4e:	ee07 0a90 	vmov	s15, r0
   b4f52:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4f5a:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4f6c <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4f5e:	e7fa      	b.n	b4f56 <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4f60:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4f70 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4f64:	e7f7      	b.n	b4f56 <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4f66:	bf00      	nop
   b4f68:	3b800000 	.word	0x3b800000
   b4f6c:	7fc00000 	.word	0x7fc00000
   b4f70:	00000000 	.word	0x00000000

000b4f74 <_ZN15Adafruit_BME2804initEv>:
{
   b4f74:	b530      	push	{r4, r5, lr}
   b4f76:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4f78:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4f7c:	1c42      	adds	r2, r0, #1
{
   b4f7e:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4f80:	d119      	bne.n	b4fb6 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4f82:	6820      	ldr	r0, [r4, #0]
   b4f84:	f001 fb4a 	bl	b661c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f88:	21d0      	movs	r1, #208	; 0xd0
   b4f8a:	4620      	mov	r0, r4
   b4f8c:	f7ff fd08 	bl	b49a0 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4f90:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f92:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4f94:	d145      	bne.n	b5022 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4f96:	4620      	mov	r0, r4
   b4f98:	22b6      	movs	r2, #182	; 0xb6
   b4f9a:	21e0      	movs	r1, #224	; 0xe0
   b4f9c:	f7ff fc64 	bl	b4868 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4fa0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4fa4:	f001 f908 	bl	b61b8 <delay>
    while (isReadingCalibration())
   b4fa8:	4620      	mov	r0, r4
   b4faa:	f7ff fd4d 	bl	b4a48 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4fae:	4605      	mov	r5, r0
   b4fb0:	b328      	cbz	r0, b4ffe <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4fb2:	2064      	movs	r0, #100	; 0x64
   b4fb4:	e7f6      	b.n	b4fa4 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4fb6:	2101      	movs	r1, #1
   b4fb8:	b280      	uxth	r0, r0
   b4fba:	f001 fcb2 	bl	b6922 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4fbe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4fc2:	2101      	movs	r1, #1
   b4fc4:	b280      	uxth	r0, r0
   b4fc6:	f001 fc9b 	bl	b6900 <pinMode>
        if (_sck == -1) {
   b4fca:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4fce:	1c43      	adds	r3, r0, #1
   b4fd0:	d104      	bne.n	b4fdc <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4fd2:	f7ff fbe5 	bl	b47a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fd6:	f000 fcdf 	bl	b5998 <_ZN8SPIClass5beginEv>
    }
   b4fda:	e7d5      	b.n	b4f88 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4fdc:	2101      	movs	r1, #1
   b4fde:	b280      	uxth	r0, r0
   b4fe0:	f001 fc8e 	bl	b6900 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4fe4:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4fe8:	2101      	movs	r1, #1
   b4fea:	b280      	uxth	r0, r0
   b4fec:	f001 fc88 	bl	b6900 <pinMode>
            pinMode(_miso, INPUT);
   b4ff0:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4ff4:	2100      	movs	r1, #0
   b4ff6:	b280      	uxth	r0, r0
   b4ff8:	f001 fc82 	bl	b6900 <pinMode>
   b4ffc:	e7c4      	b.n	b4f88 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4ffe:	4620      	mov	r0, r4
   b5000:	f7ff fd92 	bl	b4b28 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b5004:	2305      	movs	r3, #5
   b5006:	9300      	str	r3, [sp, #0]
   b5008:	461a      	mov	r2, r3
   b500a:	2103      	movs	r1, #3
   b500c:	4620      	mov	r0, r4
   b500e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5012:	f7ff fc7b 	bl	b490c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b5016:	2064      	movs	r0, #100	; 0x64
   b5018:	f001 f8ce 	bl	b61b8 <delay>
    return true;
   b501c:	2001      	movs	r0, #1
}
   b501e:	b005      	add	sp, #20
   b5020:	bd30      	pop	{r4, r5, pc}
        return false;
   b5022:	2000      	movs	r0, #0
   b5024:	e7fb      	b.n	b501e <_ZN15Adafruit_BME2804initEv+0xaa>

000b5026 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b5026:	2377      	movs	r3, #119	; 0x77
{
   b5028:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b502a:	7103      	strb	r3, [r0, #4]
{
   b502c:	4604      	mov	r4, r0
	_wire = &Wire;
   b502e:	f001 fcfb 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b5032:	6020      	str	r0, [r4, #0]
	status = init();
   b5034:	4620      	mov	r0, r4
   b5036:	f7ff ff9d 	bl	b4f74 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b503a:	b930      	cbnz	r0, b504a <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b503c:	2376      	movs	r3, #118	; 0x76
   b503e:	7123      	strb	r3, [r4, #4]
 		status = init();
   b5040:	4620      	mov	r0, r4
}
   b5042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b5046:	f7ff bf95 	b.w	b4f74 <_ZN15Adafruit_BME2804initEv>
}
   b504a:	bd10      	pop	{r4, pc}

000b504c <_ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
  BSD license, all text above must be included in any redistribution
 ****************************************************/
#include "application.h"
#include "Adafruit_VEML6070.h"

void Adafruit_VEML6070::begin(veml6070_integrationtime_t itime) {
   b504c:	b510      	push	{r4, lr}
   b504e:	460c      	mov	r4, r1
  Wire.begin();
   b5050:	f001 fcea 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b5054:	f001 fae2 	bl	b661c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(VEML6070_ADDR_L);
   b5058:	f001 fce6 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b505c:	2138      	movs	r1, #56	; 0x38
   b505e:	f001 fb13 	bl	b6688 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((itime << 2) | 0x02);
   b5062:	f001 fce1 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b5066:	00a1      	lsls	r1, r4, #2
   b5068:	6803      	ldr	r3, [r0, #0]
   b506a:	f041 0102 	orr.w	r1, r1, #2
   b506e:	689b      	ldr	r3, [r3, #8]
   b5070:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   b5074:	4798      	blx	r3
  Wire.endTransmission();
   b5076:	f001 fcd7 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b507a:	f001 fb0c 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
  delay(500);
}
   b507e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(500);
   b5082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5086:	f001 b897 	b.w	b61b8 <delay>

000b508a <_ZN17Adafruit_VEML60706readUVEv>:

uint16_t Adafruit_VEML6070::readUV() {
   b508a:	b538      	push	{r3, r4, r5, lr}
  if (Wire.requestFrom(VEML6070_ADDR_H, 1) != 1) return -1;
   b508c:	f001 fccc 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b5090:	2201      	movs	r2, #1
   b5092:	2139      	movs	r1, #57	; 0x39
   b5094:	f001 faf1 	bl	b667a <_ZN7TwoWire11requestFromEhj>
   b5098:	2801      	cmp	r0, #1
   b509a:	4604      	mov	r4, r0
   b509c:	d002      	beq.n	b50a4 <_ZN17Adafruit_VEML60706readUVEv+0x1a>
   b509e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uvi <<= 8;
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
  uvi |= Wire.read();

  return uvi;  
}
   b50a2:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t uvi = Wire.read();
   b50a4:	f001 fcc0 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b50a8:	6803      	ldr	r3, [r0, #0]
   b50aa:	695b      	ldr	r3, [r3, #20]
   b50ac:	4798      	blx	r3
   b50ae:	4605      	mov	r5, r0
  if (Wire.requestFrom(VEML6070_ADDR_L, 1) != 1) return -1;
   b50b0:	f001 fcba 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b50b4:	4622      	mov	r2, r4
   b50b6:	2138      	movs	r1, #56	; 0x38
   b50b8:	f001 fadf 	bl	b667a <_ZN7TwoWire11requestFromEhj>
   b50bc:	2801      	cmp	r0, #1
   b50be:	d1ee      	bne.n	b509e <_ZN17Adafruit_VEML60706readUVEv+0x14>
  uvi |= Wire.read();
   b50c0:	f001 fcb2 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b50c4:	6803      	ldr	r3, [r0, #0]
   b50c6:	695b      	ldr	r3, [r3, #20]
   b50c8:	4798      	blx	r3
   b50ca:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b50ce:	b280      	uxth	r0, r0
  return uvi;  
   b50d0:	e7e7      	b.n	b50a2 <_ZN17Adafruit_VEML60706readUVEv+0x18>

000b50d2 <_ZN7TwoWire5writeEi.isra.0>:
   b50d2:	6803      	ldr	r3, [r0, #0]
   b50d4:	b2c9      	uxtb	r1, r1
   b50d6:	689b      	ldr	r3, [r3, #8]
   b50d8:	4718      	bx	r3

000b50da <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
   b50da:	2200      	movs	r2, #0
   b50dc:	6042      	str	r2, [r0, #4]
   b50de:	6082      	str	r2, [r0, #8]
   b50e0:	60c2      	str	r2, [r0, #12]
   b50e2:	f240 1201 	movw	r2, #257	; 0x101
   b50e6:	8202      	strh	r2, [r0, #16]
   b50e8:	2201      	movs	r2, #1
   b50ea:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
   b50ec:	4770      	bx	lr

000b50ee <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
   b50ee:	b538      	push	{r3, r4, r5, lr}
   b50f0:	4604      	mov	r4, r0
   b50f2:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b50f4:	6800      	ldr	r0, [r0, #0]
   b50f6:	2161      	movs	r1, #97	; 0x61
   b50f8:	f001 fac6 	bl	b6688 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
   b50fc:	6820      	ldr	r0, [r4, #0]
   b50fe:	0a29      	lsrs	r1, r5, #8
   b5100:	f7ff ffe7 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   b5104:	6820      	ldr	r0, [r4, #0]
   b5106:	b2e9      	uxtb	r1, r5
   b5108:	f7ff ffe3 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b510c:	6820      	ldr	r0, [r4, #0]
   b510e:	f001 fac2 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
   b5112:	b108      	cbz	r0, b5118 <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   b5114:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
   b5116:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
   b5118:	6820      	ldr	r0, [r4, #0]
   b511a:	2202      	movs	r2, #2
   b511c:	2161      	movs	r1, #97	; 0x61
   b511e:	f001 faac 	bl	b667a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5122:	6820      	ldr	r0, [r4, #0]
   b5124:	6803      	ldr	r3, [r0, #0]
   b5126:	691b      	ldr	r3, [r3, #16]
   b5128:	4798      	blx	r3
   b512a:	2800      	cmp	r0, #0
   b512c:	d0f2      	beq.n	b5114 <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
   b512e:	6820      	ldr	r0, [r4, #0]
   b5130:	6803      	ldr	r3, [r0, #0]
   b5132:	695b      	ldr	r3, [r3, #20]
   b5134:	4798      	blx	r3
   b5136:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
   b5138:	6820      	ldr	r0, [r4, #0]
   b513a:	6803      	ldr	r3, [r0, #0]
   b513c:	695b      	ldr	r3, [r3, #20]
   b513e:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b5140:	b2c3      	uxtb	r3, r0
   b5142:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
   b5146:	b280      	uxth	r0, r0
   b5148:	e7e5      	b.n	b5116 <_ZN5SCD3012readRegisterEt+0x28>

000b514a <_ZN5SCD3013dataAvailableEv>:
{
   b514a:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   b514c:	f240 2102 	movw	r1, #514	; 0x202
   b5150:	f7ff ffcd 	bl	b50ee <_ZN5SCD3012readRegisterEt>
}
   b5154:	1e43      	subs	r3, r0, #1
   b5156:	4258      	negs	r0, r3
   b5158:	4158      	adcs	r0, r3
   b515a:	bd08      	pop	{r3, pc}

000b515c <_ZN5SCD3015readMeasurementEv>:
{
   b515c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5160:	4604      	mov	r4, r0
  if (dataAvailable() == false)
   b5162:	f7ff fff2 	bl	b514a <_ZN5SCD3013dataAvailableEv>
   b5166:	4607      	mov	r7, r0
   b5168:	b918      	cbnz	r0, b5172 <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
   b516a:	2700      	movs	r7, #0
}
   b516c:	4638      	mov	r0, r7
   b516e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b5172:	6820      	ldr	r0, [r4, #0]
   b5174:	2161      	movs	r1, #97	; 0x61
   b5176:	f001 fa87 	bl	b6688 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
   b517a:	6820      	ldr	r0, [r4, #0]
   b517c:	2103      	movs	r1, #3
   b517e:	f7ff ffa8 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   b5182:	6820      	ldr	r0, [r4, #0]
   b5184:	2100      	movs	r1, #0
   b5186:	f7ff ffa4 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  if (_i2cPort->endTransmission() != 0)
   b518a:	6820      	ldr	r0, [r4, #0]
   b518c:	f001 fa83 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
   b5190:	4605      	mov	r5, r0
   b5192:	2800      	cmp	r0, #0
   b5194:	d1e9      	bne.n	b516a <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
   b5196:	2212      	movs	r2, #18
   b5198:	2161      	movs	r1, #97	; 0x61
   b519a:	6820      	ldr	r0, [r4, #0]
   b519c:	f001 fa6d 	bl	b667a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b51a0:	6820      	ldr	r0, [r4, #0]
   b51a2:	6803      	ldr	r3, [r0, #0]
   b51a4:	691b      	ldr	r3, [r3, #16]
   b51a6:	4798      	blx	r3
   b51a8:	4606      	mov	r6, r0
   b51aa:	b358      	cbz	r0, b5204 <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
   b51ac:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
   b51ae:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
   b51b0:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
   b51b2:	6820      	ldr	r0, [r4, #0]
   b51b4:	6803      	ldr	r3, [r0, #0]
   b51b6:	695b      	ldr	r3, [r3, #20]
   b51b8:	4798      	blx	r3
      switch (x)
   b51ba:	b2eb      	uxtb	r3, r5
   b51bc:	2b10      	cmp	r3, #16
   b51be:	d80d      	bhi.n	b51dc <_ZN5SCD3015readMeasurementEv+0x80>
   b51c0:	e8df f003 	tbb	[pc, r3]
   b51c4:	090c0909 	.word	0x090c0909
   b51c8:	18180c09 	.word	0x18180c09
   b51cc:	0c18180c 	.word	0x0c18180c
   b51d0:	1c0c1c1c 	.word	0x1c0c1c1c
   b51d4:	1c          	.byte	0x1c
   b51d5:	00          	.byte	0x00
          tempCO2 |= incoming;
   b51d6:	b2c3      	uxtb	r3, r0
   b51d8:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
   b51dc:	3501      	adds	r5, #1
   b51de:	2d12      	cmp	r5, #18
   b51e0:	d1e7      	bne.n	b51b2 <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
   b51e2:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
   b51e4:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
   b51e8:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
   b51ea:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
   b51ee:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
   b51f0:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
   b51f2:	e7bb      	b.n	b516c <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
   b51f4:	b2c3      	uxtb	r3, r0
   b51f6:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
   b51fa:	e7ef      	b.n	b51dc <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
   b51fc:	b2c3      	uxtb	r3, r0
   b51fe:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
   b5202:	e7eb      	b.n	b51dc <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
   b5204:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
   b5206:	4681      	mov	r9, r0
   b5208:	e7eb      	b.n	b51e2 <_ZN5SCD3015readMeasurementEv+0x86>

000b520a <_ZN5SCD306getCO2Ev>:
{
   b520a:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
   b520c:	7c03      	ldrb	r3, [r0, #16]
{
   b520e:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
   b5210:	b10b      	cbz	r3, b5216 <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5212:	f7ff ffa3 	bl	b515c <_ZN5SCD3015readMeasurementEv>
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
   b5216:	edd4 7a01 	vldr	s15, [r4, #4]
   b521a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  co2HasBeenReported = true;
   b521e:	2301      	movs	r3, #1
   b5220:	7423      	strb	r3, [r4, #16]
}
   b5222:	ee17 3a90 	vmov	r3, s15
   b5226:	b298      	uxth	r0, r3
   b5228:	bd10      	pop	{r4, pc}

000b522a <_ZN5SCD3011getHumidityEv>:
{
   b522a:	b510      	push	{r4, lr}
  if (humidityHasBeenReported == true) //Trigger a new read
   b522c:	7c43      	ldrb	r3, [r0, #17]
{
   b522e:	4604      	mov	r4, r0
  if (humidityHasBeenReported == true) //Trigger a new read
   b5230:	b10b      	cbz	r3, b5236 <_ZN5SCD3011getHumidityEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5232:	f7ff ff93 	bl	b515c <_ZN5SCD3015readMeasurementEv>
  humidityHasBeenReported = true;
   b5236:	2301      	movs	r3, #1
}
   b5238:	ed94 0a03 	vldr	s0, [r4, #12]
  humidityHasBeenReported = true;
   b523c:	7463      	strb	r3, [r4, #17]
}
   b523e:	bd10      	pop	{r4, pc}

000b5240 <_ZN5SCD3014getTemperatureEv>:
{
   b5240:	b510      	push	{r4, lr}
  if (temperatureHasBeenReported == true) //Trigger a new read
   b5242:	7c83      	ldrb	r3, [r0, #18]
{
   b5244:	4604      	mov	r4, r0
  if (temperatureHasBeenReported == true) //Trigger a new read
   b5246:	b10b      	cbz	r3, b524c <_ZN5SCD3014getTemperatureEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   b5248:	f7ff ff88 	bl	b515c <_ZN5SCD3015readMeasurementEv>
  temperatureHasBeenReported = true;
   b524c:	2301      	movs	r3, #1
}
   b524e:	ed94 0a02 	vldr	s0, [r4, #8]
  temperatureHasBeenReported = true;
   b5252:	74a3      	strb	r3, [r4, #18]
}
   b5254:	bd10      	pop	{r4, pc}

000b5256 <_ZN5SCD3011computeCRC8EPhh>:
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0 ; x < len ; x++)
   b5256:	440a      	add	r2, r1
  uint8_t crc = 0xFF; //Init with 0xFF
   b5258:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t x = 0 ; x < len ; x++)
   b525a:	428a      	cmp	r2, r1
   b525c:	d011      	beq.n	b5282 <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
   b525e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5262:	4058      	eors	r0, r3
   b5264:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
   b5266:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t i = 0 ; i < 8 ; i++)
   b526a:	f103 33ff 	add.w	r3, r3, #4294967295
   b526e:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   b5272:	bf18      	it	ne
   b5274:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
   b5278:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   b527c:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
   b527e:	d1f2      	bne.n	b5266 <_ZN5SCD3011computeCRC8EPhh+0x10>
   b5280:	e7eb      	b.n	b525a <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
   b5282:	4770      	bx	lr

000b5284 <_ZN5SCD3011sendCommandEtt>:
{
   b5284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5288:	460e      	mov	r6, r1
  data[0] = arguments >> 8;
   b528a:	ea4f 2812 	mov.w	r8, r2, lsr #8
{
   b528e:	4615      	mov	r5, r2
  data[1] = arguments & 0xFF;
   b5290:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b5294:	a901      	add	r1, sp, #4
   b5296:	2202      	movs	r2, #2
{
   b5298:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
   b529a:	f88d 8004 	strb.w	r8, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b529e:	f7ff ffda 	bl	b5256 <_ZN5SCD3011computeCRC8EPhh>
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b52a2:	2161      	movs	r1, #97	; 0x61
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   b52a4:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   b52a6:	6820      	ldr	r0, [r4, #0]
   b52a8:	f001 f9ee 	bl	b6688 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
   b52ac:	6820      	ldr	r0, [r4, #0]
   b52ae:	0a31      	lsrs	r1, r6, #8
   b52b0:	f7ff ff0f 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(command & 0xFF); //LSB
   b52b4:	6820      	ldr	r0, [r4, #0]
   b52b6:	b2f1      	uxtb	r1, r6
   b52b8:	f7ff ff0b 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments >> 8); //MSB
   b52bc:	6820      	ldr	r0, [r4, #0]
   b52be:	4641      	mov	r1, r8
   b52c0:	f7ff ff07 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(arguments & 0xFF); //LSB
   b52c4:	6820      	ldr	r0, [r4, #0]
   b52c6:	b2e9      	uxtb	r1, r5
   b52c8:	f7ff ff03 	bl	b50d2 <_ZN7TwoWire5writeEi.isra.0>
  _i2cPort->write(crc);
   b52cc:	6820      	ldr	r0, [r4, #0]
   b52ce:	6803      	ldr	r3, [r0, #0]
   b52d0:	4639      	mov	r1, r7
   b52d2:	689b      	ldr	r3, [r3, #8]
   b52d4:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b52d6:	6820      	ldr	r0, [r4, #0]
   b52d8:	f001 f9dd 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
}
   b52dc:	fab0 f080 	clz	r0, r0
   b52e0:	0940      	lsrs	r0, r0, #5
   b52e2:	b002      	add	sp, #8
   b52e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b52e8 <_ZN5SCD3014beginMeasuringEt>:
{
   b52e8:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
   b52ea:	2110      	movs	r1, #16
   b52ec:	f7ff bfca 	b.w	b5284 <_ZN5SCD3011sendCommandEtt>

000b52f0 <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
   b52f0:	2100      	movs	r1, #0
   b52f2:	f7ff bff9 	b.w	b52e8 <_ZN5SCD3014beginMeasuringEt>

000b52f6 <_ZN5SCD3022setMeasurementIntervalEt>:
{
   b52f6:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
   b52f8:	f44f 418c 	mov.w	r1, #17920	; 0x4600
   b52fc:	f7ff bfc2 	b.w	b5284 <_ZN5SCD3011sendCommandEtt>

000b5300 <_ZN5SCD305beginER7TwoWire>:
{
   b5300:	b538      	push	{r3, r4, r5, lr}
   b5302:	4604      	mov	r4, r0
   b5304:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b5306:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b5308:	f001 f988 	bl	b661c <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
   b530c:	4620      	mov	r0, r4
   b530e:	f7ff ffef 	bl	b52f0 <_ZN5SCD3014beginMeasuringEv>
   b5312:	4605      	mov	r5, r0
   b5314:	b148      	cbz	r0, b532a <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
   b5316:	2102      	movs	r1, #2
   b5318:	4620      	mov	r0, r4
   b531a:	f7ff ffec 	bl	b52f6 <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   b531e:	2201      	movs	r2, #1
   b5320:	f245 3106 	movw	r1, #21254	; 0x5306
   b5324:	4620      	mov	r0, r4
   b5326:	f7ff ffad 	bl	b5284 <_ZN5SCD3011sendCommandEtt>
}
   b532a:	4628      	mov	r0, r5
   b532c:	bd38      	pop	{r3, r4, r5, pc}

000b532e <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   b532e:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   b5330:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   b5332:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   b5334:	7002      	strb	r2, [r0, #0]
}
   b5336:	4770      	bx	lr

000b5338 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   b5338:	b510      	push	{r4, lr}
   b533a:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   b533c:	6840      	ldr	r0, [r0, #4]
   b533e:	f001 f9ad 	bl	b669c <_ZN7TwoWire9isEnabledEv>
   b5342:	b910      	cbnz	r0, b534a <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   b5344:	6860      	ldr	r0, [r4, #4]
   b5346:	f001 f969 	bl	b661c <_ZN7TwoWire5beginEv>
  }

  return true;
}
   b534a:	2001      	movs	r0, #1
   b534c:	bd10      	pop	{r4, pc}
	...

000b5350 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   b5350:	b570      	push	{r4, r5, r6, lr}
   b5352:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   b5354:	7841      	ldrb	r1, [r0, #1]
   b5356:	6840      	ldr	r0, [r0, #4]
   b5358:	f001 f992 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   b535c:	7869      	ldrb	r1, [r5, #1]
   b535e:	6868      	ldr	r0, [r5, #4]
   b5360:	2202      	movs	r2, #2
   b5362:	f001 f98a 	bl	b667a <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   b5366:	6868      	ldr	r0, [r5, #4]
   b5368:	6803      	ldr	r3, [r0, #0]
   b536a:	695b      	ldr	r3, [r3, #20]
   b536c:	4798      	blx	r3
   b536e:	4606      	mov	r6, r0
   b5370:	6868      	ldr	r0, [r5, #4]
   b5372:	6803      	ldr	r3, [r0, #0]
   b5374:	695b      	ldr	r3, [r3, #20]
   b5376:	4798      	blx	r3
   b5378:	4604      	mov	r4, r0
   b537a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  m_i2c.endTransmission();
   b537e:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   b5380:	b2a4      	uxth	r4, r4
  m_i2c.endTransmission();
   b5382:	f001 f988 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
  return (float)level / 1.2f; // convert to lux
   b5386:	ee07 4a90 	vmov	s15, r4
}
   b538a:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5398 <_ZN6BH175015get_light_levelEv+0x48>
  return (float)level / 1.2f; // convert to lux
   b538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b5392:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5396:	bd70      	pop	{r4, r5, r6, pc}
   b5398:	3f99999a 	.word	0x3f99999a

000b539c <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   b539c:	7803      	ldrb	r3, [r0, #0]
   b539e:	2b23      	cmp	r3, #35	; 0x23
   b53a0:	d005      	beq.n	b53ae <_ZN6BH175020wait_for_measurementEv+0x12>
   b53a2:	2b13      	cmp	r3, #19
   b53a4:	bf0c      	ite	eq
   b53a6:	2018      	moveq	r0, #24
   b53a8:	20b4      	movne	r0, #180	; 0xb4
   b53aa:	f000 bf05 	b.w	b61b8 <delay>
   b53ae:	2018      	movs	r0, #24
   b53b0:	e7fb      	b.n	b53aa <_ZN6BH175020wait_for_measurementEv+0xe>

000b53b2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   b53b2:	b538      	push	{r3, r4, r5, lr}
   b53b4:	4604      	mov	r4, r0
   b53b6:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   b53b8:	7841      	ldrb	r1, [r0, #1]
   b53ba:	6840      	ldr	r0, [r0, #4]
   b53bc:	f001 f960 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   b53c0:	6860      	ldr	r0, [r4, #4]
   b53c2:	6803      	ldr	r3, [r0, #0]
   b53c4:	4629      	mov	r1, r5
   b53c6:	689b      	ldr	r3, [r3, #8]
   b53c8:	4798      	blx	r3
  m_i2c.endTransmission();
   b53ca:	6860      	ldr	r0, [r4, #4]
   b53cc:	f001 f963 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   b53d0:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   b53d2:	4620      	mov	r0, r4
}
   b53d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   b53d8:	f7ff bfe0 	b.w	b539c <_ZN6BH175020wait_for_measurementEv>

000b53dc <_ZN6BH175023make_forced_measurementEv>:
{
   b53dc:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   b53de:	7803      	ldrb	r3, [r0, #0]
   b53e0:	f1a3 0220 	sub.w	r2, r3, #32
   b53e4:	2a01      	cmp	r2, #1
{
   b53e6:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   b53e8:	d901      	bls.n	b53ee <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   b53ea:	2b23      	cmp	r3, #35	; 0x23
   b53ec:	d110      	bne.n	b5410 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   b53ee:	7861      	ldrb	r1, [r4, #1]
   b53f0:	6860      	ldr	r0, [r4, #4]
   b53f2:	f001 f945 	bl	b6680 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   b53f6:	6860      	ldr	r0, [r4, #4]
   b53f8:	7821      	ldrb	r1, [r4, #0]
   b53fa:	6803      	ldr	r3, [r0, #0]
   b53fc:	689b      	ldr	r3, [r3, #8]
   b53fe:	4798      	blx	r3
    m_i2c.endTransmission();
   b5400:	6860      	ldr	r0, [r4, #4]
   b5402:	f001 f948 	bl	b6696 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   b5406:	4620      	mov	r0, r4
}
   b5408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   b540c:	f7ff bfc6 	b.w	b539c <_ZN6BH175020wait_for_measurementEv>
}
   b5410:	bd10      	pop	{r4, pc}
	...

000b5414 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <netdb_freeaddrinfo+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	689b      	ldr	r3, [r3, #8]
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	00030268 	.word	0x00030268

000b5424 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <netdb_getaddrinfo+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	68db      	ldr	r3, [r3, #12]
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	00030268 	.word	0x00030268

000b5434 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <HAL_Pin_Mode+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	689b      	ldr	r3, [r3, #8]
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	0003022c 	.word	0x0003022c

000b5444 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <HAL_Get_Pin_Mode+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	68db      	ldr	r3, [r3, #12]
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	0003022c 	.word	0x0003022c

000b5454 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <HAL_GPIO_Write+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	691b      	ldr	r3, [r3, #16]
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	0003022c 	.word	0x0003022c

000b5464 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <HAL_GPIO_Read+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	695b      	ldr	r3, [r3, #20]
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	0003022c 	.word	0x0003022c

000b5474 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <HAL_RNG_GetRandomNumber+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	685b      	ldr	r3, [r3, #4]
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	00030218 	.word	0x00030218

000b5484 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	695b      	ldr	r3, [r3, #20]
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	00030218 	.word	0x00030218

000b5494 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <hal_rtc_time_is_valid+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	00030218 	.word	0x00030218

000b54a4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <hal_rtc_get_time+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	00030218 	.word	0x00030218

000b54b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <os_mutex_recursive_create+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	00030248 	.word	0x00030248

000b54c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <inet_inet_ntop+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	695b      	ldr	r3, [r3, #20]
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	00030264 	.word	0x00030264

000b54d4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <hal_usart_write+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	68db      	ldr	r3, [r3, #12]
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	0003023c 	.word	0x0003023c

000b54e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <hal_usart_available+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	691b      	ldr	r3, [r3, #16]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003023c 	.word	0x0003023c

000b54f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <hal_usart_read+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	695b      	ldr	r3, [r3, #20]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003023c 	.word	0x0003023c

000b5504 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <hal_usart_peek+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	699b      	ldr	r3, [r3, #24]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	0003023c 	.word	0x0003023c

000b5514 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <hal_usart_flush+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	69db      	ldr	r3, [r3, #28]
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	0003023c 	.word	0x0003023c

000b5524 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <hal_usart_is_enabled+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	6a1b      	ldr	r3, [r3, #32]
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	0003023c 	.word	0x0003023c

000b5534 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <hal_usart_available_data_for_write+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	0003023c 	.word	0x0003023c

000b5544 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <hal_usart_init_ex+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	0003023c 	.word	0x0003023c

000b5554 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <hal_i2c_begin+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	68db      	ldr	r3, [r3, #12]
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	00030228 	.word	0x00030228

000b5564 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <hal_i2c_begin_transmission+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	699b      	ldr	r3, [r3, #24]
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	00030228 	.word	0x00030228

000b5574 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <hal_i2c_end_transmission+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	69db      	ldr	r3, [r3, #28]
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	00030228 	.word	0x00030228

000b5584 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <hal_i2c_write+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	6a1b      	ldr	r3, [r3, #32]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	00030228 	.word	0x00030228

000b5594 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <hal_i2c_available+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	00030228 	.word	0x00030228

000b55a4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <hal_i2c_read+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	00030228 	.word	0x00030228

000b55b4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <hal_i2c_peek+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	00030228 	.word	0x00030228

000b55c4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <hal_i2c_flush+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	00030228 	.word	0x00030228

000b55d4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <hal_i2c_is_enabled+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	00030228 	.word	0x00030228

000b55e4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <hal_i2c_init+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	00030228 	.word	0x00030228

000b55f4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <hal_i2c_request_ex+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	00030228 	.word	0x00030228

000b5604 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <hal_spi_begin+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	681b      	ldr	r3, [r3, #0]
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	00030230 	.word	0x00030230

000b5614 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <hal_spi_transfer+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	695b      	ldr	r3, [r3, #20]
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	00030230 	.word	0x00030230

000b5624 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <hal_spi_init+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	69db      	ldr	r3, [r3, #28]
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	00030230 	.word	0x00030230

000b5634 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <hal_spi_is_enabled+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	6a1b      	ldr	r3, [r3, #32]
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	00030230 	.word	0x00030230

000b5644 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <hal_spi_info+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	00030230 	.word	0x00030230

000b5654 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <hal_spi_set_settings+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	00030230 	.word	0x00030230

000b5664 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <hal_spi_acquire+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	00030230 	.word	0x00030230

000b5674 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <hal_spi_release+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	00030230 	.word	0x00030230

000b5684 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <HAL_USB_USART_Init+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	681b      	ldr	r3, [r3, #0]
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	0003024c 	.word	0x0003024c

000b5694 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <HAL_USB_USART_Begin+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	685b      	ldr	r3, [r3, #4]
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	0003024c 	.word	0x0003024c

000b56a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <HAL_USB_USART_Available_Data+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	691b      	ldr	r3, [r3, #16]
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	0003024c 	.word	0x0003024c

000b56b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	695b      	ldr	r3, [r3, #20]
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	0003024c 	.word	0x0003024c

000b56c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <HAL_USB_USART_Receive_Data+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	699b      	ldr	r3, [r3, #24]
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	0003024c 	.word	0x0003024c

000b56d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <HAL_USB_USART_Send_Data+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	69db      	ldr	r3, [r3, #28]
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	0003024c 	.word	0x0003024c

000b56e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <HAL_USB_USART_Flush_Data+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	6a1b      	ldr	r3, [r3, #32]
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	0003024c 	.word	0x0003024c

000b56f4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <system_mode+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	681b      	ldr	r3, [r3, #0]
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	00030220 	.word	0x00030220

000b5704 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <set_system_mode+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	685b      	ldr	r3, [r3, #4]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	00030220 	.word	0x00030220

000b5714 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <system_delay_ms+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	695b      	ldr	r3, [r3, #20]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	00030220 	.word	0x00030220

000b5724 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <system_thread_get_state+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	00030220 	.word	0x00030220

000b5734 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b03      	ldr	r3, [pc, #12]	; (b5744 <system_ctrl_set_app_request_handler+0x10>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b573e:	9301      	str	r3, [sp, #4]
   b5740:	bd08      	pop	{r3, pc}
   b5742:	0000      	.short	0x0000
   b5744:	00030220 	.word	0x00030220

000b5748 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b03      	ldr	r3, [pc, #12]	; (b5758 <system_ctrl_set_result+0x10>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5752:	9301      	str	r3, [sp, #4]
   b5754:	bd08      	pop	{r3, pc}
   b5756:	0000      	.short	0x0000
   b5758:	00030220 	.word	0x00030220

000b575c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b575c:	b508      	push	{r3, lr}
   b575e:	4b02      	ldr	r3, [pc, #8]	; (b5768 <network_connect+0xc>)
   b5760:	681b      	ldr	r3, [r3, #0]
   b5762:	685b      	ldr	r3, [r3, #4]
   b5764:	9301      	str	r3, [sp, #4]
   b5766:	bd08      	pop	{r3, pc}
   b5768:	00030240 	.word	0x00030240

000b576c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b576c:	b508      	push	{r3, lr}
   b576e:	4b02      	ldr	r3, [pc, #8]	; (b5778 <network_connecting+0xc>)
   b5770:	681b      	ldr	r3, [r3, #0]
   b5772:	689b      	ldr	r3, [r3, #8]
   b5774:	9301      	str	r3, [sp, #4]
   b5776:	bd08      	pop	{r3, pc}
   b5778:	00030240 	.word	0x00030240

000b577c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b577c:	b508      	push	{r3, lr}
   b577e:	4b02      	ldr	r3, [pc, #8]	; (b5788 <network_disconnect+0xc>)
   b5780:	681b      	ldr	r3, [r3, #0]
   b5782:	68db      	ldr	r3, [r3, #12]
   b5784:	9301      	str	r3, [sp, #4]
   b5786:	bd08      	pop	{r3, pc}
   b5788:	00030240 	.word	0x00030240

000b578c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b578c:	b508      	push	{r3, lr}
   b578e:	4b02      	ldr	r3, [pc, #8]	; (b5798 <network_ready+0xc>)
   b5790:	681b      	ldr	r3, [r3, #0]
   b5792:	691b      	ldr	r3, [r3, #16]
   b5794:	9301      	str	r3, [sp, #4]
   b5796:	bd08      	pop	{r3, pc}
   b5798:	00030240 	.word	0x00030240

000b579c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b579c:	b508      	push	{r3, lr}
   b579e:	4b02      	ldr	r3, [pc, #8]	; (b57a8 <network_on+0xc>)
   b57a0:	681b      	ldr	r3, [r3, #0]
   b57a2:	695b      	ldr	r3, [r3, #20]
   b57a4:	9301      	str	r3, [sp, #4]
   b57a6:	bd08      	pop	{r3, pc}
   b57a8:	00030240 	.word	0x00030240

000b57ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b57ac:	b508      	push	{r3, lr}
   b57ae:	4b02      	ldr	r3, [pc, #8]	; (b57b8 <network_off+0xc>)
   b57b0:	681b      	ldr	r3, [r3, #0]
   b57b2:	699b      	ldr	r3, [r3, #24]
   b57b4:	9301      	str	r3, [sp, #4]
   b57b6:	bd08      	pop	{r3, pc}
   b57b8:	00030240 	.word	0x00030240

000b57bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b57bc:	b508      	push	{r3, lr}
   b57be:	4b02      	ldr	r3, [pc, #8]	; (b57c8 <network_listen+0xc>)
   b57c0:	681b      	ldr	r3, [r3, #0]
   b57c2:	69db      	ldr	r3, [r3, #28]
   b57c4:	9301      	str	r3, [sp, #4]
   b57c6:	bd08      	pop	{r3, pc}
   b57c8:	00030240 	.word	0x00030240

000b57cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b57cc:	b508      	push	{r3, lr}
   b57ce:	4b02      	ldr	r3, [pc, #8]	; (b57d8 <network_listening+0xc>)
   b57d0:	681b      	ldr	r3, [r3, #0]
   b57d2:	6a1b      	ldr	r3, [r3, #32]
   b57d4:	9301      	str	r3, [sp, #4]
   b57d6:	bd08      	pop	{r3, pc}
   b57d8:	00030240 	.word	0x00030240

000b57dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b57dc:	b508      	push	{r3, lr}
   b57de:	4b02      	ldr	r3, [pc, #8]	; (b57e8 <network_set_listen_timeout+0xc>)
   b57e0:	681b      	ldr	r3, [r3, #0]
   b57e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57e4:	9301      	str	r3, [sp, #4]
   b57e6:	bd08      	pop	{r3, pc}
   b57e8:	00030240 	.word	0x00030240

000b57ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b57ec:	b508      	push	{r3, lr}
   b57ee:	4b02      	ldr	r3, [pc, #8]	; (b57f8 <network_get_listen_timeout+0xc>)
   b57f0:	681b      	ldr	r3, [r3, #0]
   b57f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b57f4:	9301      	str	r3, [sp, #4]
   b57f6:	bd08      	pop	{r3, pc}
   b57f8:	00030240 	.word	0x00030240

000b57fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b57fc:	b508      	push	{r3, lr}
   b57fe:	4b02      	ldr	r3, [pc, #8]	; (b5808 <network_is_on+0xc>)
   b5800:	681b      	ldr	r3, [r3, #0]
   b5802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5804:	9301      	str	r3, [sp, #4]
   b5806:	bd08      	pop	{r3, pc}
   b5808:	00030240 	.word	0x00030240

000b580c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b580c:	b508      	push	{r3, lr}
   b580e:	4b02      	ldr	r3, [pc, #8]	; (b5818 <network_is_off+0xc>)
   b5810:	681b      	ldr	r3, [r3, #0]
   b5812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5814:	9301      	str	r3, [sp, #4]
   b5816:	bd08      	pop	{r3, pc}
   b5818:	00030240 	.word	0x00030240

000b581c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b581c:	b508      	push	{r3, lr}
   b581e:	4b02      	ldr	r3, [pc, #8]	; (b5828 <spark_process+0xc>)
   b5820:	681b      	ldr	r3, [r3, #0]
   b5822:	689b      	ldr	r3, [r3, #8]
   b5824:	9301      	str	r3, [sp, #4]
   b5826:	bd08      	pop	{r3, pc}
   b5828:	00030244 	.word	0x00030244

000b582c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b582c:	b508      	push	{r3, lr}
   b582e:	4b02      	ldr	r3, [pc, #8]	; (b5838 <spark_cloud_flag_connected+0xc>)
   b5830:	681b      	ldr	r3, [r3, #0]
   b5832:	695b      	ldr	r3, [r3, #20]
   b5834:	9301      	str	r3, [sp, #4]
   b5836:	bd08      	pop	{r3, pc}
   b5838:	00030244 	.word	0x00030244

000b583c <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b583c:	b508      	push	{r3, lr}
   b583e:	4b02      	ldr	r3, [pc, #8]	; (b5848 <spark_sync_time_pending+0xc>)
   b5840:	681b      	ldr	r3, [r3, #0]
   b5842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5844:	9301      	str	r3, [sp, #4]
   b5846:	bd08      	pop	{r3, pc}
   b5848:	00030244 	.word	0x00030244

000b584c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b584c:	b508      	push	{r3, lr}
   b584e:	4b02      	ldr	r3, [pc, #8]	; (b5858 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5850:	681b      	ldr	r3, [r3, #0]
   b5852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5854:	9301      	str	r3, [sp, #4]
   b5856:	bd08      	pop	{r3, pc}
   b5858:	00030244 	.word	0x00030244

000b585c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b585c:	b508      	push	{r3, lr}
   b585e:	4b02      	ldr	r3, [pc, #8]	; (b5868 <malloc+0xc>)
   b5860:	681b      	ldr	r3, [r3, #0]
   b5862:	681b      	ldr	r3, [r3, #0]
   b5864:	9301      	str	r3, [sp, #4]
   b5866:	bd08      	pop	{r3, pc}
   b5868:	0003021c 	.word	0x0003021c

000b586c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b586c:	b508      	push	{r3, lr}
   b586e:	4b02      	ldr	r3, [pc, #8]	; (b5878 <free+0xc>)
   b5870:	681b      	ldr	r3, [r3, #0]
   b5872:	685b      	ldr	r3, [r3, #4]
   b5874:	9301      	str	r3, [sp, #4]
   b5876:	bd08      	pop	{r3, pc}
   b5878:	0003021c 	.word	0x0003021c

000b587c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b587c:	b508      	push	{r3, lr}
   b587e:	4b02      	ldr	r3, [pc, #8]	; (b5888 <realloc+0xc>)
   b5880:	681b      	ldr	r3, [r3, #0]
   b5882:	689b      	ldr	r3, [r3, #8]
   b5884:	9301      	str	r3, [sp, #4]
   b5886:	bd08      	pop	{r3, pc}
   b5888:	0003021c 	.word	0x0003021c

000b588c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b588c:	b508      	push	{r3, lr}
   b588e:	4b02      	ldr	r3, [pc, #8]	; (b5898 <siprintf+0xc>)
   b5890:	681b      	ldr	r3, [r3, #0]
   b5892:	691b      	ldr	r3, [r3, #16]
   b5894:	9301      	str	r3, [sp, #4]
   b5896:	bd08      	pop	{r3, pc}
   b5898:	0003021c 	.word	0x0003021c

000b589c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <snprintf+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	69db      	ldr	r3, [r3, #28]
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	0003021c 	.word	0x0003021c

000b58ac <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <vsnprintf+0xc>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b58b4:	9301      	str	r3, [sp, #4]
   b58b6:	bd08      	pop	{r3, pc}
   b58b8:	0003021c 	.word	0x0003021c

000b58bc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b58bc:	b508      	push	{r3, lr}
   b58be:	4b02      	ldr	r3, [pc, #8]	; (b58c8 <__assert_func+0xc>)
   b58c0:	681b      	ldr	r3, [r3, #0]
   b58c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58c4:	9301      	str	r3, [sp, #4]
   b58c6:	bd08      	pop	{r3, pc}
   b58c8:	0003021c 	.word	0x0003021c

000b58cc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b02      	ldr	r3, [pc, #8]	; (b58d8 <newlib_impure_ptr_callback+0xc>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58d4:	9301      	str	r3, [sp, #4]
   b58d6:	bd08      	pop	{r3, pc}
   b58d8:	0003021c 	.word	0x0003021c

000b58dc <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <strftime+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	0003021c 	.word	0x0003021c

000b58ec <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <localtime_r+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	0003021c 	.word	0x0003021c

000b58fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b58fc:	2200      	movs	r2, #0
   b58fe:	6840      	ldr	r0, [r0, #4]
   b5900:	4611      	mov	r1, r2
   b5902:	f7ff bf63 	b.w	b57cc <network_listening>

000b5906 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5906:	2200      	movs	r2, #0
   b5908:	6840      	ldr	r0, [r0, #4]
   b590a:	4611      	mov	r1, r2
   b590c:	f7ff bf6e 	b.w	b57ec <network_get_listen_timeout>

000b5910 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5910:	6840      	ldr	r0, [r0, #4]
   b5912:	2200      	movs	r2, #0
   b5914:	f7ff bf62 	b.w	b57dc <network_set_listen_timeout>

000b5918 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5918:	6840      	ldr	r0, [r0, #4]
   b591a:	2200      	movs	r2, #0
   b591c:	f081 0101 	eor.w	r1, r1, #1
   b5920:	f7ff bf4c 	b.w	b57bc <network_listen>

000b5924 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5924:	2300      	movs	r3, #0
   b5926:	6840      	ldr	r0, [r0, #4]
   b5928:	461a      	mov	r2, r3
   b592a:	4619      	mov	r1, r3
   b592c:	f7ff bf3e 	b.w	b57ac <network_off>

000b5930 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5930:	2300      	movs	r3, #0
   b5932:	6840      	ldr	r0, [r0, #4]
   b5934:	461a      	mov	r2, r3
   b5936:	4619      	mov	r1, r3
   b5938:	f7ff bf30 	b.w	b579c <network_on>

000b593c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b593c:	2200      	movs	r2, #0
   b593e:	6840      	ldr	r0, [r0, #4]
   b5940:	4611      	mov	r1, r2
   b5942:	f7ff bf23 	b.w	b578c <network_ready>

000b5946 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5946:	2200      	movs	r2, #0
   b5948:	6840      	ldr	r0, [r0, #4]
   b594a:	4611      	mov	r1, r2
   b594c:	f7ff bf0e 	b.w	b576c <network_connecting>

000b5950 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5950:	6840      	ldr	r0, [r0, #4]
   b5952:	2200      	movs	r2, #0
   b5954:	2102      	movs	r1, #2
   b5956:	f7ff bf11 	b.w	b577c <network_disconnect>

000b595a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b595a:	2300      	movs	r3, #0
   b595c:	6840      	ldr	r0, [r0, #4]
   b595e:	461a      	mov	r2, r3
   b5960:	f7ff befc 	b.w	b575c <network_connect>

000b5964 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5964:	4b02      	ldr	r3, [pc, #8]	; (b5970 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5966:	2203      	movs	r2, #3
   b5968:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b596a:	4a02      	ldr	r2, [pc, #8]	; (b5974 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b596c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b596e:	4770      	bx	lr
   b5970:	2003e6ac 	.word	0x2003e6ac
   b5974:	000b7e80 	.word	0x000b7e80

000b5978 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5978:	2100      	movs	r1, #0
   b597a:	f7ff be7b 	b.w	b5674 <hal_spi_release>

000b597e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b597e:	2100      	movs	r1, #0
   b5980:	f7ff be70 	b.w	b5664 <hal_spi_acquire>

000b5984 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5984:	b510      	push	{r4, lr}
   b5986:	4604      	mov	r4, r0
   b5988:	4608      	mov	r0, r1
{
    _spi = spi;
   b598a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b598c:	f7ff fe4a 	bl	b5624 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5990:	2300      	movs	r3, #0
   b5992:	6063      	str	r3, [r4, #4]
}
   b5994:	4620      	mov	r0, r4
   b5996:	bd10      	pop	{r4, pc}

000b5998 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5998:	b513      	push	{r0, r1, r4, lr}
   b599a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b599c:	7800      	ldrb	r0, [r0, #0]
   b599e:	f7ff ffee 	bl	b597e <_ZN8SPIClass4lockEv.isra.0>
   b59a2:	b958      	cbnz	r0, b59bc <_ZN8SPIClass5beginEv+0x24>
   b59a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b59a6:	9001      	str	r0, [sp, #4]
   b59a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b59ac:	f7ff fe2a 	bl	b5604 <hal_spi_begin>
        unlock();
   b59b0:	9801      	ldr	r0, [sp, #4]
    }
}
   b59b2:	b002      	add	sp, #8
   b59b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b59b8:	f7ff bfde 	b.w	b5978 <_ZN8SPIClass6unlockEv.isra.0>
   b59bc:	b002      	add	sp, #8
   b59be:	bd10      	pop	{r4, pc}

000b59c0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b59c0:	7800      	ldrb	r0, [r0, #0]
   b59c2:	f7ff bfd9 	b.w	b5978 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b59c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b59c8:	0840      	lsrs	r0, r0, #1
{
   b59ca:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b59cc:	6018      	str	r0, [r3, #0]
   b59ce:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b59d0:	6818      	ldr	r0, [r3, #0]
   b59d2:	4288      	cmp	r0, r1
   b59d4:	b2e5      	uxtb	r5, r4
   b59d6:	d906      	bls.n	b59e6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b59d8:	3401      	adds	r4, #1
   b59da:	2c08      	cmp	r4, #8
   b59dc:	d002      	beq.n	b59e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b59de:	0840      	lsrs	r0, r0, #1
   b59e0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b59e2:	e7f5      	b.n	b59d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b59e4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b59e6:	4b02      	ldr	r3, [pc, #8]	; (b59f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b59e8:	5d5b      	ldrb	r3, [r3, r5]
   b59ea:	7013      	strb	r3, [r2, #0]
}
   b59ec:	bd30      	pop	{r4, r5, pc}
   b59ee:	bf00      	nop
   b59f0:	000b7eb4 	.word	0x000b7eb4

000b59f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b59f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59f8:	4606      	mov	r6, r0
   b59fa:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b59fc:	7800      	ldrb	r0, [r0, #0]
{
   b59fe:	460c      	mov	r4, r1
    CHECK(lock());
   b5a00:	f7ff ffbd 	bl	b597e <_ZN8SPIClass4lockEv.isra.0>
   b5a04:	2800      	cmp	r0, #0
   b5a06:	db1b      	blt.n	b5a40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5a08:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5a0a:	2214      	movs	r2, #20
   b5a0c:	2100      	movs	r1, #0
   b5a0e:	a809      	add	r0, sp, #36	; 0x24
   b5a10:	f002 f836 	bl	b7a80 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5a14:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5a16:	2200      	movs	r2, #0
   b5a18:	a909      	add	r1, sp, #36	; 0x24
   b5a1a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5a1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5a20:	f7ff fe10 	bl	b5644 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5a24:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5a28:	b113      	cbz	r3, b5a30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5a2a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5a2e:	b155      	cbz	r5, b5a46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5a30:	2700      	movs	r7, #0
   b5a32:	46b9      	mov	r9, r7
   b5a34:	46b8      	mov	r8, r7
   b5a36:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5a38:	7923      	ldrb	r3, [r4, #4]
   b5a3a:	b15d      	cbz	r5, b5a54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5a3c:	b1c3      	cbz	r3, b5a70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5a3e:	2000      	movs	r0, #0
}
   b5a40:	b00f      	add	sp, #60	; 0x3c
   b5a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5a46:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5a4a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5a4e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5a52:	e7f1      	b.n	b5a38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5a54:	2b00      	cmp	r3, #0
   b5a56:	d135      	bne.n	b5ac4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5a58:	68a3      	ldr	r3, [r4, #8]
   b5a5a:	4543      	cmp	r3, r8
   b5a5c:	d108      	bne.n	b5a70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5a5e:	f88d 9020 	strb.w	r9, [sp, #32]
   b5a62:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5a66:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5a6a:	89a3      	ldrh	r3, [r4, #12]
   b5a6c:	429a      	cmp	r2, r3
   b5a6e:	d0e6      	beq.n	b5a3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5a70:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5a72:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5a74:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5a78:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5a7a:	ab04      	add	r3, sp, #16
   b5a7c:	f10d 020f 	add.w	r2, sp, #15
   b5a80:	f7ff ffa2 	bl	b59c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5a84:	7921      	ldrb	r1, [r4, #4]
   b5a86:	b985      	cbnz	r5, b5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5a88:	b989      	cbnz	r1, b5aae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5a8a:	68a3      	ldr	r3, [r4, #8]
   b5a8c:	4543      	cmp	r3, r8
   b5a8e:	d30e      	bcc.n	b5aae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5a90:	f88d 9020 	strb.w	r9, [sp, #32]
   b5a94:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5a98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5a9c:	89a3      	ldrh	r3, [r4, #12]
   b5a9e:	429a      	cmp	r2, r3
   b5aa0:	d105      	bne.n	b5aae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5aa2:	9b04      	ldr	r3, [sp, #16]
   b5aa4:	4543      	cmp	r3, r8
   b5aa6:	d102      	bne.n	b5aae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5aa8:	e7c9      	b.n	b5a3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5aaa:	2900      	cmp	r1, #0
   b5aac:	d1f9      	bne.n	b5aa2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5aae:	2300      	movs	r3, #0
   b5ab0:	9301      	str	r3, [sp, #4]
   b5ab2:	7b63      	ldrb	r3, [r4, #13]
   b5ab4:	9300      	str	r3, [sp, #0]
   b5ab6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5aba:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5abc:	7830      	ldrb	r0, [r6, #0]
   b5abe:	f7ff fdc9 	bl	b5654 <hal_spi_set_settings>
   b5ac2:	e7bc      	b.n	b5a3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5ac4:	e9cd 5500 	strd	r5, r5, [sp]
   b5ac8:	462b      	mov	r3, r5
   b5aca:	462a      	mov	r2, r5
   b5acc:	2101      	movs	r1, #1
   b5ace:	e7f5      	b.n	b5abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5ad0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5ad0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5ad2:	7800      	ldrb	r0, [r0, #0]
   b5ad4:	f7ff fd9e 	bl	b5614 <hal_spi_transfer>
}
   b5ad8:	b2c0      	uxtb	r0, r0
   b5ada:	bd08      	pop	{r3, pc}

000b5adc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5adc:	4b05      	ldr	r3, [pc, #20]	; (b5af4 <_GLOBAL__sub_I_System+0x18>)
   b5ade:	2202      	movs	r2, #2
   b5ae0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5ae2:	4b05      	ldr	r3, [pc, #20]	; (b5af8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5ae4:	4a05      	ldr	r2, [pc, #20]	; (b5afc <_GLOBAL__sub_I_System+0x20>)
   b5ae6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ae8:	2000      	movs	r0, #0
   b5aea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5aee:	f7ff be09 	b.w	b5704 <set_system_mode>
   b5af2:	bf00      	nop
   b5af4:	2003e6c0 	.word	0x2003e6c0
   b5af8:	2003e6b4 	.word	0x2003e6b4
   b5afc:	ffff0000 	.word	0xffff0000

000b5b00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5b00:	b510      	push	{r4, lr}
   b5b02:	4604      	mov	r4, r0
{
	free(buffer);
   b5b04:	6800      	ldr	r0, [r0, #0]
   b5b06:	f7ff feb1 	bl	b586c <free>
}
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	bd10      	pop	{r4, pc}

000b5b0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5b0e:	b510      	push	{r4, lr}
   b5b10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5b12:	6800      	ldr	r0, [r0, #0]
   b5b14:	b108      	cbz	r0, b5b1a <_ZN6String10invalidateEv+0xc>
   b5b16:	f7ff fea9 	bl	b586c <free>
	buffer = NULL;
   b5b1a:	2300      	movs	r3, #0
	capacity = len = 0;
   b5b1c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5b20:	6023      	str	r3, [r4, #0]
}
   b5b22:	bd10      	pop	{r4, pc}

000b5b24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5b24:	b538      	push	{r3, r4, r5, lr}
   b5b26:	4604      	mov	r4, r0
   b5b28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5b2a:	6800      	ldr	r0, [r0, #0]
   b5b2c:	3101      	adds	r1, #1
   b5b2e:	f7ff fea5 	bl	b587c <realloc>
	if (newbuffer) {
   b5b32:	b110      	cbz	r0, b5b3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5b34:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5b38:	2001      	movs	r0, #1
	}
	return 0;
}
   b5b3a:	bd38      	pop	{r3, r4, r5, pc}

000b5b3c <_ZN6String7reserveEj>:
{
   b5b3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5b3e:	6803      	ldr	r3, [r0, #0]
{
   b5b40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5b42:	b123      	cbz	r3, b5b4e <_ZN6String7reserveEj+0x12>
   b5b44:	6843      	ldr	r3, [r0, #4]
   b5b46:	428b      	cmp	r3, r1
   b5b48:	d301      	bcc.n	b5b4e <_ZN6String7reserveEj+0x12>
   b5b4a:	2001      	movs	r0, #1
}
   b5b4c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5b4e:	4620      	mov	r0, r4
   b5b50:	f7ff ffe8 	bl	b5b24 <_ZN6String12changeBufferEj>
   b5b54:	2800      	cmp	r0, #0
   b5b56:	d0f9      	beq.n	b5b4c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5b58:	68a3      	ldr	r3, [r4, #8]
   b5b5a:	2b00      	cmp	r3, #0
   b5b5c:	d1f5      	bne.n	b5b4a <_ZN6String7reserveEj+0xe>
   b5b5e:	6822      	ldr	r2, [r4, #0]
   b5b60:	7013      	strb	r3, [r2, #0]
   b5b62:	e7f2      	b.n	b5b4a <_ZN6String7reserveEj+0xe>

000b5b64 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5b66:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5b68:	4611      	mov	r1, r2
   b5b6a:	9201      	str	r2, [sp, #4]
{
   b5b6c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5b6e:	f7ff ffe5 	bl	b5b3c <_ZN6String7reserveEj>
   b5b72:	9a01      	ldr	r2, [sp, #4]
   b5b74:	b928      	cbnz	r0, b5b82 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5b76:	4620      	mov	r0, r4
   b5b78:	f7ff ffc9 	bl	b5b0e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	b003      	add	sp, #12
   b5b80:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5b82:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5b84:	4629      	mov	r1, r5
   b5b86:	6820      	ldr	r0, [r4, #0]
   b5b88:	f001 ff6c 	bl	b7a64 <memcpy>
	buffer[len] = 0;
   b5b8c:	6822      	ldr	r2, [r4, #0]
   b5b8e:	68a3      	ldr	r3, [r4, #8]
   b5b90:	2100      	movs	r1, #0
   b5b92:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5b94:	e7f2      	b.n	b5b7c <_ZN6String4copyEPKcj+0x18>

000b5b96 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5b96:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5b98:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5b9a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5b9e:	4604      	mov	r4, r0
	len = 0;
   b5ba0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5ba2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5ba4:	b141      	cbz	r1, b5bb8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5ba6:	4608      	mov	r0, r1
   b5ba8:	9101      	str	r1, [sp, #4]
   b5baa:	f001 ffb1 	bl	b7b10 <strlen>
   b5bae:	9901      	ldr	r1, [sp, #4]
   b5bb0:	4602      	mov	r2, r0
   b5bb2:	4620      	mov	r0, r4
   b5bb4:	f7ff ffd6 	bl	b5b64 <_ZN6String4copyEPKcj>
}
   b5bb8:	4620      	mov	r0, r4
   b5bba:	b002      	add	sp, #8
   b5bbc:	bd10      	pop	{r4, pc}
	...

000b5bc0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b5bc0:	b40e      	push	{r1, r2, r3}
   b5bc2:	b570      	push	{r4, r5, r6, lr}
   b5bc4:	b087      	sub	sp, #28
   b5bc6:	ad0b      	add	r5, sp, #44	; 0x2c
   b5bc8:	4604      	mov	r4, r0
   b5bca:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5bce:	9201      	str	r2, [sp, #4]
   b5bd0:	462b      	mov	r3, r5
   b5bd2:	2105      	movs	r1, #5
   b5bd4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b5bd6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5bd8:	f7ff fe68 	bl	b58ac <vsnprintf>
    va_end(marker);

    String result;
   b5bdc:	490b      	ldr	r1, [pc, #44]	; (b5c0c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5bde:	4606      	mov	r6, r0
    String result;
   b5be0:	4620      	mov	r0, r4
   b5be2:	f7ff ffd8 	bl	b5b96 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b5be6:	4631      	mov	r1, r6
   b5be8:	4620      	mov	r0, r4
   b5bea:	f7ff ffa7 	bl	b5b3c <_ZN6String7reserveEj>
    if (result.buffer) {
   b5bee:	6820      	ldr	r0, [r4, #0]
   b5bf0:	b130      	cbz	r0, b5c00 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5bf2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b5bf4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5bf6:	462b      	mov	r3, r5
   b5bf8:	1c71      	adds	r1, r6, #1
   b5bfa:	f7ff fe57 	bl	b58ac <vsnprintf>
        va_end(marker);
        result.len = n;
   b5bfe:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b5c00:	4620      	mov	r0, r4
   b5c02:	b007      	add	sp, #28
   b5c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5c08:	b003      	add	sp, #12
   b5c0a:	4770      	bx	lr
   b5c0c:	000b802c 	.word	0x000b802c

000b5c10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5c10:	4802      	ldr	r0, [pc, #8]	; (b5c1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5c12:	2300      	movs	r3, #0
   b5c14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5c16:	f7ff bc4d 	b.w	b54b4 <os_mutex_recursive_create>
   b5c1a:	bf00      	nop
   b5c1c:	2003e6c4 	.word	0x2003e6c4

000b5c20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c22:	4606      	mov	r6, r0
   b5c24:	460d      	mov	r5, r1
  size_t n = 0;
   b5c26:	188f      	adds	r7, r1, r2
   b5c28:	2400      	movs	r4, #0
  while (size--) {
   b5c2a:	42bd      	cmp	r5, r7
   b5c2c:	d00c      	beq.n	b5c48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5c2e:	6833      	ldr	r3, [r6, #0]
   b5c30:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5c34:	689b      	ldr	r3, [r3, #8]
   b5c36:	4630      	mov	r0, r6
   b5c38:	4798      	blx	r3
     if (chunk>=0)
   b5c3a:	1e03      	subs	r3, r0, #0
   b5c3c:	db01      	blt.n	b5c42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5c3e:	441c      	add	r4, r3
  while (size--) {
   b5c40:	e7f3      	b.n	b5c2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5c42:	2c00      	cmp	r4, #0
   b5c44:	bf08      	it	eq
   b5c46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5c48:	4620      	mov	r0, r4
   b5c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5c4c:	b513      	push	{r0, r1, r4, lr}
   b5c4e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5c50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5c52:	b159      	cbz	r1, b5c6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5c54:	9101      	str	r1, [sp, #4]
   b5c56:	f001 ff5b 	bl	b7b10 <strlen>
   b5c5a:	6823      	ldr	r3, [r4, #0]
   b5c5c:	9901      	ldr	r1, [sp, #4]
   b5c5e:	68db      	ldr	r3, [r3, #12]
   b5c60:	4602      	mov	r2, r0
   b5c62:	4620      	mov	r0, r4
    }
   b5c64:	b002      	add	sp, #8
   b5c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5c6a:	4718      	bx	r3
    }
   b5c6c:	b002      	add	sp, #8
   b5c6e:	bd10      	pop	{r4, pc}

000b5c70 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5c70:	b508      	push	{r3, lr}
  return write(str);
   b5c72:	f7ff ffeb 	bl	b5c4c <_ZN5Print5writeEPKc>
}
   b5c76:	bd08      	pop	{r3, pc}

000b5c78 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5c78:	6803      	ldr	r3, [r0, #0]
   b5c7a:	689b      	ldr	r3, [r3, #8]
   b5c7c:	4718      	bx	r3

000b5c7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5c7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5c80:	210d      	movs	r1, #13
{
   b5c82:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5c84:	f7ff fff8 	bl	b5c78 <_ZN5Print5printEc>
  n += print('\n');
   b5c88:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5c8a:	4604      	mov	r4, r0
  n += print('\n');
   b5c8c:	4628      	mov	r0, r5
   b5c8e:	f7ff fff3 	bl	b5c78 <_ZN5Print5printEc>
  return n;
}
   b5c92:	4420      	add	r0, r4
   b5c94:	bd38      	pop	{r3, r4, r5, pc}

000b5c96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5c96:	b538      	push	{r3, r4, r5, lr}
   b5c98:	4605      	mov	r5, r0
  return write(str);
   b5c9a:	f7ff ffd7 	bl	b5c4c <_ZN5Print5writeEPKc>
   b5c9e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5ca0:	4628      	mov	r0, r5
   b5ca2:	f7ff ffec 	bl	b5c7e <_ZN5Print7printlnEv>
  return n;
}
   b5ca6:	4420      	add	r0, r4
   b5ca8:	bd38      	pop	{r3, r4, r5, pc}

000b5caa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5caa:	b530      	push	{r4, r5, lr}
   b5cac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5cae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5cb0:	2a01      	cmp	r2, #1
  *str = '\0';
   b5cb2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5cb6:	bf98      	it	ls
   b5cb8:	220a      	movls	r2, #10
   b5cba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5cbc:	460d      	mov	r5, r1
   b5cbe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5cc2:	fb01 5312 	mls	r3, r1, r2, r5
   b5cc6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5cca:	2b09      	cmp	r3, #9
   b5ccc:	bf94      	ite	ls
   b5cce:	3330      	addls	r3, #48	; 0x30
   b5cd0:	3337      	addhi	r3, #55	; 0x37
   b5cd2:	b2db      	uxtb	r3, r3
  } while(n);
   b5cd4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5cd6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5cda:	d9ef      	bls.n	b5cbc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5cdc:	4621      	mov	r1, r4
   b5cde:	f7ff ffb5 	bl	b5c4c <_ZN5Print5writeEPKc>
}
   b5ce2:	b00b      	add	sp, #44	; 0x2c
   b5ce4:	bd30      	pop	{r4, r5, pc}
	...

000b5ce8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cec:	ec55 4b10 	vmov	r4, r5, d0
   b5cf0:	4606      	mov	r6, r0
   b5cf2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5cf4:	ee10 2a10 	vmov	r2, s0
   b5cf8:	ee10 0a10 	vmov	r0, s0
   b5cfc:	462b      	mov	r3, r5
   b5cfe:	4629      	mov	r1, r5
   b5d00:	f001 fb0e 	bl	b7320 <__aeabi_dcmpun>
   b5d04:	b140      	cbz	r0, b5d18 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b5d06:	4953      	ldr	r1, [pc, #332]	; (b5e54 <_ZN5Print10printFloatEdh+0x16c>)
   b5d08:	4630      	mov	r0, r6
   b5d0a:	f7ff ff9f 	bl	b5c4c <_ZN5Print5writeEPKc>
   b5d0e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5d10:	4650      	mov	r0, sl
   b5d12:	b003      	add	sp, #12
   b5d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5d18:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5d1c:	4b4e      	ldr	r3, [pc, #312]	; (b5e58 <_ZN5Print10printFloatEdh+0x170>)
   b5d1e:	f04f 32ff 	mov.w	r2, #4294967295
   b5d22:	4620      	mov	r0, r4
   b5d24:	4649      	mov	r1, r9
   b5d26:	f001 fafb 	bl	b7320 <__aeabi_dcmpun>
   b5d2a:	b948      	cbnz	r0, b5d40 <_ZN5Print10printFloatEdh+0x58>
   b5d2c:	4b4a      	ldr	r3, [pc, #296]	; (b5e58 <_ZN5Print10printFloatEdh+0x170>)
   b5d2e:	f04f 32ff 	mov.w	r2, #4294967295
   b5d32:	4620      	mov	r0, r4
   b5d34:	4649      	mov	r1, r9
   b5d36:	f001 fad5 	bl	b72e4 <__aeabi_dcmple>
   b5d3a:	b908      	cbnz	r0, b5d40 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5d3c:	4947      	ldr	r1, [pc, #284]	; (b5e5c <_ZN5Print10printFloatEdh+0x174>)
   b5d3e:	e7e3      	b.n	b5d08 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5d40:	4b47      	ldr	r3, [pc, #284]	; (b5e60 <_ZN5Print10printFloatEdh+0x178>)
   b5d42:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5d46:	4620      	mov	r0, r4
   b5d48:	4629      	mov	r1, r5
   b5d4a:	f001 fadf 	bl	b730c <__aeabi_dcmpgt>
   b5d4e:	b108      	cbz	r0, b5d54 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5d50:	4944      	ldr	r1, [pc, #272]	; (b5e64 <_ZN5Print10printFloatEdh+0x17c>)
   b5d52:	e7d9      	b.n	b5d08 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b5d54:	4b44      	ldr	r3, [pc, #272]	; (b5e68 <_ZN5Print10printFloatEdh+0x180>)
   b5d56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5d5a:	4620      	mov	r0, r4
   b5d5c:	4629      	mov	r1, r5
   b5d5e:	f001 fab7 	bl	b72d0 <__aeabi_dcmplt>
   b5d62:	2800      	cmp	r0, #0
   b5d64:	d1f4      	bne.n	b5d50 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b5d66:	2200      	movs	r2, #0
   b5d68:	2300      	movs	r3, #0
   b5d6a:	4620      	mov	r0, r4
   b5d6c:	4629      	mov	r1, r5
   b5d6e:	f001 faaf 	bl	b72d0 <__aeabi_dcmplt>
   b5d72:	b1d0      	cbz	r0, b5daa <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b5d74:	212d      	movs	r1, #45	; 0x2d
   b5d76:	4630      	mov	r0, r6
   b5d78:	f7ff ff7e 	bl	b5c78 <_ZN5Print5printEc>
     number = -number;
   b5d7c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b5d80:	4682      	mov	sl, r0
     number = -number;
   b5d82:	461d      	mov	r5, r3
  double rounding = 0.5;
   b5d84:	4939      	ldr	r1, [pc, #228]	; (b5e6c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b5d86:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5e74 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b5d8a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b5d8e:	2000      	movs	r0, #0
    rounding /= 10.0;
   b5d90:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b5d94:	fa5f f38b 	uxtb.w	r3, fp
   b5d98:	429f      	cmp	r7, r3
   b5d9a:	d908      	bls.n	b5dae <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b5d9c:	4642      	mov	r2, r8
   b5d9e:	464b      	mov	r3, r9
   b5da0:	f001 f94e 	bl	b7040 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b5da4:	f10b 0b01 	add.w	fp, fp, #1
   b5da8:	e7f4      	b.n	b5d94 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5daa:	4682      	mov	sl, r0
   b5dac:	e7ea      	b.n	b5d84 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5dae:	4622      	mov	r2, r4
   b5db0:	462b      	mov	r3, r5
   b5db2:	f000 fe65 	bl	b6a80 <__adddf3>
   b5db6:	460d      	mov	r5, r1
   b5db8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5dba:	f001 faef 	bl	b739c <__aeabi_d2uiz>
   b5dbe:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5dc0:	f000 ff9a 	bl	b6cf8 <__aeabi_ui2d>
   b5dc4:	4602      	mov	r2, r0
   b5dc6:	460b      	mov	r3, r1
   b5dc8:	4620      	mov	r0, r4
   b5dca:	4629      	mov	r1, r5
   b5dcc:	f000 fe56 	bl	b6a7c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5dd0:	220a      	movs	r2, #10
   b5dd2:	4604      	mov	r4, r0
   b5dd4:	460d      	mov	r5, r1
   b5dd6:	4630      	mov	r0, r6
   b5dd8:	4641      	mov	r1, r8
   b5dda:	f7ff ff66 	bl	b5caa <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5dde:	4482      	add	sl, r0
  if (digits > 0) {
   b5de0:	2f00      	cmp	r7, #0
   b5de2:	d095      	beq.n	b5d10 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b5de4:	4922      	ldr	r1, [pc, #136]	; (b5e70 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b5de6:	f8df 908c 	ldr.w	r9, [pc, #140]	; b5e74 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5dea:	4630      	mov	r0, r6
   b5dec:	f7ff ff2e 	bl	b5c4c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5df0:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b5df4:	4482      	add	sl, r0
  while (digits-- > 0)
   b5df6:	2f00      	cmp	r7, #0
   b5df8:	d08a      	beq.n	b5d10 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5dfa:	4642      	mov	r2, r8
   b5dfc:	464b      	mov	r3, r9
   b5dfe:	4620      	mov	r0, r4
   b5e00:	4629      	mov	r1, r5
   b5e02:	f000 fff3 	bl	b6dec <__aeabi_dmul>
   b5e06:	4604      	mov	r4, r0
   b5e08:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5e0a:	f001 fa9f 	bl	b734c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5e0e:	f1b0 0b00 	subs.w	fp, r0, #0
   b5e12:	da1c      	bge.n	b5e4e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b5e14:	212d      	movs	r1, #45	; 0x2d
   b5e16:	4630      	mov	r0, r6
   b5e18:	f7ff ff2e 	bl	b5c78 <_ZN5Print5printEc>
            val = -n;
   b5e1c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5e20:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b5e22:	220a      	movs	r2, #10
   b5e24:	4630      	mov	r0, r6
   b5e26:	9301      	str	r3, [sp, #4]
   b5e28:	f7ff ff3f 	bl	b5caa <_ZN5Print11printNumberEmh>
   b5e2c:	9b01      	ldr	r3, [sp, #4]
   b5e2e:	4418      	add	r0, r3
    n += print(toPrint);
   b5e30:	4482      	add	sl, r0
    remainder -= toPrint;
   b5e32:	4658      	mov	r0, fp
   b5e34:	f000 ff70 	bl	b6d18 <__aeabi_i2d>
   b5e38:	4602      	mov	r2, r0
   b5e3a:	460b      	mov	r3, r1
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	4629      	mov	r1, r5
   b5e40:	f000 fe1c 	bl	b6a7c <__aeabi_dsub>
   b5e44:	3f01      	subs	r7, #1
   b5e46:	4604      	mov	r4, r0
   b5e48:	460d      	mov	r5, r1
   b5e4a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5e4c:	e7d3      	b.n	b5df6 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5e4e:	4659      	mov	r1, fp
        size_t t = 0;
   b5e50:	2300      	movs	r3, #0
   b5e52:	e7e6      	b.n	b5e22 <_ZN5Print10printFloatEdh+0x13a>
   b5e54:	000b7ebc 	.word	0x000b7ebc
   b5e58:	7fefffff 	.word	0x7fefffff
   b5e5c:	000b7ec0 	.word	0x000b7ec0
   b5e60:	41efffff 	.word	0x41efffff
   b5e64:	000b7ec4 	.word	0x000b7ec4
   b5e68:	c1efffff 	.word	0xc1efffff
   b5e6c:	3fe00000 	.word	0x3fe00000
   b5e70:	000b7c64 	.word	0x000b7c64
   b5e74:	40240000 	.word	0x40240000

000b5e78 <_ZN5Print5printEfi>:
{
   b5e78:	b538      	push	{r3, r4, r5, lr}
   b5e7a:	4604      	mov	r4, r0
   b5e7c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b5e80:	b2cd      	uxtb	r5, r1
   b5e82:	f000 ff5b 	bl	b6d3c <__aeabi_f2d>
   b5e86:	ec41 0b10 	vmov	d0, r0, r1
   b5e8a:	4629      	mov	r1, r5
   b5e8c:	4620      	mov	r0, r4
}
   b5e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b5e92:	f7ff bf29 	b.w	b5ce8 <_ZN5Print10printFloatEdh>

000b5e96 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e9a:	b086      	sub	sp, #24
   b5e9c:	af00      	add	r7, sp, #0
   b5e9e:	4605      	mov	r5, r0
   b5ea0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5ea2:	1d38      	adds	r0, r7, #4
   b5ea4:	2114      	movs	r1, #20
{
   b5ea6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5ea8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5eaa:	f7ff fcff 	bl	b58ac <vsnprintf>

    if (n<bufsize)
   b5eae:	2813      	cmp	r0, #19
   b5eb0:	d80e      	bhi.n	b5ed0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5eb2:	1d39      	adds	r1, r7, #4
   b5eb4:	4628      	mov	r0, r5
   b5eb6:	f7ff fec9 	bl	b5c4c <_ZN5Print5writeEPKc>
   b5eba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5ebc:	b11e      	cbz	r6, b5ec6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5ebe:	4628      	mov	r0, r5
   b5ec0:	f7ff fedd 	bl	b5c7e <_ZN5Print7printlnEv>
   b5ec4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5ec6:	4620      	mov	r0, r4
   b5ec8:	3718      	adds	r7, #24
   b5eca:	46bd      	mov	sp, r7
   b5ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5ed0:	f100 0308 	add.w	r3, r0, #8
   b5ed4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5ed8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5eda:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5ede:	4622      	mov	r2, r4
   b5ee0:	1c41      	adds	r1, r0, #1
   b5ee2:	683b      	ldr	r3, [r7, #0]
   b5ee4:	4668      	mov	r0, sp
   b5ee6:	f7ff fce1 	bl	b58ac <vsnprintf>
  return write(str);
   b5eea:	4669      	mov	r1, sp
   b5eec:	4628      	mov	r0, r5
   b5eee:	f7ff fead 	bl	b5c4c <_ZN5Print5writeEPKc>
   b5ef2:	4604      	mov	r4, r0
   b5ef4:	46c5      	mov	sp, r8
   b5ef6:	e7e1      	b.n	b5ebc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5ef8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5ef8:	b510      	push	{r4, lr}
   b5efa:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5efc:	f7ff fac2 	bl	b5484 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5f00:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5f02:	6823      	ldr	r3, [r4, #0]
   b5f04:	4620      	mov	r0, r4
   b5f06:	695b      	ldr	r3, [r3, #20]
   b5f08:	4798      	blx	r3
    if (c >= 0) return c;
   b5f0a:	2800      	cmp	r0, #0
   b5f0c:	da08      	bge.n	b5f20 <_ZN6Stream9timedReadEv+0x28>
   b5f0e:	f7ff fab9 	bl	b5484 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5f12:	68e3      	ldr	r3, [r4, #12]
   b5f14:	1ac0      	subs	r0, r0, r3
   b5f16:	68a3      	ldr	r3, [r4, #8]
   b5f18:	4298      	cmp	r0, r3
   b5f1a:	d3f2      	bcc.n	b5f02 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5f1c:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5f20:	bd10      	pop	{r4, pc}

000b5f22 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f26:	4607      	mov	r7, r0
   b5f28:	460c      	mov	r4, r1
   b5f2a:	188e      	adds	r6, r1, r2
   b5f2c:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5f2e:	42b5      	cmp	r5, r6
   b5f30:	eba5 0804 	sub.w	r8, r5, r4
   b5f34:	d007      	beq.n	b5f46 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b5f36:	4638      	mov	r0, r7
   b5f38:	f7ff ffde 	bl	b5ef8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b5f3c:	1e03      	subs	r3, r0, #0
   b5f3e:	db02      	blt.n	b5f46 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b5f40:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b5f44:	e7f3      	b.n	b5f2e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b5f46:	4640      	mov	r0, r8
   b5f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5f4c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5f4c:	4b01      	ldr	r3, [pc, #4]	; (b5f54 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5f4e:	4a02      	ldr	r2, [pc, #8]	; (b5f58 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5f50:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5f52:	4770      	bx	lr
   b5f54:	2003e6c8 	.word	0x2003e6c8
   b5f58:	000b7ec8 	.word	0x000b7ec8

000b5f5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5f5c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5f5e:	2000      	movs	r0, #0
   b5f60:	f7ff fc6c 	bl	b583c <spark_sync_time_pending>
   b5f64:	b128      	cbz	r0, b5f72 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5f66:	f7ff fc61 	bl	b582c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5f6a:	f080 0001 	eor.w	r0, r0, #1
   b5f6e:	b2c0      	uxtb	r0, r0
    }
   b5f70:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5f72:	2001      	movs	r0, #1
   b5f74:	e7fc      	b.n	b5f70 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5f78 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5f78:	b530      	push	{r4, r5, lr}
   b5f7a:	b093      	sub	sp, #76	; 0x4c
   b5f7c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5f80:	4b19      	ldr	r3, [pc, #100]	; (b5fe8 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5f82:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5f84:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5f88:	9b01      	ldr	r3, [sp, #4]
   b5f8a:	1852      	adds	r2, r2, r1
   b5f8c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5f90:	4816      	ldr	r0, [pc, #88]	; (b5fec <_ZN9TimeClass7timeStrEx+0x74>)
   b5f92:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5f96:	1852      	adds	r2, r2, r1
   b5f98:	eb43 0300 	adc.w	r3, r3, r0
   b5f9c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5fa0:	2224      	movs	r2, #36	; 0x24
   b5fa2:	eb0d 0002 	add.w	r0, sp, r2
   b5fa6:	2100      	movs	r1, #0
   b5fa8:	f001 fd6a 	bl	b7a80 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5fac:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5fae:	a909      	add	r1, sp, #36	; 0x24
   b5fb0:	4668      	mov	r0, sp
   b5fb2:	f7ff fc9b 	bl	b58ec <localtime_r>
    char ascstr[26] = {};
   b5fb6:	2216      	movs	r2, #22
   b5fb8:	4629      	mov	r1, r5
   b5fba:	a803      	add	r0, sp, #12
   b5fbc:	9502      	str	r5, [sp, #8]
   b5fbe:	f001 fd5f 	bl	b7a80 <memset>
    asctime_r(&calendar_time, ascstr);
   b5fc2:	a902      	add	r1, sp, #8
   b5fc4:	a809      	add	r0, sp, #36	; 0x24
   b5fc6:	f001 fd21 	bl	b7a0c <asctime_r>
    int len = strlen(ascstr);
   b5fca:	a802      	add	r0, sp, #8
   b5fcc:	f001 fda0 	bl	b7b10 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5fd0:	ab12      	add	r3, sp, #72	; 0x48
   b5fd2:	4418      	add	r0, r3
    return String(ascstr);
   b5fd4:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5fd6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5fda:	4620      	mov	r0, r4
   b5fdc:	f7ff fddb 	bl	b5b96 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	b013      	add	sp, #76	; 0x4c
   b5fe4:	bd30      	pop	{r4, r5, pc}
   b5fe6:	bf00      	nop
   b5fe8:	2003e6e0 	.word	0x2003e6e0
   b5fec:	2003e6d8 	.word	0x2003e6d8

000b5ff0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b5ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5ff4:	b0a4      	sub	sp, #144	; 0x90
   b5ff6:	4607      	mov	r7, r0
   b5ff8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5ffa:	a814      	add	r0, sp, #80	; 0x50
{
   b5ffc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5ffe:	223f      	movs	r2, #63	; 0x3f
{
   b6000:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b6002:	f001 fd8d 	bl	b7b20 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b6006:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b6008:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b600a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b600e:	f001 fd7f 	bl	b7b10 <strlen>
   b6012:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b6014:	bb4c      	cbnz	r4, b606a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b6016:	4929      	ldr	r1, [pc, #164]	; (b60bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b6018:	a803      	add	r0, sp, #12
   b601a:	f001 fd71 	bl	b7b00 <strcpy>
   b601e:	ac14      	add	r4, sp, #80	; 0x50
{
   b6020:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b6022:	f105 39ff 	add.w	r9, r5, #4294967295
   b6026:	45b1      	cmp	r9, r6
   b6028:	d934      	bls.n	b6094 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b602a:	7823      	ldrb	r3, [r4, #0]
   b602c:	2b25      	cmp	r3, #37	; 0x25
   b602e:	f106 0a01 	add.w	sl, r6, #1
   b6032:	d117      	bne.n	b6064 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b6034:	7863      	ldrb	r3, [r4, #1]
   b6036:	2b7a      	cmp	r3, #122	; 0x7a
   b6038:	d114      	bne.n	b6064 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b603a:	a803      	add	r0, sp, #12
   b603c:	f001 fd68 	bl	b7b10 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b6040:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b6042:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b6044:	1830      	adds	r0, r6, r0
   b6046:	4418      	add	r0, r3
   b6048:	eba9 0206 	sub.w	r2, r9, r6
   b604c:	1ca1      	adds	r1, r4, #2
   b604e:	f001 fd09 	bl	b7a64 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b6052:	462a      	mov	r2, r5
   b6054:	a903      	add	r1, sp, #12
   b6056:	4620      	mov	r0, r4
   b6058:	f001 fd04 	bl	b7a64 <memcpy>
            len = strlen(format_str);
   b605c:	a814      	add	r0, sp, #80	; 0x50
   b605e:	f001 fd57 	bl	b7b10 <strlen>
   b6062:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b6064:	3401      	adds	r4, #1
   b6066:	4656      	mov	r6, sl
   b6068:	e7db      	b.n	b6022 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b606a:	233c      	movs	r3, #60	; 0x3c
   b606c:	fb94 f2f3 	sdiv	r2, r4, r3
   b6070:	2a00      	cmp	r2, #0
   b6072:	bfb8      	it	lt
   b6074:	4252      	neglt	r2, r2
   b6076:	fbb2 f1f3 	udiv	r1, r2, r3
   b607a:	fb03 2211 	mls	r2, r3, r1, r2
   b607e:	9200      	str	r2, [sp, #0]
   b6080:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b6084:	4a0e      	ldr	r2, [pc, #56]	; (b60c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b6086:	fb94 f3f3 	sdiv	r3, r4, r3
   b608a:	2110      	movs	r1, #16
   b608c:	a803      	add	r0, sp, #12
   b608e:	f7ff fc05 	bl	b589c <snprintf>
   b6092:	e7c4      	b.n	b601e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b6094:	2100      	movs	r1, #0
   b6096:	222e      	movs	r2, #46	; 0x2e
   b6098:	a808      	add	r0, sp, #32
   b609a:	9107      	str	r1, [sp, #28]
   b609c:	f001 fcf0 	bl	b7a80 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b60a0:	4643      	mov	r3, r8
   b60a2:	aa14      	add	r2, sp, #80	; 0x50
   b60a4:	2132      	movs	r1, #50	; 0x32
   b60a6:	a807      	add	r0, sp, #28
   b60a8:	f7ff fc18 	bl	b58dc <strftime>
    return String(buf);
   b60ac:	a907      	add	r1, sp, #28
   b60ae:	4638      	mov	r0, r7
   b60b0:	f7ff fd71 	bl	b5b96 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b60b4:	4638      	mov	r0, r7
   b60b6:	b024      	add	sp, #144	; 0x90
   b60b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b60bc:	000b7ecc 	.word	0x000b7ecc
   b60c0:	000b7ece 	.word	0x000b7ece

000b60c4 <_ZN9TimeClass6formatExPKc>:
{
   b60c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b60c6:	b08d      	sub	sp, #52	; 0x34
   b60c8:	e9cd 2300 	strd	r2, r3, [sp]
   b60cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b60ce:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b60d0:	b915      	cbnz	r5, b60d8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b60d2:	4b19      	ldr	r3, [pc, #100]	; (b6138 <_ZN9TimeClass6formatExPKc+0x74>)
   b60d4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b60d6:	b12d      	cbz	r5, b60e4 <_ZN9TimeClass6formatExPKc+0x20>
   b60d8:	4b18      	ldr	r3, [pc, #96]	; (b613c <_ZN9TimeClass6formatExPKc+0x78>)
   b60da:	4628      	mov	r0, r5
   b60dc:	6819      	ldr	r1, [r3, #0]
   b60de:	f001 fd05 	bl	b7aec <strcmp>
   b60e2:	b938      	cbnz	r0, b60f4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b60e4:	e9dd 2300 	ldrd	r2, r3, [sp]
   b60e8:	4620      	mov	r0, r4
   b60ea:	f7ff ff45 	bl	b5f78 <_ZN9TimeClass7timeStrEx>
}
   b60ee:	4620      	mov	r0, r4
   b60f0:	b00d      	add	sp, #52	; 0x34
   b60f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b60f4:	4e12      	ldr	r6, [pc, #72]	; (b6140 <_ZN9TimeClass6formatExPKc+0x7c>)
   b60f6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b60f8:	4f12      	ldr	r7, [pc, #72]	; (b6144 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b60fa:	e9d6 3200 	ldrd	r3, r2, [r6]
   b60fe:	185b      	adds	r3, r3, r1
   b6100:	9901      	ldr	r1, [sp, #4]
   b6102:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b6106:	e9d7 0100 	ldrd	r0, r1, [r7]
   b610a:	181b      	adds	r3, r3, r0
   b610c:	eb42 0201 	adc.w	r2, r2, r1
   b6110:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b6114:	2100      	movs	r1, #0
   b6116:	2224      	movs	r2, #36	; 0x24
   b6118:	a803      	add	r0, sp, #12
   b611a:	f001 fcb1 	bl	b7a80 <memset>
    localtime_r(&t, &calendar_time);
   b611e:	a903      	add	r1, sp, #12
   b6120:	4668      	mov	r0, sp
   b6122:	f7ff fbe3 	bl	b58ec <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b6126:	6832      	ldr	r2, [r6, #0]
   b6128:	683b      	ldr	r3, [r7, #0]
   b612a:	a903      	add	r1, sp, #12
   b612c:	4413      	add	r3, r2
   b612e:	4620      	mov	r0, r4
   b6130:	462a      	mov	r2, r5
   b6132:	f7ff ff5d 	bl	b5ff0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b6136:	e7da      	b.n	b60ee <_ZN9TimeClass6formatExPKc+0x2a>
   b6138:	2003e6d0 	.word	0x2003e6d0
   b613c:	2003e5a4 	.word	0x2003e5a4
   b6140:	2003e6e0 	.word	0x2003e6e0
   b6144:	2003e6d8 	.word	0x2003e6d8

000b6148 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b6148:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b614a:	2000      	movs	r0, #0
   b614c:	f7ff f9a2 	bl	b5494 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6150:	4604      	mov	r4, r0
   b6152:	b9a0      	cbnz	r0, b617e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6154:	f7ff face 	bl	b56f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6158:	2801      	cmp	r0, #1
   b615a:	d110      	bne.n	b617e <_ZN9TimeClass7isValidEv+0x36>
   b615c:	4620      	mov	r0, r4
   b615e:	f7ff fae1 	bl	b5724 <system_thread_get_state>
   b6162:	b960      	cbnz	r0, b617e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6164:	f7ff fefa 	bl	b5f5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6168:	b910      	cbnz	r0, b6170 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b616a:	f7ff fb57 	bl	b581c <spark_process>
        while (_while() && !_condition()) {
   b616e:	e7f9      	b.n	b6164 <_ZN9TimeClass7isValidEv+0x1c>
   b6170:	f7ff fef4 	bl	b5f5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6178:	2000      	movs	r0, #0
   b617a:	f7ff b98b 	b.w	b5494 <hal_rtc_time_is_valid>
}
   b617e:	4620      	mov	r0, r4
   b6180:	bd10      	pop	{r4, pc}

000b6182 <_ZN9TimeClass3nowEv>:
{
   b6182:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6184:	f7ff ffe0 	bl	b6148 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6188:	2210      	movs	r2, #16
   b618a:	2100      	movs	r1, #0
   b618c:	4668      	mov	r0, sp
   b618e:	f001 fc77 	bl	b7a80 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b6192:	2100      	movs	r1, #0
   b6194:	4668      	mov	r0, sp
   b6196:	f7ff f985 	bl	b54a4 <hal_rtc_get_time>
}
   b619a:	9800      	ldr	r0, [sp, #0]
   b619c:	b005      	add	sp, #20
   b619e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b61a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b61a4:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b61a6:	681a      	ldr	r2, [r3, #0]
   b61a8:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b61aa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b61ac:	4770      	bx	lr
   b61ae:	bf00      	nop
   b61b0:	2003e5a4 	.word	0x2003e5a4
   b61b4:	2003e6d0 	.word	0x2003e6d0

000b61b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b61b8:	2100      	movs	r1, #0
   b61ba:	f7ff baab 	b.w	b5714 <system_delay_ms>
	...

000b61c0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b61c0:	4b01      	ldr	r3, [pc, #4]	; (b61c8 <_GLOBAL__sub_I_RGB+0x8>)
   b61c2:	2200      	movs	r2, #0
   b61c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b61c6:	4770      	bx	lr
   b61c8:	2003e6e8 	.word	0x2003e6e8

000b61cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b61cc:	4b01      	ldr	r3, [pc, #4]	; (b61d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b61ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b61d0:	4770      	bx	lr
   b61d2:	bf00      	nop
   b61d4:	2003e5a8 	.word	0x2003e5a8

000b61d8 <serialEventRun>:
{
   b61d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b61da:	4b0b      	ldr	r3, [pc, #44]	; (b6208 <serialEventRun+0x30>)
   b61dc:	b143      	cbz	r3, b61f0 <serialEventRun+0x18>
   b61de:	f000 f967 	bl	b64b0 <_Z16_fetch_usbserialv>
   b61e2:	6803      	ldr	r3, [r0, #0]
   b61e4:	691b      	ldr	r3, [r3, #16]
   b61e6:	4798      	blx	r3
   b61e8:	2800      	cmp	r0, #0
   b61ea:	dd01      	ble.n	b61f0 <serialEventRun+0x18>
        serialEvent();
   b61ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b61f0:	4b06      	ldr	r3, [pc, #24]	; (b620c <serialEventRun+0x34>)
   b61f2:	b143      	cbz	r3, b6206 <serialEventRun+0x2e>
   b61f4:	f000 fbdc 	bl	b69b0 <_Z22__fetch_global_Serial1v>
   b61f8:	6803      	ldr	r3, [r0, #0]
   b61fa:	691b      	ldr	r3, [r3, #16]
   b61fc:	4798      	blx	r3
   b61fe:	2800      	cmp	r0, #0
   b6200:	dd01      	ble.n	b6206 <serialEventRun+0x2e>
        serialEvent1();
   b6202:	f3af 8000 	nop.w
}
   b6206:	bd08      	pop	{r3, pc}
	...

000b6210 <_post_loop>:
{
   b6210:	b508      	push	{r3, lr}
	serialEventRun();
   b6212:	f7ff ffe1 	bl	b61d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6216:	f7ff f935 	bl	b5484 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b621a:	4b01      	ldr	r3, [pc, #4]	; (b6220 <_post_loop+0x10>)
   b621c:	6018      	str	r0, [r3, #0]
}
   b621e:	bd08      	pop	{r3, pc}
   b6220:	2003e740 	.word	0x2003e740

000b6224 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6224:	4805      	ldr	r0, [pc, #20]	; (b623c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6226:	4a06      	ldr	r2, [pc, #24]	; (b6240 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6228:	4906      	ldr	r1, [pc, #24]	; (b6244 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b622a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b622c:	1a12      	subs	r2, r2, r0
   b622e:	f001 fc19 	bl	b7a64 <memcpy>
    __backup_sram_signature = signature;
   b6232:	4b05      	ldr	r3, [pc, #20]	; (b6248 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6234:	4a05      	ldr	r2, [pc, #20]	; (b624c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6236:	601a      	str	r2, [r3, #0]
}
   b6238:	bd08      	pop	{r3, pc}
   b623a:	bf00      	nop
   b623c:	2003f400 	.word	0x2003f400
   b6240:	2003f404 	.word	0x2003f404
   b6244:	000b814c 	.word	0x000b814c
   b6248:	2003f400 	.word	0x2003f400
   b624c:	9a271c1e 	.word	0x9a271c1e

000b6250 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6250:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6252:	2300      	movs	r3, #0
   b6254:	9300      	str	r3, [sp, #0]
   b6256:	461a      	mov	r2, r3
   b6258:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b625c:	f7ff fa74 	bl	b5748 <system_ctrl_set_result>
}
   b6260:	b003      	add	sp, #12
   b6262:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6268 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6268:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b626a:	8843      	ldrh	r3, [r0, #2]
   b626c:	2b0a      	cmp	r3, #10
   b626e:	d008      	beq.n	b6282 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6270:	2b50      	cmp	r3, #80	; 0x50
   b6272:	d10b      	bne.n	b628c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6274:	4b09      	ldr	r3, [pc, #36]	; (b629c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6276:	681b      	ldr	r3, [r3, #0]
   b6278:	b14b      	cbz	r3, b628e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b627a:	b003      	add	sp, #12
   b627c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6280:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6282:	f7ff ffe5 	bl	b6250 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6286:	b003      	add	sp, #12
   b6288:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b628c:	2300      	movs	r3, #0
   b628e:	9300      	str	r3, [sp, #0]
   b6290:	461a      	mov	r2, r3
   b6292:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6296:	f7ff fa57 	bl	b5748 <system_ctrl_set_result>
}
   b629a:	e7f4      	b.n	b6286 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b629c:	2003e6fc 	.word	0x2003e6fc

000b62a0 <module_user_init_hook>:
{
   b62a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b62a2:	4812      	ldr	r0, [pc, #72]	; (b62ec <module_user_init_hook+0x4c>)
   b62a4:	2100      	movs	r1, #0
   b62a6:	f7ff fb11 	bl	b58cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b62aa:	4b11      	ldr	r3, [pc, #68]	; (b62f0 <module_user_init_hook+0x50>)
   b62ac:	681a      	ldr	r2, [r3, #0]
   b62ae:	4b11      	ldr	r3, [pc, #68]	; (b62f4 <module_user_init_hook+0x54>)
   b62b0:	429a      	cmp	r2, r3
   b62b2:	4b11      	ldr	r3, [pc, #68]	; (b62f8 <module_user_init_hook+0x58>)
   b62b4:	bf0c      	ite	eq
   b62b6:	2201      	moveq	r2, #1
   b62b8:	2200      	movne	r2, #0
   b62ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b62bc:	d001      	beq.n	b62c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b62be:	f7ff ffb1 	bl	b6224 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b62c2:	f7ff f8d7 	bl	b5474 <HAL_RNG_GetRandomNumber>
   b62c6:	4604      	mov	r4, r0
    srand(seed);
   b62c8:	f001 fbe2 	bl	b7a90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b62cc:	4b0b      	ldr	r3, [pc, #44]	; (b62fc <module_user_init_hook+0x5c>)
   b62ce:	b113      	cbz	r3, b62d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b62d0:	4620      	mov	r0, r4
   b62d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b62d6:	2100      	movs	r1, #0
   b62d8:	4808      	ldr	r0, [pc, #32]	; (b62fc <module_user_init_hook+0x5c>)
   b62da:	f7ff fab7 	bl	b584c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b62de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b62e2:	4807      	ldr	r0, [pc, #28]	; (b6300 <module_user_init_hook+0x60>)
   b62e4:	2100      	movs	r1, #0
   b62e6:	f7ff ba25 	b.w	b5734 <system_ctrl_set_app_request_handler>
   b62ea:	bf00      	nop
   b62ec:	000b61cd 	.word	0x000b61cd
   b62f0:	2003f400 	.word	0x2003f400
   b62f4:	9a271c1e 	.word	0x9a271c1e
   b62f8:	2003e6f8 	.word	0x2003e6f8
   b62fc:	00000000 	.word	0x00000000
   b6300:	000b6269 	.word	0x000b6269

000b6304 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6304:	4770      	bx	lr

000b6306 <_ZN9IPAddressD0Ev>:
   b6306:	b510      	push	{r4, lr}
   b6308:	2118      	movs	r1, #24
   b630a:	4604      	mov	r4, r0
   b630c:	f7fd fec7 	bl	b409e <_ZdlPvj>
   b6310:	4620      	mov	r0, r4
   b6312:	bd10      	pop	{r4, pc}

000b6314 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6314:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6316:	7d03      	ldrb	r3, [r0, #20]
   b6318:	2b06      	cmp	r3, #6
{
   b631a:	b08d      	sub	sp, #52	; 0x34
   b631c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b631e:	f100 0704 	add.w	r7, r0, #4
   b6322:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6326:	d012      	beq.n	b634e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6328:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b632c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6330:	220a      	movs	r2, #10
   b6332:	4630      	mov	r0, r6
   b6334:	f7ff fcb9 	bl	b5caa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6338:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b633a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b633c:	d019      	beq.n	b6372 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b633e:	2c00      	cmp	r4, #0
   b6340:	d0f4      	beq.n	b632c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6342:	212e      	movs	r1, #46	; 0x2e
   b6344:	4630      	mov	r0, r6
   b6346:	f7ff fc97 	bl	b5c78 <_ZN5Print5printEc>
   b634a:	4404      	add	r4, r0
   b634c:	e7ee      	b.n	b632c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b634e:	232f      	movs	r3, #47	; 0x2f
   b6350:	466a      	mov	r2, sp
   b6352:	4639      	mov	r1, r7
   b6354:	200a      	movs	r0, #10
		buf[0] = 0;
   b6356:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b635a:	f7ff f8b3 	bl	b54c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b635e:	4668      	mov	r0, sp
   b6360:	f001 fbd6 	bl	b7b10 <strlen>
   b6364:	6833      	ldr	r3, [r6, #0]
   b6366:	4602      	mov	r2, r0
   b6368:	68db      	ldr	r3, [r3, #12]
   b636a:	4669      	mov	r1, sp
   b636c:	4630      	mov	r0, r6
   b636e:	4798      	blx	r3
   b6370:	4604      	mov	r4, r0
    }
    return n;
}
   b6372:	4620      	mov	r0, r4
   b6374:	b00d      	add	sp, #52	; 0x34
   b6376:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6378 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6378:	b510      	push	{r4, lr}
   b637a:	4b05      	ldr	r3, [pc, #20]	; (b6390 <_ZN9IPAddressC1Ev+0x18>)
   b637c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b637e:	2211      	movs	r2, #17
   b6380:	f840 3b04 	str.w	r3, [r0], #4
   b6384:	2100      	movs	r1, #0
   b6386:	f001 fb7b 	bl	b7a80 <memset>
}
   b638a:	4620      	mov	r0, r4
   b638c:	bd10      	pop	{r4, pc}
   b638e:	bf00      	nop
   b6390:	000b7f00 	.word	0x000b7f00

000b6394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6394:	4603      	mov	r3, r0
   b6396:	4a07      	ldr	r2, [pc, #28]	; (b63b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6398:	b510      	push	{r4, lr}
   b639a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b639e:	f101 0210 	add.w	r2, r1, #16
   b63a2:	f851 4b04 	ldr.w	r4, [r1], #4
   b63a6:	f843 4b04 	str.w	r4, [r3], #4
   b63aa:	4291      	cmp	r1, r2
   b63ac:	d1f9      	bne.n	b63a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b63ae:	780a      	ldrb	r2, [r1, #0]
   b63b0:	701a      	strb	r2, [r3, #0]
}
   b63b2:	bd10      	pop	{r4, pc}
   b63b4:	000b7f00 	.word	0x000b7f00

000b63b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b63b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b63ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b63be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b63c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b63c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b63ca:	2304      	movs	r3, #4
   b63cc:	6041      	str	r1, [r0, #4]
   b63ce:	7503      	strb	r3, [r0, #20]
}
   b63d0:	bd10      	pop	{r4, pc}
	...

000b63d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b63d4:	b507      	push	{r0, r1, r2, lr}
   b63d6:	4b06      	ldr	r3, [pc, #24]	; (b63f0 <_ZN9IPAddressC1EPKh+0x1c>)
   b63d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b63da:	78cb      	ldrb	r3, [r1, #3]
   b63dc:	9300      	str	r3, [sp, #0]
   b63de:	788b      	ldrb	r3, [r1, #2]
   b63e0:	784a      	ldrb	r2, [r1, #1]
   b63e2:	7809      	ldrb	r1, [r1, #0]
   b63e4:	f7ff ffe8 	bl	b63b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63e8:	b003      	add	sp, #12
   b63ea:	f85d fb04 	ldr.w	pc, [sp], #4
   b63ee:	bf00      	nop
   b63f0:	000b7f00 	.word	0x000b7f00

000b63f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b63f4:	7441      	strb	r1, [r0, #17]
}
   b63f6:	4770      	bx	lr

000b63f8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63f8:	4770      	bx	lr

000b63fa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b63fa:	4770      	bx	lr

000b63fc <_ZN9USBSerial4readEv>:
{
   b63fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b63fe:	2100      	movs	r1, #0
   b6400:	7c00      	ldrb	r0, [r0, #16]
   b6402:	f7ff f95f 	bl	b56c4 <HAL_USB_USART_Receive_Data>
}
   b6406:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b640a:	bd08      	pop	{r3, pc}

000b640c <_ZN9USBSerial4peekEv>:
{
   b640c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b640e:	2101      	movs	r1, #1
   b6410:	7c00      	ldrb	r0, [r0, #16]
   b6412:	f7ff f957 	bl	b56c4 <HAL_USB_USART_Receive_Data>
}
   b6416:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b641a:	bd08      	pop	{r3, pc}

000b641c <_ZN9USBSerial17availableForWriteEv>:
{
   b641c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b641e:	7c00      	ldrb	r0, [r0, #16]
   b6420:	f7ff f948 	bl	b56b4 <HAL_USB_USART_Available_Data_For_Write>
}
   b6424:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6428:	bd08      	pop	{r3, pc}

000b642a <_ZN9USBSerial9availableEv>:
{
   b642a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b642c:	7c00      	ldrb	r0, [r0, #16]
   b642e:	f7ff f939 	bl	b56a4 <HAL_USB_USART_Available_Data>
}
   b6432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6436:	bd08      	pop	{r3, pc}

000b6438 <_ZN9USBSerial5writeEh>:
{
   b6438:	b513      	push	{r0, r1, r4, lr}
   b643a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b643c:	7c00      	ldrb	r0, [r0, #16]
{
   b643e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6440:	f7ff f938 	bl	b56b4 <HAL_USB_USART_Available_Data_For_Write>
   b6444:	2800      	cmp	r0, #0
   b6446:	9901      	ldr	r1, [sp, #4]
   b6448:	dc01      	bgt.n	b644e <_ZN9USBSerial5writeEh+0x16>
   b644a:	7c60      	ldrb	r0, [r4, #17]
   b644c:	b120      	cbz	r0, b6458 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b644e:	7c20      	ldrb	r0, [r4, #16]
   b6450:	f7ff f940 	bl	b56d4 <HAL_USB_USART_Send_Data>
   b6454:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6458:	b002      	add	sp, #8
   b645a:	bd10      	pop	{r4, pc}

000b645c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b645c:	7c00      	ldrb	r0, [r0, #16]
   b645e:	f7ff b941 	b.w	b56e4 <HAL_USB_USART_Flush_Data>

000b6462 <_ZN9USBSerialD0Ev>:
   b6462:	b510      	push	{r4, lr}
   b6464:	2114      	movs	r1, #20
   b6466:	4604      	mov	r4, r0
   b6468:	f7fd fe19 	bl	b409e <_ZdlPvj>
   b646c:	4620      	mov	r0, r4
   b646e:	bd10      	pop	{r4, pc}

000b6470 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6470:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6476:	4604      	mov	r4, r0
   b6478:	4608      	mov	r0, r1
   b647a:	2100      	movs	r1, #0
   b647c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6480:	4b04      	ldr	r3, [pc, #16]	; (b6494 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6482:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6484:	2301      	movs	r3, #1
  _serial = serial;
   b6486:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6488:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b648a:	4611      	mov	r1, r2
   b648c:	f7ff f8fa 	bl	b5684 <HAL_USB_USART_Init>
}
   b6490:	4620      	mov	r0, r4
   b6492:	bd10      	pop	{r4, pc}
   b6494:	000b7f14 	.word	0x000b7f14

000b6498 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6498:	7c00      	ldrb	r0, [r0, #16]
   b649a:	2200      	movs	r2, #0
   b649c:	f7ff b8fa 	b.w	b5694 <HAL_USB_USART_Begin>

000b64a0 <_Z19acquireSerialBufferv>:
{
   b64a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b64a2:	2214      	movs	r2, #20
{
   b64a4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b64a6:	2100      	movs	r1, #0
   b64a8:	f001 faea 	bl	b7a80 <memset>
}
   b64ac:	4620      	mov	r0, r4
   b64ae:	bd10      	pop	{r4, pc}

000b64b0 <_Z16_fetch_usbserialv>:
{
   b64b0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64b2:	4c0f      	ldr	r4, [pc, #60]	; (b64f0 <_Z16_fetch_usbserialv+0x40>)
{
   b64b4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b64b6:	a803      	add	r0, sp, #12
   b64b8:	f7ff fff2 	bl	b64a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64bc:	7821      	ldrb	r1, [r4, #0]
   b64be:	f3bf 8f5b 	dmb	ish
   b64c2:	f011 0101 	ands.w	r1, r1, #1
   b64c6:	d10f      	bne.n	b64e8 <_Z16_fetch_usbserialv+0x38>
   b64c8:	4620      	mov	r0, r4
   b64ca:	9101      	str	r1, [sp, #4]
   b64cc:	f7fd fde9 	bl	b40a2 <__cxa_guard_acquire>
   b64d0:	9901      	ldr	r1, [sp, #4]
   b64d2:	b148      	cbz	r0, b64e8 <_Z16_fetch_usbserialv+0x38>
   b64d4:	aa03      	add	r2, sp, #12
   b64d6:	4807      	ldr	r0, [pc, #28]	; (b64f4 <_Z16_fetch_usbserialv+0x44>)
   b64d8:	f7ff ffca 	bl	b6470 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b64dc:	4620      	mov	r0, r4
   b64de:	f7fd fde5 	bl	b40ac <__cxa_guard_release>
   b64e2:	4805      	ldr	r0, [pc, #20]	; (b64f8 <_Z16_fetch_usbserialv+0x48>)
   b64e4:	f001 fab8 	bl	b7a58 <atexit>
	return _usbserial;
}
   b64e8:	4802      	ldr	r0, [pc, #8]	; (b64f4 <_Z16_fetch_usbserialv+0x44>)
   b64ea:	b008      	add	sp, #32
   b64ec:	bd10      	pop	{r4, pc}
   b64ee:	bf00      	nop
   b64f0:	2003e700 	.word	0x2003e700
   b64f4:	2003e704 	.word	0x2003e704
   b64f8:	000b63f9 	.word	0x000b63f9

000b64fc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b64fc:	4770      	bx	lr

000b64fe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b64fe:	7441      	strb	r1, [r0, #17]
}
   b6500:	4770      	bx	lr

000b6502 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6502:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6504:	7c00      	ldrb	r0, [r0, #16]
   b6506:	f7ff f815 	bl	b5534 <hal_usart_available_data_for_write>
}
   b650a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b650e:	bd08      	pop	{r3, pc}

000b6510 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6510:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6512:	7c00      	ldrb	r0, [r0, #16]
   b6514:	f7fe ffe6 	bl	b54e4 <hal_usart_available>
}
   b6518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b651c:	bd08      	pop	{r3, pc}

000b651e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b651e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6520:	7c00      	ldrb	r0, [r0, #16]
   b6522:	f7fe ffef 	bl	b5504 <hal_usart_peek>
}
   b6526:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b652a:	bd08      	pop	{r3, pc}

000b652c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b652c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b652e:	7c00      	ldrb	r0, [r0, #16]
   b6530:	f7fe ffe0 	bl	b54f4 <hal_usart_read>
}
   b6534:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6538:	bd08      	pop	{r3, pc}

000b653a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b653a:	7c00      	ldrb	r0, [r0, #16]
   b653c:	f7fe bfea 	b.w	b5514 <hal_usart_flush>

000b6540 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6540:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6542:	7c45      	ldrb	r5, [r0, #17]
{
   b6544:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6546:	b12d      	cbz	r5, b6554 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6548:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b654a:	b003      	add	sp, #12
   b654c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6550:	f7fe bfc0 	b.w	b54d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6554:	7c00      	ldrb	r0, [r0, #16]
   b6556:	9101      	str	r1, [sp, #4]
   b6558:	f7fe ffec 	bl	b5534 <hal_usart_available_data_for_write>
   b655c:	2800      	cmp	r0, #0
   b655e:	9901      	ldr	r1, [sp, #4]
   b6560:	dcf2      	bgt.n	b6548 <_ZN11USARTSerial5writeEh+0x8>
}
   b6562:	4628      	mov	r0, r5
   b6564:	b003      	add	sp, #12
   b6566:	bd30      	pop	{r4, r5, pc}

000b6568 <_ZN11USARTSerialD0Ev>:
   b6568:	b510      	push	{r4, lr}
   b656a:	2114      	movs	r1, #20
   b656c:	4604      	mov	r4, r0
   b656e:	f7fd fd96 	bl	b409e <_ZdlPvj>
   b6572:	4620      	mov	r0, r4
   b6574:	bd10      	pop	{r4, pc}
	...

000b6578 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6578:	b510      	push	{r4, lr}
   b657a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b657e:	4604      	mov	r4, r0
   b6580:	4608      	mov	r0, r1
   b6582:	4611      	mov	r1, r2
   b6584:	2200      	movs	r2, #0
   b6586:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b658a:	4b04      	ldr	r3, [pc, #16]	; (b659c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b658c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b658e:	2301      	movs	r3, #1
  _serial = serial;
   b6590:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6592:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6594:	f7fe ffd6 	bl	b5544 <hal_usart_init_ex>
}
   b6598:	4620      	mov	r0, r4
   b659a:	bd10      	pop	{r4, pc}
   b659c:	000b7f44 	.word	0x000b7f44

000b65a0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b65a0:	4770      	bx	lr

000b65a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b65a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65a4:	4606      	mov	r6, r0
   b65a6:	4615      	mov	r5, r2
   b65a8:	460c      	mov	r4, r1
   b65aa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b65ac:	42bc      	cmp	r4, r7
   b65ae:	d006      	beq.n	b65be <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b65b0:	6833      	ldr	r3, [r6, #0]
   b65b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b65b6:	689b      	ldr	r3, [r3, #8]
   b65b8:	4630      	mov	r0, r6
   b65ba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b65bc:	e7f6      	b.n	b65ac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b65be:	4628      	mov	r0, r5
   b65c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65c2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b65c2:	7c00      	ldrb	r0, [r0, #16]
   b65c4:	2200      	movs	r2, #0
   b65c6:	f7fe bfdd 	b.w	b5584 <hal_i2c_write>

000b65ca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b65ca:	7c00      	ldrb	r0, [r0, #16]
   b65cc:	2100      	movs	r1, #0
   b65ce:	f7fe bfe1 	b.w	b5594 <hal_i2c_available>

000b65d2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b65d2:	7c00      	ldrb	r0, [r0, #16]
   b65d4:	2100      	movs	r1, #0
   b65d6:	f7fe bfe5 	b.w	b55a4 <hal_i2c_read>

000b65da <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b65da:	7c00      	ldrb	r0, [r0, #16]
   b65dc:	2100      	movs	r1, #0
   b65de:	f7fe bfe9 	b.w	b55b4 <hal_i2c_peek>

000b65e2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b65e2:	7c00      	ldrb	r0, [r0, #16]
   b65e4:	2100      	movs	r1, #0
   b65e6:	f7fe bfed 	b.w	b55c4 <hal_i2c_flush>

000b65ea <_ZN7TwoWireD0Ev>:
   b65ea:	b510      	push	{r4, lr}
   b65ec:	2114      	movs	r1, #20
   b65ee:	4604      	mov	r4, r0
   b65f0:	f7fd fd55 	bl	b409e <_ZdlPvj>
   b65f4:	4620      	mov	r0, r4
   b65f6:	bd10      	pop	{r4, pc}

000b65f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65f8:	b510      	push	{r4, lr}
   b65fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65fe:	4604      	mov	r4, r0
   b6600:	4608      	mov	r0, r1
   b6602:	2100      	movs	r1, #0
   b6604:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6608:	4b03      	ldr	r3, [pc, #12]	; (b6618 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b660a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b660c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b660e:	4611      	mov	r1, r2
   b6610:	f7fe ffe8 	bl	b55e4 <hal_i2c_init>
}
   b6614:	4620      	mov	r0, r4
   b6616:	bd10      	pop	{r4, pc}
   b6618:	000b7f74 	.word	0x000b7f74

000b661c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b661c:	2300      	movs	r3, #0
   b661e:	7c00      	ldrb	r0, [r0, #16]
   b6620:	461a      	mov	r2, r3
   b6622:	4619      	mov	r1, r3
   b6624:	f7fe bf96 	b.w	b5554 <hal_i2c_begin>

000b6628 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b662a:	2200      	movs	r2, #0
   b662c:	2314      	movs	r3, #20
   b662e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6632:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6636:	780b      	ldrb	r3, [r1, #0]
   b6638:	f88d 3008 	strb.w	r3, [sp, #8]
   b663c:	684b      	ldr	r3, [r1, #4]
   b663e:	9303      	str	r3, [sp, #12]
   b6640:	68cb      	ldr	r3, [r1, #12]
   b6642:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6644:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6646:	7a0b      	ldrb	r3, [r1, #8]
   b6648:	9305      	str	r3, [sp, #20]
   b664a:	a901      	add	r1, sp, #4
   b664c:	f7fe ffd2 	bl	b55f4 <hal_i2c_request_ex>
}
   b6650:	b007      	add	sp, #28
   b6652:	f85d fb04 	ldr.w	pc, [sp], #4

000b6656 <_ZN7TwoWire11requestFromEhjh>:
{
   b6656:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6658:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b665a:	f88d 1000 	strb.w	r1, [sp]
   b665e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6662:	9103      	str	r1, [sp, #12]
   b6664:	bf18      	it	ne
   b6666:	2301      	movne	r3, #1
   b6668:	4669      	mov	r1, sp
    size_ = size;
   b666a:	9201      	str	r2, [sp, #4]
   b666c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6670:	f7ff ffda 	bl	b6628 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6674:	b005      	add	sp, #20
   b6676:	f85d fb04 	ldr.w	pc, [sp], #4

000b667a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b667a:	2301      	movs	r3, #1
   b667c:	f7ff bfeb 	b.w	b6656 <_ZN7TwoWire11requestFromEhjh>

000b6680 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6680:	7c00      	ldrb	r0, [r0, #16]
   b6682:	2200      	movs	r2, #0
   b6684:	f7fe bf6e 	b.w	b5564 <hal_i2c_begin_transmission>

000b6688 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6688:	b2c9      	uxtb	r1, r1
   b668a:	f7ff bff9 	b.w	b6680 <_ZN7TwoWire17beginTransmissionEh>

000b668e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b668e:	7c00      	ldrb	r0, [r0, #16]
   b6690:	2200      	movs	r2, #0
   b6692:	f7fe bf6f 	b.w	b5574 <hal_i2c_end_transmission>

000b6696 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6696:	2101      	movs	r1, #1
   b6698:	f7ff bff9 	b.w	b668e <_ZN7TwoWire15endTransmissionEh>

000b669c <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b669c:	7c00      	ldrb	r0, [r0, #16]
   b669e:	2100      	movs	r1, #0
   b66a0:	f7fe bf98 	b.w	b55d4 <hal_i2c_is_enabled>

000b66a4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b66a4:	2200      	movs	r2, #0
   b66a6:	6840      	ldr	r0, [r0, #4]
   b66a8:	4611      	mov	r1, r2
   b66aa:	f7ff b86f 	b.w	b578c <network_ready>

000b66ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b66ae:	2200      	movs	r2, #0
   b66b0:	6840      	ldr	r0, [r0, #4]
   b66b2:	4611      	mov	r1, r2
   b66b4:	f7ff b88a 	b.w	b57cc <network_listening>

000b66b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b66b8:	2200      	movs	r2, #0
   b66ba:	6840      	ldr	r0, [r0, #4]
   b66bc:	4611      	mov	r1, r2
   b66be:	f7ff b895 	b.w	b57ec <network_get_listen_timeout>

000b66c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b66c2:	6840      	ldr	r0, [r0, #4]
   b66c4:	2200      	movs	r2, #0
   b66c6:	f7ff b889 	b.w	b57dc <network_set_listen_timeout>

000b66ca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b66ca:	6840      	ldr	r0, [r0, #4]
   b66cc:	2200      	movs	r2, #0
   b66ce:	f081 0101 	eor.w	r1, r1, #1
   b66d2:	f7ff b873 	b.w	b57bc <network_listen>

000b66d6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b66d6:	2300      	movs	r3, #0
   b66d8:	6840      	ldr	r0, [r0, #4]
   b66da:	461a      	mov	r2, r3
   b66dc:	4619      	mov	r1, r3
   b66de:	f7ff b865 	b.w	b57ac <network_off>

000b66e2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b66e2:	2300      	movs	r3, #0
   b66e4:	6840      	ldr	r0, [r0, #4]
   b66e6:	461a      	mov	r2, r3
   b66e8:	4619      	mov	r1, r3
   b66ea:	f7ff b857 	b.w	b579c <network_on>

000b66ee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b66ee:	2200      	movs	r2, #0
   b66f0:	6840      	ldr	r0, [r0, #4]
   b66f2:	4611      	mov	r1, r2
   b66f4:	f7ff b83a 	b.w	b576c <network_connecting>

000b66f8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b66f8:	6840      	ldr	r0, [r0, #4]
   b66fa:	2200      	movs	r2, #0
   b66fc:	2102      	movs	r1, #2
   b66fe:	f7ff b83d 	b.w	b577c <network_disconnect>

000b6702 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6702:	2300      	movs	r3, #0
   b6704:	6840      	ldr	r0, [r0, #4]
   b6706:	461a      	mov	r2, r3
   b6708:	f7ff b828 	b.w	b575c <network_connect>

000b670c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b670c:	4b02      	ldr	r3, [pc, #8]	; (b6718 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b670e:	2204      	movs	r2, #4
   b6710:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6712:	4a02      	ldr	r2, [pc, #8]	; (b671c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6714:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6716:	4770      	bx	lr
   b6718:	2003e718 	.word	0x2003e718
   b671c:	000b7f9c 	.word	0x000b7f9c

000b6720 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6720:	2300      	movs	r3, #0
   b6722:	6840      	ldr	r0, [r0, #4]
   b6724:	461a      	mov	r2, r3
   b6726:	f7ff b819 	b.w	b575c <network_connect>

000b672a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b672a:	6840      	ldr	r0, [r0, #4]
   b672c:	2200      	movs	r2, #0
   b672e:	2102      	movs	r1, #2
   b6730:	f7ff b824 	b.w	b577c <network_disconnect>

000b6734 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6734:	2200      	movs	r2, #0
   b6736:	6840      	ldr	r0, [r0, #4]
   b6738:	4611      	mov	r1, r2
   b673a:	f7ff b817 	b.w	b576c <network_connecting>

000b673e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b673e:	2200      	movs	r2, #0
   b6740:	6840      	ldr	r0, [r0, #4]
   b6742:	4611      	mov	r1, r2
   b6744:	f7ff b822 	b.w	b578c <network_ready>

000b6748 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6748:	2300      	movs	r3, #0
   b674a:	6840      	ldr	r0, [r0, #4]
   b674c:	461a      	mov	r2, r3
   b674e:	4619      	mov	r1, r3
   b6750:	f7ff b824 	b.w	b579c <network_on>

000b6754 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6754:	2300      	movs	r3, #0
   b6756:	6840      	ldr	r0, [r0, #4]
   b6758:	461a      	mov	r2, r3
   b675a:	4619      	mov	r1, r3
   b675c:	f7ff b826 	b.w	b57ac <network_off>

000b6760 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6760:	6840      	ldr	r0, [r0, #4]
   b6762:	2100      	movs	r1, #0
   b6764:	f7ff b84a 	b.w	b57fc <network_is_on>

000b6768 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6768:	6840      	ldr	r0, [r0, #4]
   b676a:	2100      	movs	r1, #0
   b676c:	f7ff b84e 	b.w	b580c <network_is_off>

000b6770 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6770:	6840      	ldr	r0, [r0, #4]
   b6772:	2200      	movs	r2, #0
   b6774:	f081 0101 	eor.w	r1, r1, #1
   b6778:	f7ff b820 	b.w	b57bc <network_listen>

000b677c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b677c:	6840      	ldr	r0, [r0, #4]
   b677e:	2200      	movs	r2, #0
   b6780:	f7ff b82c 	b.w	b57dc <network_set_listen_timeout>

000b6784 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6784:	2200      	movs	r2, #0
   b6786:	6840      	ldr	r0, [r0, #4]
   b6788:	4611      	mov	r1, r2
   b678a:	f7ff b82f 	b.w	b57ec <network_get_listen_timeout>

000b678e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b678e:	2200      	movs	r2, #0
   b6790:	6840      	ldr	r0, [r0, #4]
   b6792:	4611      	mov	r1, r2
   b6794:	f7ff b81a 	b.w	b57cc <network_listening>

000b6798 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b679c:	b095      	sub	sp, #84	; 0x54
   b679e:	4614      	mov	r4, r2
   b67a0:	460d      	mov	r5, r1
   b67a2:	4607      	mov	r7, r0
    IPAddress addr;
   b67a4:	f7ff fde8 	bl	b6378 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b67a8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b67aa:	221c      	movs	r2, #28
   b67ac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b67ae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b67b0:	f001 f966 	bl	b7a80 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b67b4:	2340      	movs	r3, #64	; 0x40
   b67b6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b67b8:	4620      	mov	r0, r4
   b67ba:	466b      	mov	r3, sp
   b67bc:	aa0c      	add	r2, sp, #48	; 0x30
   b67be:	2100      	movs	r1, #0
   b67c0:	f7fe fe30 	bl	b5424 <netdb_getaddrinfo>
    if (!r) {
   b67c4:	4604      	mov	r4, r0
   b67c6:	2800      	cmp	r0, #0
   b67c8:	d14b      	bne.n	b6862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67ca:	4602      	mov	r2, r0
   b67cc:	2101      	movs	r1, #1
   b67ce:	6868      	ldr	r0, [r5, #4]
   b67d0:	f7fe ffdc 	bl	b578c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67d4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67d6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67d8:	4622      	mov	r2, r4
   b67da:	6868      	ldr	r0, [r5, #4]
   b67dc:	f7fe ffd6 	bl	b578c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67e0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67e2:	4681      	mov	r9, r0
        bool ok = false;
   b67e4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67e6:	2e00      	cmp	r6, #0
   b67e8:	d03b      	beq.n	b6862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b67ea:	2900      	cmp	r1, #0
   b67ec:	d139      	bne.n	b6862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b67ee:	6873      	ldr	r3, [r6, #4]
   b67f0:	2b02      	cmp	r3, #2
   b67f2:	d003      	beq.n	b67fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b67f4:	2b0a      	cmp	r3, #10
   b67f6:	d011      	beq.n	b681c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67f8:	69f6      	ldr	r6, [r6, #28]
   b67fa:	e7f4      	b.n	b67e6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b67fc:	f1b8 0f00 	cmp.w	r8, #0
   b6800:	d0fa      	beq.n	b67f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6802:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6804:	a806      	add	r0, sp, #24
   b6806:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6808:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b680a:	f7ff fde3 	bl	b63d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b680e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6810:	1d3c      	adds	r4, r7, #4
   b6812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6814:	682b      	ldr	r3, [r5, #0]
   b6816:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6818:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b681a:	e7ed      	b.n	b67f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b681c:	f1b9 0f00 	cmp.w	r9, #0
   b6820:	d0ea      	beq.n	b67f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6822:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6824:	2210      	movs	r2, #16
   b6826:	a801      	add	r0, sp, #4
   b6828:	f001 f92a 	bl	b7a80 <memset>
                    a.v = 6;
   b682c:	2306      	movs	r3, #6
   b682e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6832:	ad01      	add	r5, sp, #4
   b6834:	f104 0308 	add.w	r3, r4, #8
   b6838:	3418      	adds	r4, #24
   b683a:	6818      	ldr	r0, [r3, #0]
   b683c:	6859      	ldr	r1, [r3, #4]
   b683e:	462a      	mov	r2, r5
   b6840:	c203      	stmia	r2!, {r0, r1}
   b6842:	3308      	adds	r3, #8
   b6844:	42a3      	cmp	r3, r4
   b6846:	4615      	mov	r5, r2
   b6848:	d1f7      	bne.n	b683a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b684a:	a901      	add	r1, sp, #4
   b684c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b684e:	ad07      	add	r5, sp, #28
   b6850:	f7ff fda0 	bl	b6394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6856:	1d3c      	adds	r4, r7, #4
   b6858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b685a:	682b      	ldr	r3, [r5, #0]
   b685c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b685e:	4649      	mov	r1, r9
   b6860:	e7ca      	b.n	b67f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6862:	9800      	ldr	r0, [sp, #0]
   b6864:	f7fe fdd6 	bl	b5414 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6868:	4638      	mov	r0, r7
   b686a:	b015      	add	sp, #84	; 0x54
   b686c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6870 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6870:	4b02      	ldr	r3, [pc, #8]	; (b687c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6872:	4a03      	ldr	r2, [pc, #12]	; (b6880 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6874:	601a      	str	r2, [r3, #0]
   b6876:	2200      	movs	r2, #0
   b6878:	605a      	str	r2, [r3, #4]

} // spark
   b687a:	4770      	bx	lr
   b687c:	2003e720 	.word	0x2003e720
   b6880:	000b7fd8 	.word	0x000b7fd8

000b6884 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6884:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6886:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6888:	d902      	bls.n	b6890 <pinAvailable+0xc>
    return false;
   b688a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b688c:	b002      	add	sp, #8
   b688e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6890:	f1a0 030b 	sub.w	r3, r0, #11
   b6894:	2b02      	cmp	r3, #2
   b6896:	d81a      	bhi.n	b68ce <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6898:	4c17      	ldr	r4, [pc, #92]	; (b68f8 <pinAvailable+0x74>)
   b689a:	7821      	ldrb	r1, [r4, #0]
   b689c:	f3bf 8f5b 	dmb	ish
   b68a0:	f011 0101 	ands.w	r1, r1, #1
   b68a4:	d10b      	bne.n	b68be <pinAvailable+0x3a>
   b68a6:	4620      	mov	r0, r4
   b68a8:	9101      	str	r1, [sp, #4]
   b68aa:	f7fd fbfa 	bl	b40a2 <__cxa_guard_acquire>
   b68ae:	9901      	ldr	r1, [sp, #4]
   b68b0:	b128      	cbz	r0, b68be <pinAvailable+0x3a>
   b68b2:	4812      	ldr	r0, [pc, #72]	; (b68fc <pinAvailable+0x78>)
   b68b4:	f7ff f866 	bl	b5984 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b68b8:	4620      	mov	r0, r4
   b68ba:	f7fd fbf7 	bl	b40ac <__cxa_guard_release>
   b68be:	4b0f      	ldr	r3, [pc, #60]	; (b68fc <pinAvailable+0x78>)
   b68c0:	7818      	ldrb	r0, [r3, #0]
   b68c2:	f7fe feb7 	bl	b5634 <hal_spi_is_enabled>
   b68c6:	2800      	cmp	r0, #0
   b68c8:	d1df      	bne.n	b688a <pinAvailable+0x6>
  return true; // 'pin' is available
   b68ca:	2001      	movs	r0, #1
   b68cc:	e7de      	b.n	b688c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b68ce:	2801      	cmp	r0, #1
   b68d0:	d809      	bhi.n	b68e6 <pinAvailable+0x62>
   b68d2:	f000 f8a9 	bl	b6a28 <_Z19__fetch_global_Wirev>
   b68d6:	2100      	movs	r1, #0
   b68d8:	7c00      	ldrb	r0, [r0, #16]
   b68da:	f7fe fe7b 	bl	b55d4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b68de:	f080 0001 	eor.w	r0, r0, #1
   b68e2:	b2c0      	uxtb	r0, r0
   b68e4:	e7d2      	b.n	b688c <pinAvailable+0x8>
   b68e6:	3809      	subs	r0, #9
   b68e8:	2801      	cmp	r0, #1
   b68ea:	d8ee      	bhi.n	b68ca <pinAvailable+0x46>
   b68ec:	f000 f860 	bl	b69b0 <_Z22__fetch_global_Serial1v>
   b68f0:	7c00      	ldrb	r0, [r0, #16]
   b68f2:	f7fe fe17 	bl	b5524 <hal_usart_is_enabled>
   b68f6:	e7f2      	b.n	b68de <pinAvailable+0x5a>
   b68f8:	2003e6a0 	.word	0x2003e6a0
   b68fc:	2003e6a4 	.word	0x2003e6a4

000b6900 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6900:	2823      	cmp	r0, #35	; 0x23
{
   b6902:	b538      	push	{r3, r4, r5, lr}
   b6904:	4604      	mov	r4, r0
   b6906:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6908:	d80a      	bhi.n	b6920 <pinMode+0x20>
   b690a:	29ff      	cmp	r1, #255	; 0xff
   b690c:	d008      	beq.n	b6920 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b690e:	f7ff ffb9 	bl	b6884 <pinAvailable>
   b6912:	b128      	cbz	r0, b6920 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6914:	4629      	mov	r1, r5
   b6916:	4620      	mov	r0, r4
}
   b6918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b691c:	f7fe bd8a 	b.w	b5434 <HAL_Pin_Mode>
}
   b6920:	bd38      	pop	{r3, r4, r5, pc}

000b6922 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6922:	b538      	push	{r3, r4, r5, lr}
   b6924:	4604      	mov	r4, r0
   b6926:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6928:	f7fe fd8c 	bl	b5444 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b692c:	28ff      	cmp	r0, #255	; 0xff
   b692e:	d010      	beq.n	b6952 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6930:	2806      	cmp	r0, #6
   b6932:	d804      	bhi.n	b693e <digitalWrite+0x1c>
   b6934:	234d      	movs	r3, #77	; 0x4d
   b6936:	fa23 f000 	lsr.w	r0, r3, r0
   b693a:	07c3      	lsls	r3, r0, #31
   b693c:	d409      	bmi.n	b6952 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b693e:	4620      	mov	r0, r4
   b6940:	f7ff ffa0 	bl	b6884 <pinAvailable>
   b6944:	b128      	cbz	r0, b6952 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6946:	4629      	mov	r1, r5
   b6948:	4620      	mov	r0, r4
}
   b694a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b694e:	f7fe bd81 	b.w	b5454 <HAL_GPIO_Write>
}
   b6952:	bd38      	pop	{r3, r4, r5, pc}

000b6954 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6954:	b510      	push	{r4, lr}
   b6956:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6958:	f7fe fd74 	bl	b5444 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b695c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b695e:	b2db      	uxtb	r3, r3
   b6960:	2b01      	cmp	r3, #1
   b6962:	d908      	bls.n	b6976 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6964:	4620      	mov	r0, r4
   b6966:	f7ff ff8d 	bl	b6884 <pinAvailable>
   b696a:	b120      	cbz	r0, b6976 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b696c:	4620      	mov	r0, r4
}
   b696e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6972:	f7fe bd77 	b.w	b5464 <HAL_GPIO_Read>
}
   b6976:	2000      	movs	r0, #0
   b6978:	bd10      	pop	{r4, pc}

000b697a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b697a:	4770      	bx	lr

000b697c <_Z20acquireSerial1Bufferv>:
{
   b697c:	b538      	push	{r3, r4, r5, lr}
   b697e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6980:	2514      	movs	r5, #20
   b6982:	462a      	mov	r2, r5
   b6984:	2100      	movs	r1, #0
   b6986:	f001 f87b 	bl	b7a80 <memset>
   b698a:	8025      	strh	r5, [r4, #0]
   b698c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b698e:	4907      	ldr	r1, [pc, #28]	; (b69ac <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6990:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6992:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6994:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6996:	f000 f86b 	bl	b6a70 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b699a:	4904      	ldr	r1, [pc, #16]	; (b69ac <_Z20acquireSerial1Bufferv+0x30>)
    };
   b699c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b699e:	4628      	mov	r0, r5
   b69a0:	f000 f866 	bl	b6a70 <_ZnajRKSt9nothrow_t>
    };
   b69a4:	60e0      	str	r0, [r4, #12]
}
   b69a6:	4620      	mov	r0, r4
   b69a8:	bd38      	pop	{r3, r4, r5, pc}
   b69aa:	bf00      	nop
   b69ac:	000b800c 	.word	0x000b800c

000b69b0 <_Z22__fetch_global_Serial1v>:
{
   b69b0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b69b2:	4d0e      	ldr	r5, [pc, #56]	; (b69ec <_Z22__fetch_global_Serial1v+0x3c>)
   b69b4:	7829      	ldrb	r1, [r5, #0]
   b69b6:	f3bf 8f5b 	dmb	ish
   b69ba:	f011 0401 	ands.w	r4, r1, #1
{
   b69be:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b69c0:	d111      	bne.n	b69e6 <_Z22__fetch_global_Serial1v+0x36>
   b69c2:	4628      	mov	r0, r5
   b69c4:	f7fd fb6d 	bl	b40a2 <__cxa_guard_acquire>
   b69c8:	b168      	cbz	r0, b69e6 <_Z22__fetch_global_Serial1v+0x36>
   b69ca:	a801      	add	r0, sp, #4
   b69cc:	f7ff ffd6 	bl	b697c <_Z20acquireSerial1Bufferv>
   b69d0:	aa01      	add	r2, sp, #4
   b69d2:	4621      	mov	r1, r4
   b69d4:	4806      	ldr	r0, [pc, #24]	; (b69f0 <_Z22__fetch_global_Serial1v+0x40>)
   b69d6:	f7ff fdcf 	bl	b6578 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b69da:	4628      	mov	r0, r5
   b69dc:	f7fd fb66 	bl	b40ac <__cxa_guard_release>
   b69e0:	4804      	ldr	r0, [pc, #16]	; (b69f4 <_Z22__fetch_global_Serial1v+0x44>)
   b69e2:	f001 f839 	bl	b7a58 <atexit>
    return serial1;
}
   b69e6:	4802      	ldr	r0, [pc, #8]	; (b69f0 <_Z22__fetch_global_Serial1v+0x40>)
   b69e8:	b007      	add	sp, #28
   b69ea:	bd30      	pop	{r4, r5, pc}
   b69ec:	2003e728 	.word	0x2003e728
   b69f0:	2003e72c 	.word	0x2003e72c
   b69f4:	000b697b 	.word	0x000b697b

000b69f8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69f8:	4770      	bx	lr
	...

000b69fc <_Z17acquireWireBufferv>:
{
   b69fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b69fe:	2520      	movs	r5, #32
   b6a00:	2314      	movs	r3, #20
{
   b6a02:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6a04:	6003      	str	r3, [r0, #0]
   b6a06:	6085      	str	r5, [r0, #8]
   b6a08:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a0a:	4906      	ldr	r1, [pc, #24]	; (b6a24 <_Z17acquireWireBufferv+0x28>)
   b6a0c:	4628      	mov	r0, r5
   b6a0e:	f000 f82f 	bl	b6a70 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a12:	4904      	ldr	r1, [pc, #16]	; (b6a24 <_Z17acquireWireBufferv+0x28>)
	};
   b6a14:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a16:	4628      	mov	r0, r5
   b6a18:	f000 f82a 	bl	b6a70 <_ZnajRKSt9nothrow_t>
	};
   b6a1c:	60e0      	str	r0, [r4, #12]
}
   b6a1e:	4620      	mov	r0, r4
   b6a20:	bd38      	pop	{r3, r4, r5, pc}
   b6a22:	bf00      	nop
   b6a24:	000b800c 	.word	0x000b800c

000b6a28 <_Z19__fetch_global_Wirev>:
{
   b6a28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a2a:	4d0e      	ldr	r5, [pc, #56]	; (b6a64 <_Z19__fetch_global_Wirev+0x3c>)
   b6a2c:	7829      	ldrb	r1, [r5, #0]
   b6a2e:	f3bf 8f5b 	dmb	ish
   b6a32:	f011 0401 	ands.w	r4, r1, #1
{
   b6a36:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a38:	d111      	bne.n	b6a5e <_Z19__fetch_global_Wirev+0x36>
   b6a3a:	4628      	mov	r0, r5
   b6a3c:	f7fd fb31 	bl	b40a2 <__cxa_guard_acquire>
   b6a40:	b168      	cbz	r0, b6a5e <_Z19__fetch_global_Wirev+0x36>
   b6a42:	a801      	add	r0, sp, #4
   b6a44:	f7ff ffda 	bl	b69fc <_Z17acquireWireBufferv>
   b6a48:	aa01      	add	r2, sp, #4
   b6a4a:	4621      	mov	r1, r4
   b6a4c:	4806      	ldr	r0, [pc, #24]	; (b6a68 <_Z19__fetch_global_Wirev+0x40>)
   b6a4e:	f7ff fdd3 	bl	b65f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6a52:	4628      	mov	r0, r5
   b6a54:	f7fd fb2a 	bl	b40ac <__cxa_guard_release>
   b6a58:	4804      	ldr	r0, [pc, #16]	; (b6a6c <_Z19__fetch_global_Wirev+0x44>)
   b6a5a:	f000 fffd 	bl	b7a58 <atexit>
	return wire;
}
   b6a5e:	4802      	ldr	r0, [pc, #8]	; (b6a68 <_Z19__fetch_global_Wirev+0x40>)
   b6a60:	b007      	add	sp, #28
   b6a62:	bd30      	pop	{r4, r5, pc}
   b6a64:	2003e744 	.word	0x2003e744
   b6a68:	2003e748 	.word	0x2003e748
   b6a6c:	000b69f9 	.word	0x000b69f9

000b6a70 <_ZnajRKSt9nothrow_t>:
   b6a70:	f7fd bb13 	b.w	b409a <_Znaj>

000b6a74 <__aeabi_drsub>:
   b6a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6a78:	e002      	b.n	b6a80 <__adddf3>
   b6a7a:	bf00      	nop

000b6a7c <__aeabi_dsub>:
   b6a7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6a80 <__adddf3>:
   b6a80:	b530      	push	{r4, r5, lr}
   b6a82:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6a86:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6a8a:	ea94 0f05 	teq	r4, r5
   b6a8e:	bf08      	it	eq
   b6a90:	ea90 0f02 	teqeq	r0, r2
   b6a94:	bf1f      	itttt	ne
   b6a96:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6a9a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6a9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6aa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6aa6:	f000 80e2 	beq.w	b6c6e <__adddf3+0x1ee>
   b6aaa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6aae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6ab2:	bfb8      	it	lt
   b6ab4:	426d      	neglt	r5, r5
   b6ab6:	dd0c      	ble.n	b6ad2 <__adddf3+0x52>
   b6ab8:	442c      	add	r4, r5
   b6aba:	ea80 0202 	eor.w	r2, r0, r2
   b6abe:	ea81 0303 	eor.w	r3, r1, r3
   b6ac2:	ea82 0000 	eor.w	r0, r2, r0
   b6ac6:	ea83 0101 	eor.w	r1, r3, r1
   b6aca:	ea80 0202 	eor.w	r2, r0, r2
   b6ace:	ea81 0303 	eor.w	r3, r1, r3
   b6ad2:	2d36      	cmp	r5, #54	; 0x36
   b6ad4:	bf88      	it	hi
   b6ad6:	bd30      	pophi	{r4, r5, pc}
   b6ad8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6adc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ae0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6ae4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6ae8:	d002      	beq.n	b6af0 <__adddf3+0x70>
   b6aea:	4240      	negs	r0, r0
   b6aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6af0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6af4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6af8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6afc:	d002      	beq.n	b6b04 <__adddf3+0x84>
   b6afe:	4252      	negs	r2, r2
   b6b00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6b04:	ea94 0f05 	teq	r4, r5
   b6b08:	f000 80a7 	beq.w	b6c5a <__adddf3+0x1da>
   b6b0c:	f1a4 0401 	sub.w	r4, r4, #1
   b6b10:	f1d5 0e20 	rsbs	lr, r5, #32
   b6b14:	db0d      	blt.n	b6b32 <__adddf3+0xb2>
   b6b16:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6b1a:	fa22 f205 	lsr.w	r2, r2, r5
   b6b1e:	1880      	adds	r0, r0, r2
   b6b20:	f141 0100 	adc.w	r1, r1, #0
   b6b24:	fa03 f20e 	lsl.w	r2, r3, lr
   b6b28:	1880      	adds	r0, r0, r2
   b6b2a:	fa43 f305 	asr.w	r3, r3, r5
   b6b2e:	4159      	adcs	r1, r3
   b6b30:	e00e      	b.n	b6b50 <__adddf3+0xd0>
   b6b32:	f1a5 0520 	sub.w	r5, r5, #32
   b6b36:	f10e 0e20 	add.w	lr, lr, #32
   b6b3a:	2a01      	cmp	r2, #1
   b6b3c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6b40:	bf28      	it	cs
   b6b42:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6b46:	fa43 f305 	asr.w	r3, r3, r5
   b6b4a:	18c0      	adds	r0, r0, r3
   b6b4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6b50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6b54:	d507      	bpl.n	b6b66 <__adddf3+0xe6>
   b6b56:	f04f 0e00 	mov.w	lr, #0
   b6b5a:	f1dc 0c00 	rsbs	ip, ip, #0
   b6b5e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6b62:	eb6e 0101 	sbc.w	r1, lr, r1
   b6b66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6b6a:	d31b      	bcc.n	b6ba4 <__adddf3+0x124>
   b6b6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6b70:	d30c      	bcc.n	b6b8c <__adddf3+0x10c>
   b6b72:	0849      	lsrs	r1, r1, #1
   b6b74:	ea5f 0030 	movs.w	r0, r0, rrx
   b6b78:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6b7c:	f104 0401 	add.w	r4, r4, #1
   b6b80:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6b84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6b88:	f080 809a 	bcs.w	b6cc0 <__adddf3+0x240>
   b6b8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6b90:	bf08      	it	eq
   b6b92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b96:	f150 0000 	adcs.w	r0, r0, #0
   b6b9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b9e:	ea41 0105 	orr.w	r1, r1, r5
   b6ba2:	bd30      	pop	{r4, r5, pc}
   b6ba4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6ba8:	4140      	adcs	r0, r0
   b6baa:	eb41 0101 	adc.w	r1, r1, r1
   b6bae:	3c01      	subs	r4, #1
   b6bb0:	bf28      	it	cs
   b6bb2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6bb6:	d2e9      	bcs.n	b6b8c <__adddf3+0x10c>
   b6bb8:	f091 0f00 	teq	r1, #0
   b6bbc:	bf04      	itt	eq
   b6bbe:	4601      	moveq	r1, r0
   b6bc0:	2000      	moveq	r0, #0
   b6bc2:	fab1 f381 	clz	r3, r1
   b6bc6:	bf08      	it	eq
   b6bc8:	3320      	addeq	r3, #32
   b6bca:	f1a3 030b 	sub.w	r3, r3, #11
   b6bce:	f1b3 0220 	subs.w	r2, r3, #32
   b6bd2:	da0c      	bge.n	b6bee <__adddf3+0x16e>
   b6bd4:	320c      	adds	r2, #12
   b6bd6:	dd08      	ble.n	b6bea <__adddf3+0x16a>
   b6bd8:	f102 0c14 	add.w	ip, r2, #20
   b6bdc:	f1c2 020c 	rsb	r2, r2, #12
   b6be0:	fa01 f00c 	lsl.w	r0, r1, ip
   b6be4:	fa21 f102 	lsr.w	r1, r1, r2
   b6be8:	e00c      	b.n	b6c04 <__adddf3+0x184>
   b6bea:	f102 0214 	add.w	r2, r2, #20
   b6bee:	bfd8      	it	le
   b6bf0:	f1c2 0c20 	rsble	ip, r2, #32
   b6bf4:	fa01 f102 	lsl.w	r1, r1, r2
   b6bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6bfc:	bfdc      	itt	le
   b6bfe:	ea41 010c 	orrle.w	r1, r1, ip
   b6c02:	4090      	lslle	r0, r2
   b6c04:	1ae4      	subs	r4, r4, r3
   b6c06:	bfa2      	ittt	ge
   b6c08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6c0c:	4329      	orrge	r1, r5
   b6c0e:	bd30      	popge	{r4, r5, pc}
   b6c10:	ea6f 0404 	mvn.w	r4, r4
   b6c14:	3c1f      	subs	r4, #31
   b6c16:	da1c      	bge.n	b6c52 <__adddf3+0x1d2>
   b6c18:	340c      	adds	r4, #12
   b6c1a:	dc0e      	bgt.n	b6c3a <__adddf3+0x1ba>
   b6c1c:	f104 0414 	add.w	r4, r4, #20
   b6c20:	f1c4 0220 	rsb	r2, r4, #32
   b6c24:	fa20 f004 	lsr.w	r0, r0, r4
   b6c28:	fa01 f302 	lsl.w	r3, r1, r2
   b6c2c:	ea40 0003 	orr.w	r0, r0, r3
   b6c30:	fa21 f304 	lsr.w	r3, r1, r4
   b6c34:	ea45 0103 	orr.w	r1, r5, r3
   b6c38:	bd30      	pop	{r4, r5, pc}
   b6c3a:	f1c4 040c 	rsb	r4, r4, #12
   b6c3e:	f1c4 0220 	rsb	r2, r4, #32
   b6c42:	fa20 f002 	lsr.w	r0, r0, r2
   b6c46:	fa01 f304 	lsl.w	r3, r1, r4
   b6c4a:	ea40 0003 	orr.w	r0, r0, r3
   b6c4e:	4629      	mov	r1, r5
   b6c50:	bd30      	pop	{r4, r5, pc}
   b6c52:	fa21 f004 	lsr.w	r0, r1, r4
   b6c56:	4629      	mov	r1, r5
   b6c58:	bd30      	pop	{r4, r5, pc}
   b6c5a:	f094 0f00 	teq	r4, #0
   b6c5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6c62:	bf06      	itte	eq
   b6c64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6c68:	3401      	addeq	r4, #1
   b6c6a:	3d01      	subne	r5, #1
   b6c6c:	e74e      	b.n	b6b0c <__adddf3+0x8c>
   b6c6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6c72:	bf18      	it	ne
   b6c74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6c78:	d029      	beq.n	b6cce <__adddf3+0x24e>
   b6c7a:	ea94 0f05 	teq	r4, r5
   b6c7e:	bf08      	it	eq
   b6c80:	ea90 0f02 	teqeq	r0, r2
   b6c84:	d005      	beq.n	b6c92 <__adddf3+0x212>
   b6c86:	ea54 0c00 	orrs.w	ip, r4, r0
   b6c8a:	bf04      	itt	eq
   b6c8c:	4619      	moveq	r1, r3
   b6c8e:	4610      	moveq	r0, r2
   b6c90:	bd30      	pop	{r4, r5, pc}
   b6c92:	ea91 0f03 	teq	r1, r3
   b6c96:	bf1e      	ittt	ne
   b6c98:	2100      	movne	r1, #0
   b6c9a:	2000      	movne	r0, #0
   b6c9c:	bd30      	popne	{r4, r5, pc}
   b6c9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6ca2:	d105      	bne.n	b6cb0 <__adddf3+0x230>
   b6ca4:	0040      	lsls	r0, r0, #1
   b6ca6:	4149      	adcs	r1, r1
   b6ca8:	bf28      	it	cs
   b6caa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6cae:	bd30      	pop	{r4, r5, pc}
   b6cb0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6cb4:	bf3c      	itt	cc
   b6cb6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6cba:	bd30      	popcc	{r4, r5, pc}
   b6cbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6cc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6cc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6cc8:	f04f 0000 	mov.w	r0, #0
   b6ccc:	bd30      	pop	{r4, r5, pc}
   b6cce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6cd2:	bf1a      	itte	ne
   b6cd4:	4619      	movne	r1, r3
   b6cd6:	4610      	movne	r0, r2
   b6cd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6cdc:	bf1c      	itt	ne
   b6cde:	460b      	movne	r3, r1
   b6ce0:	4602      	movne	r2, r0
   b6ce2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6ce6:	bf06      	itte	eq
   b6ce8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6cec:	ea91 0f03 	teqeq	r1, r3
   b6cf0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6cf4:	bd30      	pop	{r4, r5, pc}
   b6cf6:	bf00      	nop

000b6cf8 <__aeabi_ui2d>:
   b6cf8:	f090 0f00 	teq	r0, #0
   b6cfc:	bf04      	itt	eq
   b6cfe:	2100      	moveq	r1, #0
   b6d00:	4770      	bxeq	lr
   b6d02:	b530      	push	{r4, r5, lr}
   b6d04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6d08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6d0c:	f04f 0500 	mov.w	r5, #0
   b6d10:	f04f 0100 	mov.w	r1, #0
   b6d14:	e750      	b.n	b6bb8 <__adddf3+0x138>
   b6d16:	bf00      	nop

000b6d18 <__aeabi_i2d>:
   b6d18:	f090 0f00 	teq	r0, #0
   b6d1c:	bf04      	itt	eq
   b6d1e:	2100      	moveq	r1, #0
   b6d20:	4770      	bxeq	lr
   b6d22:	b530      	push	{r4, r5, lr}
   b6d24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6d28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6d2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6d30:	bf48      	it	mi
   b6d32:	4240      	negmi	r0, r0
   b6d34:	f04f 0100 	mov.w	r1, #0
   b6d38:	e73e      	b.n	b6bb8 <__adddf3+0x138>
   b6d3a:	bf00      	nop

000b6d3c <__aeabi_f2d>:
   b6d3c:	0042      	lsls	r2, r0, #1
   b6d3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6d42:	ea4f 0131 	mov.w	r1, r1, rrx
   b6d46:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6d4a:	bf1f      	itttt	ne
   b6d4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6d50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6d54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6d58:	4770      	bxne	lr
   b6d5a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6d5e:	bf08      	it	eq
   b6d60:	4770      	bxeq	lr
   b6d62:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6d66:	bf04      	itt	eq
   b6d68:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6d6c:	4770      	bxeq	lr
   b6d6e:	b530      	push	{r4, r5, lr}
   b6d70:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6d74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6d78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6d7c:	e71c      	b.n	b6bb8 <__adddf3+0x138>
   b6d7e:	bf00      	nop

000b6d80 <__aeabi_ul2d>:
   b6d80:	ea50 0201 	orrs.w	r2, r0, r1
   b6d84:	bf08      	it	eq
   b6d86:	4770      	bxeq	lr
   b6d88:	b530      	push	{r4, r5, lr}
   b6d8a:	f04f 0500 	mov.w	r5, #0
   b6d8e:	e00a      	b.n	b6da6 <__aeabi_l2d+0x16>

000b6d90 <__aeabi_l2d>:
   b6d90:	ea50 0201 	orrs.w	r2, r0, r1
   b6d94:	bf08      	it	eq
   b6d96:	4770      	bxeq	lr
   b6d98:	b530      	push	{r4, r5, lr}
   b6d9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6d9e:	d502      	bpl.n	b6da6 <__aeabi_l2d+0x16>
   b6da0:	4240      	negs	r0, r0
   b6da2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6da6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6daa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6dae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6db2:	f43f aed8 	beq.w	b6b66 <__adddf3+0xe6>
   b6db6:	f04f 0203 	mov.w	r2, #3
   b6dba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6dbe:	bf18      	it	ne
   b6dc0:	3203      	addne	r2, #3
   b6dc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6dc6:	bf18      	it	ne
   b6dc8:	3203      	addne	r2, #3
   b6dca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6dce:	f1c2 0320 	rsb	r3, r2, #32
   b6dd2:	fa00 fc03 	lsl.w	ip, r0, r3
   b6dd6:	fa20 f002 	lsr.w	r0, r0, r2
   b6dda:	fa01 fe03 	lsl.w	lr, r1, r3
   b6dde:	ea40 000e 	orr.w	r0, r0, lr
   b6de2:	fa21 f102 	lsr.w	r1, r1, r2
   b6de6:	4414      	add	r4, r2
   b6de8:	e6bd      	b.n	b6b66 <__adddf3+0xe6>
   b6dea:	bf00      	nop

000b6dec <__aeabi_dmul>:
   b6dec:	b570      	push	{r4, r5, r6, lr}
   b6dee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6df2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6df6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6dfa:	bf1d      	ittte	ne
   b6dfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6e00:	ea94 0f0c 	teqne	r4, ip
   b6e04:	ea95 0f0c 	teqne	r5, ip
   b6e08:	f000 f8de 	bleq	b6fc8 <__aeabi_dmul+0x1dc>
   b6e0c:	442c      	add	r4, r5
   b6e0e:	ea81 0603 	eor.w	r6, r1, r3
   b6e12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6e16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6e1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6e1e:	bf18      	it	ne
   b6e20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6e24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6e2c:	d038      	beq.n	b6ea0 <__aeabi_dmul+0xb4>
   b6e2e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6e32:	f04f 0500 	mov.w	r5, #0
   b6e36:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6e3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6e3e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6e42:	f04f 0600 	mov.w	r6, #0
   b6e46:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6e4a:	f09c 0f00 	teq	ip, #0
   b6e4e:	bf18      	it	ne
   b6e50:	f04e 0e01 	orrne.w	lr, lr, #1
   b6e54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6e58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6e5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6e60:	d204      	bcs.n	b6e6c <__aeabi_dmul+0x80>
   b6e62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6e66:	416d      	adcs	r5, r5
   b6e68:	eb46 0606 	adc.w	r6, r6, r6
   b6e6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6e70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6e74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6e78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6e7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6e80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6e84:	bf88      	it	hi
   b6e86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e8a:	d81e      	bhi.n	b6eca <__aeabi_dmul+0xde>
   b6e8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6e90:	bf08      	it	eq
   b6e92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6e96:	f150 0000 	adcs.w	r0, r0, #0
   b6e9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6e9e:	bd70      	pop	{r4, r5, r6, pc}
   b6ea0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6ea4:	ea46 0101 	orr.w	r1, r6, r1
   b6ea8:	ea40 0002 	orr.w	r0, r0, r2
   b6eac:	ea81 0103 	eor.w	r1, r1, r3
   b6eb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6eb4:	bfc2      	ittt	gt
   b6eb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6eba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6ebe:	bd70      	popgt	{r4, r5, r6, pc}
   b6ec0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6ec4:	f04f 0e00 	mov.w	lr, #0
   b6ec8:	3c01      	subs	r4, #1
   b6eca:	f300 80ab 	bgt.w	b7024 <__aeabi_dmul+0x238>
   b6ece:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6ed2:	bfde      	ittt	le
   b6ed4:	2000      	movle	r0, #0
   b6ed6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6eda:	bd70      	pople	{r4, r5, r6, pc}
   b6edc:	f1c4 0400 	rsb	r4, r4, #0
   b6ee0:	3c20      	subs	r4, #32
   b6ee2:	da35      	bge.n	b6f50 <__aeabi_dmul+0x164>
   b6ee4:	340c      	adds	r4, #12
   b6ee6:	dc1b      	bgt.n	b6f20 <__aeabi_dmul+0x134>
   b6ee8:	f104 0414 	add.w	r4, r4, #20
   b6eec:	f1c4 0520 	rsb	r5, r4, #32
   b6ef0:	fa00 f305 	lsl.w	r3, r0, r5
   b6ef4:	fa20 f004 	lsr.w	r0, r0, r4
   b6ef8:	fa01 f205 	lsl.w	r2, r1, r5
   b6efc:	ea40 0002 	orr.w	r0, r0, r2
   b6f00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6f04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6f08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6f0c:	fa21 f604 	lsr.w	r6, r1, r4
   b6f10:	eb42 0106 	adc.w	r1, r2, r6
   b6f14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6f18:	bf08      	it	eq
   b6f1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f1e:	bd70      	pop	{r4, r5, r6, pc}
   b6f20:	f1c4 040c 	rsb	r4, r4, #12
   b6f24:	f1c4 0520 	rsb	r5, r4, #32
   b6f28:	fa00 f304 	lsl.w	r3, r0, r4
   b6f2c:	fa20 f005 	lsr.w	r0, r0, r5
   b6f30:	fa01 f204 	lsl.w	r2, r1, r4
   b6f34:	ea40 0002 	orr.w	r0, r0, r2
   b6f38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6f40:	f141 0100 	adc.w	r1, r1, #0
   b6f44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6f48:	bf08      	it	eq
   b6f4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f4e:	bd70      	pop	{r4, r5, r6, pc}
   b6f50:	f1c4 0520 	rsb	r5, r4, #32
   b6f54:	fa00 f205 	lsl.w	r2, r0, r5
   b6f58:	ea4e 0e02 	orr.w	lr, lr, r2
   b6f5c:	fa20 f304 	lsr.w	r3, r0, r4
   b6f60:	fa01 f205 	lsl.w	r2, r1, r5
   b6f64:	ea43 0302 	orr.w	r3, r3, r2
   b6f68:	fa21 f004 	lsr.w	r0, r1, r4
   b6f6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6f70:	fa21 f204 	lsr.w	r2, r1, r4
   b6f74:	ea20 0002 	bic.w	r0, r0, r2
   b6f78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6f7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6f80:	bf08      	it	eq
   b6f82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6f86:	bd70      	pop	{r4, r5, r6, pc}
   b6f88:	f094 0f00 	teq	r4, #0
   b6f8c:	d10f      	bne.n	b6fae <__aeabi_dmul+0x1c2>
   b6f8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6f92:	0040      	lsls	r0, r0, #1
   b6f94:	eb41 0101 	adc.w	r1, r1, r1
   b6f98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6f9c:	bf08      	it	eq
   b6f9e:	3c01      	subeq	r4, #1
   b6fa0:	d0f7      	beq.n	b6f92 <__aeabi_dmul+0x1a6>
   b6fa2:	ea41 0106 	orr.w	r1, r1, r6
   b6fa6:	f095 0f00 	teq	r5, #0
   b6faa:	bf18      	it	ne
   b6fac:	4770      	bxne	lr
   b6fae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6fb2:	0052      	lsls	r2, r2, #1
   b6fb4:	eb43 0303 	adc.w	r3, r3, r3
   b6fb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6fbc:	bf08      	it	eq
   b6fbe:	3d01      	subeq	r5, #1
   b6fc0:	d0f7      	beq.n	b6fb2 <__aeabi_dmul+0x1c6>
   b6fc2:	ea43 0306 	orr.w	r3, r3, r6
   b6fc6:	4770      	bx	lr
   b6fc8:	ea94 0f0c 	teq	r4, ip
   b6fcc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6fd0:	bf18      	it	ne
   b6fd2:	ea95 0f0c 	teqne	r5, ip
   b6fd6:	d00c      	beq.n	b6ff2 <__aeabi_dmul+0x206>
   b6fd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6fdc:	bf18      	it	ne
   b6fde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6fe2:	d1d1      	bne.n	b6f88 <__aeabi_dmul+0x19c>
   b6fe4:	ea81 0103 	eor.w	r1, r1, r3
   b6fe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6fec:	f04f 0000 	mov.w	r0, #0
   b6ff0:	bd70      	pop	{r4, r5, r6, pc}
   b6ff2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6ff6:	bf06      	itte	eq
   b6ff8:	4610      	moveq	r0, r2
   b6ffa:	4619      	moveq	r1, r3
   b6ffc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7000:	d019      	beq.n	b7036 <__aeabi_dmul+0x24a>
   b7002:	ea94 0f0c 	teq	r4, ip
   b7006:	d102      	bne.n	b700e <__aeabi_dmul+0x222>
   b7008:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b700c:	d113      	bne.n	b7036 <__aeabi_dmul+0x24a>
   b700e:	ea95 0f0c 	teq	r5, ip
   b7012:	d105      	bne.n	b7020 <__aeabi_dmul+0x234>
   b7014:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7018:	bf1c      	itt	ne
   b701a:	4610      	movne	r0, r2
   b701c:	4619      	movne	r1, r3
   b701e:	d10a      	bne.n	b7036 <__aeabi_dmul+0x24a>
   b7020:	ea81 0103 	eor.w	r1, r1, r3
   b7024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7028:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b702c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7030:	f04f 0000 	mov.w	r0, #0
   b7034:	bd70      	pop	{r4, r5, r6, pc}
   b7036:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b703a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b703e:	bd70      	pop	{r4, r5, r6, pc}

000b7040 <__aeabi_ddiv>:
   b7040:	b570      	push	{r4, r5, r6, lr}
   b7042:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7046:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b704a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b704e:	bf1d      	ittte	ne
   b7050:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7054:	ea94 0f0c 	teqne	r4, ip
   b7058:	ea95 0f0c 	teqne	r5, ip
   b705c:	f000 f8a7 	bleq	b71ae <__aeabi_ddiv+0x16e>
   b7060:	eba4 0405 	sub.w	r4, r4, r5
   b7064:	ea81 0e03 	eor.w	lr, r1, r3
   b7068:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b706c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7070:	f000 8088 	beq.w	b7184 <__aeabi_ddiv+0x144>
   b7074:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7078:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b707c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7080:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7084:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7088:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b708c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7090:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7094:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7098:	429d      	cmp	r5, r3
   b709a:	bf08      	it	eq
   b709c:	4296      	cmpeq	r6, r2
   b709e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b70a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b70a6:	d202      	bcs.n	b70ae <__aeabi_ddiv+0x6e>
   b70a8:	085b      	lsrs	r3, r3, #1
   b70aa:	ea4f 0232 	mov.w	r2, r2, rrx
   b70ae:	1ab6      	subs	r6, r6, r2
   b70b0:	eb65 0503 	sbc.w	r5, r5, r3
   b70b4:	085b      	lsrs	r3, r3, #1
   b70b6:	ea4f 0232 	mov.w	r2, r2, rrx
   b70ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b70be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b70c2:	ebb6 0e02 	subs.w	lr, r6, r2
   b70c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b70ca:	bf22      	ittt	cs
   b70cc:	1ab6      	subcs	r6, r6, r2
   b70ce:	4675      	movcs	r5, lr
   b70d0:	ea40 000c 	orrcs.w	r0, r0, ip
   b70d4:	085b      	lsrs	r3, r3, #1
   b70d6:	ea4f 0232 	mov.w	r2, r2, rrx
   b70da:	ebb6 0e02 	subs.w	lr, r6, r2
   b70de:	eb75 0e03 	sbcs.w	lr, r5, r3
   b70e2:	bf22      	ittt	cs
   b70e4:	1ab6      	subcs	r6, r6, r2
   b70e6:	4675      	movcs	r5, lr
   b70e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b70ec:	085b      	lsrs	r3, r3, #1
   b70ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b70f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b70f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b70fa:	bf22      	ittt	cs
   b70fc:	1ab6      	subcs	r6, r6, r2
   b70fe:	4675      	movcs	r5, lr
   b7100:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7104:	085b      	lsrs	r3, r3, #1
   b7106:	ea4f 0232 	mov.w	r2, r2, rrx
   b710a:	ebb6 0e02 	subs.w	lr, r6, r2
   b710e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7112:	bf22      	ittt	cs
   b7114:	1ab6      	subcs	r6, r6, r2
   b7116:	4675      	movcs	r5, lr
   b7118:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b711c:	ea55 0e06 	orrs.w	lr, r5, r6
   b7120:	d018      	beq.n	b7154 <__aeabi_ddiv+0x114>
   b7122:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7126:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b712a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b712e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7132:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7136:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b713a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b713e:	d1c0      	bne.n	b70c2 <__aeabi_ddiv+0x82>
   b7140:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7144:	d10b      	bne.n	b715e <__aeabi_ddiv+0x11e>
   b7146:	ea41 0100 	orr.w	r1, r1, r0
   b714a:	f04f 0000 	mov.w	r0, #0
   b714e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7152:	e7b6      	b.n	b70c2 <__aeabi_ddiv+0x82>
   b7154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7158:	bf04      	itt	eq
   b715a:	4301      	orreq	r1, r0
   b715c:	2000      	moveq	r0, #0
   b715e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7162:	bf88      	it	hi
   b7164:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7168:	f63f aeaf 	bhi.w	b6eca <__aeabi_dmul+0xde>
   b716c:	ebb5 0c03 	subs.w	ip, r5, r3
   b7170:	bf04      	itt	eq
   b7172:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7176:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b717a:	f150 0000 	adcs.w	r0, r0, #0
   b717e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7182:	bd70      	pop	{r4, r5, r6, pc}
   b7184:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7188:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b718c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7190:	bfc2      	ittt	gt
   b7192:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7196:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b719a:	bd70      	popgt	{r4, r5, r6, pc}
   b719c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b71a0:	f04f 0e00 	mov.w	lr, #0
   b71a4:	3c01      	subs	r4, #1
   b71a6:	e690      	b.n	b6eca <__aeabi_dmul+0xde>
   b71a8:	ea45 0e06 	orr.w	lr, r5, r6
   b71ac:	e68d      	b.n	b6eca <__aeabi_dmul+0xde>
   b71ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b71b2:	ea94 0f0c 	teq	r4, ip
   b71b6:	bf08      	it	eq
   b71b8:	ea95 0f0c 	teqeq	r5, ip
   b71bc:	f43f af3b 	beq.w	b7036 <__aeabi_dmul+0x24a>
   b71c0:	ea94 0f0c 	teq	r4, ip
   b71c4:	d10a      	bne.n	b71dc <__aeabi_ddiv+0x19c>
   b71c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b71ca:	f47f af34 	bne.w	b7036 <__aeabi_dmul+0x24a>
   b71ce:	ea95 0f0c 	teq	r5, ip
   b71d2:	f47f af25 	bne.w	b7020 <__aeabi_dmul+0x234>
   b71d6:	4610      	mov	r0, r2
   b71d8:	4619      	mov	r1, r3
   b71da:	e72c      	b.n	b7036 <__aeabi_dmul+0x24a>
   b71dc:	ea95 0f0c 	teq	r5, ip
   b71e0:	d106      	bne.n	b71f0 <__aeabi_ddiv+0x1b0>
   b71e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b71e6:	f43f aefd 	beq.w	b6fe4 <__aeabi_dmul+0x1f8>
   b71ea:	4610      	mov	r0, r2
   b71ec:	4619      	mov	r1, r3
   b71ee:	e722      	b.n	b7036 <__aeabi_dmul+0x24a>
   b71f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b71f4:	bf18      	it	ne
   b71f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b71fa:	f47f aec5 	bne.w	b6f88 <__aeabi_dmul+0x19c>
   b71fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7202:	f47f af0d 	bne.w	b7020 <__aeabi_dmul+0x234>
   b7206:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b720a:	f47f aeeb 	bne.w	b6fe4 <__aeabi_dmul+0x1f8>
   b720e:	e712      	b.n	b7036 <__aeabi_dmul+0x24a>

000b7210 <__gedf2>:
   b7210:	f04f 3cff 	mov.w	ip, #4294967295
   b7214:	e006      	b.n	b7224 <__cmpdf2+0x4>
   b7216:	bf00      	nop

000b7218 <__ledf2>:
   b7218:	f04f 0c01 	mov.w	ip, #1
   b721c:	e002      	b.n	b7224 <__cmpdf2+0x4>
   b721e:	bf00      	nop

000b7220 <__cmpdf2>:
   b7220:	f04f 0c01 	mov.w	ip, #1
   b7224:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7228:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b722c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7230:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7234:	bf18      	it	ne
   b7236:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b723a:	d01b      	beq.n	b7274 <__cmpdf2+0x54>
   b723c:	b001      	add	sp, #4
   b723e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7242:	bf0c      	ite	eq
   b7244:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7248:	ea91 0f03 	teqne	r1, r3
   b724c:	bf02      	ittt	eq
   b724e:	ea90 0f02 	teqeq	r0, r2
   b7252:	2000      	moveq	r0, #0
   b7254:	4770      	bxeq	lr
   b7256:	f110 0f00 	cmn.w	r0, #0
   b725a:	ea91 0f03 	teq	r1, r3
   b725e:	bf58      	it	pl
   b7260:	4299      	cmppl	r1, r3
   b7262:	bf08      	it	eq
   b7264:	4290      	cmpeq	r0, r2
   b7266:	bf2c      	ite	cs
   b7268:	17d8      	asrcs	r0, r3, #31
   b726a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b726e:	f040 0001 	orr.w	r0, r0, #1
   b7272:	4770      	bx	lr
   b7274:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7278:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b727c:	d102      	bne.n	b7284 <__cmpdf2+0x64>
   b727e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7282:	d107      	bne.n	b7294 <__cmpdf2+0x74>
   b7284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7288:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b728c:	d1d6      	bne.n	b723c <__cmpdf2+0x1c>
   b728e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7292:	d0d3      	beq.n	b723c <__cmpdf2+0x1c>
   b7294:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7298:	4770      	bx	lr
   b729a:	bf00      	nop

000b729c <__aeabi_cdrcmple>:
   b729c:	4684      	mov	ip, r0
   b729e:	4610      	mov	r0, r2
   b72a0:	4662      	mov	r2, ip
   b72a2:	468c      	mov	ip, r1
   b72a4:	4619      	mov	r1, r3
   b72a6:	4663      	mov	r3, ip
   b72a8:	e000      	b.n	b72ac <__aeabi_cdcmpeq>
   b72aa:	bf00      	nop

000b72ac <__aeabi_cdcmpeq>:
   b72ac:	b501      	push	{r0, lr}
   b72ae:	f7ff ffb7 	bl	b7220 <__cmpdf2>
   b72b2:	2800      	cmp	r0, #0
   b72b4:	bf48      	it	mi
   b72b6:	f110 0f00 	cmnmi.w	r0, #0
   b72ba:	bd01      	pop	{r0, pc}

000b72bc <__aeabi_dcmpeq>:
   b72bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b72c0:	f7ff fff4 	bl	b72ac <__aeabi_cdcmpeq>
   b72c4:	bf0c      	ite	eq
   b72c6:	2001      	moveq	r0, #1
   b72c8:	2000      	movne	r0, #0
   b72ca:	f85d fb08 	ldr.w	pc, [sp], #8
   b72ce:	bf00      	nop

000b72d0 <__aeabi_dcmplt>:
   b72d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b72d4:	f7ff ffea 	bl	b72ac <__aeabi_cdcmpeq>
   b72d8:	bf34      	ite	cc
   b72da:	2001      	movcc	r0, #1
   b72dc:	2000      	movcs	r0, #0
   b72de:	f85d fb08 	ldr.w	pc, [sp], #8
   b72e2:	bf00      	nop

000b72e4 <__aeabi_dcmple>:
   b72e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b72e8:	f7ff ffe0 	bl	b72ac <__aeabi_cdcmpeq>
   b72ec:	bf94      	ite	ls
   b72ee:	2001      	movls	r0, #1
   b72f0:	2000      	movhi	r0, #0
   b72f2:	f85d fb08 	ldr.w	pc, [sp], #8
   b72f6:	bf00      	nop

000b72f8 <__aeabi_dcmpge>:
   b72f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b72fc:	f7ff ffce 	bl	b729c <__aeabi_cdrcmple>
   b7300:	bf94      	ite	ls
   b7302:	2001      	movls	r0, #1
   b7304:	2000      	movhi	r0, #0
   b7306:	f85d fb08 	ldr.w	pc, [sp], #8
   b730a:	bf00      	nop

000b730c <__aeabi_dcmpgt>:
   b730c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7310:	f7ff ffc4 	bl	b729c <__aeabi_cdrcmple>
   b7314:	bf34      	ite	cc
   b7316:	2001      	movcc	r0, #1
   b7318:	2000      	movcs	r0, #0
   b731a:	f85d fb08 	ldr.w	pc, [sp], #8
   b731e:	bf00      	nop

000b7320 <__aeabi_dcmpun>:
   b7320:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7324:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7328:	d102      	bne.n	b7330 <__aeabi_dcmpun+0x10>
   b732a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b732e:	d10a      	bne.n	b7346 <__aeabi_dcmpun+0x26>
   b7330:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7334:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7338:	d102      	bne.n	b7340 <__aeabi_dcmpun+0x20>
   b733a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b733e:	d102      	bne.n	b7346 <__aeabi_dcmpun+0x26>
   b7340:	f04f 0000 	mov.w	r0, #0
   b7344:	4770      	bx	lr
   b7346:	f04f 0001 	mov.w	r0, #1
   b734a:	4770      	bx	lr

000b734c <__aeabi_d2iz>:
   b734c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7350:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7354:	d215      	bcs.n	b7382 <__aeabi_d2iz+0x36>
   b7356:	d511      	bpl.n	b737c <__aeabi_d2iz+0x30>
   b7358:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b735c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7360:	d912      	bls.n	b7388 <__aeabi_d2iz+0x3c>
   b7362:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b736a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b736e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7372:	fa23 f002 	lsr.w	r0, r3, r2
   b7376:	bf18      	it	ne
   b7378:	4240      	negne	r0, r0
   b737a:	4770      	bx	lr
   b737c:	f04f 0000 	mov.w	r0, #0
   b7380:	4770      	bx	lr
   b7382:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7386:	d105      	bne.n	b7394 <__aeabi_d2iz+0x48>
   b7388:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b738c:	bf08      	it	eq
   b738e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b7392:	4770      	bx	lr
   b7394:	f04f 0000 	mov.w	r0, #0
   b7398:	4770      	bx	lr
   b739a:	bf00      	nop

000b739c <__aeabi_d2uiz>:
   b739c:	004a      	lsls	r2, r1, #1
   b739e:	d211      	bcs.n	b73c4 <__aeabi_d2uiz+0x28>
   b73a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b73a4:	d211      	bcs.n	b73ca <__aeabi_d2uiz+0x2e>
   b73a6:	d50d      	bpl.n	b73c4 <__aeabi_d2uiz+0x28>
   b73a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b73ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b73b0:	d40e      	bmi.n	b73d0 <__aeabi_d2uiz+0x34>
   b73b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b73b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b73ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b73be:	fa23 f002 	lsr.w	r0, r3, r2
   b73c2:	4770      	bx	lr
   b73c4:	f04f 0000 	mov.w	r0, #0
   b73c8:	4770      	bx	lr
   b73ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b73ce:	d102      	bne.n	b73d6 <__aeabi_d2uiz+0x3a>
   b73d0:	f04f 30ff 	mov.w	r0, #4294967295
   b73d4:	4770      	bx	lr
   b73d6:	f04f 0000 	mov.w	r0, #0
   b73da:	4770      	bx	lr

000b73dc <__aeabi_d2f>:
   b73dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b73e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b73e4:	bf24      	itt	cs
   b73e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b73ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b73ee:	d90d      	bls.n	b740c <__aeabi_d2f+0x30>
   b73f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b73f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b73f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b73fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7400:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7404:	bf08      	it	eq
   b7406:	f020 0001 	biceq.w	r0, r0, #1
   b740a:	4770      	bx	lr
   b740c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7410:	d121      	bne.n	b7456 <__aeabi_d2f+0x7a>
   b7412:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7416:	bfbc      	itt	lt
   b7418:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b741c:	4770      	bxlt	lr
   b741e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7422:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7426:	f1c2 0218 	rsb	r2, r2, #24
   b742a:	f1c2 0c20 	rsb	ip, r2, #32
   b742e:	fa10 f30c 	lsls.w	r3, r0, ip
   b7432:	fa20 f002 	lsr.w	r0, r0, r2
   b7436:	bf18      	it	ne
   b7438:	f040 0001 	orrne.w	r0, r0, #1
   b743c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7440:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7444:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7448:	ea40 000c 	orr.w	r0, r0, ip
   b744c:	fa23 f302 	lsr.w	r3, r3, r2
   b7450:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7454:	e7cc      	b.n	b73f0 <__aeabi_d2f+0x14>
   b7456:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b745a:	d107      	bne.n	b746c <__aeabi_d2f+0x90>
   b745c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7460:	bf1e      	ittt	ne
   b7462:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7466:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b746a:	4770      	bxne	lr
   b746c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7470:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7474:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7478:	4770      	bx	lr
   b747a:	bf00      	nop

000b747c <__aeabi_frsub>:
   b747c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b7480:	e002      	b.n	b7488 <__addsf3>
   b7482:	bf00      	nop

000b7484 <__aeabi_fsub>:
   b7484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7488 <__addsf3>:
   b7488:	0042      	lsls	r2, r0, #1
   b748a:	bf1f      	itttt	ne
   b748c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b7490:	ea92 0f03 	teqne	r2, r3
   b7494:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b7498:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b749c:	d06a      	beq.n	b7574 <__addsf3+0xec>
   b749e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b74a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b74a6:	bfc1      	itttt	gt
   b74a8:	18d2      	addgt	r2, r2, r3
   b74aa:	4041      	eorgt	r1, r0
   b74ac:	4048      	eorgt	r0, r1
   b74ae:	4041      	eorgt	r1, r0
   b74b0:	bfb8      	it	lt
   b74b2:	425b      	neglt	r3, r3
   b74b4:	2b19      	cmp	r3, #25
   b74b6:	bf88      	it	hi
   b74b8:	4770      	bxhi	lr
   b74ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b74be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b74c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b74c6:	bf18      	it	ne
   b74c8:	4240      	negne	r0, r0
   b74ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b74ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b74d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b74d6:	bf18      	it	ne
   b74d8:	4249      	negne	r1, r1
   b74da:	ea92 0f03 	teq	r2, r3
   b74de:	d03f      	beq.n	b7560 <__addsf3+0xd8>
   b74e0:	f1a2 0201 	sub.w	r2, r2, #1
   b74e4:	fa41 fc03 	asr.w	ip, r1, r3
   b74e8:	eb10 000c 	adds.w	r0, r0, ip
   b74ec:	f1c3 0320 	rsb	r3, r3, #32
   b74f0:	fa01 f103 	lsl.w	r1, r1, r3
   b74f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b74f8:	d502      	bpl.n	b7500 <__addsf3+0x78>
   b74fa:	4249      	negs	r1, r1
   b74fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b7500:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b7504:	d313      	bcc.n	b752e <__addsf3+0xa6>
   b7506:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b750a:	d306      	bcc.n	b751a <__addsf3+0x92>
   b750c:	0840      	lsrs	r0, r0, #1
   b750e:	ea4f 0131 	mov.w	r1, r1, rrx
   b7512:	f102 0201 	add.w	r2, r2, #1
   b7516:	2afe      	cmp	r2, #254	; 0xfe
   b7518:	d251      	bcs.n	b75be <__addsf3+0x136>
   b751a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b751e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b7522:	bf08      	it	eq
   b7524:	f020 0001 	biceq.w	r0, r0, #1
   b7528:	ea40 0003 	orr.w	r0, r0, r3
   b752c:	4770      	bx	lr
   b752e:	0049      	lsls	r1, r1, #1
   b7530:	eb40 0000 	adc.w	r0, r0, r0
   b7534:	3a01      	subs	r2, #1
   b7536:	bf28      	it	cs
   b7538:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b753c:	d2ed      	bcs.n	b751a <__addsf3+0x92>
   b753e:	fab0 fc80 	clz	ip, r0
   b7542:	f1ac 0c08 	sub.w	ip, ip, #8
   b7546:	ebb2 020c 	subs.w	r2, r2, ip
   b754a:	fa00 f00c 	lsl.w	r0, r0, ip
   b754e:	bfaa      	itet	ge
   b7550:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7554:	4252      	neglt	r2, r2
   b7556:	4318      	orrge	r0, r3
   b7558:	bfbc      	itt	lt
   b755a:	40d0      	lsrlt	r0, r2
   b755c:	4318      	orrlt	r0, r3
   b755e:	4770      	bx	lr
   b7560:	f092 0f00 	teq	r2, #0
   b7564:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7568:	bf06      	itte	eq
   b756a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b756e:	3201      	addeq	r2, #1
   b7570:	3b01      	subne	r3, #1
   b7572:	e7b5      	b.n	b74e0 <__addsf3+0x58>
   b7574:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7578:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b757c:	bf18      	it	ne
   b757e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7582:	d021      	beq.n	b75c8 <__addsf3+0x140>
   b7584:	ea92 0f03 	teq	r2, r3
   b7588:	d004      	beq.n	b7594 <__addsf3+0x10c>
   b758a:	f092 0f00 	teq	r2, #0
   b758e:	bf08      	it	eq
   b7590:	4608      	moveq	r0, r1
   b7592:	4770      	bx	lr
   b7594:	ea90 0f01 	teq	r0, r1
   b7598:	bf1c      	itt	ne
   b759a:	2000      	movne	r0, #0
   b759c:	4770      	bxne	lr
   b759e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b75a2:	d104      	bne.n	b75ae <__addsf3+0x126>
   b75a4:	0040      	lsls	r0, r0, #1
   b75a6:	bf28      	it	cs
   b75a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b75ac:	4770      	bx	lr
   b75ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b75b2:	bf3c      	itt	cc
   b75b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b75b8:	4770      	bxcc	lr
   b75ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b75be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b75c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b75c6:	4770      	bx	lr
   b75c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b75cc:	bf16      	itet	ne
   b75ce:	4608      	movne	r0, r1
   b75d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b75d4:	4601      	movne	r1, r0
   b75d6:	0242      	lsls	r2, r0, #9
   b75d8:	bf06      	itte	eq
   b75da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b75de:	ea90 0f01 	teqeq	r0, r1
   b75e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b75e6:	4770      	bx	lr

000b75e8 <__aeabi_ui2f>:
   b75e8:	f04f 0300 	mov.w	r3, #0
   b75ec:	e004      	b.n	b75f8 <__aeabi_i2f+0x8>
   b75ee:	bf00      	nop

000b75f0 <__aeabi_i2f>:
   b75f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b75f4:	bf48      	it	mi
   b75f6:	4240      	negmi	r0, r0
   b75f8:	ea5f 0c00 	movs.w	ip, r0
   b75fc:	bf08      	it	eq
   b75fe:	4770      	bxeq	lr
   b7600:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7604:	4601      	mov	r1, r0
   b7606:	f04f 0000 	mov.w	r0, #0
   b760a:	e01c      	b.n	b7646 <__aeabi_l2f+0x2a>

000b760c <__aeabi_ul2f>:
   b760c:	ea50 0201 	orrs.w	r2, r0, r1
   b7610:	bf08      	it	eq
   b7612:	4770      	bxeq	lr
   b7614:	f04f 0300 	mov.w	r3, #0
   b7618:	e00a      	b.n	b7630 <__aeabi_l2f+0x14>
   b761a:	bf00      	nop

000b761c <__aeabi_l2f>:
   b761c:	ea50 0201 	orrs.w	r2, r0, r1
   b7620:	bf08      	it	eq
   b7622:	4770      	bxeq	lr
   b7624:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7628:	d502      	bpl.n	b7630 <__aeabi_l2f+0x14>
   b762a:	4240      	negs	r0, r0
   b762c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7630:	ea5f 0c01 	movs.w	ip, r1
   b7634:	bf02      	ittt	eq
   b7636:	4684      	moveq	ip, r0
   b7638:	4601      	moveq	r1, r0
   b763a:	2000      	moveq	r0, #0
   b763c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b7640:	bf08      	it	eq
   b7642:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7646:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b764a:	fabc f28c 	clz	r2, ip
   b764e:	3a08      	subs	r2, #8
   b7650:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7654:	db10      	blt.n	b7678 <__aeabi_l2f+0x5c>
   b7656:	fa01 fc02 	lsl.w	ip, r1, r2
   b765a:	4463      	add	r3, ip
   b765c:	fa00 fc02 	lsl.w	ip, r0, r2
   b7660:	f1c2 0220 	rsb	r2, r2, #32
   b7664:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7668:	fa20 f202 	lsr.w	r2, r0, r2
   b766c:	eb43 0002 	adc.w	r0, r3, r2
   b7670:	bf08      	it	eq
   b7672:	f020 0001 	biceq.w	r0, r0, #1
   b7676:	4770      	bx	lr
   b7678:	f102 0220 	add.w	r2, r2, #32
   b767c:	fa01 fc02 	lsl.w	ip, r1, r2
   b7680:	f1c2 0220 	rsb	r2, r2, #32
   b7684:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7688:	fa21 f202 	lsr.w	r2, r1, r2
   b768c:	eb43 0002 	adc.w	r0, r3, r2
   b7690:	bf08      	it	eq
   b7692:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7696:	4770      	bx	lr

000b7698 <__aeabi_ldivmod>:
   b7698:	b97b      	cbnz	r3, b76ba <__aeabi_ldivmod+0x22>
   b769a:	b972      	cbnz	r2, b76ba <__aeabi_ldivmod+0x22>
   b769c:	2900      	cmp	r1, #0
   b769e:	bfbe      	ittt	lt
   b76a0:	2000      	movlt	r0, #0
   b76a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b76a6:	e006      	blt.n	b76b6 <__aeabi_ldivmod+0x1e>
   b76a8:	bf08      	it	eq
   b76aa:	2800      	cmpeq	r0, #0
   b76ac:	bf1c      	itt	ne
   b76ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b76b2:	f04f 30ff 	movne.w	r0, #4294967295
   b76b6:	f000 b9a7 	b.w	b7a08 <__aeabi_idiv0>
   b76ba:	f1ad 0c08 	sub.w	ip, sp, #8
   b76be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b76c2:	2900      	cmp	r1, #0
   b76c4:	db09      	blt.n	b76da <__aeabi_ldivmod+0x42>
   b76c6:	2b00      	cmp	r3, #0
   b76c8:	db1a      	blt.n	b7700 <__aeabi_ldivmod+0x68>
   b76ca:	f000 f835 	bl	b7738 <__udivmoddi4>
   b76ce:	f8dd e004 	ldr.w	lr, [sp, #4]
   b76d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b76d6:	b004      	add	sp, #16
   b76d8:	4770      	bx	lr
   b76da:	4240      	negs	r0, r0
   b76dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b76e0:	2b00      	cmp	r3, #0
   b76e2:	db1b      	blt.n	b771c <__aeabi_ldivmod+0x84>
   b76e4:	f000 f828 	bl	b7738 <__udivmoddi4>
   b76e8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b76ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b76f0:	b004      	add	sp, #16
   b76f2:	4240      	negs	r0, r0
   b76f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b76f8:	4252      	negs	r2, r2
   b76fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b76fe:	4770      	bx	lr
   b7700:	4252      	negs	r2, r2
   b7702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7706:	f000 f817 	bl	b7738 <__udivmoddi4>
   b770a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b770e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7712:	b004      	add	sp, #16
   b7714:	4240      	negs	r0, r0
   b7716:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b771a:	4770      	bx	lr
   b771c:	4252      	negs	r2, r2
   b771e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7722:	f000 f809 	bl	b7738 <__udivmoddi4>
   b7726:	f8dd e004 	ldr.w	lr, [sp, #4]
   b772a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b772e:	b004      	add	sp, #16
   b7730:	4252      	negs	r2, r2
   b7732:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7736:	4770      	bx	lr

000b7738 <__udivmoddi4>:
   b7738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b773c:	9d08      	ldr	r5, [sp, #32]
   b773e:	4604      	mov	r4, r0
   b7740:	468e      	mov	lr, r1
   b7742:	2b00      	cmp	r3, #0
   b7744:	d14d      	bne.n	b77e2 <__udivmoddi4+0xaa>
   b7746:	428a      	cmp	r2, r1
   b7748:	4694      	mov	ip, r2
   b774a:	d969      	bls.n	b7820 <__udivmoddi4+0xe8>
   b774c:	fab2 f282 	clz	r2, r2
   b7750:	b152      	cbz	r2, b7768 <__udivmoddi4+0x30>
   b7752:	fa01 f302 	lsl.w	r3, r1, r2
   b7756:	f1c2 0120 	rsb	r1, r2, #32
   b775a:	fa20 f101 	lsr.w	r1, r0, r1
   b775e:	fa0c fc02 	lsl.w	ip, ip, r2
   b7762:	ea41 0e03 	orr.w	lr, r1, r3
   b7766:	4094      	lsls	r4, r2
   b7768:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b776c:	0c21      	lsrs	r1, r4, #16
   b776e:	fbbe f6f8 	udiv	r6, lr, r8
   b7772:	fa1f f78c 	uxth.w	r7, ip
   b7776:	fb08 e316 	mls	r3, r8, r6, lr
   b777a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b777e:	fb06 f107 	mul.w	r1, r6, r7
   b7782:	4299      	cmp	r1, r3
   b7784:	d90a      	bls.n	b779c <__udivmoddi4+0x64>
   b7786:	eb1c 0303 	adds.w	r3, ip, r3
   b778a:	f106 30ff 	add.w	r0, r6, #4294967295
   b778e:	f080 811f 	bcs.w	b79d0 <__udivmoddi4+0x298>
   b7792:	4299      	cmp	r1, r3
   b7794:	f240 811c 	bls.w	b79d0 <__udivmoddi4+0x298>
   b7798:	3e02      	subs	r6, #2
   b779a:	4463      	add	r3, ip
   b779c:	1a5b      	subs	r3, r3, r1
   b779e:	b2a4      	uxth	r4, r4
   b77a0:	fbb3 f0f8 	udiv	r0, r3, r8
   b77a4:	fb08 3310 	mls	r3, r8, r0, r3
   b77a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b77ac:	fb00 f707 	mul.w	r7, r0, r7
   b77b0:	42a7      	cmp	r7, r4
   b77b2:	d90a      	bls.n	b77ca <__udivmoddi4+0x92>
   b77b4:	eb1c 0404 	adds.w	r4, ip, r4
   b77b8:	f100 33ff 	add.w	r3, r0, #4294967295
   b77bc:	f080 810a 	bcs.w	b79d4 <__udivmoddi4+0x29c>
   b77c0:	42a7      	cmp	r7, r4
   b77c2:	f240 8107 	bls.w	b79d4 <__udivmoddi4+0x29c>
   b77c6:	4464      	add	r4, ip
   b77c8:	3802      	subs	r0, #2
   b77ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b77ce:	1be4      	subs	r4, r4, r7
   b77d0:	2600      	movs	r6, #0
   b77d2:	b11d      	cbz	r5, b77dc <__udivmoddi4+0xa4>
   b77d4:	40d4      	lsrs	r4, r2
   b77d6:	2300      	movs	r3, #0
   b77d8:	e9c5 4300 	strd	r4, r3, [r5]
   b77dc:	4631      	mov	r1, r6
   b77de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b77e2:	428b      	cmp	r3, r1
   b77e4:	d909      	bls.n	b77fa <__udivmoddi4+0xc2>
   b77e6:	2d00      	cmp	r5, #0
   b77e8:	f000 80ef 	beq.w	b79ca <__udivmoddi4+0x292>
   b77ec:	2600      	movs	r6, #0
   b77ee:	e9c5 0100 	strd	r0, r1, [r5]
   b77f2:	4630      	mov	r0, r6
   b77f4:	4631      	mov	r1, r6
   b77f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b77fa:	fab3 f683 	clz	r6, r3
   b77fe:	2e00      	cmp	r6, #0
   b7800:	d14a      	bne.n	b7898 <__udivmoddi4+0x160>
   b7802:	428b      	cmp	r3, r1
   b7804:	d302      	bcc.n	b780c <__udivmoddi4+0xd4>
   b7806:	4282      	cmp	r2, r0
   b7808:	f200 80f9 	bhi.w	b79fe <__udivmoddi4+0x2c6>
   b780c:	1a84      	subs	r4, r0, r2
   b780e:	eb61 0303 	sbc.w	r3, r1, r3
   b7812:	2001      	movs	r0, #1
   b7814:	469e      	mov	lr, r3
   b7816:	2d00      	cmp	r5, #0
   b7818:	d0e0      	beq.n	b77dc <__udivmoddi4+0xa4>
   b781a:	e9c5 4e00 	strd	r4, lr, [r5]
   b781e:	e7dd      	b.n	b77dc <__udivmoddi4+0xa4>
   b7820:	b902      	cbnz	r2, b7824 <__udivmoddi4+0xec>
   b7822:	deff      	udf	#255	; 0xff
   b7824:	fab2 f282 	clz	r2, r2
   b7828:	2a00      	cmp	r2, #0
   b782a:	f040 8092 	bne.w	b7952 <__udivmoddi4+0x21a>
   b782e:	eba1 010c 	sub.w	r1, r1, ip
   b7832:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7836:	fa1f fe8c 	uxth.w	lr, ip
   b783a:	2601      	movs	r6, #1
   b783c:	0c20      	lsrs	r0, r4, #16
   b783e:	fbb1 f3f7 	udiv	r3, r1, r7
   b7842:	fb07 1113 	mls	r1, r7, r3, r1
   b7846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b784a:	fb0e f003 	mul.w	r0, lr, r3
   b784e:	4288      	cmp	r0, r1
   b7850:	d908      	bls.n	b7864 <__udivmoddi4+0x12c>
   b7852:	eb1c 0101 	adds.w	r1, ip, r1
   b7856:	f103 38ff 	add.w	r8, r3, #4294967295
   b785a:	d202      	bcs.n	b7862 <__udivmoddi4+0x12a>
   b785c:	4288      	cmp	r0, r1
   b785e:	f200 80cb 	bhi.w	b79f8 <__udivmoddi4+0x2c0>
   b7862:	4643      	mov	r3, r8
   b7864:	1a09      	subs	r1, r1, r0
   b7866:	b2a4      	uxth	r4, r4
   b7868:	fbb1 f0f7 	udiv	r0, r1, r7
   b786c:	fb07 1110 	mls	r1, r7, r0, r1
   b7870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7874:	fb0e fe00 	mul.w	lr, lr, r0
   b7878:	45a6      	cmp	lr, r4
   b787a:	d908      	bls.n	b788e <__udivmoddi4+0x156>
   b787c:	eb1c 0404 	adds.w	r4, ip, r4
   b7880:	f100 31ff 	add.w	r1, r0, #4294967295
   b7884:	d202      	bcs.n	b788c <__udivmoddi4+0x154>
   b7886:	45a6      	cmp	lr, r4
   b7888:	f200 80bb 	bhi.w	b7a02 <__udivmoddi4+0x2ca>
   b788c:	4608      	mov	r0, r1
   b788e:	eba4 040e 	sub.w	r4, r4, lr
   b7892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7896:	e79c      	b.n	b77d2 <__udivmoddi4+0x9a>
   b7898:	f1c6 0720 	rsb	r7, r6, #32
   b789c:	40b3      	lsls	r3, r6
   b789e:	fa22 fc07 	lsr.w	ip, r2, r7
   b78a2:	ea4c 0c03 	orr.w	ip, ip, r3
   b78a6:	fa20 f407 	lsr.w	r4, r0, r7
   b78aa:	fa01 f306 	lsl.w	r3, r1, r6
   b78ae:	431c      	orrs	r4, r3
   b78b0:	40f9      	lsrs	r1, r7
   b78b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b78b6:	fa00 f306 	lsl.w	r3, r0, r6
   b78ba:	fbb1 f8f9 	udiv	r8, r1, r9
   b78be:	0c20      	lsrs	r0, r4, #16
   b78c0:	fa1f fe8c 	uxth.w	lr, ip
   b78c4:	fb09 1118 	mls	r1, r9, r8, r1
   b78c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b78cc:	fb08 f00e 	mul.w	r0, r8, lr
   b78d0:	4288      	cmp	r0, r1
   b78d2:	fa02 f206 	lsl.w	r2, r2, r6
   b78d6:	d90b      	bls.n	b78f0 <__udivmoddi4+0x1b8>
   b78d8:	eb1c 0101 	adds.w	r1, ip, r1
   b78dc:	f108 3aff 	add.w	sl, r8, #4294967295
   b78e0:	f080 8088 	bcs.w	b79f4 <__udivmoddi4+0x2bc>
   b78e4:	4288      	cmp	r0, r1
   b78e6:	f240 8085 	bls.w	b79f4 <__udivmoddi4+0x2bc>
   b78ea:	f1a8 0802 	sub.w	r8, r8, #2
   b78ee:	4461      	add	r1, ip
   b78f0:	1a09      	subs	r1, r1, r0
   b78f2:	b2a4      	uxth	r4, r4
   b78f4:	fbb1 f0f9 	udiv	r0, r1, r9
   b78f8:	fb09 1110 	mls	r1, r9, r0, r1
   b78fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7900:	fb00 fe0e 	mul.w	lr, r0, lr
   b7904:	458e      	cmp	lr, r1
   b7906:	d908      	bls.n	b791a <__udivmoddi4+0x1e2>
   b7908:	eb1c 0101 	adds.w	r1, ip, r1
   b790c:	f100 34ff 	add.w	r4, r0, #4294967295
   b7910:	d26c      	bcs.n	b79ec <__udivmoddi4+0x2b4>
   b7912:	458e      	cmp	lr, r1
   b7914:	d96a      	bls.n	b79ec <__udivmoddi4+0x2b4>
   b7916:	3802      	subs	r0, #2
   b7918:	4461      	add	r1, ip
   b791a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b791e:	fba0 9402 	umull	r9, r4, r0, r2
   b7922:	eba1 010e 	sub.w	r1, r1, lr
   b7926:	42a1      	cmp	r1, r4
   b7928:	46c8      	mov	r8, r9
   b792a:	46a6      	mov	lr, r4
   b792c:	d356      	bcc.n	b79dc <__udivmoddi4+0x2a4>
   b792e:	d053      	beq.n	b79d8 <__udivmoddi4+0x2a0>
   b7930:	b15d      	cbz	r5, b794a <__udivmoddi4+0x212>
   b7932:	ebb3 0208 	subs.w	r2, r3, r8
   b7936:	eb61 010e 	sbc.w	r1, r1, lr
   b793a:	fa01 f707 	lsl.w	r7, r1, r7
   b793e:	fa22 f306 	lsr.w	r3, r2, r6
   b7942:	40f1      	lsrs	r1, r6
   b7944:	431f      	orrs	r7, r3
   b7946:	e9c5 7100 	strd	r7, r1, [r5]
   b794a:	2600      	movs	r6, #0
   b794c:	4631      	mov	r1, r6
   b794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7952:	f1c2 0320 	rsb	r3, r2, #32
   b7956:	40d8      	lsrs	r0, r3
   b7958:	fa0c fc02 	lsl.w	ip, ip, r2
   b795c:	fa21 f303 	lsr.w	r3, r1, r3
   b7960:	4091      	lsls	r1, r2
   b7962:	4301      	orrs	r1, r0
   b7964:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7968:	fa1f fe8c 	uxth.w	lr, ip
   b796c:	fbb3 f0f7 	udiv	r0, r3, r7
   b7970:	fb07 3610 	mls	r6, r7, r0, r3
   b7974:	0c0b      	lsrs	r3, r1, #16
   b7976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b797a:	fb00 f60e 	mul.w	r6, r0, lr
   b797e:	429e      	cmp	r6, r3
   b7980:	fa04 f402 	lsl.w	r4, r4, r2
   b7984:	d908      	bls.n	b7998 <__udivmoddi4+0x260>
   b7986:	eb1c 0303 	adds.w	r3, ip, r3
   b798a:	f100 38ff 	add.w	r8, r0, #4294967295
   b798e:	d22f      	bcs.n	b79f0 <__udivmoddi4+0x2b8>
   b7990:	429e      	cmp	r6, r3
   b7992:	d92d      	bls.n	b79f0 <__udivmoddi4+0x2b8>
   b7994:	3802      	subs	r0, #2
   b7996:	4463      	add	r3, ip
   b7998:	1b9b      	subs	r3, r3, r6
   b799a:	b289      	uxth	r1, r1
   b799c:	fbb3 f6f7 	udiv	r6, r3, r7
   b79a0:	fb07 3316 	mls	r3, r7, r6, r3
   b79a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b79a8:	fb06 f30e 	mul.w	r3, r6, lr
   b79ac:	428b      	cmp	r3, r1
   b79ae:	d908      	bls.n	b79c2 <__udivmoddi4+0x28a>
   b79b0:	eb1c 0101 	adds.w	r1, ip, r1
   b79b4:	f106 38ff 	add.w	r8, r6, #4294967295
   b79b8:	d216      	bcs.n	b79e8 <__udivmoddi4+0x2b0>
   b79ba:	428b      	cmp	r3, r1
   b79bc:	d914      	bls.n	b79e8 <__udivmoddi4+0x2b0>
   b79be:	3e02      	subs	r6, #2
   b79c0:	4461      	add	r1, ip
   b79c2:	1ac9      	subs	r1, r1, r3
   b79c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b79c8:	e738      	b.n	b783c <__udivmoddi4+0x104>
   b79ca:	462e      	mov	r6, r5
   b79cc:	4628      	mov	r0, r5
   b79ce:	e705      	b.n	b77dc <__udivmoddi4+0xa4>
   b79d0:	4606      	mov	r6, r0
   b79d2:	e6e3      	b.n	b779c <__udivmoddi4+0x64>
   b79d4:	4618      	mov	r0, r3
   b79d6:	e6f8      	b.n	b77ca <__udivmoddi4+0x92>
   b79d8:	454b      	cmp	r3, r9
   b79da:	d2a9      	bcs.n	b7930 <__udivmoddi4+0x1f8>
   b79dc:	ebb9 0802 	subs.w	r8, r9, r2
   b79e0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b79e4:	3801      	subs	r0, #1
   b79e6:	e7a3      	b.n	b7930 <__udivmoddi4+0x1f8>
   b79e8:	4646      	mov	r6, r8
   b79ea:	e7ea      	b.n	b79c2 <__udivmoddi4+0x28a>
   b79ec:	4620      	mov	r0, r4
   b79ee:	e794      	b.n	b791a <__udivmoddi4+0x1e2>
   b79f0:	4640      	mov	r0, r8
   b79f2:	e7d1      	b.n	b7998 <__udivmoddi4+0x260>
   b79f4:	46d0      	mov	r8, sl
   b79f6:	e77b      	b.n	b78f0 <__udivmoddi4+0x1b8>
   b79f8:	3b02      	subs	r3, #2
   b79fa:	4461      	add	r1, ip
   b79fc:	e732      	b.n	b7864 <__udivmoddi4+0x12c>
   b79fe:	4630      	mov	r0, r6
   b7a00:	e709      	b.n	b7816 <__udivmoddi4+0xde>
   b7a02:	4464      	add	r4, ip
   b7a04:	3802      	subs	r0, #2
   b7a06:	e742      	b.n	b788e <__udivmoddi4+0x156>

000b7a08 <__aeabi_idiv0>:
   b7a08:	4770      	bx	lr
   b7a0a:	bf00      	nop

000b7a0c <asctime_r>:
   b7a0c:	b510      	push	{r4, lr}
   b7a0e:	460c      	mov	r4, r1
   b7a10:	6941      	ldr	r1, [r0, #20]
   b7a12:	6903      	ldr	r3, [r0, #16]
   b7a14:	6982      	ldr	r2, [r0, #24]
   b7a16:	b086      	sub	sp, #24
   b7a18:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b7a1c:	9104      	str	r1, [sp, #16]
   b7a1e:	6801      	ldr	r1, [r0, #0]
   b7a20:	9103      	str	r1, [sp, #12]
   b7a22:	6841      	ldr	r1, [r0, #4]
   b7a24:	9102      	str	r1, [sp, #8]
   b7a26:	6881      	ldr	r1, [r0, #8]
   b7a28:	9101      	str	r1, [sp, #4]
   b7a2a:	68c1      	ldr	r1, [r0, #12]
   b7a2c:	9100      	str	r1, [sp, #0]
   b7a2e:	4907      	ldr	r1, [pc, #28]	; (b7a4c <asctime_r+0x40>)
   b7a30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7a34:	440b      	add	r3, r1
   b7a36:	4906      	ldr	r1, [pc, #24]	; (b7a50 <asctime_r+0x44>)
   b7a38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7a3c:	440a      	add	r2, r1
   b7a3e:	4620      	mov	r0, r4
   b7a40:	4904      	ldr	r1, [pc, #16]	; (b7a54 <asctime_r+0x48>)
   b7a42:	f7fd ff23 	bl	b588c <siprintf>
   b7a46:	4620      	mov	r0, r4
   b7a48:	b006      	add	sp, #24
   b7a4a:	bd10      	pop	{r4, pc}
   b7a4c:	000b8042 	.word	0x000b8042
   b7a50:	000b802d 	.word	0x000b802d
   b7a54:	000b800d 	.word	0x000b800d

000b7a58 <atexit>:
   b7a58:	2300      	movs	r3, #0
   b7a5a:	4601      	mov	r1, r0
   b7a5c:	461a      	mov	r2, r3
   b7a5e:	4618      	mov	r0, r3
   b7a60:	f000 b872 	b.w	b7b48 <__register_exitproc>

000b7a64 <memcpy>:
   b7a64:	440a      	add	r2, r1
   b7a66:	4291      	cmp	r1, r2
   b7a68:	f100 33ff 	add.w	r3, r0, #4294967295
   b7a6c:	d100      	bne.n	b7a70 <memcpy+0xc>
   b7a6e:	4770      	bx	lr
   b7a70:	b510      	push	{r4, lr}
   b7a72:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7a76:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7a7a:	4291      	cmp	r1, r2
   b7a7c:	d1f9      	bne.n	b7a72 <memcpy+0xe>
   b7a7e:	bd10      	pop	{r4, pc}

000b7a80 <memset>:
   b7a80:	4402      	add	r2, r0
   b7a82:	4603      	mov	r3, r0
   b7a84:	4293      	cmp	r3, r2
   b7a86:	d100      	bne.n	b7a8a <memset+0xa>
   b7a88:	4770      	bx	lr
   b7a8a:	f803 1b01 	strb.w	r1, [r3], #1
   b7a8e:	e7f9      	b.n	b7a84 <memset+0x4>

000b7a90 <srand>:
   b7a90:	b538      	push	{r3, r4, r5, lr}
   b7a92:	4b10      	ldr	r3, [pc, #64]	; (b7ad4 <srand+0x44>)
   b7a94:	681d      	ldr	r5, [r3, #0]
   b7a96:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a98:	4604      	mov	r4, r0
   b7a9a:	b9b3      	cbnz	r3, b7aca <srand+0x3a>
   b7a9c:	2018      	movs	r0, #24
   b7a9e:	f7fd fedd 	bl	b585c <malloc>
   b7aa2:	4602      	mov	r2, r0
   b7aa4:	63a8      	str	r0, [r5, #56]	; 0x38
   b7aa6:	b920      	cbnz	r0, b7ab2 <srand+0x22>
   b7aa8:	4b0b      	ldr	r3, [pc, #44]	; (b7ad8 <srand+0x48>)
   b7aaa:	480c      	ldr	r0, [pc, #48]	; (b7adc <srand+0x4c>)
   b7aac:	2142      	movs	r1, #66	; 0x42
   b7aae:	f7fd ff05 	bl	b58bc <__assert_func>
   b7ab2:	490b      	ldr	r1, [pc, #44]	; (b7ae0 <srand+0x50>)
   b7ab4:	4b0b      	ldr	r3, [pc, #44]	; (b7ae4 <srand+0x54>)
   b7ab6:	e9c0 1300 	strd	r1, r3, [r0]
   b7aba:	4b0b      	ldr	r3, [pc, #44]	; (b7ae8 <srand+0x58>)
   b7abc:	6083      	str	r3, [r0, #8]
   b7abe:	230b      	movs	r3, #11
   b7ac0:	8183      	strh	r3, [r0, #12]
   b7ac2:	2100      	movs	r1, #0
   b7ac4:	2001      	movs	r0, #1
   b7ac6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7aca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7acc:	2200      	movs	r2, #0
   b7ace:	611c      	str	r4, [r3, #16]
   b7ad0:	615a      	str	r2, [r3, #20]
   b7ad2:	bd38      	pop	{r3, r4, r5, pc}
   b7ad4:	2003e5a8 	.word	0x2003e5a8
   b7ad8:	000b8066 	.word	0x000b8066
   b7adc:	000b807d 	.word	0x000b807d
   b7ae0:	abcd330e 	.word	0xabcd330e
   b7ae4:	e66d1234 	.word	0xe66d1234
   b7ae8:	0005deec 	.word	0x0005deec

000b7aec <strcmp>:
   b7aec:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7af0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7af4:	2a01      	cmp	r2, #1
   b7af6:	bf28      	it	cs
   b7af8:	429a      	cmpcs	r2, r3
   b7afa:	d0f7      	beq.n	b7aec <strcmp>
   b7afc:	1ad0      	subs	r0, r2, r3
   b7afe:	4770      	bx	lr

000b7b00 <strcpy>:
   b7b00:	4603      	mov	r3, r0
   b7b02:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7b06:	f803 2b01 	strb.w	r2, [r3], #1
   b7b0a:	2a00      	cmp	r2, #0
   b7b0c:	d1f9      	bne.n	b7b02 <strcpy+0x2>
   b7b0e:	4770      	bx	lr

000b7b10 <strlen>:
   b7b10:	4603      	mov	r3, r0
   b7b12:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7b16:	2a00      	cmp	r2, #0
   b7b18:	d1fb      	bne.n	b7b12 <strlen+0x2>
   b7b1a:	1a18      	subs	r0, r3, r0
   b7b1c:	3801      	subs	r0, #1
   b7b1e:	4770      	bx	lr

000b7b20 <strncpy>:
   b7b20:	b510      	push	{r4, lr}
   b7b22:	3901      	subs	r1, #1
   b7b24:	4603      	mov	r3, r0
   b7b26:	b132      	cbz	r2, b7b36 <strncpy+0x16>
   b7b28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7b2c:	f803 4b01 	strb.w	r4, [r3], #1
   b7b30:	3a01      	subs	r2, #1
   b7b32:	2c00      	cmp	r4, #0
   b7b34:	d1f7      	bne.n	b7b26 <strncpy+0x6>
   b7b36:	441a      	add	r2, r3
   b7b38:	2100      	movs	r1, #0
   b7b3a:	4293      	cmp	r3, r2
   b7b3c:	d100      	bne.n	b7b40 <strncpy+0x20>
   b7b3e:	bd10      	pop	{r4, pc}
   b7b40:	f803 1b01 	strb.w	r1, [r3], #1
   b7b44:	e7f9      	b.n	b7b3a <strncpy+0x1a>
	...

000b7b48 <__register_exitproc>:
   b7b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b4c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7c08 <__register_exitproc+0xc0>
   b7b50:	4606      	mov	r6, r0
   b7b52:	f8d8 0000 	ldr.w	r0, [r8]
   b7b56:	461f      	mov	r7, r3
   b7b58:	460d      	mov	r5, r1
   b7b5a:	4691      	mov	r9, r2
   b7b5c:	f000 f856 	bl	b7c0c <__retarget_lock_acquire_recursive>
   b7b60:	4b25      	ldr	r3, [pc, #148]	; (b7bf8 <__register_exitproc+0xb0>)
   b7b62:	681c      	ldr	r4, [r3, #0]
   b7b64:	b934      	cbnz	r4, b7b74 <__register_exitproc+0x2c>
   b7b66:	4c25      	ldr	r4, [pc, #148]	; (b7bfc <__register_exitproc+0xb4>)
   b7b68:	601c      	str	r4, [r3, #0]
   b7b6a:	4b25      	ldr	r3, [pc, #148]	; (b7c00 <__register_exitproc+0xb8>)
   b7b6c:	b113      	cbz	r3, b7b74 <__register_exitproc+0x2c>
   b7b6e:	681b      	ldr	r3, [r3, #0]
   b7b70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7b74:	6863      	ldr	r3, [r4, #4]
   b7b76:	2b1f      	cmp	r3, #31
   b7b78:	dd07      	ble.n	b7b8a <__register_exitproc+0x42>
   b7b7a:	f8d8 0000 	ldr.w	r0, [r8]
   b7b7e:	f000 f847 	bl	b7c10 <__retarget_lock_release_recursive>
   b7b82:	f04f 30ff 	mov.w	r0, #4294967295
   b7b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7b8a:	b34e      	cbz	r6, b7be0 <__register_exitproc+0x98>
   b7b8c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7b90:	b988      	cbnz	r0, b7bb6 <__register_exitproc+0x6e>
   b7b92:	4b1c      	ldr	r3, [pc, #112]	; (b7c04 <__register_exitproc+0xbc>)
   b7b94:	b923      	cbnz	r3, b7ba0 <__register_exitproc+0x58>
   b7b96:	f8d8 0000 	ldr.w	r0, [r8]
   b7b9a:	f000 f838 	bl	b7c0e <__retarget_lock_release>
   b7b9e:	e7f0      	b.n	b7b82 <__register_exitproc+0x3a>
   b7ba0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7ba4:	f7fd fe5a 	bl	b585c <malloc>
   b7ba8:	2800      	cmp	r0, #0
   b7baa:	d0f4      	beq.n	b7b96 <__register_exitproc+0x4e>
   b7bac:	2300      	movs	r3, #0
   b7bae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7bb2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7bb6:	6863      	ldr	r3, [r4, #4]
   b7bb8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7bbc:	2201      	movs	r2, #1
   b7bbe:	409a      	lsls	r2, r3
   b7bc0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7bc4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7bc8:	4313      	orrs	r3, r2
   b7bca:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7bce:	2e02      	cmp	r6, #2
   b7bd0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7bd4:	bf02      	ittt	eq
   b7bd6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7bda:	4313      	orreq	r3, r2
   b7bdc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7be0:	6863      	ldr	r3, [r4, #4]
   b7be2:	f8d8 0000 	ldr.w	r0, [r8]
   b7be6:	1c5a      	adds	r2, r3, #1
   b7be8:	3302      	adds	r3, #2
   b7bea:	6062      	str	r2, [r4, #4]
   b7bec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7bf0:	f000 f80e 	bl	b7c10 <__retarget_lock_release_recursive>
   b7bf4:	2000      	movs	r0, #0
   b7bf6:	e7c6      	b.n	b7b86 <__register_exitproc+0x3e>
   b7bf8:	2003e7e8 	.word	0x2003e7e8
   b7bfc:	2003e75c 	.word	0x2003e75c
   b7c00:	00000000 	.word	0x00000000
   b7c04:	000b585d 	.word	0x000b585d
   b7c08:	2003e60c 	.word	0x2003e60c

000b7c0c <__retarget_lock_acquire_recursive>:
   b7c0c:	4770      	bx	lr

000b7c0e <__retarget_lock_release>:
   b7c0e:	4770      	bx	lr

000b7c10 <__retarget_lock_release_recursive>:
   b7c10:	4770      	bx	lr

000b7c12 <link_code_end>:
	...

000b7c14 <dynalib_user>:
   b7c14:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7c24:	0000 0000 4441 2043 4156 554c 3a45 2520     ....ADC VALUE: %
   b7c34:	2c75 6420 3a42 2520 322e 0066 6843 6365     u, dB: %.2f.Chec
   b7c44:	206b 6f63 6e6e 6365 6974 6e6f 2e73 4e20     k connections. N
   b7c54:	206f 6c73 7661 2065 7461 6174 6863 6465     o slave attached
   b7c64:	002e 7254 6979 676e 7420 206f 6f63 6e6e     ..Trying to conn
   b7c74:	6365 2074 4842 3731 3035 4c20 7875 5320     ect BH1750 Lux S
   b7c84:	6e65 6f73 0072 7254 6979 676e 7420 206f     ensor.Trying to 
   b7c94:	6f63 6e6e 6365 2074 4d42 3245 3038 5020     connect BME280 P
   b7ca4:	4854 5320 6e65 6f73 0072 7254 6979 676e     TH Sensor.Trying
   b7cb4:	7420 206f 6f63 6e6e 6365 2074 4353 3344      to connect SCD3
   b7cc4:	2030 4f43 2032 6553 736e 726f 5a00 6f69     0 CO2 Sensor.Zio
   b7cd4:	5120 6977 6369 4c20 756f 6e64 7365 2073      Qwiic Loudness 
   b7ce4:	6553 736e 726f 4d20 7361 6574 2072 7741     Sensor Master Aw
   b7cf4:	6b61 0065 694c 6867 2074 656c 6576 3a6c     ake.Light level:
   b7d04:	2520 312e 2066 756c 0078 4f43 2832 7070      %.1f lux.CO2(pp
   b7d14:	296d 203a 2000 6554 706d 7265 7461 7275     m): . Temperatur
   b7d24:	2865 432a 3a29 0020 4820 6d75 6469 7469     e(*C): . Humidit
   b7d34:	2879 2925 203a 4e00 206f 6164 6174 4300     y(%): .No data.C
   b7d44:	756f 646c 6e20 746f 7220 6165 2064 7266     ould not read fr
   b7d54:	6d6f 4120 4951 5300 6174 646e 7261 2064     om AQI.Standard 
   b7d64:	4d50 2d20 202d 4d50 2e31 3a30 2520 322e     PM -- PM1.0: %.2
   b7d74:	2066 207c 4d50 2e32 3a35 2520 322e 2066     f | PM2.5: %.2f 
   b7d84:	207c 4d50 3031 302e 203a 2e25 6632 5500     | PM10.0: %.2f.U
   b7d94:	2056 696c 6867 2074 656c 6576 3a6c 0020     V light level: .
   b7da4:	7250 7365 7573 6572 203a 2e25 6632 6d20     Pressure: %.2f m
   b7db4:	6162 0072 7548 696d 6964 7974 203a 2000     bar.Humidity: . 
   b7dc4:	0025 6554 706d 7265 7461 7275 3a65 2520     %.Temperature: %
   b7dd4:	322e 2066 432a 3d00 3d3d 3d3d 3d3d 3d3d     .2f *C.=========
   b7de4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   b7df4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   b7e04:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   b7e14:	3d3d 3d3d 3d3d 3d3d 003d 6564 6166 6c75     =========.defaul
   b7e24:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   b7e34:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   b7e44:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   b7e54:	7525 2520 2073 4f4d 4544 7525 003e 0000     %u %s MODE%u>...

000b7e64 <_ZTVN8particle11SPISettingsE>:
	...
   b7e6c:	4745 000b 4717 000b 4719 000b               EG...G...G..

000b7e78 <_ZTVN5spark13EthernetClassE>:
	...
   b7e80:	595b 000b 5951 000b 5947 000b 593d 000b     [Y..QY..GY..=Y..
   b7e90:	5931 000b 5925 000b 6761 000b 6769 000b     1Y..%Y..ag..ig..
   b7ea0:	5919 000b 5911 000b 5907 000b 58fd 000b     .Y...Y...Y...X..
   b7eb0:	6799 000b                                   .g..

000b7eb4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7eb4:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   b7ec4:	766f 0066 7061 0070 005a 2b25 3330 3a64     ovf.app.Z.%+03d:
   b7ed4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   b7ee4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   b7ef4:	0000 0000                                   ....

000b7ef8 <_ZTV9IPAddress>:
	...
   b7f00:	6315 000b 6305 000b 6307 000b               .c...c...c..

000b7f0c <_ZTV9USBSerial>:
	...
   b7f14:	63fb 000b 6463 000b 6439 000b 5c21 000b     .c..cd..9d..!\..
   b7f24:	642b 000b 63fd 000b 640d 000b 645d 000b     +d...c...d..]d..
   b7f34:	641d 000b 63f5 000b                         .d...c..

000b7f3c <_ZTV11USARTSerial>:
	...
   b7f44:	64fd 000b 6569 000b 6541 000b 5c21 000b     .d..ie..Ae..!\..
   b7f54:	6511 000b 652d 000b 651f 000b 653b 000b     .e..-e...e..;e..
   b7f64:	64ff 000b 6503 000b                         .d...e..

000b7f6c <_ZTV7TwoWire>:
	...
   b7f74:	65a1 000b 65eb 000b 65c3 000b 65a3 000b     .e...e...e...e..
   b7f84:	65cb 000b 65d3 000b 65db 000b 65e3 000b     .e...e...e...e..

000b7f94 <_ZTVN5spark9WiFiClassE>:
	...
   b7f9c:	6703 000b 66f9 000b 66ef 000b 66a5 000b     .g...f...f...f..
   b7fac:	66e3 000b 66d7 000b 6761 000b 6769 000b     .f...f..ag..ig..
   b7fbc:	66cb 000b 66c3 000b 66b9 000b 66af 000b     .f...f...f...f..
   b7fcc:	6799 000b                                   .g..

000b7fd0 <_ZTVN5spark12NetworkClassE>:
	...
   b7fd8:	6721 000b 672b 000b 6735 000b 673f 000b     !g..+g..5g..?g..
   b7fe8:	6749 000b 6755 000b 6761 000b 6769 000b     Ig..Ug..ag..ig..
   b7ff8:	6771 000b 677d 000b 6785 000b 678f 000b     qg..}g...g...g..
   b8008:	6799 000b                                   .g..

000b800c <_ZSt7nothrow>:
   b800c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b801c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b802d <day_name.1>:
   b802d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b803d:	6972 6153                                    riSat

000b8042 <mon_name.0>:
   b8042:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b8052:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b8062:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b8072:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b8082:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b8092:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b80a2:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b80b2:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b80c2:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b80d2:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b80e2:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b80f2:	722f 6e61 2e64 0063                         /rand.c.

000b80fa <link_const_variable_data_end>:
	...

000b80fc <link_constructors_location>:
   b80fc:	000b4549 	.word	0x000b4549
   b8100:	000b5965 	.word	0x000b5965
   b8104:	000b5add 	.word	0x000b5add
   b8108:	000b5c11 	.word	0x000b5c11
   b810c:	000b5f4d 	.word	0x000b5f4d
   b8110:	000b61a5 	.word	0x000b61a5
   b8114:	000b61c1 	.word	0x000b61c1
   b8118:	000b670d 	.word	0x000b670d
   b811c:	000b6871 	.word	0x000b6871
